{"ast":null,"code":"import '../jqwidgets/modules/jqxscheduler';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\n\n/// <reference path=\"../../jqwidgets.d.ts\" />\nconst _c0 = [\"*\"];\nlet jqxSchedulerComponent = /*#__PURE__*/(() => {\n  class jqxSchedulerComponent {\n    constructor(containerElement) {\n      this.autoCreate = true;\n      this.properties = ['appointmentOpacity', 'appointmentsMinHeight', 'appointmentDataFields', 'appointmentTooltips', 'columnsHeight', 'contextMenu', 'contextMenuOpen', 'contextMenuClose', 'contextMenuItemClick', 'contextMenuCreate', 'changedAppointments', 'disabled', 'date', 'dayNameFormat', 'enableHover', 'editDialog', 'editDialogDateTimeFormatString', 'editDialogDateFormatString', 'editDialogOpen', 'editDialogCreate', 'editDialogKeyDown', 'editDialogClose', 'exportSettings', 'height', 'legendPosition', 'legendHeight', 'localization', 'min', 'max', 'ready', 'renderAppointment', 'rendering', 'rendered', 'rtl', 'resources', 'rowsHeight', 'showToolbar', 'showLegend', 'showCurrent', 'showCurrentAppointment', 'scrollBarSize', 'source', 'statuses', 'touchRowsHeight', 'theme', 'touchAppointmentsMinHeight', 'touchScrollBarSize', 'timeZone', 'touchDayNameFormat', 'toolBarRangeFormat', 'toolBarRangeFormatAbbr', 'toolbarHeight', 'views', 'view', 'width'];\n      // jqxSchedulerComponent events\n      this.onAppointmentChange = new EventEmitter();\n      this.onAppointmentClick = new EventEmitter();\n      this.onAppointmentDoubleClick = new EventEmitter();\n      this.onAppointmentDelete = new EventEmitter();\n      this.onAppointmentAdd = new EventEmitter();\n      this.onBindingComplete = new EventEmitter();\n      this.onCellClick = new EventEmitter();\n      this.onCellDoubleClick = new EventEmitter();\n      this.onContextMenuOpen = new EventEmitter();\n      this.onContextMenuClose = new EventEmitter();\n      this.onContextMenuItemClick = new EventEmitter();\n      this.onContextMenuCreate = new EventEmitter();\n      this.onDateChange = new EventEmitter();\n      this.onEditRecurrenceDialogOpen = new EventEmitter();\n      this.onEditRecurrenceDialogClose = new EventEmitter();\n      this.onEditDialogCreate = new EventEmitter();\n      this.onEditDialogOpen = new EventEmitter();\n      this.onEditDialogClose = new EventEmitter();\n      this.onViewChange = new EventEmitter();\n      this.elementRef = containerElement;\n    }\n    ngOnInit() {\n      if (this.autoCreate) {\n        this.createComponent();\n      }\n    }\n    ngOnChanges(changes) {\n      if (this.host) {\n        for (let i = 0; i < this.properties.length; i++) {\n          let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\n          let areEqual = false;\n          if (this[attrName] !== undefined) {\n            if (typeof this[attrName] === 'object') {\n              if (this[attrName] instanceof Array) {\n                areEqual = this.arraysEqual(this[attrName], this.host.jqxScheduler(this.properties[i]));\n              }\n              if (areEqual) {\n                return false;\n              }\n              this.host.jqxScheduler(this.properties[i], this[attrName]);\n              continue;\n            }\n            if (this[attrName] !== this.host.jqxScheduler(this.properties[i])) {\n              this.host.jqxScheduler(this.properties[i], this[attrName]);\n            }\n          }\n        }\n      }\n    }\n    arraysEqual(attrValue, hostValue) {\n      if (attrValue && !hostValue || !attrValue && hostValue) {\n        return false;\n      }\n      if (attrValue.length != hostValue.length) {\n        return false;\n      }\n      for (let i = 0; i < attrValue.length; i++) {\n        if (attrValue[i] !== hostValue[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    manageAttributes() {\n      let options = {};\n      for (let i = 0; i < this.properties.length; i++) {\n        let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\n        if (this[attrName] !== undefined) {\n          options[this.properties[i]] = this[attrName];\n        }\n      }\n      return options;\n    }\n    moveClasses(parentEl, childEl) {\n      let classes = parentEl.classList;\n      if (classes.length > 0) {\n        childEl.classList.add(...classes);\n      }\n      parentEl.className = '';\n    }\n    moveStyles(parentEl, childEl) {\n      let style = parentEl.style.cssText;\n      childEl.style.cssText = style;\n      parentEl.style.cssText = '';\n    }\n    createComponent(options) {\n      if (this.host) {\n        return;\n      }\n      if (options) {\n        JQXLite.extend(options, this.manageAttributes());\n      } else {\n        options = this.manageAttributes();\n      }\n      this.host = JQXLite(this.elementRef.nativeElement.firstChild);\n      this.moveClasses(this.elementRef.nativeElement, this.host[0]);\n      this.moveStyles(this.elementRef.nativeElement, this.host[0]);\n      this.__wireEvents__();\n      this.widgetObject = jqwidgets.createInstance(this.host, 'jqxScheduler', options);\n    }\n    createWidget(options) {\n      this.createComponent(options);\n    }\n    __updateRect__() {\n      if (this.host) this.host.css({\n        width: this.attrWidth,\n        height: this.attrHeight\n      });\n    }\n    setOptions(options) {\n      this.host.jqxScheduler('setOptions', options);\n    }\n    // jqxSchedulerComponent properties\n    appointmentOpacity(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('appointmentOpacity', arg);\n      } else {\n        return this.host.jqxScheduler('appointmentOpacity');\n      }\n    }\n    appointmentsMinHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('appointmentsMinHeight', arg);\n      } else {\n        return this.host.jqxScheduler('appointmentsMinHeight');\n      }\n    }\n    appointmentDataFields(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('appointmentDataFields', arg);\n      } else {\n        return this.host.jqxScheduler('appointmentDataFields');\n      }\n    }\n    appointmentTooltips(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('appointmentTooltips', arg);\n      } else {\n        return this.host.jqxScheduler('appointmentTooltips');\n      }\n    }\n    columnsHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('columnsHeight', arg);\n      } else {\n        return this.host.jqxScheduler('columnsHeight');\n      }\n    }\n    contextMenu(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('contextMenu', arg);\n      } else {\n        return this.host.jqxScheduler('contextMenu');\n      }\n    }\n    contextMenuOpen(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('contextMenuOpen', arg);\n      } else {\n        return this.host.jqxScheduler('contextMenuOpen');\n      }\n    }\n    contextMenuClose(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('contextMenuClose', arg);\n      } else {\n        return this.host.jqxScheduler('contextMenuClose');\n      }\n    }\n    contextMenuItemClick(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('contextMenuItemClick', arg);\n      } else {\n        return this.host.jqxScheduler('contextMenuItemClick');\n      }\n    }\n    contextMenuCreate(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('contextMenuCreate', arg);\n      } else {\n        return this.host.jqxScheduler('contextMenuCreate');\n      }\n    }\n    changedAppointments(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('changedAppointments', arg);\n      } else {\n        return this.host.jqxScheduler('changedAppointments');\n      }\n    }\n    disabled(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('disabled', arg);\n      } else {\n        return this.host.jqxScheduler('disabled');\n      }\n    }\n    date(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('date', arg);\n      } else {\n        return this.host.jqxScheduler('date');\n      }\n    }\n    dayNameFormat(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('dayNameFormat', arg);\n      } else {\n        return this.host.jqxScheduler('dayNameFormat');\n      }\n    }\n    enableHover(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('enableHover', arg);\n      } else {\n        return this.host.jqxScheduler('enableHover');\n      }\n    }\n    editDialog(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialog', arg);\n      } else {\n        return this.host.jqxScheduler('editDialog');\n      }\n    }\n    editDialogDateTimeFormatString(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogDateTimeFormatString', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogDateTimeFormatString');\n      }\n    }\n    editDialogDateFormatString(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogDateFormatString', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogDateFormatString');\n      }\n    }\n    editDialogOpen(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogOpen', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogOpen');\n      }\n    }\n    editDialogCreate(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogCreate', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogCreate');\n      }\n    }\n    editDialogKeyDown(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogKeyDown', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogKeyDown');\n      }\n    }\n    editDialogClose(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('editDialogClose', arg);\n      } else {\n        return this.host.jqxScheduler('editDialogClose');\n      }\n    }\n    exportSettings(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('exportSettings', arg);\n      } else {\n        return this.host.jqxScheduler('exportSettings');\n      }\n    }\n    height(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('height', arg);\n      } else {\n        return this.host.jqxScheduler('height');\n      }\n    }\n    legendPosition(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('legendPosition', arg);\n      } else {\n        return this.host.jqxScheduler('legendPosition');\n      }\n    }\n    legendHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('legendHeight', arg);\n      } else {\n        return this.host.jqxScheduler('legendHeight');\n      }\n    }\n    localization(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('localization', arg);\n      } else {\n        return this.host.jqxScheduler('localization');\n      }\n    }\n    min(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('min', arg);\n      } else {\n        return this.host.jqxScheduler('min');\n      }\n    }\n    max(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('max', arg);\n      } else {\n        return this.host.jqxScheduler('max');\n      }\n    }\n    ready(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('ready', arg);\n      } else {\n        return this.host.jqxScheduler('ready');\n      }\n    }\n    renderAppointment(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('renderAppointment', arg);\n      } else {\n        return this.host.jqxScheduler('renderAppointment');\n      }\n    }\n    rendering(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('rendering', arg);\n      } else {\n        return this.host.jqxScheduler('rendering');\n      }\n    }\n    rendered(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('rendered', arg);\n      } else {\n        return this.host.jqxScheduler('rendered');\n      }\n    }\n    rtl(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('rtl', arg);\n      } else {\n        return this.host.jqxScheduler('rtl');\n      }\n    }\n    resources(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('resources', arg);\n      } else {\n        return this.host.jqxScheduler('resources');\n      }\n    }\n    rowsHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('rowsHeight', arg);\n      } else {\n        return this.host.jqxScheduler('rowsHeight');\n      }\n    }\n    showToolbar(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('showToolbar', arg);\n      } else {\n        return this.host.jqxScheduler('showToolbar');\n      }\n    }\n    showLegend(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('showLegend', arg);\n      } else {\n        return this.host.jqxScheduler('showLegend');\n      }\n    }\n    showCurrent(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('showCurrent', arg);\n      } else {\n        return this.host.jqxScheduler('showCurrent');\n      }\n    }\n    showCurrentAppointment(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('showCurrentAppointment', arg);\n      } else {\n        return this.host.jqxScheduler('showCurrentAppointment');\n      }\n    }\n    scrollBarSize(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('scrollBarSize', arg);\n      } else {\n        return this.host.jqxScheduler('scrollBarSize');\n      }\n    }\n    source(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('source', arg);\n      } else {\n        return this.host.jqxScheduler('source');\n      }\n    }\n    statuses(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('statuses', arg);\n      } else {\n        return this.host.jqxScheduler('statuses');\n      }\n    }\n    touchRowsHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('touchRowsHeight', arg);\n      } else {\n        return this.host.jqxScheduler('touchRowsHeight');\n      }\n    }\n    theme(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('theme', arg);\n      } else {\n        return this.host.jqxScheduler('theme');\n      }\n    }\n    touchAppointmentsMinHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('touchAppointmentsMinHeight', arg);\n      } else {\n        return this.host.jqxScheduler('touchAppointmentsMinHeight');\n      }\n    }\n    touchScrollBarSize(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('touchScrollBarSize', arg);\n      } else {\n        return this.host.jqxScheduler('touchScrollBarSize');\n      }\n    }\n    timeZone(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('timeZone', arg);\n      } else {\n        return this.host.jqxScheduler('timeZone');\n      }\n    }\n    touchDayNameFormat(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('touchDayNameFormat', arg);\n      } else {\n        return this.host.jqxScheduler('touchDayNameFormat');\n      }\n    }\n    toolBarRangeFormat(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('toolBarRangeFormat', arg);\n      } else {\n        return this.host.jqxScheduler('toolBarRangeFormat');\n      }\n    }\n    toolBarRangeFormatAbbr(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('toolBarRangeFormatAbbr', arg);\n      } else {\n        return this.host.jqxScheduler('toolBarRangeFormatAbbr');\n      }\n    }\n    toolbarHeight(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('toolbarHeight', arg);\n      } else {\n        return this.host.jqxScheduler('toolbarHeight');\n      }\n    }\n    views(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('views', arg);\n      } else {\n        return this.host.jqxScheduler('views');\n      }\n    }\n    view(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('view', arg);\n      } else {\n        return this.host.jqxScheduler('view');\n      }\n    }\n    width(arg) {\n      if (arg !== undefined) {\n        this.host.jqxScheduler('width', arg);\n      } else {\n        return this.host.jqxScheduler('width');\n      }\n    }\n    // jqxSchedulerComponent functions\n    addAppointment(item) {\n      this.host.jqxScheduler('addAppointment', item);\n    }\n    beginAppointmentsUpdate() {\n      this.host.jqxScheduler('beginAppointmentsUpdate');\n    }\n    clearAppointmentsSelection() {\n      this.host.jqxScheduler('clearAppointmentsSelection');\n    }\n    clearSelection() {\n      this.host.jqxScheduler('clearSelection');\n    }\n    closeMenu() {\n      this.host.jqxScheduler('closeMenu');\n    }\n    closeDialog() {\n      this.host.jqxScheduler('closeDialog');\n    }\n    deleteAppointment(appointmenId) {\n      this.host.jqxScheduler('deleteAppointment', appointmenId);\n    }\n    destroy() {\n      this.host.jqxScheduler('destroy');\n    }\n    endAppointmentsUpdate() {\n      this.host.jqxScheduler('endAppointmentsUpdate');\n    }\n    ensureAppointmentVisible(id) {\n      this.host.jqxScheduler('ensureAppointmentVisible', id);\n    }\n    ensureVisible(item, resourceId) {\n      this.host.jqxScheduler('ensureVisible', item, resourceId);\n    }\n    exportData(format) {\n      return this.host.jqxScheduler('exportData', format);\n    }\n    focus() {\n      this.host.jqxScheduler('focus');\n    }\n    getAppointmentProperty(appointmentId, name) {\n      return this.host.jqxScheduler('getAppointmentProperty', appointmentId, name);\n    }\n    getSelection() {\n      return this.host.jqxScheduler('getSelection');\n    }\n    getAppointments() {\n      return this.host.jqxScheduler('getAppointments');\n    }\n    getDataAppointments() {\n      return this.host.jqxScheduler('getDataAppointments');\n    }\n    hideAppointmentsByResource(resourcesId) {\n      this.host.jqxScheduler('hideAppointmentsByResource', resourcesId);\n    }\n    openMenu(left, top) {\n      this.host.jqxScheduler('openMenu', left, top);\n    }\n    openDialog(left, top) {\n      this.host.jqxScheduler('openDialog', left, top);\n    }\n    selectAppointment(appointmentId) {\n      this.host.jqxScheduler('selectAppointment', appointmentId);\n    }\n    setAppointmentProperty(appointmentId, name, value) {\n      this.host.jqxScheduler('setAppointmentProperty', appointmentId, name, value);\n    }\n    selectCell(date, allday, resourceId) {\n      this.host.jqxScheduler('selectCell', date, allday, resourceId);\n    }\n    showAppointmentsByResource(resourceId) {\n      this.host.jqxScheduler('showAppointmentsByResource', resourceId);\n    }\n    scrollWidth() {\n      return this.host.jqxScheduler('scrollWidth');\n    }\n    scrollHeight() {\n      return this.host.jqxScheduler('scrollHeight');\n    }\n    scrollLeft(left) {\n      this.host.jqxScheduler('scrollLeft', left);\n    }\n    scrollTop(top) {\n      this.host.jqxScheduler('scrollTop', top);\n    }\n    __wireEvents__() {\n      this.host.on('appointmentChange', eventData => {\n        this.onAppointmentChange.emit(eventData);\n      });\n      this.host.on('appointmentClick', eventData => {\n        this.onAppointmentClick.emit(eventData);\n      });\n      this.host.on('appointmentDoubleClick', eventData => {\n        this.onAppointmentDoubleClick.emit(eventData);\n      });\n      this.host.on('appointmentDelete', eventData => {\n        this.onAppointmentDelete.emit(eventData);\n      });\n      this.host.on('appointmentAdd', eventData => {\n        this.onAppointmentAdd.emit(eventData);\n      });\n      this.host.on('bindingComplete', eventData => {\n        this.onBindingComplete.emit(eventData);\n      });\n      this.host.on('cellClick', eventData => {\n        this.onCellClick.emit(eventData);\n      });\n      this.host.on('cellDoubleClick', eventData => {\n        this.onCellDoubleClick.emit(eventData);\n      });\n      this.host.on('contextMenuOpen', eventData => {\n        this.onContextMenuOpen.emit(eventData);\n      });\n      this.host.on('contextMenuClose', eventData => {\n        this.onContextMenuClose.emit(eventData);\n      });\n      this.host.on('contextMenuItemClick', eventData => {\n        this.onContextMenuItemClick.emit(eventData);\n      });\n      this.host.on('contextMenuCreate', eventData => {\n        this.onContextMenuCreate.emit(eventData);\n      });\n      this.host.on('dateChange', eventData => {\n        this.onDateChange.emit(eventData);\n      });\n      this.host.on('editRecurrenceDialogOpen', eventData => {\n        this.onEditRecurrenceDialogOpen.emit(eventData);\n      });\n      this.host.on('editRecurrenceDialogClose', eventData => {\n        this.onEditRecurrenceDialogClose.emit(eventData);\n      });\n      this.host.on('editDialogCreate', eventData => {\n        this.onEditDialogCreate.emit(eventData);\n      });\n      this.host.on('editDialogOpen', eventData => {\n        this.onEditDialogOpen.emit(eventData);\n      });\n      this.host.on('editDialogClose', eventData => {\n        this.onEditDialogClose.emit(eventData);\n      });\n      this.host.on('viewChange', eventData => {\n        this.onViewChange.emit(eventData);\n      });\n    }\n  }\n  //jqxSchedulerComponent\n  jqxSchedulerComponent.ɵfac = function jqxSchedulerComponent_Factory(t) {\n    return new (t || jqxSchedulerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  jqxSchedulerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: jqxSchedulerComponent,\n    selectors: [[\"jqxScheduler\"]],\n    inputs: {\n      attrAppointmentOpacity: [i0.ɵɵInputFlags.None, \"appointmentOpacity\", \"attrAppointmentOpacity\"],\n      attrAppointmentsMinHeight: [i0.ɵɵInputFlags.None, \"appointmentsMinHeight\", \"attrAppointmentsMinHeight\"],\n      attrAppointmentDataFields: [i0.ɵɵInputFlags.None, \"appointmentDataFields\", \"attrAppointmentDataFields\"],\n      attrAppointmentTooltips: [i0.ɵɵInputFlags.None, \"appointmentTooltips\", \"attrAppointmentTooltips\"],\n      attrColumnsHeight: [i0.ɵɵInputFlags.None, \"columnsHeight\", \"attrColumnsHeight\"],\n      attrContextMenu: [i0.ɵɵInputFlags.None, \"contextMenu\", \"attrContextMenu\"],\n      attrContextMenuOpen: [i0.ɵɵInputFlags.None, \"contextMenuOpen\", \"attrContextMenuOpen\"],\n      attrContextMenuClose: [i0.ɵɵInputFlags.None, \"contextMenuClose\", \"attrContextMenuClose\"],\n      attrContextMenuItemClick: [i0.ɵɵInputFlags.None, \"contextMenuItemClick\", \"attrContextMenuItemClick\"],\n      attrContextMenuCreate: [i0.ɵɵInputFlags.None, \"contextMenuCreate\", \"attrContextMenuCreate\"],\n      attrChangedAppointments: [i0.ɵɵInputFlags.None, \"changedAppointments\", \"attrChangedAppointments\"],\n      attrDisabled: [i0.ɵɵInputFlags.None, \"disabled\", \"attrDisabled\"],\n      attrDate: [i0.ɵɵInputFlags.None, \"date\", \"attrDate\"],\n      attrDayNameFormat: [i0.ɵɵInputFlags.None, \"dayNameFormat\", \"attrDayNameFormat\"],\n      attrEnableHover: [i0.ɵɵInputFlags.None, \"enableHover\", \"attrEnableHover\"],\n      attrEditDialog: [i0.ɵɵInputFlags.None, \"editDialog\", \"attrEditDialog\"],\n      attrEditDialogDateTimeFormatString: [i0.ɵɵInputFlags.None, \"editDialogDateTimeFormatString\", \"attrEditDialogDateTimeFormatString\"],\n      attrEditDialogDateFormatString: [i0.ɵɵInputFlags.None, \"editDialogDateFormatString\", \"attrEditDialogDateFormatString\"],\n      attrEditDialogOpen: [i0.ɵɵInputFlags.None, \"editDialogOpen\", \"attrEditDialogOpen\"],\n      attrEditDialogCreate: [i0.ɵɵInputFlags.None, \"editDialogCreate\", \"attrEditDialogCreate\"],\n      attrEditDialogKeyDown: [i0.ɵɵInputFlags.None, \"editDialogKeyDown\", \"attrEditDialogKeyDown\"],\n      attrEditDialogClose: [i0.ɵɵInputFlags.None, \"editDialogClose\", \"attrEditDialogClose\"],\n      attrExportSettings: [i0.ɵɵInputFlags.None, \"exportSettings\", \"attrExportSettings\"],\n      attrLegendPosition: [i0.ɵɵInputFlags.None, \"legendPosition\", \"attrLegendPosition\"],\n      attrLegendHeight: [i0.ɵɵInputFlags.None, \"legendHeight\", \"attrLegendHeight\"],\n      attrLocalization: [i0.ɵɵInputFlags.None, \"localization\", \"attrLocalization\"],\n      attrMin: [i0.ɵɵInputFlags.None, \"min\", \"attrMin\"],\n      attrMax: [i0.ɵɵInputFlags.None, \"max\", \"attrMax\"],\n      attrReady: [i0.ɵɵInputFlags.None, \"ready\", \"attrReady\"],\n      attrRenderAppointment: [i0.ɵɵInputFlags.None, \"renderAppointment\", \"attrRenderAppointment\"],\n      attrRendering: [i0.ɵɵInputFlags.None, \"rendering\", \"attrRendering\"],\n      attrRendered: [i0.ɵɵInputFlags.None, \"rendered\", \"attrRendered\"],\n      attrRtl: [i0.ɵɵInputFlags.None, \"rtl\", \"attrRtl\"],\n      attrResources: [i0.ɵɵInputFlags.None, \"resources\", \"attrResources\"],\n      attrRowsHeight: [i0.ɵɵInputFlags.None, \"rowsHeight\", \"attrRowsHeight\"],\n      attrShowToolbar: [i0.ɵɵInputFlags.None, \"showToolbar\", \"attrShowToolbar\"],\n      attrShowLegend: [i0.ɵɵInputFlags.None, \"showLegend\", \"attrShowLegend\"],\n      attrShowCurrent: [i0.ɵɵInputFlags.None, \"showCurrent\", \"attrShowCurrent\"],\n      attrShowCurrentAppointment: [i0.ɵɵInputFlags.None, \"showCurrentAppointment\", \"attrShowCurrentAppointment\"],\n      attrScrollBarSize: [i0.ɵɵInputFlags.None, \"scrollBarSize\", \"attrScrollBarSize\"],\n      attrSource: [i0.ɵɵInputFlags.None, \"source\", \"attrSource\"],\n      attrStatuses: [i0.ɵɵInputFlags.None, \"statuses\", \"attrStatuses\"],\n      attrTouchRowsHeight: [i0.ɵɵInputFlags.None, \"touchRowsHeight\", \"attrTouchRowsHeight\"],\n      attrTheme: [i0.ɵɵInputFlags.None, \"theme\", \"attrTheme\"],\n      attrTouchAppointmentsMinHeight: [i0.ɵɵInputFlags.None, \"touchAppointmentsMinHeight\", \"attrTouchAppointmentsMinHeight\"],\n      attrTouchScrollBarSize: [i0.ɵɵInputFlags.None, \"touchScrollBarSize\", \"attrTouchScrollBarSize\"],\n      attrTimeZone: [i0.ɵɵInputFlags.None, \"timeZone\", \"attrTimeZone\"],\n      attrTouchDayNameFormat: [i0.ɵɵInputFlags.None, \"touchDayNameFormat\", \"attrTouchDayNameFormat\"],\n      attrToolBarRangeFormat: [i0.ɵɵInputFlags.None, \"toolBarRangeFormat\", \"attrToolBarRangeFormat\"],\n      attrToolBarRangeFormatAbbr: [i0.ɵɵInputFlags.None, \"toolBarRangeFormatAbbr\", \"attrToolBarRangeFormatAbbr\"],\n      attrToolbarHeight: [i0.ɵɵInputFlags.None, \"toolbarHeight\", \"attrToolbarHeight\"],\n      attrViews: [i0.ɵɵInputFlags.None, \"views\", \"attrViews\"],\n      attrView: [i0.ɵɵInputFlags.None, \"view\", \"attrView\"],\n      attrWidth: [i0.ɵɵInputFlags.None, \"width\", \"attrWidth\"],\n      attrHeight: [i0.ɵɵInputFlags.None, \"height\", \"attrHeight\"],\n      autoCreate: [i0.ɵɵInputFlags.None, \"auto-create\", \"autoCreate\"]\n    },\n    outputs: {\n      onAppointmentChange: \"onAppointmentChange\",\n      onAppointmentClick: \"onAppointmentClick\",\n      onAppointmentDoubleClick: \"onAppointmentDoubleClick\",\n      onAppointmentDelete: \"onAppointmentDelete\",\n      onAppointmentAdd: \"onAppointmentAdd\",\n      onBindingComplete: \"onBindingComplete\",\n      onCellClick: \"onCellClick\",\n      onCellDoubleClick: \"onCellDoubleClick\",\n      onContextMenuOpen: \"onContextMenuOpen\",\n      onContextMenuClose: \"onContextMenuClose\",\n      onContextMenuItemClick: \"onContextMenuItemClick\",\n      onContextMenuCreate: \"onContextMenuCreate\",\n      onDateChange: \"onDateChange\",\n      onEditRecurrenceDialogOpen: \"onEditRecurrenceDialogOpen\",\n      onEditRecurrenceDialogClose: \"onEditRecurrenceDialogClose\",\n      onEditDialogCreate: \"onEditDialogCreate\",\n      onEditDialogOpen: \"onEditDialogOpen\",\n      onEditDialogClose: \"onEditDialogClose\",\n      onViewChange: \"onViewChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function jqxSchedulerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return jqxSchedulerComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet jqxSchedulerModule = /*#__PURE__*/(() => {\n  class jqxSchedulerModule {}\n  jqxSchedulerModule.ɵfac = function jqxSchedulerModule_Factory(t) {\n    return new (t || jqxSchedulerModule)();\n  };\n  jqxSchedulerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: jqxSchedulerModule\n  });\n  jqxSchedulerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return jqxSchedulerModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { jqxSchedulerComponent, jqxSchedulerModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}