{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"is-invalid\": a0\n});\nfunction ResetPasswordComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Validating token... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Token validation failed, if the token has expired you can get a new one at the \");\n    i0.ɵɵelementStart(2, \"a\", 4);\n    i0.ɵɵtext(3, \"forgot password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" page. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password must be at least 6 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_5_div_1_Template, 2, 0, \"div\", 2)(2, ResetPasswordComponent_form_5_div_5_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.minlength);\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Passwords must match\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_10_div_1_Template, 2, 0, \"div\", 2)(2, ResetPasswordComponent_form_5_div_10_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.confirmPassword.errors.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.confirmPassword.errors.mustMatch);\n  }\n}\nfunction ResetPasswordComponent_form_5_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 14);\n  }\n}\nfunction ResetPasswordComponent_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 5);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_5_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 6)(2, \"label\");\n    i0.ɵɵtext(3, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 7);\n    i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_div_5_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 6)(7, \"label\");\n    i0.ɵɵtext(8, \"Confirm Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 9);\n    i0.ɵɵtemplate(10, ResetPasswordComponent_form_5_div_10_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 6)(12, \"button\", 10);\n    i0.ɵɵtemplate(13, ResetPasswordComponent_form_5_span_13_Template, 1, 0, \"span\", 11);\n    i0.ɵɵtext(14, \" Reset Password \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"a\", 12);\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r1.submitted && ctx_r1.f.password.errors));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.submitted && ctx_r1.f.password.errors);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r1.submitted && ctx_r1.f.confirmPassword.errors));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.submitted && ctx_r1.f.confirmPassword.errors);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n  }\n}\nvar TokenStatus = /*#__PURE__*/function (TokenStatus) {\n  TokenStatus[TokenStatus[\"Validating\"] = 0] = \"Validating\";\n  TokenStatus[TokenStatus[\"Valid\"] = 1] = \"Valid\";\n  TokenStatus[TokenStatus[\"Invalid\"] = 2] = \"Invalid\";\n  return TokenStatus;\n}(TokenStatus || {});\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(formBuilder, route, router, accountService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n      this.TokenStatus = TokenStatus;\n      this.tokenStatus = TokenStatus.Validating;\n      this.token = null;\n      this.loading = false;\n      this.submitted = false;\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: MustMatch('password', 'confirmPassword')\n      });\n      const token = this.route.snapshot.queryParams['token'];\n      // remove token from url to prevent http referer leakage\n      this.router.navigate([], {\n        relativeTo: this.route,\n        replaceUrl: true\n      });\n      this.accountService.validateResetToken(token).pipe(first()).subscribe({\n        next: () => {\n          this.token = token;\n          this.tokenStatus = TokenStatus.Valid;\n        },\n        error: () => {\n          this.tokenStatus = TokenStatus.Invalid;\n        }\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      // reset alerts on submit\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Password reset successful, you can now login', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../login'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ResetPasswordComponent_Factory(t) {\n      return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.AlertService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetPasswordComponent,\n      selectors: [[\"ng-component\"]],\n      decls: 6,\n      vars: 3,\n      consts: [[1, \"card-header\"], [1, \"card-body\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"routerLink\", \"../forgot-password\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"../login\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n      template: function ResetPasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h3\", 0);\n          i0.ɵɵtext(1, \"Reset Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1);\n          i0.ɵɵtemplate(3, ResetPasswordComponent_div_3_Template, 2, 0, \"div\", 2)(4, ResetPasswordComponent_div_4_Template, 5, 0, \"div\", 2)(5, ResetPasswordComponent_form_5_Template, 17, 11, \"form\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Validating);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Invalid);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Valid);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n      encapsulation: 2\n    });\n  }\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}