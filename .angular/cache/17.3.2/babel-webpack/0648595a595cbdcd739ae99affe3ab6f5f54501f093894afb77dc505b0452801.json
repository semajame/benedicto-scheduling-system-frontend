{"ast":null,"code":"/* Release Date: 28-May-2024 \nCopyright (c) 2011-2024 jQWidgets. \nLicense: https://jqwidgets.com/license/ */\n\n/******/(() => {\n  // webpackBootstrap\n  /******/\n  var __webpack_modules__ = {\n    /***/2497: ( /***/module => {\n      /* tslint:disable */\n      /* eslint-disable */\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        /*!\n         * Globalize\n         *\n         * http://github.com/jquery/globalize\n         *\n         * Copyright Software Freedom Conservancy, Inc.\n         * Dual licensed under the MIT or GPL Version 2 licenses.\n         * http://jquery.org/license\n         */\n\n        (function (window, undefined) {\n          if (document.Globalize) {\n            return;\n          }\n          var Globalize,\n            // private variables\n            regexHex, regexInfinity, regexParseFloat, regexTrim,\n            // private JavaScript utility functions\n            arrayIndexOf, endsWith, extend, isArray, isFunction, isObject, startsWith, trim, truncate, zeroPad,\n            // private Globalization utility functions\n            appendPreOrPostMatch, expandFormat, formatDate, formatNumber, getTokenRegExp, getEra, getEraYear, parseExact, parseNegativePattern;\n\n          // Global variable (Globalize) or CommonJS module (globalize)\n          Globalize = function (cultureSelector) {\n            return new Globalize.prototype.init(cultureSelector);\n          };\n          if (true) {\n            // Assume CommonJS\n            module.exports = Globalize;\n          } else {}\n          Globalize.cultures = {};\n          Globalize.prototype = {\n            constructor: Globalize,\n            init: function (cultureSelector) {\n              this.cultures = Globalize.cultures;\n              this.cultureSelector = cultureSelector;\n              return this;\n            }\n          };\n          Globalize.prototype.init.prototype = Globalize.prototype;\n\n          // 1. When defining a culture, all fields are required except the ones stated as optional.\n          // 2. Each culture should have a \".calendars\" object with at least one calendar named \"standard\"\n          //    which serves as the default calendar in use by that culture.\n          // 3. Each culture should have a \".calendar\" object which is the current calendar being used,\n          //    it may be dynamically changed at any time to one of the calendars in \".calendars\".\n          Globalize.cultures[\"default\"] = {\n            // A unique name for the culture in the form <language code>-<country/region code>\n            name: \"en\",\n            // the name of the culture in the english language\n            englishName: \"English\",\n            // the name of the culture in its own language\n            nativeName: \"English\",\n            // whether the culture uses right-to-left text\n            isRTL: false,\n            // \"language\" is used for so-called \"specific\" cultures.\n            // For example, the culture \"es-CL\" means \"Spanish, in Chili\".\n            // It represents the Spanish-speaking culture as it is in Chili,\n            // which might have different formatting rules or even translations\n            // than Spanish in Spain. A \"neutral\" culture is one that is not\n            // specific to a region. For example, the culture \"es\" is the generic\n            // Spanish culture, which may be a more generalized version of the language\n            // that may or may not be what a specific culture expects.\n            // For a specific culture like \"es-CL\", the \"language\" field refers to the\n            // neutral, generic culture information for the language it is using.\n            // This is not always a simple matter of the string before the dash.\n            // For example, the \"zh-Hans\" culture is netural (Simplified Chinese).\n            // And the \"zh-SG\" culture is Simplified Chinese in Singapore, whose lanugage\n            // field is \"zh-CHS\", not \"zh\".\n            // This field should be used to navigate from a specific culture to it's\n            // more general, neutral culture. If a culture is already as general as it\n            // can get, the language may refer to itself.\n            language: \"en\",\n            // numberFormat defines general number formatting rules, like the digits in\n            // each grouping, the group separator, and how negative numbers are displayed.\n            numberFormat: {\n              // [negativePattern]\n              // Note, numberFormat.pattern has no \"positivePattern\" unlike percent and currency,\n              // but is still defined as an array for consistency with them.\n              //   negativePattern: one of \"(n)|-n|- n|n-|n -\"\n              pattern: [\"-n\"],\n              // number of decimal places normally shown\n              decimals: 2,\n              // string that separates number groups, as in 1,000,000\n              \",\": \",\",\n              // string that separates a number from the fractional portion, as in 1.99\n              \".\": \".\",\n              // array of numbers indicating the size of each number group.\n              // TODO: more detailed description and example\n              groupSizes: [3],\n              // symbol used for positive numbers\n              \"+\": \"+\",\n              // symbol used for negative numbers\n              \"-\": \"-\",\n              // symbol used for NaN (Not-A-Number)\n              \"NaN\": \"NaN\",\n              // symbol used for Negative Infinity\n              negativeInfinity: \"-Infinity\",\n              // symbol used for Positive Infinity\n              positiveInfinity: \"Infinity\",\n              percent: {\n                // [negativePattern, positivePattern]\n                //   negativePattern: one of \"-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %\"\n                //   positivePattern: one of \"n %|n%|%n|% n\"\n                pattern: [\"-n %\", \"n %\"],\n                // number of decimal places normally shown\n                decimals: 2,\n                // array of numbers indicating the size of each number group.\n                // TODO: more detailed description and example\n                groupSizes: [3],\n                // string that separates number groups, as in 1,000,000\n                \",\": \",\",\n                // string that separates a number from the fractional portion, as in 1.99\n                \".\": \".\",\n                // symbol used to represent a percentage\n                symbol: \"%\"\n              },\n              currency: {\n                // [negativePattern, positivePattern]\n                //   negativePattern: one of \"($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)\"\n                //   positivePattern: one of \"$n|n$|$ n|n $\"\n                pattern: [\"($n)\", \"$n\"],\n                // number of decimal places normally shown\n                decimals: 2,\n                // array of numbers indicating the size of each number group.\n                // TODO: more detailed description and example\n                groupSizes: [3],\n                // string that separates number groups, as in 1,000,000\n                \",\": \",\",\n                // string that separates a number from the fractional portion, as in 1.99\n                \".\": \".\",\n                // symbol used to represent currency\n                symbol: \"$\"\n              }\n            },\n            // calendars defines all the possible calendars used by this culture.\n            // There should be at least one defined with name \"standard\", and is the default\n            // calendar used by the culture.\n            // A calendar contains information about how dates are formatted, information about\n            // the calendar's eras, a standard set of the date formats,\n            // translations for day and month names, and if the calendar is not based on the Gregorian\n            // calendar, conversion functions to and from the Gregorian calendar.\n            calendars: {\n              standard: {\n                // name that identifies the type of calendar this is\n                name: \"Gregorian_USEnglish\",\n                // separator of parts of a date (e.g. \"/\" in 11/05/1955)\n                \"/\": \"/\",\n                // separator of parts of a time (e.g. \":\" in 05:44 PM)\n                \":\": \":\",\n                // the first day of the week (0 = Sunday, 1 = Monday, etc)\n                firstDay: 0,\n                days: {\n                  // full day names\n                  names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                  // abbreviated day names\n                  namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                  // shortest day names\n                  namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n                },\n                months: {\n                  // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                  names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                  // abbreviated month names\n                  namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n                },\n                // AM and PM designators in one of these forms:\n                // The usual view, and the upper and lower case versions\n                //   [ standard, lowercase, uppercase ]\n                // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n                //   null\n                AM: [\"AM\", \"am\", \"AM\"],\n                PM: [\"PM\", \"pm\", \"PM\"],\n                eras: [\n                // eras in reverse chronological order.\n                // name: the name of the era in this culture (e.g. A.D., C.E.)\n                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                // offset: offset in years from gregorian calendar\n                {\n                  \"name\": \"A.D.\",\n                  \"start\": null,\n                  \"offset\": 0\n                }],\n                // when a two digit year is given, it will never be parsed as a four digit\n                // year greater than this year (in the appropriate era for the culture)\n                // Set it as a full year (e.g. 2029) or use an offset format starting from\n                // the current year: \"+19\" would correspond to 2029 if the current year 2010.\n                twoDigitYearMax: 2029,\n                // set of predefined date and time patterns used by the culture\n                // these represent the format someone in this culture would expect\n                // to see given the portions of the date that are shown.\n                patterns: {\n                  // short date pattern\n                  d: \"M/d/yyyy\",\n                  // long date pattern\n                  D: \"dddd, MMMM dd, yyyy\",\n                  // short time pattern\n                  t: \"h:mm tt\",\n                  // long time pattern\n                  T: \"h:mm:ss tt\",\n                  // long date, short time pattern\n                  f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                  // long date, long time pattern\n                  F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                  // month/day pattern\n                  M: \"MMMM dd\",\n                  // month/year pattern\n                  Y: \"yyyy MMMM\",\n                  // S is a sortable format that does not vary by culture\n                  S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\"\n                }\n                // optional fields for each calendar:\n                /*\n                monthsGenitive:\n                \tSame as months but used when the day preceeds the month.\n                \tOmit if the culture has no genitive distinction in month names.\n                \tFor an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx\n                convert:\n                \tAllows for the support of non-gregorian based calendars. This convert object is used to\n                \tto convert a date to and from a gregorian calendar date to handle parsing and formatting.\n                \tThe two functions:\n                \t\tfromGregorian( date )\n                \t\t\tGiven the date as a parameter, return an array with parts [ year, month, day ]\n                \t\t\tcorresponding to the non-gregorian based year, month, and day for the calendar.\n                \t\ttoGregorian( year, month, day )\n                \t\t\tGiven the non-gregorian year, month, and day, return a new Date() object\n                \t\t\tset to the corresponding date in the gregorian calendar.\n                */\n              }\n            },\n            // For localized strings\n            messages: {}\n          };\n          Globalize.cultures[\"default\"].calendar = Globalize.cultures[\"default\"].calendars.standard;\n          Globalize.cultures.en = Globalize.cultures[\"default\"];\n          Globalize.cultureSelector = \"en\";\n\n          //\n          // private variables\n          //\n\n          regexHex = /^0x[a-f0-9]+$/i;\n          regexInfinity = /^[+\\-]?infinity$/i;\n          regexParseFloat = /^[+\\-]?\\d*\\.?\\d*(e[+\\-]?\\d+)?$/;\n          regexTrim = /^\\s+|\\s+$/g;\n\n          //\n          // private JavaScript utility functions\n          //\n\n          arrayIndexOf = function (array, item) {\n            if (array.indexOf) {\n              return array.indexOf(item);\n            }\n            for (var i = 0, length = array.length; i < length; i++) {\n              if (array[i] === item) {\n                return i;\n              }\n            }\n            return -1;\n          };\n          endsWith = function (value, pattern) {\n            return value.substr(value.length - pattern.length) === pattern;\n          };\n          extend = function () {\n            var options,\n              name,\n              src,\n              copy,\n              copyIsArray,\n              clone,\n              target = arguments[0] || {},\n              i = 1,\n              length = arguments.length,\n              deep = false;\n\n            // Handle a deep copy situation\n            if (typeof target === \"boolean\") {\n              deep = target;\n              target = arguments[1] || {};\n              // skip the boolean and the target\n              i = 2;\n            }\n\n            // Handle case when target is a string or something (possible in deep copy)\n            if (typeof target !== \"object\" && !isFunction(target)) {\n              target = {};\n            }\n            for (; i < length; i++) {\n              // Only deal with non-null/undefined values\n              if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                  src = target[name];\n                  copy = options[name];\n\n                  // Prevent never-ending loop\n                  if (target === copy) {\n                    continue;\n                  }\n\n                  // Recurse if we're merging plain objects or arrays\n                  if (deep && copy && (isObject(copy) || (copyIsArray = isArray(copy)))) {\n                    if (copyIsArray) {\n                      copyIsArray = false;\n                      clone = src && isArray(src) ? src : [];\n                    } else {\n                      clone = src && isObject(src) ? src : {};\n                    }\n\n                    // Never move original objects, clone them\n                    target[name] = extend(deep, clone, copy);\n\n                    // Don't bring in undefined values\n                  } else if (copy !== undefined) {\n                    target[name] = copy;\n                  }\n                }\n              }\n            }\n\n            // Return the modified object\n            return target;\n          };\n          isArray = Array.isArray || function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n          };\n          isFunction = function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object Function]\";\n          };\n          isObject = function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object Object]\";\n          };\n          startsWith = function (value, pattern) {\n            return value.indexOf(pattern) === 0;\n          };\n          trim = function (value) {\n            return (value + \"\").replace(regexTrim, \"\");\n          };\n          truncate = function (value) {\n            if (isNaN(value)) {\n              return NaN;\n            }\n            return Math[value < 0 ? \"ceil\" : \"floor\"](value);\n          };\n          zeroPad = function (str, count, left) {\n            var l;\n            for (l = str.length; l < count; l += 1) {\n              str = left ? \"0\" + str : str + \"0\";\n            }\n            return str;\n          };\n\n          //\n          // private Globalization utility functions\n          //\n\n          appendPreOrPostMatch = function (preMatch, strings) {\n            // appends pre- and post- token match strings while removing escaped characters.\n            // Returns a single quote count which is used to determine if the token occurs\n            // in a string literal.\n            var quoteCount = 0,\n              escaped = false;\n            for (var i = 0, il = preMatch.length; i < il; i++) {\n              var c = preMatch.charAt(i);\n              switch (c) {\n                case \"\\'\":\n                  if (escaped) {\n                    strings.push(\"\\'\");\n                  } else {\n                    quoteCount++;\n                  }\n                  escaped = false;\n                  break;\n                case \"\\\\\":\n                  if (escaped) {\n                    strings.push(\"\\\\\");\n                  }\n                  escaped = !escaped;\n                  break;\n                default:\n                  strings.push(c);\n                  escaped = false;\n                  break;\n              }\n            }\n            return quoteCount;\n          };\n          expandFormat = function (cal, format) {\n            // expands unspecified or single character date formats into the full pattern.\n            format = format || \"F\";\n            var pattern,\n              patterns = cal.patterns,\n              len = format.length;\n            if (len === 1) {\n              pattern = patterns[format];\n              if (!pattern) {\n                throw \"Invalid date format string \\'\" + format + \"\\'.\";\n              }\n              format = pattern;\n            } else if (len === 2 && format.charAt(0) === \"%\") {\n              // %X escape format -- intended as a custom format string that is only one character, not a built-in format.\n              format = format.charAt(1);\n            }\n            return format;\n          };\n          formatDate = function (value, format, culture) {\n            var cal = culture.calendar,\n              convert = cal.convert,\n              ret;\n            if (!format || !format.length || format === \"i\") {\n              if (culture && culture.name.length) {\n                if (convert) {\n                  // non-gregorian calendar, so we cannot use built-in toLocaleString()\n                  ret = formatDate(value, cal.patterns.F, culture);\n                } else {\n                  var eraDate = new Date(value.getTime()),\n                    era = getEra(value, cal.eras);\n                  eraDate.setFullYear(getEraYear(value, cal, era));\n                  ret = eraDate.toLocaleString();\n                }\n              } else {\n                ret = value.toString();\n              }\n              return ret;\n            }\n            var eras = cal.eras,\n              sortable = format === \"s\";\n            format = expandFormat(cal, format);\n\n            // Start with an empty string\n            ret = [];\n            var hour,\n              zeros = [\"0\", \"00\", \"000\"],\n              foundDay,\n              checkedDay,\n              dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,\n              quoteCount = 0,\n              tokenRegExp = getTokenRegExp(),\n              converted;\n\n            //function padZeros( num, c ) {\n            //\tvar r, s = num + \"\";\n            //\tif ( c > 1 && s.length < c ) {\n            //\t\tr = ( zeros[c - 2] + s);\n            //\t\treturn r.substr( r.length - c, c );\n            //\t}\n            //\telse {\n            //\t\tr = s;\n            //\t}\n            //\treturn r;\n            //}\n\n            function padZeros(num, c) {\n              if (num < 0) {\n                return \"-\" + padZeros(-num, c);\n              }\n              var r,\n                s = num + \"\";\n              if (c > 1 && s.length < c) {\n                r = zeros[c - 2] + s;\n                return r.substr(r.length - c, c);\n              } else {\n                r = s;\n              }\n              return r;\n            }\n            function hasDay() {\n              if (foundDay || checkedDay) {\n                return foundDay;\n              }\n              foundDay = dayPartRegExp.test(format);\n              checkedDay = true;\n              return foundDay;\n            }\n            function getPart(date, part) {\n              if (converted) {\n                return converted[part];\n              }\n              switch (part) {\n                case 0:\n                  return date.getFullYear();\n                case 1:\n                  return date.getMonth();\n                case 2:\n                  return date.getDate();\n                default:\n                  throw \"Invalid part value \" + part;\n              }\n            }\n            if (!sortable && convert) {\n              converted = convert.fromGregorian(value);\n            }\n            for (;;) {\n              // Save the current index\n              var index = tokenRegExp.lastIndex,\n                // Look for the next pattern\n                ar = tokenRegExp.exec(format);\n\n              // Append the text before the pattern (or the end of the string if not found)\n              var preMatch = format.slice(index, ar ? ar.index : format.length);\n              quoteCount += appendPreOrPostMatch(preMatch, ret);\n              if (!ar) {\n                break;\n              }\n\n              // do not replace any matches that occur inside a string literal.\n              if (quoteCount % 2) {\n                ret.push(ar[0]);\n                continue;\n              }\n              var current = ar[0],\n                clength = current.length;\n              switch (current) {\n                case \"ddd\":\n                //Day of the week, as a three-letter abbreviation\n                case \"dddd\":\n                  // Day of the week, using the full name\n                  var names = clength === 3 ? cal.days.namesAbbr : cal.days.names;\n                  ret.push(names[value.getDay()]);\n                  break;\n                case \"d\":\n                // Day of month, without leading zero for single-digit days\n                case \"dd\":\n                  // Day of month, with leading zero for single-digit days\n                  foundDay = true;\n                  ret.push(padZeros(getPart(value, 2), clength));\n                  break;\n                case \"MMM\":\n                // Month, as a three-letter abbreviation\n                case \"MMMM\":\n                  // Month, using the full name\n                  var part = getPart(value, 1);\n                  ret.push(cal.monthsGenitive && hasDay() ? cal.monthsGenitive[clength === 3 ? \"namesAbbr\" : \"names\"][part] : cal.months[clength === 3 ? \"namesAbbr\" : \"names\"][part]);\n                  break;\n                case \"M\":\n                // Month, as digits, with no leading zero for single-digit months\n                case \"MM\":\n                  // Month, as digits, with leading zero for single-digit months\n                  ret.push(padZeros(getPart(value, 1) + 1, clength));\n                  break;\n                case \"y\":\n                // Year, as two digits, but with no leading zero for years less than 10\n                case \"yy\":\n                // Year, as two digits, with leading zero for years less than 10\n                case \"yyyy\":\n                  // Year represented by four full digits\n                  part = converted ? converted[0] : getEraYear(value, cal, getEra(value, eras), sortable);\n                  if (clength < 4) {\n                    part = part % 100;\n                  }\n                  ret.push(padZeros(part, clength));\n                  break;\n                case \"h\":\n                // Hours with no leading zero for single-digit hours, using 12-hour clock\n                case \"hh\":\n                  // Hours with leading zero for single-digit hours, using 12-hour clock\n                  hour = value.getHours() % 12;\n                  if (hour === 0) hour = 12;\n                  ret.push(padZeros(hour, clength));\n                  break;\n                case \"H\":\n                // Hours with no leading zero for single-digit hours, using 24-hour clock\n                case \"HH\":\n                  // Hours with leading zero for single-digit hours, using 24-hour clock\n                  ret.push(padZeros(value.getHours(), clength));\n                  break;\n                case \"m\":\n                // Minutes with no leading zero for single-digit minutes\n                case \"mm\":\n                  // Minutes with leading zero for single-digit minutes\n                  ret.push(padZeros(value.getMinutes(), clength));\n                  break;\n                case \"s\":\n                // Seconds with no leading zero for single-digit seconds\n                case \"ss\":\n                  // Seconds with leading zero for single-digit seconds\n                  ret.push(padZeros(value.getSeconds(), clength));\n                  break;\n                case \"t\":\n                // One character am/pm indicator (\"a\" or \"p\")\n                case \"tt\":\n                  // Multicharacter am/pm indicator\n                  part = value.getHours() < 12 ? cal.AM ? cal.AM[0] : \" \" : cal.PM ? cal.PM[0] : \" \";\n                  ret.push(clength === 1 ? part.charAt(0) : part);\n                  break;\n                case \"f\":\n                // Deciseconds\n                case \"ff\":\n                // Centiseconds\n                case \"fff\":\n                  // Milliseconds\n                  ret.push(padZeros(value.getMilliseconds(), 3).substr(0, clength));\n                  break;\n                case \"z\":\n                // Time zone offset, no leading zero\n                case \"zz\":\n                  // Time zone offset with leading zero\n                  hour = value.getTimezoneOffset() / 60;\n                  ret.push((hour <= 0 ? \"+\" : \"-\") + padZeros(Math.floor(Math.abs(hour)), clength));\n                  break;\n                case \"zzz\":\n                  // Time zone offset with leading zero\n                  hour = value.getTimezoneOffset() / 60;\n                  ret.push((hour <= 0 ? \"+\" : \"-\") + padZeros(Math.floor(Math.abs(hour)), 2) +\n                  // Hard coded \":\" separator, rather than using cal.TimeSeparator\n                  // Repeated here for consistency, plus \":\" was already assumed in date parsing.\n                  \":\" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));\n                  break;\n                case \"g\":\n                case \"gg\":\n                  if (cal.eras) {\n                    ret.push(cal.eras[getEra(value, eras)].name);\n                  }\n                  break;\n                case \"/\":\n                  ret.push(cal[\"/\"]);\n                  break;\n                default:\n                  throw \"Invalid date format pattern \\'\" + current + \"\\'.\";\n              }\n            }\n            return ret.join(\"\");\n          };\n\n          // formatNumber\n          (function () {\n            var expandNumber;\n            expandNumber = function (number, precision, formatInfo) {\n              var groupSizes = formatInfo.groupSizes,\n                curSize = groupSizes[0],\n                curGroupIndex = 1,\n                factor = Math.pow(10, precision),\n                rounded = Math.round(number * factor) / factor;\n              if (!isFinite(rounded)) {\n                rounded = number;\n              }\n              number = rounded;\n              var numberString = number + \"\",\n                right = \"\",\n                split = numberString.split(/e/i),\n                exponent = split.length > 1 ? parseInt(split[1], 10) : 0;\n              numberString = split[0];\n              split = numberString.split(\".\");\n              numberString = split[0];\n              right = split.length > 1 ? split[1] : \"\";\n              var l;\n              if (exponent > 0) {\n                right = zeroPad(right, exponent, false);\n                numberString += right.slice(0, exponent);\n                right = right.substr(exponent);\n              } else if (exponent < 0) {\n                exponent = -exponent;\n                numberString = zeroPad(numberString, exponent + 1, true);\n                right = numberString.slice(-exponent, numberString.length) + right;\n                numberString = numberString.slice(0, -exponent);\n              }\n              if (precision > 0) {\n                right = formatInfo[\".\"] + (right.length > precision ? right.slice(0, precision) : zeroPad(right, precision));\n              } else {\n                right = \"\";\n              }\n              var stringIndex = numberString.length - 1,\n                sep = formatInfo[\",\"],\n                ret = \"\";\n              while (stringIndex >= 0) {\n                if (curSize === 0 || curSize > stringIndex) {\n                  return numberString.slice(0, stringIndex + 1) + (ret.length ? sep + ret + right : right);\n                }\n                ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? sep + ret : \"\");\n                stringIndex -= curSize;\n                if (curGroupIndex < groupSizes.length) {\n                  curSize = groupSizes[curGroupIndex];\n                  curGroupIndex++;\n                }\n              }\n              return numberString.slice(0, stringIndex + 1) + sep + ret + right;\n            };\n            formatNumber = function (value, format, culture) {\n              if (!isFinite(value)) {\n                if (value === Infinity) {\n                  return culture.numberFormat.positiveInfinity;\n                }\n                if (value === -Infinity) {\n                  return culture.numberFormat.negativeInfinity;\n                }\n                return culture.numberFormat.NaN;\n              }\n              if (!format || format === \"i\") {\n                return culture.name.length ? value.toLocaleString() : value.toString();\n              }\n              format = format || \"D\";\n              var nf = culture.numberFormat,\n                number = Math.abs(value),\n                precision = -1,\n                pattern;\n              if (format.length > 1) precision = parseInt(format.slice(1), 10);\n              var current = format.charAt(0).toUpperCase(),\n                formatInfo;\n              switch (current) {\n                case \"D\":\n                  pattern = \"n\";\n                  number = truncate(number);\n                  if (precision !== -1) {\n                    number = zeroPad(\"\" + number, precision, true);\n                  }\n                  if (value < 0) number = \"-\" + number;\n                  break;\n                case \"N\":\n                  formatInfo = nf;\n                /* falls through */\n                case \"C\":\n                  formatInfo = formatInfo || nf.currency;\n                /* falls through */\n                case \"P\":\n                  formatInfo = formatInfo || nf.percent;\n                  pattern = value < 0 ? formatInfo.pattern[0] : formatInfo.pattern[1] || \"n\";\n                  if (precision === -1) precision = formatInfo.decimals;\n                  number = expandNumber(number * (current === \"P\" ? 100 : 1), precision, formatInfo);\n                  break;\n                default:\n                  throw \"Bad number format specifier: \" + current;\n              }\n              var patternParts = /n|\\$|-|%/g,\n                ret = \"\";\n              for (;;) {\n                var index = patternParts.lastIndex,\n                  ar = patternParts.exec(pattern);\n                ret += pattern.slice(index, ar ? ar.index : pattern.length);\n                if (!ar) {\n                  break;\n                }\n                switch (ar[0]) {\n                  case \"n\":\n                    ret += number;\n                    break;\n                  case \"$\":\n                    ret += nf.currency.symbol;\n                    break;\n                  case \"-\":\n                    // don't make 0 negative\n                    if (/[1-9]/.test(number)) {\n                      ret += nf[\"-\"];\n                    }\n                    break;\n                  case \"%\":\n                    ret += nf.percent.symbol;\n                    break;\n                }\n              }\n              return ret;\n            };\n          })();\n          getTokenRegExp = function () {\n            // regular expression for matching date and time tokens in format strings.\n            return /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;\n          };\n          getEra = function (date, eras) {\n            if (!eras) return 0;\n            var start,\n              ticks = date.getTime();\n            for (var i = 0, l = eras.length; i < l; i++) {\n              start = eras[i].start;\n              if (start === null || ticks >= start) {\n                return i;\n              }\n            }\n            return 0;\n          };\n          getEraYear = function (date, cal, era, sortable) {\n            var year = date.getFullYear();\n            if (!sortable && cal.eras) {\n              // convert normal gregorian year to era-shifted gregorian\n              // year by subtracting the era offset\n              year -= cal.eras[era].offset;\n            }\n            return year;\n          };\n\n          // parseExact\n          (function () {\n            var expandYear, getDayIndex, getMonthIndex, getParseRegExp, outOfRange, toUpper, toUpperArray;\n            expandYear = function (cal, year) {\n              // expands 2-digit year into 4 digits.\n              if (year < 100) {\n                var now = new Date(),\n                  era = getEra(now),\n                  curr = getEraYear(now, cal, era),\n                  twoDigitYearMax = cal.twoDigitYearMax;\n                twoDigitYearMax = typeof twoDigitYearMax === \"string\" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;\n                year += curr - curr % 100;\n                if (year > twoDigitYearMax) {\n                  year -= 100;\n                }\n              }\n              return year;\n            };\n            getDayIndex = function (cal, value, abbr) {\n              var ret,\n                days = cal.days,\n                upperDays = cal._upperDays;\n              if (!upperDays) {\n                cal._upperDays = upperDays = [toUpperArray(days.names), toUpperArray(days.namesAbbr), toUpperArray(days.namesShort)];\n              }\n              value = toUpper(value);\n              if (abbr) {\n                ret = arrayIndexOf(upperDays[1], value);\n                if (ret === -1) {\n                  ret = arrayIndexOf(upperDays[2], value);\n                }\n              } else {\n                ret = arrayIndexOf(upperDays[0], value);\n              }\n              return ret;\n            };\n            getMonthIndex = function (cal, value, abbr) {\n              var months = cal.months,\n                monthsGen = cal.monthsGenitive || cal.months,\n                upperMonths = cal._upperMonths,\n                upperMonthsGen = cal._upperMonthsGen;\n              if (!upperMonths) {\n                cal._upperMonths = upperMonths = [toUpperArray(months.names), toUpperArray(months.namesAbbr)];\n                cal._upperMonthsGen = upperMonthsGen = [toUpperArray(monthsGen.names), toUpperArray(monthsGen.namesAbbr)];\n              }\n              value = toUpper(value);\n              var i = arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);\n              if (i < 0) {\n                i = arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);\n              }\n              return i;\n            };\n            getParseRegExp = function (cal, format) {\n              // converts a format string into a regular expression with groups that\n              // can be used to extract date fields from a date string.\n              // check for a cached parse regex.\n              var re = cal._parseRegExp;\n              if (!re) {\n                cal._parseRegExp = re = {};\n              } else {\n                var reFormat = re[format];\n                if (reFormat) {\n                  return reFormat;\n                }\n              }\n\n              // expand single digit formats, then escape regular expression characters.\n              var expFormat = expandFormat(cal, format).replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"),\n                regexp = [\"^\"],\n                groups = [],\n                index = 0,\n                quoteCount = 0,\n                tokenRegExp = getTokenRegExp(),\n                match;\n\n              // iterate through each date token found.\n              while ((match = tokenRegExp.exec(expFormat)) !== null) {\n                var preMatch = expFormat.slice(index, match.index);\n                index = tokenRegExp.lastIndex;\n\n                // don't replace any matches that occur inside a string literal.\n                quoteCount += appendPreOrPostMatch(preMatch, regexp);\n                if (quoteCount % 2) {\n                  regexp.push(match[0]);\n                  continue;\n                }\n\n                // add a regex group for the token.\n                var m = match[0],\n                  len = m.length,\n                  add;\n                switch (m) {\n                  case \"dddd\":\n                  case \"ddd\":\n                  case \"MMMM\":\n                  case \"MMM\":\n                  case \"gg\":\n                  case \"g\":\n                    add = \"(\\\\D+)\";\n                    break;\n                  case \"tt\":\n                  case \"t\":\n                    add = \"(\\\\D*)\";\n                    break;\n                  case \"yyyy\":\n                  case \"fff\":\n                  case \"ff\":\n                  case \"f\":\n                    add = \"(\\\\d{\" + len + \"})\";\n                    break;\n                  case \"dd\":\n                  case \"d\":\n                  case \"MM\":\n                  case \"M\":\n                  case \"yy\":\n                  case \"y\":\n                  case \"HH\":\n                  case \"H\":\n                  case \"hh\":\n                  case \"h\":\n                  case \"mm\":\n                  case \"m\":\n                  case \"ss\":\n                  case \"s\":\n                    add = \"(\\\\d\\\\d?)\";\n                    break;\n                  case \"zzz\":\n                    add = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n                    break;\n                  case \"zz\":\n                  case \"z\":\n                    add = \"([+-]?\\\\d\\\\d?)\";\n                    break;\n                  case \"/\":\n                    add = \"(\\\\/)\";\n                    break;\n                  default:\n                    throw \"Invalid date format pattern \\'\" + m + \"\\'.\";\n                }\n                if (add) {\n                  regexp.push(add);\n                }\n                groups.push(match[0]);\n              }\n              appendPreOrPostMatch(expFormat.slice(index), regexp);\n              regexp.push(\"$\");\n\n              // allow whitespace to differ when matching formats.\n              var regexpStr = regexp.join(\"\").replace(/\\s+/g, \"\\\\s+\"),\n                parseRegExp = {\n                  \"regExp\": regexpStr,\n                  \"groups\": groups\n                };\n\n              // cache the regex for this format.\n              return re[format] = parseRegExp;\n            };\n            outOfRange = function (value, low, high) {\n              return value < low || value > high;\n            };\n            toUpper = function (value) {\n              // \"he-IL\" has non-breaking space in weekday names.\n              return value.split(\"\\u00A0\").join(\" \").toUpperCase();\n            };\n            toUpperArray = function (arr) {\n              var results = [];\n              for (var i = 0, l = arr.length; i < l; i++) {\n                results[i] = toUpper(arr[i]);\n              }\n              return results;\n            };\n            parseExact = function (value, format, culture) {\n              // try to parse the date string by matching against the format string\n              // while using the specified culture for date field names.\n              value = trim(value);\n              var cal = culture.calendar,\n                // convert date formats into regular expressions with groupings.\n                // use the regexp to determine the input format and extract the date fields.\n                parseInfo = getParseRegExp(cal, format),\n                match = new RegExp(parseInfo.regExp).exec(value);\n              if (match === null) {\n                return null;\n              }\n              // found a date format that matches the input.\n              var groups = parseInfo.groups,\n                era = null,\n                year = null,\n                month = null,\n                date = null,\n                weekDay = null,\n                hour = 0,\n                hourOffset,\n                min = 0,\n                sec = 0,\n                msec = 0,\n                tzMinOffset = null,\n                pmHour = false;\n              // iterate the format groups to extract and set the date fields.\n              for (var j = 0, jl = groups.length; j < jl; j++) {\n                var matchGroup = match[j + 1];\n                if (matchGroup) {\n                  var current = groups[j],\n                    clength = current.length,\n                    matchInt = parseInt(matchGroup, 10);\n                  switch (current) {\n                    case \"dd\":\n                    case \"d\":\n                      // Day of month.\n                      date = matchInt;\n                      // check that date is generally in valid range, also checking overflow below.\n                      if (outOfRange(date, 1, 31)) return null;\n                      break;\n                    case \"MMM\":\n                    case \"MMMM\":\n                      month = getMonthIndex(cal, matchGroup, clength === 3);\n                      if (outOfRange(month, 0, 11)) return null;\n                      break;\n                    case \"M\":\n                    case \"MM\":\n                      // Month.\n                      month = matchInt - 1;\n                      if (outOfRange(month, 0, 11)) return null;\n                      break;\n                    case \"y\":\n                    case \"yy\":\n                    case \"yyyy\":\n                      year = clength < 4 ? expandYear(cal, matchInt) : matchInt;\n                      if (outOfRange(year, 0, 9999)) return null;\n                      break;\n                    case \"h\":\n                    case \"hh\":\n                      // Hours (12-hour clock).\n                      hour = matchInt;\n                      if (hour === 12) hour = 0;\n                      if (outOfRange(hour, 0, 11)) return null;\n                      break;\n                    case \"H\":\n                    case \"HH\":\n                      // Hours (24-hour clock).\n                      hour = matchInt;\n                      if (outOfRange(hour, 0, 23)) return null;\n                      break;\n                    case \"m\":\n                    case \"mm\":\n                      // Minutes.\n                      min = matchInt;\n                      if (outOfRange(min, 0, 59)) return null;\n                      break;\n                    case \"s\":\n                    case \"ss\":\n                      // Seconds.\n                      sec = matchInt;\n                      if (outOfRange(sec, 0, 59)) return null;\n                      break;\n                    case \"tt\":\n                    case \"t\":\n                      // AM/PM designator.\n                      // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of\n                      // the AM tokens. If not, fail the parse for this format.\n                      pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);\n                      if (!pmHour && (!cal.AM || matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])) return null;\n                      break;\n                    case \"f\":\n                    // Deciseconds.\n                    case \"ff\":\n                    // Centiseconds.\n                    case \"fff\":\n                      // Milliseconds.\n                      msec = matchInt * Math.pow(10, 3 - clength);\n                      if (outOfRange(msec, 0, 999)) return null;\n                      break;\n                    case \"ddd\":\n                    // Day of week.\n                    case \"dddd\":\n                      // Day of week.\n                      weekDay = getDayIndex(cal, matchGroup, clength === 3);\n                      if (outOfRange(weekDay, 0, 6)) return null;\n                      break;\n                    case \"zzz\":\n                      // Time zone offset in +/- hours:min.\n                      var offsets = matchGroup.split(/:/);\n                      if (offsets.length !== 2) return null;\n                      hourOffset = parseInt(offsets[0], 10);\n                      if (outOfRange(hourOffset, -12, 13)) return null;\n                      var minOffset = parseInt(offsets[1], 10);\n                      if (outOfRange(minOffset, 0, 59)) return null;\n                      tzMinOffset = hourOffset * 60 + (startsWith(matchGroup, \"-\") ? -minOffset : minOffset);\n                      break;\n                    case \"z\":\n                    case \"zz\":\n                      // Time zone offset in +/- hours.\n                      hourOffset = matchInt;\n                      if (outOfRange(hourOffset, -12, 13)) return null;\n                      tzMinOffset = hourOffset * 60;\n                      break;\n                    case \"g\":\n                    case \"gg\":\n                      var eraName = matchGroup;\n                      if (!eraName || !cal.eras) return null;\n                      eraName = trim(eraName.toLowerCase());\n                      for (var i = 0, l = cal.eras.length; i < l; i++) {\n                        if (eraName === cal.eras[i].name.toLowerCase()) {\n                          era = i;\n                          break;\n                        }\n                      }\n                      // could not find an era with that name\n                      if (era === null) return null;\n                      break;\n                  }\n                }\n              }\n              var result = new Date(),\n                defaultYear,\n                convert = cal.convert;\n              defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();\n              if (year === null) {\n                year = defaultYear;\n              } else if (cal.eras) {\n                // year must be shifted to normal gregorian year\n                // but not if year was not specified, its already normal gregorian\n                // per the main if clause above.\n                year += cal.eras[era || 0].offset;\n              }\n              // set default day and month to 1 and January, so if unspecified, these are the defaults\n              // instead of the current day/month.\n              if (month === null) {\n                month = 0;\n              }\n              if (date === null) {\n                date = 1;\n              }\n              // now have year, month, and date, but in the culture's calendar.\n              // convert to gregorian if necessary\n              if (convert) {\n                result = convert.toGregorian(year, month, date);\n                // conversion failed, must be an invalid match\n                if (result === null) return null;\n              } else {\n                // have to set year, month and date together to avoid overflow based on current date.\n                result.setFullYear(year, month, date);\n                // check to see if date overflowed for specified month (only checked 1-31 above).\n                if (result.getDate() !== date) return null;\n                // invalid day of week.\n                if (weekDay !== null && result.getDay() !== weekDay) {\n                  return null;\n                }\n              }\n              // if pm designator token was found make sure the hours fit the 24-hour clock.\n              if (pmHour && hour < 12) {\n                hour += 12;\n              }\n              result.setHours(hour, min, sec, msec);\n              if (tzMinOffset !== null) {\n                // adjust timezone to utc before applying local offset.\n                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());\n                // Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours\n                // to ensure both these fields will not exceed this range.\tadjustedMin will range\n                // somewhere between -1440 and 1500, so we only need to split this into hours.\n                result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);\n              }\n              return result;\n            };\n          })();\n          parseNegativePattern = function (value, nf, negativePattern) {\n            var neg = nf[\"-\"],\n              pos = nf[\"+\"],\n              ret;\n            switch (negativePattern) {\n              case \"n -\":\n                neg = \" \" + neg;\n                pos = \" \" + pos;\n              /* falls through */\n              case \"n-\":\n                if (endsWith(value, neg)) {\n                  ret = [\"-\", value.substr(0, value.length - neg.length)];\n                } else if (endsWith(value, pos)) {\n                  ret = [\"+\", value.substr(0, value.length - pos.length)];\n                }\n                break;\n              case \"- n\":\n                neg += \" \";\n                pos += \" \";\n              /* falls through */\n              case \"-n\":\n                if (startsWith(value, neg)) {\n                  ret = [\"-\", value.substr(neg.length)];\n                } else if (startsWith(value, pos)) {\n                  ret = [\"+\", value.substr(pos.length)];\n                }\n                break;\n              case \"(n)\":\n                if (startsWith(value, \"(\") && endsWith(value, \")\")) {\n                  ret = [\"-\", value.substr(1, value.length - 2)];\n                }\n                break;\n            }\n            return ret || [\"\", value];\n          };\n\n          //\n          // public instance functions\n          //\n\n          Globalize.prototype.findClosestCulture = function (cultureSelector) {\n            return Globalize.findClosestCulture.call(this, cultureSelector);\n          };\n          Globalize.prototype.format = function (value, format, cultureSelector) {\n            return Globalize.format.call(this, value, format, cultureSelector);\n          };\n          Globalize.prototype.localize = function (key, cultureSelector) {\n            return Globalize.localize.call(this, key, cultureSelector);\n          };\n          Globalize.prototype.parseInt = function (value, radix, cultureSelector) {\n            return Globalize.parseInt.call(this, value, radix, cultureSelector);\n          };\n          Globalize.prototype.parseFloat = function (value, radix, cultureSelector) {\n            return Globalize.parseFloat.call(this, value, radix, cultureSelector);\n          };\n          Globalize.prototype.culture = function (cultureSelector) {\n            return Globalize.culture.call(this, cultureSelector);\n          };\n\n          //\n          // public singleton functions\n          //\n\n          Globalize.addCultureInfo = function (cultureName, baseCultureName, info) {\n            var base = {},\n              isNew = false;\n            if (typeof cultureName !== \"string\") {\n              // cultureName argument is optional string. If not specified, assume info is first\n              // and only argument. Specified info deep-extends current culture.\n              info = cultureName;\n              cultureName = this.culture().name;\n              base = this.cultures[cultureName];\n            } else if (typeof baseCultureName !== \"string\") {\n              // baseCultureName argument is optional string. If not specified, assume info is second\n              // argument. Specified info deep-extends specified culture.\n              // If specified culture does not exist, create by deep-extending default\n              info = baseCultureName;\n              isNew = this.cultures[cultureName] == null;\n              base = this.cultures[cultureName] || this.cultures[\"default\"];\n            } else {\n              // cultureName and baseCultureName specified. Assume a new culture is being created\n              // by deep-extending an specified base culture\n              isNew = true;\n              base = this.cultures[baseCultureName];\n            }\n            this.cultures[cultureName] = extend(true, {}, base, info);\n            // Make the standard calendar the current culture if it's a new culture\n            if (isNew) {\n              this.cultures[cultureName].calendar = this.cultures[cultureName].calendars.standard;\n            }\n          };\n          Globalize.findClosestCulture = function (name) {\n            var match;\n            if (!name) {\n              return this.findClosestCulture(this.cultureSelector) || this.cultures[\"default\"];\n            }\n            if (typeof name === \"string\") {\n              name = name.split(\",\");\n            }\n            if (isArray(name)) {\n              var lang,\n                cultures = this.cultures,\n                list = name,\n                i,\n                l = list.length,\n                prioritized = [];\n              for (i = 0; i < l; i++) {\n                name = trim(list[i]);\n                var pri,\n                  parts = name.split(\";\");\n                lang = trim(parts[0]);\n                if (parts.length === 1) {\n                  pri = 1;\n                } else {\n                  name = trim(parts[1]);\n                  if (name.indexOf(\"q=\") === 0) {\n                    name = name.substr(2);\n                    pri = parseFloat(name);\n                    pri = isNaN(pri) ? 0 : pri;\n                  } else {\n                    pri = 1;\n                  }\n                }\n                prioritized.push({\n                  lang: lang,\n                  pri: pri\n                });\n              }\n              prioritized.sort(function (a, b) {\n                if (a.pri < b.pri) {\n                  return 1;\n                } else if (a.pri > b.pri) {\n                  return -1;\n                }\n                return 0;\n              });\n              // exact match\n              for (i = 0; i < l; i++) {\n                lang = prioritized[i].lang;\n                match = cultures[lang];\n                if (match) {\n                  return match;\n                }\n              }\n\n              // neutral language match\n              for (i = 0; i < l; i++) {\n                lang = prioritized[i].lang;\n                do {\n                  var index = lang.lastIndexOf(\"-\");\n                  if (index === -1) {\n                    break;\n                  }\n                  // strip off the last part. e.g. en-US => en\n                  lang = lang.substr(0, index);\n                  match = cultures[lang];\n                  if (match) {\n                    return match;\n                  }\n                } while (1);\n              }\n\n              // last resort: match first culture using that language\n              for (i = 0; i < l; i++) {\n                lang = prioritized[i].lang;\n                for (var cultureKey in cultures) {\n                  var culture = cultures[cultureKey];\n                  if (culture.language == lang) {\n                    return culture;\n                  }\n                }\n              }\n            } else if (typeof name === \"object\") {\n              return name;\n            }\n            return match || null;\n          };\n          Globalize.format = function (value, format, cultureSelector) {\n            var culture = this.findClosestCulture(cultureSelector);\n            if (value instanceof Date) {\n              value = formatDate(value, format, culture);\n            } else if (typeof value === \"number\") {\n              value = formatNumber(value, format, culture);\n            }\n            return value;\n          };\n          Globalize.localize = function (key, cultureSelector) {\n            return this.findClosestCulture(cultureSelector).messages[key] || this.cultures[\"default\"].messages[key];\n          };\n          Globalize.parseDate = function (value, formats, culture) {\n            culture = this.findClosestCulture(culture);\n            var date, prop, patterns;\n            if (formats) {\n              if (typeof formats === \"string\") {\n                formats = [formats];\n              }\n              if (formats.length) {\n                for (var i = 0, l = formats.length; i < l; i++) {\n                  var format = formats[i];\n                  if (format) {\n                    date = parseExact(value, format, culture);\n                    if (date) {\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              patterns = culture.calendar.patterns;\n              for (prop in patterns) {\n                date = parseExact(value, patterns[prop], culture);\n                if (date) {\n                  break;\n                }\n              }\n            }\n            return date || null;\n          };\n          Globalize.parseInt = function (value, radix, cultureSelector) {\n            return truncate(Globalize.parseFloat(value, radix, cultureSelector));\n          };\n          Globalize.parseFloat = function (value, radix, cultureSelector) {\n            // radix argument is optional\n            if (typeof radix !== \"number\") {\n              cultureSelector = radix;\n              radix = 10;\n            }\n            var culture = this.findClosestCulture(cultureSelector);\n            var ret = NaN,\n              nf = culture.numberFormat;\n            if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {\n              // remove currency symbol\n              value = value.replace(culture.numberFormat.currency.symbol, \"\");\n              // replace decimal seperator\n              value = value.replace(culture.numberFormat.currency[\".\"], culture.numberFormat[\".\"]);\n            }\n\n            //Remove percentage character from number string before parsing\n            if (value.indexOf(culture.numberFormat.percent.symbol) > -1) {\n              value = value.replace(culture.numberFormat.percent.symbol, \"\");\n            }\n\n            // remove spaces: leading, trailing and between - and number. Used for negative currency pt-BR\n            value = value.replace(/ /g, \"\");\n\n            // allow infinity or hexidecimal\n            if (regexInfinity.test(value)) {\n              ret = parseFloat(value);\n            } else if (!radix && regexHex.test(value)) {\n              ret = parseInt(value, 16);\n            } else {\n              // determine sign and number\n              var signInfo = parseNegativePattern(value, nf, nf.pattern[0]),\n                sign = signInfo[0],\n                num = signInfo[1];\n\n              // #44 - try parsing as \"(n)\"\n              if (sign === \"\" && nf.pattern[0] !== \"(n)\") {\n                signInfo = parseNegativePattern(value, nf, \"(n)\");\n                sign = signInfo[0];\n                num = signInfo[1];\n              }\n\n              // try parsing as \"-n\"\n              if (sign === \"\" && nf.pattern[0] !== \"-n\") {\n                signInfo = parseNegativePattern(value, nf, \"-n\");\n                sign = signInfo[0];\n                num = signInfo[1];\n              }\n              sign = sign || \"+\";\n\n              // determine exponent and number\n              var exponent,\n                intAndFraction,\n                exponentPos = num.indexOf(\"e\");\n              if (exponentPos < 0) exponentPos = num.indexOf(\"E\");\n              if (exponentPos < 0) {\n                intAndFraction = num;\n                exponent = null;\n              } else {\n                intAndFraction = num.substr(0, exponentPos);\n                exponent = num.substr(exponentPos + 1);\n              }\n              // determine decimal position\n              var integer,\n                fraction,\n                decSep = nf[\".\"],\n                decimalPos = intAndFraction.indexOf(decSep);\n              if (decimalPos < 0) {\n                integer = intAndFraction;\n                fraction = null;\n              } else {\n                integer = intAndFraction.substr(0, decimalPos);\n                fraction = intAndFraction.substr(decimalPos + decSep.length);\n              }\n              // handle groups (e.g. 1,000,000)\n              var groupSep = nf[\",\"];\n              integer = integer.split(groupSep).join(\"\");\n              var altGroupSep = groupSep.replace(/\\u00A0/g, \" \");\n              if (groupSep !== altGroupSep) {\n                integer = integer.split(altGroupSep).join(\"\");\n              }\n              // build a natively parsable number string\n              var p = sign + integer;\n              if (fraction !== null) {\n                p += \".\" + fraction;\n              }\n              if (exponent !== null) {\n                // exponent itself may have a number patternd\n                var expSignInfo = parseNegativePattern(exponent, nf, \"-n\");\n                p += \"e\" + (expSignInfo[0] || \"+\") + expSignInfo[1];\n              }\n              if (regexParseFloat.test(p)) {\n                ret = parseFloat(p);\n              }\n            }\n            return ret;\n          };\n          Globalize.culture = function (cultureSelector) {\n            // setter\n            if (typeof cultureSelector !== \"undefined\") {\n              this.cultureSelector = cultureSelector;\n            }\n            // getter\n            return this.findClosestCulture(cultureSelector) || this.cultures[\"default\"];\n          };\n          document.Globalize = Globalize;\n        })(this);\n      })();\n\n      /***/\n    }),\n    /***/7351: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.cssroundedcorners = function (value) {\n            var cssMap = {\n              'all': 'jqx-rc-all',\n              'top': 'jqx-rc-t',\n              'bottom': 'jqx-rc-b',\n              'left': 'jqx-rc-l',\n              'right': 'jqx-rc-r',\n              'top-right': 'jqx-rc-tr',\n              'top-left': 'jqx-rc-tl',\n              'bottom-right': 'jqx-rc-br',\n              'bottom-left': 'jqx-rc-bl'\n            };\n            for (var prop in cssMap) {\n              if (!cssMap.hasOwnProperty(prop)) continue;\n              if (value == prop) return cssMap[prop];\n            }\n          };\n          $.jqx.jqxWidget(\"jqxButton\", \"\", {});\n          $.extend($.jqx._jqxButton.prototype, {\n            defineInstance: function () {\n              var settings = {\n                type: '',\n                cursor: 'arrow',\n                // rounds the button corners.\n                roundedCorners: 'all',\n                // enables / disables the button\n                disabled: false,\n                // sets height to the button.\n                height: null,\n                // sets width to the button.\n                width: null,\n                overrideTheme: false,\n                enableHover: true,\n                enableDefault: true,\n                enablePressed: true,\n                imgPosition: \"center\",\n                imgSrc: \"\",\n                imgWidth: 16,\n                imgHeight: 16,\n                value: null,\n                textPosition: \"\",\n                textImageRelation: \"overlay\",\n                rtl: false,\n                _ariaDisabled: false,\n                _scrollAreaButton: false,\n                // \"primary\", \"inverse\", \"danger\", \"info\", \"success\", \"warning\", \"link\"\n                template: \"default\",\n                aria: {\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                }\n              };\n              if (this === $.jqx._jqxButton.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            _addImage: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\" || that.element.nodeName.toLowerCase() == \"button\" || that.element.nodeName.toLowerCase() == \"div\") {\n                if (!that._img) {\n                  that.field = that.element;\n                  if (that.field.className) {\n                    that._className = that.field.className;\n                  }\n                  var properties = {\n                    'title': that.field.title\n                  };\n                  var value = null;\n                  if (that.field.getAttribute('value')) {\n                    var value = that.field.getAttribute('value');\n                  } else if (that.element.nodeName.toLowerCase() != \"input\") {\n                    var value = that.element.innerHTML;\n                  }\n                  if (that.value) {\n                    value = that.value;\n                  }\n                  if (that.field.id.length) {\n                    properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                  } else {\n                    properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                  }\n                  var wrapper = document.createElement('div');\n                  wrapper.id = properties.id;\n                  wrapper.title = properties.title;\n                  wrapper.style.cssText = that.field.style.cssText;\n                  wrapper.style.boxSizing = 'border-box';\n                  var img = document.createElement(\"img\");\n                  img.setAttribute('src', that.imgSrc);\n                  img.setAttribute('width', that.imgWidth);\n                  img.setAttribute('height', that.imgHeight);\n                  wrapper.appendChild(img);\n                  that._img = img;\n                  var text = document.createElement('span');\n                  if (value) {\n                    text.innerHTML = value;\n                    that.value = value;\n                  }\n                  wrapper.appendChild(text);\n                  that._text = text;\n                  that.field.style.display = \"none\";\n                  if (that.field.parentNode) {\n                    that.field.parentNode.insertBefore(wrapper, that.field.nextSibling);\n                  }\n                  var data = that.host.data();\n                  that.host = $(wrapper);\n                  that.host.data(data);\n                  that.element = wrapper;\n                  that.element.id = that.field.id;\n                  that.field.id = properties.id;\n                  var elementObj = new $(that.element);\n                  var fieldObj = new $(that.field);\n                  if (that._className) {\n                    elementObj.addClass(that._className);\n                    fieldObj.removeClass(that._className);\n                  }\n                  if (that.field.tabIndex) {\n                    var tabIndex = that.field.tabIndex;\n                    that.field.tabIndex = -1;\n                    that.element.tabIndex = tabIndex;\n                  }\n                } else {\n                  that._img.setAttribute('src', that.imgSrc);\n                  that._img.setAttribute('width', that.imgWidth);\n                  that._img.setAttribute('height', that.imgHeight);\n                  that._text.innerHTML = that.value;\n                }\n                if (!that.imgSrc) {\n                  that._img.style.display = \"none\";\n                } else {\n                  that._img.style.display = \"inline\";\n                }\n                if (!that.value) {\n                  that._text.style.display = \"none\";\n                } else {\n                  that._text.style.display = \"inline\";\n                }\n                that._positionTextAndImage();\n              }\n            },\n            _positionTextAndImage: function () {\n              var that = this;\n              var width = that.element.offsetWidth;\n              var height = that.element.offsetHeight;\n              var imgWidth = that.imgWidth;\n              var imgHeight = that.imgHeight;\n              if (that.imgSrc == \"\") {\n                imgWidth = 0;\n                imgHeight = 0;\n              }\n              var textWidth = that._text.offsetWidth;\n              var textHeight = that._text.offsetHeight;\n              var offset = 4;\n              var edgeOffset = 4;\n              var factorIncrease = 4;\n              var w = 0;\n              var h = 0;\n              switch (that.textImageRelation) {\n                case \"imageBeforeText\":\n                case \"textBeforeImage\":\n                  w = imgWidth + textWidth + 2 * factorIncrease + offset + 2 * edgeOffset;\n                  h = Math.max(imgHeight, textHeight) + 2 * factorIncrease + offset + 2 * edgeOffset;\n                  break;\n                case \"imageAboveText\":\n                case \"textAboveImage\":\n                  w = Math.max(imgWidth, textWidth) + 2 * factorIncrease;\n                  h = imgHeight + textHeight + offset + 2 * factorIncrease + 2 * edgeOffset;\n                  break;\n                case \"overlay\":\n                  w = Math.max(imgWidth, textWidth) + 2 * factorIncrease;\n                  h = Math.max(imgHeight, textHeight) + 2 * factorIncrease;\n                  break;\n              }\n              if (!that.width) {\n                that.element.style.width = w + \"px\";\n                width = w;\n              }\n              if (!that.height) {\n                that.element.style.height = h + \"px\";\n                height = h;\n              }\n              that._img.style.position = 'absolute';\n              that._text.style.position = 'absolute';\n              that.element.style.position = 'relative';\n              that.element.style.overflow = 'hidden';\n              var textRect = {};\n              var imageRect = {};\n              var drawElement = function (element, drawArea, pos, w, h) {\n                if (drawArea.width < w) drawArea.width = w;\n                if (drawArea.height < h) drawArea.height = h;\n                switch (pos) {\n                  case \"left\":\n                    element.style.left = drawArea.left + \"px\";\n                    element.style.top = drawArea.top + drawArea.height / 2 - h / 2 + \"px\";\n                    ;\n                    break;\n                  case \"topLeft\":\n                    element.style.left = drawArea.left + \"px\";\n                    element.style.top = drawArea.top + \"px\";\n                    break;\n                  case \"bottomLeft\":\n                    element.style.left = drawArea.left + \"px\";\n                    element.style.top = drawArea.top + drawArea.height - h + \"px\";\n                    break;\n                  default:\n                  case \"center\":\n                    element.style.left = drawArea.left + drawArea.width / 2 - w / 2 + \"px\";\n                    element.style.top = drawArea.top + drawArea.height / 2 - h / 2 + \"px\";\n                    break;\n                  case \"top\":\n                    element.style.left = drawArea.left + drawArea.width / 2 - w / 2 + \"px\";\n                    element.style.top = drawArea.top + \"px\";\n                    break;\n                  case \"bottom\":\n                    element.style.left = drawArea.left + drawArea.width / 2 - w / 2 + \"px\";\n                    element.style.top = drawArea.top + drawArea.height - h + \"px\";\n                    break;\n                  case \"right\":\n                    element.style.left = drawArea.left + drawArea.width - w + \"px\";\n                    element.style.top = drawArea.top + drawArea.height / 2 - h / 2 + \"px\";\n                    ;\n                    break;\n                  case \"topRight\":\n                    element.style.left = drawArea.left + drawArea.width - w + \"px\";\n                    element.style.top = drawArea.top + \"px\";\n                    break;\n                  case \"bottomRight\":\n                    element.style.left = drawArea.left + drawArea.width - w + \"px\";\n                    element.style.top = drawArea.top + drawArea.height - h + \"px\";\n                    break;\n                }\n              };\n              var left = 0;\n              var top = 0;\n              var right = width;\n              var bottom = height;\n              var middle = (right - left) / 2;\n              var center = (bottom - top) / 2;\n              var img = that._img;\n              var text = that._text;\n              var rectHeight = bottom - top;\n              var rectWidth = right - left;\n              left += edgeOffset;\n              top += edgeOffset;\n              right = right - edgeOffset - 2;\n              rectWidth = rectWidth - 2 * edgeOffset - 2;\n              rectHeight = rectHeight - 2 * edgeOffset - 2;\n              switch (that.textImageRelation) {\n                case \"imageBeforeText\":\n                  switch (that.imgPosition) {\n                    case \"left\":\n                    case \"topLeft\":\n                    case \"bottomLeft\":\n                      imageRect = {\n                        left: left,\n                        top: top,\n                        width: left + imgWidth,\n                        height: rectHeight\n                      };\n                      textRect = {\n                        left: left + imgWidth + offset,\n                        top: top,\n                        width: rectWidth - imgWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                    case \"center\":\n                    case \"top\":\n                    case \"bottom\":\n                      imageRect = {\n                        left: middle - textWidth / 2 - imgWidth / 2 - offset / 2,\n                        top: top,\n                        width: imgWidth,\n                        height: rectHeight\n                      };\n                      textRect = {\n                        left: imageRect.left + imgWidth + offset,\n                        top: top,\n                        width: right - imageRect.left - imgWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                    case \"right\":\n                    case \"topRight\":\n                    case \"bottomRight\":\n                      imageRect = {\n                        left: right - textWidth - imgWidth - offset,\n                        top: top,\n                        width: imgWidth,\n                        height: rectHeight\n                      };\n                      textRect = {\n                        left: imageRect.left + imgWidth + offset,\n                        top: top,\n                        width: right - imageRect.left - imgWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                  }\n                  drawElement(img, imageRect, that.imgPosition, imgWidth, imgHeight);\n                  drawElement(text, textRect, that.textPosition, textWidth, textHeight);\n                  break;\n                case \"textBeforeImage\":\n                  switch (that.textPosition) {\n                    case \"left\":\n                    case \"topLeft\":\n                    case \"bottomLeft\":\n                      textRect = {\n                        left: left,\n                        top: top,\n                        width: left + textWidth,\n                        height: rectHeight\n                      };\n                      imageRect = {\n                        left: left + textWidth + offset,\n                        top: top,\n                        width: rectWidth - textWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                    case \"center\":\n                    case \"top\":\n                    case \"bottom\":\n                      textRect = {\n                        left: middle - textWidth / 2 - imgWidth / 2 - offset / 2,\n                        top: top,\n                        width: textWidth,\n                        height: rectHeight\n                      };\n                      imageRect = {\n                        left: textRect.left + textWidth + offset,\n                        top: top,\n                        width: right - textRect.left - textWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                    case \"right\":\n                    case \"topRight\":\n                    case \"bottomRight\":\n                      textRect = {\n                        left: right - textWidth - imgWidth - offset,\n                        top: top,\n                        width: textWidth,\n                        height: rectHeight\n                      };\n                      imageRect = {\n                        left: textRect.left + textWidth + offset,\n                        top: top,\n                        width: right - textRect.left - textWidth - offset,\n                        height: rectHeight\n                      };\n                      break;\n                  }\n                  drawElement(img, imageRect, that.imgPosition, imgWidth, imgHeight);\n                  drawElement(text, textRect, that.textPosition, textWidth, textHeight);\n                  break;\n                case \"imageAboveText\":\n                  switch (that.imgPosition) {\n                    case \"topRight\":\n                    case \"top\":\n                    case \"topLeft\":\n                      imageRect = {\n                        left: left,\n                        top: top,\n                        width: rectWidth,\n                        height: imgHeight\n                      };\n                      textRect = {\n                        left: left,\n                        top: top + imgHeight + offset,\n                        width: rectWidth,\n                        height: rectHeight - imgHeight - offset\n                      };\n                      break;\n                    case \"left\":\n                    case \"center\":\n                    case \"right\":\n                      imageRect = {\n                        left: left,\n                        top: center - imgHeight / 2 - textHeight / 2 - offset / 2,\n                        width: rectWidth,\n                        height: imgHeight\n                      };\n                      textRect = {\n                        left: left,\n                        top: imageRect.top + offset + imgHeight,\n                        width: rectWidth,\n                        height: rectHeight - imageRect.top - offset - imgHeight\n                      };\n                      break;\n                    case \"bottomLeft\":\n                    case \"bottom\":\n                    case \"bottomRight\":\n                      imageRect = {\n                        left: left,\n                        top: bottom - imgHeight - textHeight - offset,\n                        width: rectWidth,\n                        height: imgHeight\n                      };\n                      textRect = {\n                        left: left,\n                        top: imageRect.top + offset + imgHeight,\n                        width: rectWidth,\n                        height: textHeight\n                      };\n                      break;\n                  }\n                  drawElement(img, imageRect, that.imgPosition, imgWidth, imgHeight);\n                  drawElement(text, textRect, that.textPosition, textWidth, textHeight);\n                  break;\n                case \"textAboveImage\":\n                  switch (that.textPosition) {\n                    case \"topRight\":\n                    case \"top\":\n                    case \"topLeft\":\n                      textRect = {\n                        left: left,\n                        top: top,\n                        width: rectWidth,\n                        height: textHeight\n                      };\n                      imageRect = {\n                        left: left,\n                        top: top + textHeight + offset,\n                        width: rectWidth,\n                        height: rectHeight - textHeight - offset\n                      };\n                      break;\n                    case \"left\":\n                    case \"center\":\n                    case \"right\":\n                      textRect = {\n                        left: left,\n                        top: center - imgHeight / 2 - textHeight / 2 - offset / 2,\n                        width: rectWidth,\n                        height: textHeight\n                      };\n                      imageRect = {\n                        left: left,\n                        top: textRect.top + offset + textHeight,\n                        width: rectWidth,\n                        height: rectHeight - textRect.top - offset - textHeight\n                      };\n                      break;\n                    case \"bottomLeft\":\n                    case \"bottom\":\n                    case \"bottomRight\":\n                      textRect = {\n                        left: left,\n                        top: bottom - imgHeight - textHeight - offset,\n                        width: rectWidth,\n                        height: textHeight\n                      };\n                      imageRect = {\n                        left: left,\n                        top: textRect.top + offset + textHeight,\n                        width: rectWidth,\n                        height: imgHeight\n                      };\n                      break;\n                  }\n                  drawElement(img, imageRect, that.imgPosition, imgWidth, imgHeight);\n                  drawElement(text, textRect, that.textPosition, textWidth, textHeight);\n                  break;\n                case \"overlay\":\n                default:\n                  textRect = {\n                    left: left,\n                    top: top,\n                    width: rectWidth,\n                    height: rectHeight\n                  };\n                  imageRect = {\n                    left: left,\n                    top: top,\n                    width: rectWidth,\n                    height: rectHeight\n                  };\n                  drawElement(img, imageRect, that.imgPosition, imgWidth, imgHeight);\n                  drawElement(text, textRect, that.textPosition, textWidth, textHeight);\n                  break;\n              }\n            },\n            createInstance: function (args) {\n              var that = this;\n              that._setSize();\n              var isMaterial = that.isMaterialized();\n              that.buttonObj = new $(that.element);\n              if (that.imgSrc != \"\" || that.textPosition != \"\" || that.element.value && that.element.value.indexOf(\"<\") >= 0 || that.value != null) {\n                that.refresh();\n                that._addImage(\"jqxButton\");\n                that.buttonObj = new $(that.element);\n              }\n              if (!that._ariaDisabled) {\n                that.element.setAttribute('role', 'button');\n              }\n              if (that.type !== '') {\n                that.element.setAttribute('type', that.type);\n              }\n              if (!that.overrideTheme) {\n                that.buttonObj.addClass(that.toThemeProperty($.jqx.cssroundedcorners(that.roundedCorners)));\n                if (that.enableDefault) {\n                  that.buttonObj.addClass(that.toThemeProperty('jqx-button'));\n                }\n                that.buttonObj.addClass(that.toThemeProperty('jqx-widget'));\n              }\n              that.isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (!that._ariaDisabled) {\n                $.jqx.aria(this);\n              }\n              if (that.cursor != 'arrow') {\n                if (!that.disabled) {\n                  that.element.style.cursor = that.cursor;\n                } else {\n                  that.element.style.cursor = \"arrow\";\n                }\n              }\n              var eventNames = 'mouseenter mouseleave mousedown focus blur';\n              if (that._scrollAreaButton) {\n                var eventNames = 'mousedown';\n              }\n              if (that.isTouchDevice) {\n                that.addHandler(that.host, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {\n                  that.isPressed = true;\n                  that.refresh();\n                });\n                that.addHandler($(document), $.jqx.mobile.getTouchEventName('touchend') + \".\" + that.element.id, function (event) {\n                  that.isPressed = false;\n                  that.refresh();\n                });\n              }\n              that.addHandler(that.host, eventNames, function (event) {\n                switch (event.type) {\n                  case 'mouseenter':\n                    if (!that.isTouchDevice) {\n                      if (!that.disabled && that.enableHover) {\n                        that.isMouseOver = true;\n                        that.refresh();\n                      }\n                    }\n                    break;\n                  case 'mouseleave':\n                    if (!that.isTouchDevice) {\n                      if (!that.disabled && that.enableHover) {\n                        that.isMouseOver = false;\n                        that.refresh();\n                      }\n                    }\n                    break;\n                  case 'mousedown':\n                    if (!that.disabled) {\n                      that.isPressed = true;\n                      that.refresh();\n                    }\n                    break;\n                  case 'focus':\n                    if (!that.disabled) {\n                      that.isFocused = true;\n                      that.refresh();\n                    }\n                    break;\n                  case 'blur':\n                    if (!that.disabled) {\n                      that.isFocused = false;\n                      that.refresh();\n                    }\n                    break;\n                }\n              });\n              that.mouseupfunc = function (event) {\n                if (!that.disabled) {\n                  if (that.isPressed || that.isMouseOver) {\n                    that.isPressed = false;\n                    that.refresh();\n                  }\n                }\n              };\n              that.addHandler(document, 'mouseup.button' + that.element.id, that.mouseupfunc);\n              try {\n                if (document.referrer != \"\" || window.frameElement) {\n                  if (window.top != null && window.top != window.that) {\n                    var parentLocation = '';\n                    if (window.parent && document.referrer) {\n                      parentLocation = document.referrer;\n                    }\n                    if (parentLocation.indexOf(document.location.host) != -1) {\n                      if (window.top.document) {\n                        window.top.document.addEventListener('mouseup', that._topDocumentMouseupHandler);\n                      }\n                    }\n                  }\n                }\n              } catch (error) {}\n              that.propertyChangeMap['roundedCorners'] = function (instance, key, oldVal, value) {\n                instance.buttonObj.removeClass(instance.toThemeProperty($.jqx.cssroundedcorners(oldVal)));\n                instance.buttonObj.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(value)));\n              };\n              that.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  instance.refresh();\n                  instance.element.setAttribute('disabled', value);\n                  instance.element.disabled = value;\n                  if (!value) {\n                    instance.element.style.cursor = instance.cursor;\n                  } else {\n                    instance.element.style.cursor = 'default';\n                  }\n                  $.jqx.aria(instance, \"aria-disabled\", instance.disabled);\n                }\n              };\n              that.propertyChangeMap['rtl'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  instance.refresh();\n                }\n              };\n              that.propertyChangeMap['template'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  instance.buttonObj.removeClass(instance.toThemeProperty(\"jqx-\" + oldVal));\n                  instance.refresh();\n                }\n              };\n              that.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {\n                instance.buttonObj.removeClass(instance.element);\n                if (oldVal) {\n                  instance.buttonObj.removeClass('jqx-button-' + oldVal);\n                  instance.buttonObj.removeClass('jqx-widget-' + oldVal);\n                  instance.buttonObj.removeClass('jqx-fill-state-normal-' + oldVal);\n                  instance.buttonObj.removeClass(instance.toThemeProperty($.jqx.cssroundedcorners(instance.roundedCorners)) + '-' + oldVal);\n                }\n                if (instance.enableDefault) {\n                  instance.buttonObj.addClass(instance.toThemeProperty('jqx-button'));\n                }\n                instance.buttonObj.addClass(instance.toThemeProperty('jqx-widget'));\n                if (!instance.overrideTheme) {\n                  instance.buttonObj.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(instance.roundedCorners)));\n                }\n                instance._oldCSSCurrent = null;\n                instance.refresh();\n              };\n              if (that.disabled) {\n                that.element.disabled = true;\n                that.element.setAttribute('disabled', 'true');\n              }\n            },\n            // createInstance\n\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._setSize();\n            },\n            val: function (value) {\n              var that = this;\n              var input = that.host.find('input');\n              if (input.length > 0) {\n                if (arguments.length == 0 || typeof value == \"object\") {\n                  return input.val();\n                }\n                input.val(value);\n                that.refresh();\n                return input.val();\n              }\n              if (arguments.length == 0 || typeof value == \"object\") {\n                if (that.element.nodeName.toLowerCase() == \"button\") {\n                  return $(that.element).text();\n                }\n                return that.element.value;\n              }\n              if (arguments.length > 0 && that._text) {\n                that._text.innerHTML = arguments[0];\n                that.refresh();\n                return;\n              } else if (arguments.length > 0 && that.element.nodeName === 'DIV') {\n                that.element.innerHTML = arguments[0];\n                that.refresh();\n              }\n              that.element.value = arguments[0];\n              if (that.element.nodeName.toLowerCase() == \"button\") {\n                $(that.element).html(arguments[0]);\n              }\n              that.refresh();\n            },\n            _setSize: function () {\n              var that = this;\n              var height = that.height;\n              var width = that.width;\n              if (height) {\n                if (!isNaN(height)) {\n                  height = height + \"px\";\n                }\n                that.element.style.height = height;\n              }\n              if (width) {\n                if (!isNaN(width)) {\n                  width = width + \"px\";\n                }\n                that.element.style.width = width;\n              }\n            },\n            _removeHandlers: function () {\n              var that = this;\n              that.removeHandler(that.host, 'selectstart');\n              that.removeHandler(that.host, 'click');\n              that.removeHandler(that.host, 'focus');\n              that.removeHandler(that.host, 'blur');\n              that.removeHandler(that.host, 'mouseenter');\n              that.removeHandler(that.host, 'mouseleave');\n              that.removeHandler(that.host, 'mousedown');\n              that.removeHandler($(document), 'mouseup.button' + that.element.id, that.mouseupfunc);\n              if (that.isTouchDevice) {\n                that.removeHandler(that.host, $.jqx.mobile.getTouchEventName('touchstart'));\n                that.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchend') + \".\" + that.element.id);\n              }\n              that.mouseupfunc = null;\n              delete that.mouseupfunc;\n            },\n            focus: function () {\n              this.host.focus();\n            },\n            destroy: function () {\n              var that = this;\n              that._removeHandlers();\n              var vars = $.data(that.element, \"jqxButton\");\n              if (vars) {\n                delete vars.instance;\n              }\n              that.host.removeClass();\n              that.host.removeData();\n              that.host.remove();\n              delete that.set;\n              delete that.get;\n              delete that.call;\n              delete that.element;\n              delete that.host;\n            },\n            render: function () {\n              this.refresh();\n            },\n            propertiesChangedHandler: function (object, oldValues, newValues) {\n              if (newValues && newValues.width && newValues.height && Object.keys(newValues).length == 2) {\n                object._setSize();\n                object.refresh();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (value == oldvalue) {\n                return;\n              }\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key === \"type\") {\n                object.element.setAttribute('type', value);\n              }\n              if (key == \"textImageRelation\" || key == \"textPosition\" || key == \"imgPosition\") {\n                if (object._img) {\n                  object._positionTextAndImage();\n                } else object._addImage(\"jqxButton\");\n              }\n              if (key == \"imgSrc\" || key == \"imgWidth\" || key == \"imgHeight\") {\n                object._addImage(\"jqxButton\");\n              }\n              if (key === \"value\") {\n                object.val(value);\n              }\n              if (key == \"width\" || key == \"height\") {\n                object._setSize();\n                object.refresh();\n              }\n            },\n            refresh: function () {\n              var that = this;\n              if (that.overrideTheme) return;\n              var cssFocused = that.toThemeProperty('jqx-fill-state-focus');\n              var cssDisabled = that.toThemeProperty('jqx-fill-state-disabled');\n              var cssNormal = that.toThemeProperty('jqx-fill-state-normal');\n              if (!that.enableDefault) {\n                cssNormal = \"\";\n              }\n              var cssHover = that.toThemeProperty('jqx-fill-state-hover');\n              var cssPressed = that.toThemeProperty('jqx-fill-state-pressed');\n              var cssPressedHover = that.toThemeProperty('jqx-fill-state-pressed');\n              if (!that.enablePressed) {\n                cssPressed = \"\";\n              }\n              var cssCurrent = '';\n              if (!that.host) {\n                return;\n              }\n              that.element.disabled = that.disabled;\n              if (that.disabled) {\n                if (that._oldCSSCurrent) {\n                  that.buttonObj.removeClass(that._oldCSSCurrent);\n                }\n                cssCurrent = cssNormal + \" \" + cssDisabled;\n                if (that.template !== \"default\" && that.template !== \"\") {\n                  cssCurrent += \" \" + \"jqx-\" + that.template;\n                  if (that.theme != \"\") {\n                    cssCurrent += \" \" + \"jqx-\" + that.template + \"-\" + that.theme;\n                  }\n                }\n                that.buttonObj.addClass(cssCurrent);\n                that._oldCSSCurrent = cssCurrent;\n                return;\n              } else {\n                if (that.isMouseOver && !that.isTouchDevice) {\n                  if (that.isPressed) cssCurrent = cssPressedHover;else cssCurrent = cssHover;\n                } else {\n                  if (that.isPressed) cssCurrent = cssPressed;else cssCurrent = cssNormal;\n                }\n              }\n              if (that.isFocused) {\n                cssCurrent += \" \" + cssFocused;\n              }\n              if (that.template !== \"default\" && that.template !== \"\") {\n                cssCurrent += \" \" + \"jqx-\" + that.template;\n                if (that.theme != \"\") {\n                  cssCurrent += \" \" + \"jqx-\" + that.template + \"-\" + that.theme;\n                }\n              }\n              if (cssCurrent != that._oldCSSCurrent) {\n                if (that._oldCSSCurrent) {\n                  that.buttonObj.removeClass(that._oldCSSCurrent);\n                }\n                that.buttonObj.addClass(cssCurrent);\n                that._oldCSSCurrent = cssCurrent;\n              }\n              if (that.rtl) {\n                that.buttonObj.addClass(that.toThemeProperty('jqx-rtl'));\n                that.element.style.direction = 'rtl';\n              }\n              if (that.isMaterialized()) {\n                that.host.addClass('buttonRipple');\n              }\n            }\n          });\n\n          //// LinkButton\n          $.jqx.jqxWidget(\"jqxLinkButton\", \"\", {});\n          $.extend($.jqx._jqxLinkButton.prototype, {\n            defineInstance: function () {\n              // enables / disables the button\n              this.disabled = false;\n              // sets height to the button.\n              this.height = null;\n              // sets width to the button.\n              this.width = null;\n              this.rtl = false;\n              this.href = null;\n            },\n            createInstance: function (args) {\n              var that = this;\n              this.host.onselectstart = function () {\n                return false;\n              };\n              this.host.attr('role', 'button');\n              var height = this.height || this.element.offsetHeight;\n              var width = this.width || this.element.offsetWidth;\n              this.href = this.element.getAttribute('href');\n              this.target = this.element.getAttribute('target');\n              this.content = this.host.text();\n              this.element.innerHTML = \"\";\n              var wrapElement = document.createElement('input');\n              wrapElement.type = \"button\";\n              wrapElement.className = \"jqx-wrapper \" + this.toThemeProperty('jqx-reset');\n              this._setSize(wrapElement, width, height);\n              wrapElement.value = this.content;\n              var helper = new $(this.element);\n              helper.addClass(this.toThemeProperty('jqx-link'));\n              this.element.style.color = 'inherit';\n              this.element.appendChild(wrapElement);\n              this._setSize(wrapElement, width, height);\n              var param = args == undefined ? {} : args[0] || {};\n              $(wrapElement).jqxButton(param);\n              this.wrapElement = wrapElement;\n              if (this.disabled) {\n                this.element.disabled = true;\n              }\n              this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                instance.element.disabled = value;\n                instance.wrapElement.jqxButton({\n                  disabled: value\n                });\n              };\n              this.addHandler($(wrapElement), 'click', function (event) {\n                if (!this.disabled) {\n                  that.onclick(event);\n                }\n                return false;\n              });\n            },\n            _setSize: function (element, width, height) {\n              var that = this;\n              if (height) {\n                if (!isNaN(height)) {\n                  height = height + \"px\";\n                }\n                element.style.height = height;\n              }\n              if (width) {\n                if (!isNaN(width)) {\n                  width = width + \"px\";\n                }\n                element.style.width = width;\n              }\n            },\n            onclick: function (event) {\n              if (this.target != null) {\n                window.open(this.href, this.target);\n              } else {\n                window.location = this.href;\n              }\n            }\n          });\n          //// End of LinkButton\n\n          //// RepeatButton\n          $.jqx.jqxWidget(\"jqxRepeatButton\", \"jqxButton\", {});\n          $.extend($.jqx._jqxRepeatButton.prototype, {\n            defineInstance: function () {\n              this.delay = 50;\n            },\n            createInstance: function (args) {\n              var that = this;\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              var up = !isTouchDevice ? 'mouseup.' + this.base.element.id : 'touchend.' + this.base.element.id;\n              var down = !isTouchDevice ? 'mousedown.' + this.base.element.id : 'touchstart.' + this.base.element.id;\n              this.addHandler($(document), up, function (event) {\n                if (that.timeout != null) {\n                  clearTimeout(that.timeout);\n                  that.timeout = null;\n                  that.refresh();\n                }\n                if (that.timer != undefined) {\n                  clearInterval(that.timer);\n                  that.timer = null;\n                  that.refresh();\n                }\n              });\n              this.addHandler(this.base.host, down, function (event) {\n                if (that.timer != null) {\n                  clearInterval(that.timer);\n                }\n                that.timeout = setTimeout(function () {\n                  clearInterval(that.timer);\n                  that.timer = setInterval(function (event) {\n                    that.ontimer(event);\n                  }, that.delay);\n                }, 150);\n              });\n              this.mousemovefunc = function (event) {\n                if (!isTouchDevice) {\n                  if (event.which == 0) {\n                    if (that.timer != null) {\n                      clearInterval(that.timer);\n                      that.timer = null;\n                    }\n                  }\n                }\n              };\n              this.addHandler(this.base.host, 'mousemove', this.mousemovefunc);\n            },\n            destroy: function () {\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              var up = !isTouchDevice ? 'mouseup.' + this.base.element.id : 'touchend.' + this.base.element.id;\n              var down = !isTouchDevice ? 'mousedown.' + this.base.element.id : 'touchstart.' + this.base.element.id;\n              this.removeHandler(this.base.host, 'mousemove', this.mousemovefunc);\n              this.removeHandler(this.base.host, down);\n              this.removeHandler($(document), up);\n              this.timer = null;\n              delete this.mousemovefunc;\n              delete this.timer;\n              var vars = $.data(this.base.element, \"jqxRepeatButton\");\n              if (vars) {\n                delete vars.instance;\n              }\n              $(this.base.element).removeData();\n              this.base.destroy();\n              delete this.base;\n            },\n            stop: function () {\n              clearInterval(this.timer);\n              this.timer = null;\n            },\n            ontimer: function (event) {\n              var event = new $.Event('click');\n              if (this.base != null && this.base.host != null) {\n                this.base.host.trigger(event);\n              }\n            }\n          });\n          //// End of RepeatButton\n          //// ToggleButton\n          $.jqx.jqxWidget(\"jqxToggleButton\", \"jqxButton\", {});\n          $.extend($.jqx._jqxToggleButton.prototype, {\n            defineInstance: function () {\n              this.toggled = false;\n              this.uiToggle = true;\n              this.aria = {\n                \"aria-checked\": {\n                  name: \"toggled\",\n                  type: \"boolean\"\n                },\n                \"aria-disabled\": {\n                  name: \"disabled\",\n                  type: \"boolean\"\n                }\n              };\n            },\n            createInstance: function (args) {\n              var that = this;\n              that.base.overrideTheme = true;\n              that.isTouchDevice = $.jqx.mobile.isTouchDevice();\n              $.jqx.aria(this);\n              that.propertyChangeMap['roundedCorners'] = function (instance, key, oldVal, value) {\n                instance.base.buttonObj.removeClass(instance.toThemeProperty($.jqx.cssroundedcorners(oldVal)));\n                instance.base.buttonObj.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(value)));\n              };\n              that.propertyChangeMap['toggled'] = function (instance, key, oldVal, value) {\n                instance.refresh();\n              };\n              that.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                instance.base.disabled = value;\n                instance.refresh();\n              };\n              that.addHandler(that.base.host, 'click', function (event) {\n                if (!that.base.disabled && that.uiToggle) {\n                  that.toggle();\n                }\n              });\n              if (!that.isTouchDevice) {\n                that.addHandler(that.base.host, 'mouseenter', function (event) {\n                  if (!that.base.disabled) {\n                    that.refresh();\n                  }\n                });\n                that.addHandler(that.base.host, 'mouseleave', function (event) {\n                  if (!that.base.disabled) {\n                    that.refresh();\n                  }\n                });\n              }\n              that.addHandler(that.base.host, 'mousedown', function (event) {\n                if (!that.base.disabled) {\n                  that.refresh();\n                }\n              });\n              that.addHandler($(document), 'mouseup.togglebutton' + that.base.element.id, function (event) {\n                if (!that.base.disabled) {\n                  that.refresh();\n                }\n              });\n            },\n            destroy: function () {\n              this._removeHandlers();\n              this.base.destroy();\n            },\n            _removeHandlers: function () {\n              this.removeHandler(this.base.host, 'click');\n              this.removeHandler(this.base.host, 'mouseenter');\n              this.removeHandler(this.base.host, 'mouseleave');\n              this.removeHandler(this.base.host, 'mousedown');\n              this.removeHandler($(document), 'mouseup.togglebutton' + this.base.element.id);\n            },\n            toggle: function () {\n              this.toggled = !this.toggled;\n              this.refresh();\n              $.jqx.aria(this, \"aria-checked\", this.toggled);\n            },\n            unCheck: function () {\n              this.toggled = false;\n              this.refresh();\n            },\n            check: function () {\n              this.toggled = true;\n              this.refresh();\n            },\n            refresh: function () {\n              var that = this;\n              var cssDisabled = that.base.toThemeProperty('jqx-fill-state-disabled');\n              var cssNormal = that.base.toThemeProperty('jqx-fill-state-normal');\n              if (!that.base.enableDefault) {\n                cssNormal = \"\";\n              }\n              var cssHover = that.base.toThemeProperty('jqx-fill-state-hover');\n              var cssPressed = that.base.toThemeProperty('jqx-fill-state-pressed');\n              var cssPressedHover = that.base.toThemeProperty('jqx-fill-state-pressed');\n              var cssCurrent = '';\n              that.base.element.disabled = that.base.disabled;\n              if (that.base.disabled) {\n                cssCurrent = cssNormal + \" \" + cssDisabled;\n                that.base.buttonObj.addClass(cssCurrent);\n                return;\n              } else {\n                if (that.base.isMouseOver && !that.isTouchDevice) {\n                  if (that.base.isPressed || that.toggled) cssCurrent = cssPressedHover;else cssCurrent = cssHover;\n                } else {\n                  if (that.base.isPressed || that.toggled) cssCurrent = cssPressed;else cssCurrent = cssNormal;\n                }\n              }\n              if (that.base.template !== \"default\" && that.base.template !== \"\") {\n                cssCurrent += \" \" + \"jqx-\" + that.base.template;\n                if (that.base.theme != \"\") {\n                  cssCurrent += \" \" + \"jqx-\" + that.template + \"-\" + that.base.theme;\n                }\n              }\n              if (that.base.buttonObj.hasClass(cssDisabled) && cssDisabled != cssCurrent) {\n                that.base.buttonObj.removeClass(cssDisabled);\n              }\n              if (that.base.buttonObj.hasClass(cssNormal) && cssNormal != cssCurrent) {\n                that.base.buttonObj.removeClass(cssNormal);\n              }\n              if (that.base.buttonObj.hasClass(cssHover) && cssHover != cssCurrent) {\n                that.base.buttonObj.removeClass(cssHover);\n              }\n              if (that.base.buttonObj.hasClass(cssPressed) && cssPressed != cssCurrent) {\n                that.base.buttonObj.removeClass(cssPressed);\n              }\n              if (that.base.buttonObj.hasClass(cssPressedHover) && cssPressedHover != cssCurrent) {\n                that.base.buttonObj.removeClass(cssPressedHover);\n              }\n              if (!that.base.buttonObj.hasClass(cssCurrent)) {\n                that.base.buttonObj.addClass(cssCurrent);\n              }\n            },\n            _topDocumentMouseupHandler: function (event) {\n              var that = this;\n              that.isPressed = false;\n              that.refresh();\n            }\n          });\n          //// End of ToggleButton\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/5725: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxCalendar\", \"\", {});\n          $.extend($.jqx._jqxCalendar.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // enables or disables the Calendar control.\n                disabled: false,\n                // restricted dates\n                restrictedDates: new Array(),\n                // not available in this version.\n                multipleMonthRows: 1,\n                // not available in this version.\n                multipleMonthColumns: 1,\n                // Specifies the Calendar's minimum navigation date.\n                minDate: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                // Specifies the Calendar's maximum navigation date.\n                maxDate: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                min: new Date(1900, 0, 1),\n                max: new Date(2100, 0, 1),\n                navigationDelay: 400,\n                // Type: Number\n                // Default: 1\n                // Gets or sets the navigation step.\n                stepMonths: 1,\n                // Number of months to step back/forward\n\n                // Type: Number\n                // Default: null\n                // Gets or sets the Calendar's width.\n                width: null,\n                // Type: height\n                // Default: null\n                // Gets or sets the Calendar's height.\n                height: null,\n                // Type: $.jqx._jqxDateTimeInput.getDateTime\n                // Default:  $.jqx._jqxDateTimeInput.getDateTime(new Date()), (Today)\n                // Gets or sets the Calendar's value.\n                value: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                // Type: Number.\n                // Default: 0\n                // Gets or sets the first day of the week - Sunday : 0, Monday : 1, Tuesday : 2, Wednesday : 3, Thursday : 4, Friday : 5, Saturday : 6.\n                firstDayOfWeek: 0,\n                // Type: Boolean.\n                // Default: false.\n                // Shows or hides the week numbers.\n                showWeekNumbers: false,\n                // Type: Boolean.\n                // Default: true.\n                // Shows or hides the Day Names.\n                showDayNames: true,\n                // Type: Boolean\n                // Default: false\n                // Enables or disables the weekend highlight option.\n                enableWeekend: false,\n                // Type: Boolean\n                // Default: true\n                // Enables or disables the other month highlight.\n                enableOtherMonthDays: true,\n                // Type: Boolean\n                // Default: true\n                // Shows or hides the other month days.\n                showOtherMonthDays: true,\n                // Gets or sets the row header's width.\n                // Type: Number.\n                rowHeaderWidth: 25,\n                // Default: 20\n                // Gets or sets the column header's height.\n                // Type: Number.\n                columnHeaderHeight: 25,\n                // Default: 28\n                // Gets or sets the title's height.\n                // Type: Number.\n                titleHeight: 30,\n                // Type: String.\n                // Gets or sets the string format of the day names.\n                // Possible values: default, shortest, firstTwoLetters, firstLetter, full\n                dayNameFormat: 'firstTwoLetters',\n                monthNameFormat: 'default',\n                // Type: string.\n                // Represents the title format displayed between the navigation arrow.\n                titleFormat: [\"MMMM yyyy\", \"yyyy\", \"yyyy\", \"yyyy\"],\n                enableViews: true,\n                // Type: Boolean.\n                // Default: false\n                // Gets or sets the readonly state. In this state the user can navigate through the months, but is not allowed to select.\n                readOnly: false,\n                //Type: string\n                //Default: 'default'\n                //Gets or sets the calendar's culture.\n                culture: \"default\",\n                // Type: Boolean\n                // Default: true.\n                // Enables or disables the fast navigation when the user holds the mouse pressed over a navigation arrow.\n                enableFastNavigation: true,\n                // Type: Boolean\n                // Default: true\n                // Enables or disables the hover state.\n                enableHover: true,\n                // Type: Boolean\n                // Default: true\n                // When this property is true, click on other month date will automatically navigate to the previous or next month.\n                enableAutoNavigation: true,\n                // Type: Boolean\n                // Default: false\n                // enables or disabled the calendar tooltips.\n                enableTooltips: false,\n                // Type: String\n                // Back Button Text.\n                backText: \"Back\",\n                // Type: String\n                // Forward Button Text.\n                forwardText: \"Forward\",\n                // Type: Array\n                // Represents a collection of special calendar days.\n                specialDates: new Array(),\n                keyboardNavigation: true,\n                // Selects a range of dates.\n                selectionMode: 'default',\n                selectableDays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                todayString: 'Today',\n                clearString: 'Clear',\n                showFooter: false,\n                selection: {\n                  from: null,\n                  to: null\n                },\n                canRender: true,\n                _checkForHiddenParent: true,\n                //Type: Number.\n                //Default: 0.\n                //Sets height of the calendar in pixels.\n                height: null,\n                rtl: false,\n                // month, year, decade\n                view: 'month',\n                views: ['month', 'year', 'decade'],\n                changing: null,\n                change: null,\n                localization: {\n                  backString: \"Back\",\n                  forwardString: \"Forward\",\n                  todayString: \"Today\",\n                  clearString: \"Clear\",\n                  calendar: {\n                    name: \"Gregorian_USEnglish\",\n                    \"/\": \"/\",\n                    // separator of parts of a time (e.g. \":\" in 05:44 PM)\n                    \":\": \":\",\n                    // the first day of the week (0 : Sunday, 1 : Monday, etc)\n                    firstDay: 0,\n                    days: {\n                      // full day names\n                      names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                      // abbreviated day names\n                      namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                      // shortest day names\n                      namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                      // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                      names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                      // abbreviated month names\n                      namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n                    },\n                    // AM and PM designators in one of these forms:\n                    // The usual view, and the upper and lower case versions\n                    //      [standard,lowercase,uppercase]\n                    // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n                    //      null\n                    AM: [\"AM\", \"am\", \"AM\"],\n                    PM: [\"PM\", \"pm\", \"PM\"],\n                    eras: [\n                    // eras in reverse chronological order.\n                    // name: the name of the era in this culture (e.g. A.D., C.E.)\n                    // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                    // offset: offset in years from gregorian calendar\n                    {\n                      \"name\": \"A.D.\",\n                      \"start\": null,\n                      \"offset\": 0\n                    }],\n                    twoDigitYearMax: 2029,\n                    patterns: {\n                      // short date pattern\n                      d: \"M/d/yyyy\",\n                      // long date pattern\n                      D: \"dddd, MMMM dd, yyyy\",\n                      // short time pattern\n                      t: \"h:mm tt\",\n                      // long time pattern\n                      T: \"h:mm:ss tt\",\n                      // long date, short time pattern\n                      f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                      // long date, long time pattern\n                      F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                      // month/day pattern\n                      M: \"MMMM dd\",\n                      // month/year pattern\n                      Y: \"yyyy MMMM\",\n                      // S is a sortable format that does not vary by culture\n                      S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                      // formatting of dates in MySQL DataBases\n                      ISO: \"yyyy-MM-dd hh:mm:ss\"\n                    }\n                  }\n                },\n                // Calendar events.\n                events: [\n                // occurs when the back button is clicked.\n                'backButtonClick',\n                // occurs when the forward button is clicked.\n                'nextButtonClick',\n                // occurs when the value is changed.\n                'valuechanged',\n                // occurs when the user clicks a cell.\n                'cellMouseDown',\n                // occurs when the user clicks a cell but is still holding the mouse key pressed.\n                'cellMouseUp',\n                // occurs when the user selects a cell.\n                'cellSelected',\n                // occurs when a cell is unselected. For example: user selects a cell and then selects another cell. The first selected cell is unselected.\n                'cellUnselected',\n                // occurs when the date is changed.\n                'change',\n                // occurs when the view is changed.\n                'viewChange']\n              };\n              if (this === $.jqx._jqxCalendar.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              this.minDate._setYear(1900);\n              this.minDate._setMonth(1);\n              this.minDate._setDay(1);\n              this.minDate._setHours(0);\n              this.minDate._setMinutes(0);\n              this.minDate._setSeconds(0);\n              this.minDate._setMilliseconds(0);\n              this.maxDate._setYear(2100);\n              this.maxDate._setMonth(1);\n              this.maxDate._setDay(1);\n              this.maxDate._setHours(0);\n              this.maxDate._setMinutes(0);\n              this.maxDate._setSeconds(0);\n              this.maxDate._setMilliseconds(0);\n              this.value._setHours(0);\n              this.value._setMinutes(0);\n              this.value._setSeconds(0);\n              this.value._setMilliseconds(0);\n              return settings;\n            },\n            _createFromInput: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.value) {\n                  properties.value = that.field.value;\n                }\n                if (that.field.checked) {\n                  properties.checked = true;\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                }\n                if (that.field.getAttribute('min')) {\n                  var min = new Date(that.field.getAttribute('min'));\n                  if (min != \"Invalid Date\") that.min = min;\n                }\n                if (that.field.getAttribute('max')) {\n                  var max = new Date(that.field.getAttribute('max'));\n                  if (max != \"Invalid Date\") that.max = max;\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width();\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight();\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n            },\n            createInstance: function (args) {\n              var that = this;\n              that._createFromInput(\"jqxCalendar\");\n              if (that.isMaterialized()) {\n                var elementStyle = window.getComputedStyle(this.element);\n                var titleHeight = elementStyle.getPropertyValue('--jqx-calendar-title-height');\n                var columnHeaderHeight = elementStyle.getPropertyValue('--jqx-calendar-column-header-height');\n                if (titleHeight) {\n                  this.titleHeight = parseInt(titleHeight);\n                }\n                if (columnHeaderHeight) {\n                  this.columnHeaderHeight = parseInt(columnHeaderHeight);\n                }\n                if (this.theme === 'fluent') {\n                  this.navigationDelay = 0;\n                }\n                setTimeout(function () {\n                  that.refreshControl();\n                }, 200);\n              }\n              this.setCalendarSize();\n              if (this.element.id === \"\") {\n                this.element.id = $.jqx.utilities.createId();\n              }\n              if ($.type(this.value) == \"date\") {\n                this.value = $.jqx._jqxDateTimeInput.getDateTime(this.value);\n              }\n              this.element.innerHTML = \"\";\n              this.host.attr('data-role', 'calendar');\n              var id = this.element.id;\n              var me = this;\n              this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {\n                me.setCalendarSize();\n              };\n              this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {\n                me.setCalendarSize();\n              };\n              if ($.global) {\n                $.global.preferCulture(this.culture);\n              }\n              if (this.culture != 'default') {\n                if ($.global) {\n                  $.global.preferCulture(this.culture);\n                  this.localization.calendar = $.global.culture.calendar;\n                } else if (window.Globalize) {\n                  var culture = window.Globalize.culture(this.culture);\n                  this.localization.calendar = culture.calendar;\n                }\n                this.firstDayOfWeek = this.localization.calendar.firstDay;\n              }\n              if (this.localization.backString != \"Back\") {\n                this.backText = this.localization.backString;\n              }\n              if (this.localization.forwardString != \"Forward\") {\n                this.forwardText = this.localization.forwardString;\n              }\n              if (this.localization.todayString != \"Today\" && this.localization.todayString) {\n                this.todayString = this.localization.todayString;\n              }\n              if (this.localization.clearString != \"Clear\" && this.localization.clearString) {\n                this.clearString = this.localization.clearString;\n              }\n              if (this.localization.calendar && this.localization.calendar.firstDay != undefined && this.culture != \"default\") {\n                this.firstDayOfWeek = this.localization.calendar.firstDay;\n              }\n              this.setMaxDate(this.max, false);\n              this.setMinDate(this.min, false);\n              if (!this.host.attr('tabIndex')) {\n                this.host.attr('tabIndex', 0);\n              }\n              this.host.css('outline', 'none');\n              this.host.addClass(this.toThemeProperty(\"jqx-calendar\"));\n              this.host.addClass(this.toThemeProperty(\"jqx-widget\"));\n              this.host.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n              this.host.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n              this._addInput();\n              if (this.views.indexOf('month') == -1) this.view = \"year\";\n              if (this.views.indexOf('year') == -1 && this.views.indexOf('month') == -1) this.view = \"decade\";\n              this.addHandler(this.host, 'keydown', function (event) {\n                var result = true;\n                if (me.keyboardNavigation) {\n                  if (me._handleKey != undefined) {\n                    result = me._handleKey(event);\n                    if (!result) {\n                      if (event.stopPropagation) event.stopPropagation();\n                      if (event.preventDefault) event.preventDefault();\n                    }\n                  }\n                }\n                return result;\n              });\n              var loaded = false;\n              var myCalendar = this;\n              var percentageSize = false;\n              if (me.width != null && me.width.toString().indexOf(\"%\") != -1) {\n                percentageSize = true;\n              }\n              if (me.height != null && me.height.toString().indexOf(\"%\") != -1) {\n                percentageSize = true;\n              }\n              $.jqx.utilities.resize(this.host, function () {\n                var month = myCalendar.host.find(\"#View\" + me.element.id);\n                if (!loaded) {\n                  loaded = true;\n                  myCalendar.render();\n                } else myCalendar.refreshTitle(month);\n                if (percentageSize) {\n                  if (me.refreshTimer) {\n                    clearTimeout(me.refreshTimer);\n                  }\n                  me.refreshTimer = setTimeout(function () {\n                    me.refreshControl();\n                  }, 1);\n                }\n              }, false, this._checkForHiddenParent);\n              var calendarID = 'View';\n              this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (value) {\n                  instance.host.addClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                } else {\n                  instance.host.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                }\n                me.refreshControl();\n              };\n            },\n            _addInput: function () {\n              var name = this.host.attr('name');\n              this.input = $(\"<input type='hidden'/>\");\n              this.host.append(this.input);\n              if (name) {\n                this.input.attr('name', name);\n              }\n              this.input.val(this.getDate().toString());\n            },\n            setCalendarSize: function () {\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.host.width(this.width);\n              }\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.host.css('width', this.width);\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.host.height(this.height);\n              }\n              ;\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.host.css('height', this.height);\n              }\n            },\n            _getYearAndMonthPart: function (date) {\n              if (!date) {\n                return new Date(1900, 0, 1);\n              }\n              var newDate = new Date(date.getFullYear(), date.getMonth(), 1);\n              return newDate;\n            },\n            _handleKey: function (event) {\n              if (this.readOnly) return true;\n              var key = event.keyCode;\n              var me = this;\n              var selectedDate = this._getSelectedDate();\n              if (selectedDate == undefined) {\n                if (this.view == \"month\" && (key == 37 || key == 38 || key == 39 || key == 40)) {\n                  this.selectedDate = new Date(this.value.year, this.value.month - 1, 1);\n                  this._selectDate(this.selectedDate, 'key');\n                  selectedDate = this.selectedDate;\n                } else {\n                  return true;\n                }\n              }\n              if (event.altKey) {\n                return true;\n              }\n              if (this._animating) return false;\n              if (this.view != \"month\" && key == 13) {\n                var cell = this._getSelectedCell();\n                this._setDateAndSwitchViews(cell, event, \"keyboard\");\n              }\n              if (this.view == \"year\") {\n                var month = selectedDate.getMonth();\n                var minDate = this._getYearAndMonthPart(this.getMinDate());\n                var maxDate = this._getYearAndMonthPart(this.getMaxDate());\n                switch (key) {\n                  case 37:\n                    // previous\n                    if (month == 0) {\n                      var newDate = new Date(selectedDate.getFullYear() - 1, 11, 1);\n                      if (newDate >= minDate) {\n                        this.selectedDate = newDate;\n                        this.navigateBackward();\n                      } else if (this.selectedDate != minDate) {\n                        this.selectedDate = minDate;\n                        this.navigateBackward();\n                      }\n                    } else {\n                      var newDate = new Date(selectedDate.getFullYear(), month - 1, 1);\n                      if (newDate >= minDate) {\n                        this._selectDate(newDate, 'key');\n                      }\n                    }\n                    return false;\n                  case 38:\n                    var newDate = new Date(selectedDate.getFullYear(), month - 4, 1);\n                    if (newDate < minDate) {\n                      newDate = minDate;\n                    }\n                    if (month - 4 < 0) {\n                      this.selectedDate = newDate;\n                      this.navigateBackward();\n                    } else {\n                      this._selectDate(newDate, 'key');\n                    }\n                    return false;\n                  case 40:\n                    // down\n                    var newDate = new Date(selectedDate.getFullYear(), month + 4, 1);\n                    if (newDate > maxDate) {\n                      newDate = maxDate;\n                    }\n                    if (month + 4 > 11) {\n                      this.selectedDate = newDate;\n                      this.navigateForward();\n                    } else {\n                      this._selectDate(newDate, 'key');\n                    }\n                    return false;\n                  case 39:\n                    if (month == 11) {\n                      var newDate = new Date(selectedDate.getFullYear() + 1, 0, 1);\n                      if (newDate <= maxDate) {\n                        this.selectedDate = newDate;\n                        this.navigateForward();\n                      } else {\n                        if (this.selectedDate != maxDate) {\n                          this.selectedDate = maxDate;\n                          this.navigateForward();\n                        }\n                      }\n                    } else {\n                      var newDate = new Date(selectedDate.getFullYear(), month + 1, 1);\n                      if (newDate <= maxDate) {\n                        this._selectDate(newDate, 'key');\n                      }\n                    }\n                    // next\n                    return false;\n                }\n                return true;\n              }\n              if (this.view == \"decade\") {\n                var startYear = this._renderStartDate.getFullYear();\n                var endYear = this._renderEndDate.getFullYear();\n                var fullYear = selectedDate.getFullYear();\n                var minYear = this.getMinDate().getFullYear();\n                var maxYear = this.getMaxDate().getFullYear();\n                switch (key) {\n                  case 37:\n                    // previous\n                    if (fullYear - 1 >= minYear) {\n                      if (fullYear <= startYear) {\n                        this.selectedDate = new Date(fullYear - 1, selectedDate.getMonth(), 1);\n                        this.navigateBackward();\n                      } else {\n                        this._selectDate(new Date(fullYear - 1, selectedDate.getMonth(), 1), 'key');\n                      }\n                    }\n                    return false;\n                  case 38:\n                    // up\n                    var newYear = fullYear - 4;\n                    if (fullYear - 4 < minYear) newYear = minYear;\n                    if (newYear < startYear) {\n                      this.selectedDate = new Date(newYear, selectedDate.getMonth(), 1);\n                      this.navigateBackward();\n                    } else {\n                      this._selectDate(new Date(newYear, selectedDate.getMonth(), 1), 'key');\n                    }\n                    return false;\n                  case 40:\n                    // down\n                    var newYear = fullYear + 4;\n                    if (newYear > maxYear) newYear = maxYear;\n                    if (newYear > endYear) {\n                      this.selectedDate = new Date(newYear, selectedDate.getMonth(), 1);\n                      this.navigateForward();\n                    } else {\n                      this._selectDate(new Date(newYear, selectedDate.getMonth(), 1), 'key');\n                    }\n                    return false;\n                  case 39:\n                    // next\n                    if (fullYear + 1 <= maxYear) {\n                      if (fullYear == endYear) {\n                        this.selectedDate = new Date(fullYear + 1, selectedDate.getMonth(), 1);\n                        this.navigateForward();\n                      } else {\n                        this._selectDate(new Date(fullYear + 1, selectedDate.getMonth(), 1), 'key');\n                      }\n                    }\n                    return false;\n                }\n                return true;\n              }\n              var date = new $.jqx._jqxDateTimeInput.getDateTime(selectedDate);\n              var start = this.getViewStart();\n              var end = this.getViewEnd();\n              var oldDate = date;\n              var monthInstance = $.data(this.element, \"View\" + this.element.id);\n              if (monthInstance == undefined || monthInstance == null) return true;\n              if (key == 36) {\n                date._setDay(1);\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                return false;\n              }\n              if (key == 35) {\n                var maxDays = this.value._daysInMonth(this.value.year, this.value.month);\n                date._setDay(maxDays);\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                return false;\n              }\n              var step = 1;\n              if (event.ctrlKey) step = 12;\n              if (key == 34) {\n                var res = this.navigateForward(step);\n                if (res) {\n                  date._addMonths(step);\n                  if (this._isDisabled(date.dateTime)) {\n                    return false;\n                  }\n                  this._selectDate(date.dateTime, 'key');\n                }\n                return false;\n              }\n              if (key == 33) {\n                var res = this.navigateBackward(step);\n                if (res) {\n                  date._addMonths(-step);\n                  if (this._isDisabled(date.dateTime)) {\n                    return false;\n                  }\n                  this._selectDate(date.dateTime, 'key');\n                }\n                return false;\n              }\n              if (key == 38) {\n                date._addDays(-7);\n                if (date.dateTime < this.getMinDate()) return false;\n                if (date.dateTime < start) {\n                  var res = this.navigateBackward();\n                  if (!res) return false;\n                }\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                for (var i = 0; i < monthInstance.cells.length; i++) {\n                  var cell = monthInstance.cells[i];\n                  var cellDate = cell.getDate();\n                  if (cell.isOtherMonth && cell.isSelected && cellDate <= date.dateTime) {\n                    this.value.day = cellDate.getDate();\n                    this.navigateBackward();\n                    this._selectDate(date.dateTime, 'key');\n                    break;\n                  }\n                }\n                return false;\n              } else if (key == 40) {\n                date._addDays(7);\n                if (date.dateTime > this.getMaxDate()) return false;\n                if (date.dateTime > end) {\n                  var res = this.navigateForward();\n                  if (!res) return false;\n                }\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                for (var i = 0; i < monthInstance.cells.length; i++) {\n                  var cell = monthInstance.cells[i];\n                  var cellDate = cell.getDate();\n                  if (cell.isOtherMonth && cell.isSelected && cellDate >= date.dateTime) {\n                    this.value.day = cellDate.getDate();\n                    this.navigateForward();\n                    this._selectDate(date.dateTime, 'key');\n                    break;\n                  }\n                }\n                return false;\n              }\n              if (key == 37) {\n                date._addDays(-1);\n                if (date.dateTime < this.getMinDate()) {\n                  return false;\n                }\n                if (date.dateTime < start) {\n                  var res = this.navigateBackward();\n                  if (!res) return false;\n                }\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                for (var i = 0; i < monthInstance.cells.length; i++) {\n                  var cell = monthInstance.cells[i];\n                  var cellDate = cell.getDate();\n                  if (cell.isOtherMonth && cell.isSelected && cellDate <= date.dateTime) {\n                    if (date.dateTime < this.getMinDate() || date.dateTime > this.getMaxDate()) {\n                      return false;\n                    }\n                    if (this._isDisabled(date.dateTime)) {\n                      return false;\n                    }\n                    this.navigateBackward();\n                    this._selectDate(date.dateTime, 'key');\n                    break;\n                  }\n                }\n                return false;\n              } else if (key == 39) {\n                date._addDays(1);\n                if (date.dateTime > this.getMaxDate()) {\n                  return false;\n                }\n                if (date.dateTime > end) {\n                  var res = this.navigateForward();\n                  if (!res) return false;\n                }\n                if (this._isDisabled(date.dateTime)) {\n                  return false;\n                }\n                this._selectDate(date.dateTime, 'key');\n                for (var i = 0; i < monthInstance.cells.length; i++) {\n                  var cell = monthInstance.cells[i];\n                  var cellDate = cell.getDate();\n                  if (cell.isOtherMonth && cell.isSelected && cellDate >= date.dateTime) {\n                    if (date.dateTime < this.getMinDate() || date.dateTime > this.getMaxDate()) {\n                      return false;\n                    }\n                    this.navigateForward();\n                    this._selectDate(date.dateTime, 'key');\n                    break;\n                  }\n                }\n                return false;\n              }\n              return true;\n            },\n            render: function () {\n              if (!this.canRender) return;\n              this.host.children().remove();\n              var month = this._renderSingleCalendar(\"View\" + this.element.id);\n              var me = this;\n              this.host.append(month);\n            },\n            // adds a special date to the calendar.\n            // @param - Date.\n            // @param - css class name(optional).\n            // @param - string for the special date's tooltip(optional).\n            addSpecialDate: function (date, className, tooltipContent) {\n              if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) {\n                var specialDatesLength = this.specialDates.length;\n                this.specialDates[specialDatesLength] = {\n                  Date: date,\n                  Class: className,\n                  Tooltip: tooltipContent\n                };\n                this.refreshControl();\n              }\n            },\n            refresh: function (initialRefresh) {\n              var that = this;\n              this.render();\n              setTimeout(function () {\n                that.refreshControl();\n              });\n            },\n            invalidate: function () {\n              this.refreshControl();\n            },\n            refreshControl: function () {\n              if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) {\n                this.refreshSingleCalendar(\"View\" + this.element.id, null);\n              }\n            },\n            // gets the view's start date.\n            getViewStart: function () {\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              return firstDay.dateTime;\n            },\n            // gets the view's end date.\n            getViewEnd: function () {\n              var start = this.getViewStart();\n              var end = new $.jqx._jqxDateTimeInput.getDateTime(start);\n              end._addDays(41);\n              return end.dateTime;\n            },\n            refreshSingleCalendar: function (calendarID, parent) {\n              if (!this.canRender) return;\n              var month = this.host.find(\"#\" + calendarID);\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              this.refreshCalendarCells(month, firstDay, calendarID);\n              this.refreshTitle(month);\n              this.refreshRowHeader(month, calendarID);\n              if (this.selectedDate != undefined) {\n                this._selectDate(this.selectedDate);\n              }\n              var topPadding = parseInt(this.month.css('padding-top'));\n              var h = this.host.height() - 2 * topPadding;\n              var contentHeight = h - this.titleHeight - this.columnHeaderHeight;\n              if (!this.showDayNames) {\n                contentHeight = this.month.height() - this.titleHeight;\n              }\n              if (this.showFooter) {\n                contentHeight -= 20;\n              }\n              var cellsTableElement = month.find(\"#cellsTable\" + calendarID);\n              var rowHeaderElement = month.find(\"#calendarRowHeader\" + calendarID);\n              cellsTableElement.height(contentHeight);\n              rowHeaderElement.height(contentHeight);\n            },\n            refreshRowHeader: function (month, calendarID) {\n              if (!this.showWeekNumbers) return;\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              var dayOfWeek = firstDay.dayOfWeek;\n              var weekOfYear = this.getWeekOfYear(firstDay);\n              var newDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(firstDay.dateTime));\n              newDate._addDays(5);\n              newDate.dayOfWeek = newDate.dateTime.getDay();\n              var newWeekOfYear = this.getWeekOfYear(newDate);\n              var rowHeader = this.rowHeader.find('table');\n              rowHeader.width(this.rowHeaderWidth);\n              //   month.find(\"#calendarRowHeader\" + month[0].id).append(rowHeader);\n              var currentDate = firstDay;\n              var rowHeaderCells = new Array();\n              for (var i = 0; i < 6; i++) {\n                var weekString = weekOfYear.toString();\n                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);\n                var cellID = i + 1 + this.element.id;\n                var cellElement = $(rowHeader[0].rows[i].cells[0]);\n                cell.element = cellElement;\n                cell.row = i;\n                cell.column = 0;\n                var cellContent = cellElement.find(\"#headerCellContent\" + cellID);\n                cellContent.addClass(this.toThemeProperty('jqx-calendar-row-cell'));\n                cellContent[0].innerHTML = weekOfYear;\n                rowHeaderCells[i] = cell;\n                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addWeeks(1)));\n                weekOfYear = this.getWeekOfYear(currentDate);\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              monthInstance.rowCells = rowHeaderCells;\n              this._refreshOtherMonthRows(monthInstance, calendarID);\n            },\n            _refreshOtherMonthRows: function (month, calendarID) {\n              if (this.showOtherMonthDays) return;\n              this._displayLastRow(true, calendarID);\n              this._displayFirstRow(true, calendarID);\n              var canDisplayFirstRow = false;\n              var canDisplayLastRow = false;\n              for (var i = 0; i < month.cells.length; i++) {\n                var cell = month.cells[i];\n                if (cell.isVisible && i < 7) {\n                  canDisplayFirstRow = true;\n                } else if (cell.isVisible && i >= month.cells.length - 7) {\n                  canDisplayLastRow = true;\n                }\n              }\n              if (!canDisplayFirstRow) {\n                this._displayFirstRow(false, calendarID);\n              }\n              if (!canDisplayLastRow) {\n                this._displayLastRow(false, calendarID);\n              }\n            },\n            _displayLastRow: function (show, calendarID) {\n              var month = this.host.find(\"#\" + calendarID);\n              var calendarRowHeader = month.find(\"#calendarRowHeader\" + month[0].id).find('table');\n              var lastRow = null;\n              if (this.showWeekNumbers) {\n                if (calendarRowHeader[0].cells) {\n                  var lastRow = $(calendarRowHeader[0].rows[5]);\n                }\n              }\n              var lastMonthRow = $(month.find(\"#cellTable\" + month[0].id)[0].rows[5]);\n              if (show) {\n                if (this.showWeekNumbers && lastRow) {\n                  lastRow.css('display', 'table-row');\n                }\n                lastMonthRow.css('display', 'table-row');\n              } else {\n                if (this.showWeekNumbers && lastRow) {\n                  lastRow.css('display', 'none');\n                }\n                lastMonthRow.css('display', 'none');\n              }\n            },\n            _displayFirstRow: function (show, calendarID) {\n              var month = this.host.find(\"#\" + calendarID);\n              var calendarRowHeader = month.find(\"#calendarRowHeader\" + month[0].id).find('table');\n              var firstRow = null;\n              if (this.showWeekNumbers) {\n                if (calendarRowHeader[0].cells) {\n                  var firstRow = $(calendarRowHeader[0].rows[0]);\n                }\n              }\n              var firstMonthRow = $(month.find(\"#cellTable\" + month[0].id)[0].rows[0]);\n              if (show) {\n                if (this.showWeekNumbers && firstRow) {\n                  firstRow.css('display', 'table-row');\n                }\n                firstMonthRow.css('display', 'table-row');\n              } else {\n                if (this.showWeekNumbers && firstRow) {\n                  firstRow.css('display', 'none');\n                }\n                firstMonthRow.css('display', 'none');\n              }\n            },\n            _renderSingleCalendar: function (calendarID, parent) {\n              if (!this.canRender) return;\n              var oldMonthElement = this.host.find(\"#\" + calendarID.toString());\n              if (oldMonthElement != null) {\n                oldMonthElement.remove();\n              }\n              var month = $(\"<div id='\" + calendarID.toString() + \"'></div>\");\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              var endDay = new $.jqx._jqxDateTimeInput.getDateTime(firstDay.dateTime);\n              endDay._addMonths(1);\n              var monthInstance = $.jqx._jqxCalendar.monthView(firstDay, endDay, null, null, null, month);\n              if (parent == undefined || parent == null) {\n                this.host.append(month);\n                month[0].style.width = \"100%\";\n                month[0].style.height = \"100%\";\n              } else parent.append(month);\n              $.data(this.element, calendarID, monthInstance);\n              var topPadding = parseInt(month.css('padding-top'));\n              var h = this.host.height() - 2 * topPadding;\n              var contentHeight = h - this.titleHeight - this.columnHeaderHeight;\n              if (!this.showDayNames) {\n                contentHeight = h - this.titleHeight;\n              }\n              if (this.showFooter) {\n                contentHeight -= 20;\n              }\n              if (this.rowHeaderWidth < 0) this.rowHeaderWidth = 0;\n              if (this.columnHeaderHeight < 0) this.columnHeaderHeight = 0;\n              if (this.titleHeight < 0) this.titleHeight = 0;\n              var rowHeaderWidth = this.rowHeaderWidth;\n              var columnHeaderHeight = this.columnHeaderHeight;\n              if (!this.showWeekNumbers) {\n                rowHeaderWidth = 0;\n              }\n              if (!this.showDayNames) {\n                columnHeaderHeight = 0;\n              }\n              var title = \"<div style='height:\" + this.titleHeight + \"px;'><table role='grid' style='margin: 0px; width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'><tr role='row' id='calendarTitle' width='100%'>\" + \"<td role='gridcell' NOWRAP id='leftNavigationArrow'></td>\" + \"<td aria-live='assertive' aria-atomic='true' role='gridcell' align='center' NOWRAP id='calendarTitleHeader'></td>\" + \"<td role='gridcell' NOWRAP id='rightNavigationArrow'></td>\" + \"</tr></table></div>\";\n              var monthStructure = \"<table role='grid' class='\" + this.toThemeProperty('jqx-calendar-month') + \"' style='margin: 0px; border-spacing: 0px;' cellspacing='0' cellpadding='0'>\" + \"<tr role='row' id='calendarHeader' height='\" + columnHeaderHeight + \"'>\" + \"<td role='gridcell' id='selectCell' width='\" + rowHeaderWidth + \"'></td>\" + \"<td role='gridcell' colspan='2' style='border: none; padding-left: 2px; padding-right: 2px' id='calendarColumnHeader'></td>\" + \"</tr>\" + \"<tr role='row' id='calendarContent'>\" + \"<td role='gridcell' id='calendarRowHeader' valign='top' height='\" + contentHeight + \"' width='\" + rowHeaderWidth + \"'></td>\" + \"<td role='gridcell' valign='top' colspan='2' style='padding-left: 2px; padding-right: 2px' id='cellsTable' height='\" + contentHeight + \"'></td>\" + \"</tr>\" + \"</table>\";\n              var footer = \"<div id='footer' style='margin: 0px; display: none; height:\" + footerHeight + \"px;'><table style='width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'>\" + \"<tr id='calendarFooter'>\" + \"<td align='right' id='todayButton'></td>\" + \"<td align='left' colspan='2' id=doneButton></td>\" + \"</tr>\" + \"</table></div>\";\n              month[0].innerHTML = title + monthStructure + footer;\n              this.header = month.find('#calendarHeader');\n              this.header[0].id = 'calendarHeader' + calendarID;\n              this.header.addClass(this.toThemeProperty('calendar-header'));\n              this.columnHeader = month.find('#calendarColumnHeader');\n              this.columnHeader[0].id = 'calendarColumnHeader' + calendarID;\n              this.table = month.find('#cellsTable');\n              this.table[0].id = 'cellsTable' + calendarID;\n              this.rowHeader = month.find('#calendarRowHeader');\n              this.rowHeader[0].id = 'calendarRowHeader' + calendarID;\n              this.selectCell = month.find('#selectCell');\n              this.selectCell[0].id = 'selectCell' + calendarID;\n              this.title = month.find('#calendarTitle');\n              this.title[0].id = 'calendarTitle' + calendarID;\n              this.leftButton = month.find('#leftNavigationArrow');\n              this.leftButton[0].id = 'leftNavigationArrow' + calendarID;\n              this.titleHeader = month.find('#calendarTitleHeader');\n              this.titleHeader[0].id = 'calendarTitleHeader' + calendarID;\n              this.rightButton = month.find('#rightNavigationArrow');\n              this.rightButton[0].id = 'rightNavigationArrow' + calendarID;\n              this.footer = month.find('#calendarFooter');\n              this._footer = month.find('#footer');\n              this._footer[0].id = 'footer' + calendarID;\n              this.footer[0].id = 'calendarFooter' + calendarID;\n              this.todayButton = month.find('#todayButton');\n              this.todayButton[0].id = 'todayButton' + calendarID;\n              this.doneButton = month.find('#doneButton');\n              this.doneButton[0].id = 'doneButton' + calendarID;\n              this.title.addClass(this.toThemeProperty('jqx-calendar-title-container'));\n              var footerHeight = 20;\n              if (this.showFooter) {\n                this._footer.css('display', 'block');\n              }\n\n              //  month.find('td').css({ padding: 0, margin: 0, border: 'none' });\n              month.find('tr').addClass(this.toThemeProperty('jqx-reset'));\n              month.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n              month.addClass(this.toThemeProperty(\"jqx-calendar-month-container\"));\n              this.month = month;\n              this.selectCell.addClass(this.toThemeProperty('jqx-reset'));\n              this.selectCell.addClass(this.toThemeProperty('jqx-calendar-top-left-header'));\n              if (this.showWeekNumbers) {\n                this._renderRowHeader(month);\n              } else {\n                this.table[0].colSpan = 3;\n                this.columnHeader[0].colSpan = 3;\n                this.rowHeader.css('display', 'none');\n                this.selectCell.css('display', 'none');\n              }\n              if (this.showFooter) {\n                this.footer.height(20);\n                var todayLink = $(\"<a href='javascript:;'>\" + this.todayString + \"</a>\");\n                todayLink.appendTo(this.todayButton);\n                var clearLink = $(\"<a href='javascript:;'>\" + this.clearString + \"</a>\");\n                clearLink.appendTo(this.doneButton);\n                clearLink.addClass(this.toThemeProperty('jqx-calendar-footer'));\n                todayLink.addClass(this.toThemeProperty('jqx-calendar-footer'));\n                var self = this;\n                var eventName = \"mousedown\";\n                if ($.jqx.mobile.isTouchDevice()) {\n                  eventName = $.jqx.mobile.getTouchEventName('touchstart');\n                }\n                this.addHandler(todayLink, eventName, function () {\n                  if (self.today) {\n                    self.today();\n                  } else {\n                    self.setDate(new Date(), 'mouse');\n                  }\n                  return false;\n                });\n                this.addHandler(clearLink, eventName, function () {\n                  if (self.clear) {\n                    self.clear();\n                  } else {\n                    self.setDate(null, 'mouse');\n                  }\n                  return false;\n                });\n              }\n              if (this.view != \"month\") {\n                this.header.hide();\n              }\n              if (this.showDayNames && this.view == \"month\") {\n                this.renderColumnHeader(month);\n              }\n              this.oldView = this.view;\n              this.renderCalendarCells(month, firstDay, calendarID);\n              if (parent == undefined || parent == null) {\n                this.renderTitle(month);\n              }\n              this._refreshOtherMonthRows(monthInstance, calendarID);\n              month.find('tbody').css({\n                border: 'none',\n                background: 'transparent'\n              });\n              if (this.selectedDate != undefined) {\n                this._selectDate(this.selectedDate);\n              }\n              var me = this;\n              this.addHandler(this.host, 'focus', function () {\n                me.focus();\n              });\n              return month;\n            },\n            _getTitleFormat: function () {\n              switch (this.view) {\n                case 'month':\n                  return this.titleFormat[0];\n                case 'year':\n                  return this.titleFormat[1];\n                case 'decade':\n                  return this.titleFormat[2];\n                case 'centuries':\n                  return this.titleFormat[3];\n              }\n            },\n            renderTitle: function (month) {\n              var leftArrow = $(\"<div role='button' style='float: left;'></div>\");\n              var rightArrow = $(\"<div role='button' style='float: right;'></div>\");\n              var titleElement = this.title;\n              titleElement.addClass(this.toThemeProperty(\"jqx-reset\"));\n              titleElement.addClass(this.toThemeProperty(\"jqx-widget-header\"));\n              titleElement.addClass(this.toThemeProperty(\"jqx-calendar-title-header\"));\n              var titleCells = titleElement.find('td');\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                if (titleCells.css('background-color') != 'transparent') {\n                  var bgColor = titleElement.css('background-color');\n                  titleCells.css('background-color', bgColor);\n                }\n                if (titleCells.css('background-image') != 'transparent') {\n                  var bgImage = titleElement.css('background-image');\n                  var bgRepeat = titleElement.css('background-repeat');\n                  var bgPosition = titleElement.css('background-position');\n                  titleCells.css('background-image', bgImage);\n                  titleCells.css('background-repeat', bgRepeat);\n                  titleCells.css('background-position', 'left center scroll');\n                }\n              } else {\n                titleCells.css('background-color', 'transparent');\n              }\n              if (this.disabled) {\n                titleElement.addClass(this.toThemeProperty(\"jqx-calendar-title-header-disabled\"));\n              }\n              leftArrow.addClass(this.toThemeProperty(\"jqx-calendar-title-navigation\"));\n              leftArrow.addClass(this.toThemeProperty(\"jqx-icon-arrow-left\"));\n              leftArrow.appendTo(this.leftButton);\n              var leftArrowElement = this.leftButton;\n              rightArrow.addClass(this.toThemeProperty(\"jqx-calendar-title-navigation\"));\n              rightArrow.addClass(this.toThemeProperty(\"jqx-icon-arrow-right\"));\n              rightArrow.appendTo(this.rightButton);\n              var rightArrowElement = this.rightButton;\n              if (this.enableTooltips) {\n                if ($(leftArrowElement).jqxTooltip) {\n                  $(leftArrowElement).jqxTooltip({\n                    name: this.element.id,\n                    position: 'mouse',\n                    theme: this.theme,\n                    content: this.backText\n                  });\n                  $(rightArrowElement).jqxTooltip({\n                    name: this.element.id,\n                    position: 'mouse',\n                    theme: this.theme,\n                    content: this.forwardText\n                  });\n                }\n              }\n              var titleHeader = this.titleHeader;\n              var title = this._format(this.value.dateTime, this._getTitleFormat(), this.culture);\n              if (this.view == \"decade\") {\n                var startText = this._format(this._renderStartDate, this._getTitleFormat(), this.culture);\n                var endText = this._format(this._renderEndDate, this._getTitleFormat(), this.culture);\n                title = startText + \" - \" + endText;\n              } else if (this.view == \"centuries\") {\n                var startText = this._format(this._renderCenturyStartDate, this._getTitleFormat(), this.culture);\n                var endText = this._format(this._renderCenturyEndDate, this._getTitleFormat(), this.culture);\n                title = startText + \" - \" + endText;\n              }\n              var titleContent = $(\"<div style='background: transparent; margin: 0; padding: 0; border: none;'>\" + title + \"</div>\");\n              titleHeader.append(titleContent);\n              titleContent.addClass(this.toThemeProperty('jqx-calendar-title-content'));\n              var arrowWidth = parseInt(leftArrow.width());\n              var headerWidth = month.width() - 2 * arrowWidth;\n              var newContent = titleHeader.find(\".jqx-calendar-title-content\").width(headerWidth);\n              $.data(leftArrow, 'navigateLeft', this);\n              $.data(rightArrow, 'navigateRight', this);\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (!this.disabled) {\n                var me = this;\n                this.addHandler(titleHeader, 'mousedown', function (event) {\n                  if (me.enableViews) {\n                    if (!me._viewAnimating && !me._animating) {\n                      var oldView = me.view;\n                      me.oldView = oldView;\n                      switch (me.view) {\n                        case 'month':\n                          me.view = \"year\";\n                          break;\n                        case 'year':\n                          me.view = \"decade\";\n                          break;\n                      }\n                      if (me.views.indexOf(\"year\") == -1 && me.view == \"year\") {\n                        me.view = \"decade\";\n                      }\n                      if (me.views.indexOf(\"decade\") == -1 && me.view == \"decade\") {\n                        me.view = oldView;\n                      }\n                      if (oldView != me.view) {\n                        var calendarID = \"View\" + me.element.id;\n                        var month = me.host.find(\"#\" + calendarID);\n                        var visibleDate = me.getVisibleDate();\n                        var firstDay = me.getFirstDayOfWeek(visibleDate);\n                        me.renderCalendarCells(month, firstDay, calendarID, true);\n                        me.refreshTitle(month);\n                        me._raiseEvent('8');\n                      }\n                    }\n                    return false;\n                  }\n                });\n                this.addHandler(leftArrow, 'mousedown', function (event) {\n                  if (!me._animating) {\n                    $.data(leftArrow, 'navigateLeftRepeat', true);\n                    var element = $.data(leftArrow, 'navigateLeft');\n                    if (element.enableFastNavigation && !isTouchDevice) {\n                      element.startRepeat(element, leftArrow, true, me.navigationDelay + 200);\n                    }\n                    element.navigateBackward(me.stepMonths, 'arrow');\n                    event.stopPropagation();\n                    event.preventDefault();\n                    return element._raiseEvent(0, event);\n                  } else return false;\n                });\n                this.addHandler(leftArrow, 'mouseup', function (event) {\n                  $.data(leftArrow, 'navigateLeftRepeat', false);\n                });\n                this.addHandler(leftArrow, 'mouseleave', function (event) {\n                  $.data(leftArrow, 'navigateLeftRepeat', false);\n                });\n                this.addHandler(rightArrow, 'mousedown', function (event) {\n                  if (!me._animating) {\n                    $.data(rightArrow, 'navigateRightRepeat', true);\n                    var element = $.data(rightArrow, 'navigateRight');\n                    if (element.enableFastNavigation && !isTouchDevice) {\n                      element.startRepeat(element, rightArrow, false, me.navigationDelay + 200);\n                    }\n                    element.navigateForward(me.stepMonths, 'arrow');\n                    event.stopPropagation();\n                    event.preventDefault();\n                    return element._raiseEvent(1, event);\n                  } else return false;\n                });\n                this.addHandler(rightArrow, 'mouseup', function (event) {\n                  $.data(rightArrow, 'navigateRightRepeat', false);\n                });\n                this.addHandler(rightArrow, 'mouseleave', function (event) {\n                  $.data(rightArrow, 'navigateRightRepeat', false);\n                });\n              }\n            },\n            refreshTitle: function (month) {\n              var title = this._format(this.value.dateTime, this._getTitleFormat(), this.culture);\n              if (this.view == \"decade\") {\n                var startText = this._format(this._renderStartDate, this._getTitleFormat(), this.culture);\n                var endText = this._format(this._renderEndDate, this._getTitleFormat(), this.culture);\n                title = startText + \" - \" + endText;\n              } else if (this.view == \"centuries\") {\n                var startText = this._format(this._renderCenturyStartDate, this._getTitleFormat(), this.culture);\n                var endText = this._format(this._renderCenturyEndDate, this._getTitleFormat(), this.culture);\n                title = startText + \" - \" + endText;\n              }\n              var titleHeader = this.titleHeader;\n              if (this.titleHeader) {\n                var oldContent = titleHeader.find(\".jqx-calendar-title-content\");\n                var titleContent = $(\"<div style='background: transparent; margin: 0; padding: 0; border: none;'>\" + title + \"</div>\");\n                titleHeader.append(titleContent);\n                titleContent.addClass(this.toThemeProperty('jqx-calendar-title-content'));\n                if (oldContent != null) {\n                  oldContent.remove();\n                }\n              }\n            },\n            startRepeat: function (element, navigationElement, isLeft, timeout) {\n              var timeoutobj = window.setTimeout(function () {\n                var value = $.data(navigationElement, 'navigateLeftRepeat');\n                if (!isLeft) {\n                  value = $.data(navigationElement, 'navigateRightRepeat');\n                }\n                if (value) {\n                  if (timeout < 25) timeout = 25;\n                  if (isLeft) {\n                    element.navigateBackward(1, 'arrow');\n                    element.startRepeat(element, navigationElement, true, timeout);\n                  } else {\n                    element.navigateForward(1, 'arrow');\n                    timeoutobj = element.startRepeat(element, navigationElement, false, timeout);\n                  }\n                } else {\n                  window.clearTimeout(timeoutobj);\n                  return;\n                }\n              }, timeout);\n            },\n            // navigates (n) month(s) forward.\n            // @param - Date\n            navigateForward: function (step, type) {\n              if (step == undefined || step == null) {\n                step = this.stepMonths;\n              }\n              var year = this.value.year;\n              if (this.view == 'decade') {\n                year = this._renderStartDate.getFullYear() + 12;\n                if (this._renderEndDate.getFullYear() >= this.getMaxDate().getFullYear()) return;\n              } else if (this.view == \"year\") {\n                year = this.value.year + 1;\n              } else if (this.view == \"centuries\") {\n                year = this.value.year + 100;\n              }\n              if (this.view != \"month\") {\n                var maxYear = this.getMaxDate().getFullYear();\n                if (maxYear < year || year > maxYear) {\n                  year = maxYear;\n                }\n                if (this.value.year == year) {\n                  if (this.view === \"decade\") {\n                    if (this.value.year > this._renderEndDate.getFullYear()) {\n                      this.value.year = year;\n                      this.value.month = 1;\n                      this.value.day = 1;\n                    } else {\n                      return;\n                    }\n                  } else {\n                    return;\n                  }\n                }\n                this.value.year = year;\n                this.value.month = 1;\n                this.value.day = 1;\n              }\n              var day = this.value.day;\n              var month = this.value.month;\n              if (month + step <= 12) {\n                var maxDays = this.value._daysInMonth(this.value.year, this.value.month + step);\n                if (day > maxDays) day = maxDays;\n              }\n              if (this.view == \"month\") {\n                var date = new Date(this.value.year, this.value.month - 1 + step, day);\n                if (type == 'arrow' && this.selectableDays.length == 7 && this.selectionMode != \"range\") {\n                  this.selectedDate = new Date(this.value.year, this.value.month - 1 + step, 1);\n                }\n              } else {\n                var date = new Date(this.value.year, this.value.month - 1, day);\n              }\n              return this.navigateTo(date);\n            },\n            // navigates (n) month(s) back.\n            // @param - Number\n            navigateBackward: function (step, type) {\n              if (step == undefined || step == null) {\n                step = this.stepMonths;\n              }\n              var year = this.value.year;\n              if (this.view == 'decade') {\n                year = this._renderStartDate.getFullYear() - 12;\n              } else if (this.view == \"year\") {\n                year = this.value.year - 1;\n              } else if (this.view == \"centuries\") {\n                year = this.value.year - 100;\n              }\n              if (this.view != \"month\") {\n                var minYear = this.getMinDate().getFullYear();\n                if (year < minYear) year = minYear;\n                if (this.view == \"decade\") {\n                  if (this._renderStartDate) {\n                    if (this._renderStartDate.getFullYear() == year) {\n                      return;\n                    }\n                  }\n                }\n\n                // if (this.value.year == year) return;\n                this.value.year = year;\n                this.value.month = 1;\n                this.value.day = 1;\n              }\n              var day = this.value.day;\n              var month = this.value.month;\n              if (month - step >= 1) {\n                var maxDays = this.value._daysInMonth(this.value.year, this.value.month - step);\n                if (day > maxDays) day = maxDays;\n              }\n              if (this.view == 'month') {\n                var date = new Date(this.value.year, this.value.month - 1 - step, day);\n                if (type == 'arrow' && this.selectableDays.length == 7 && this.selectionMode != \"range\") {\n                  this.selectedDate = new Date(this.value.year, this.value.month - 1 - step, 1);\n                }\n              } else {\n                var date = new Date(this.value.year, this.value.month - 1, day);\n              }\n              return this.navigateTo(date);\n            },\n            _isRestrictedRange: function (from, to) {\n              if (from > to) return true;\n              var curr = from;\n              while (curr.valueOf() <= to.valueOf()) {\n                if (this._isRestrictedDate(curr)) return true;\n                curr.setDate(curr.getDate() + 1);\n              }\n              return false;\n            },\n            _hasUnrestrictedRanges: function (from, to) {\n              if (from > to) return false;\n              var curr = from;\n              while (curr.valueOf() <= to.valueOf()) {\n                if (!this._isRestrictedDate(curr)) return true;\n                curr.setDate(curr.getDate() + 1);\n              }\n              return false;\n            },\n            _getNextUnrestrictedDay: function (from, to) {\n              if (from > to) return null;\n              var curr = from;\n              while (curr.valueOf() <= to.valueOf()) {\n                if (!this._isRestrictedDate(curr)) return curr;\n                curr.setDate(curr.getDate() + 1);\n              }\n              return null;\n            },\n            _isRestrictedDate: function (date) {\n              var self = this;\n              if (!$.isArray(self.restrictedDates)) return false;\n              for (var i = 0; i < self.restrictedDates.length; i++) {\n                var dateCompare = self.restrictedDates[i];\n                if (typeof dateCompare == 'object' && dateCompare.from != undefined && dateCompare.to != undefined) {\n                  var dateCompareFrom = dateCompare.from;\n                  var dateCompareTo = dateCompare.to;\n                  if (date.valueOf() >= dateCompareFrom.valueOf() && date.valueOf() <= dateCompareTo.valueOf()) {\n                    return true;\n                  }\n                } else {\n                  if (dateCompare.getMonth() == date.getMonth() && dateCompare.getDate() == date.getDate() && dateCompare.getFullYear() == date.getFullYear()) {\n                    return true;\n                  }\n                }\n              }\n              return false;\n            },\n            _isDisabled: function (date) {\n              var dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n              var day = date.getDay();\n              var name = dayNames[day];\n              if (this.selectableDays.indexOf(name) == -1) return true;\n              if (this._isRestrictedDate(date)) return true;\n              return false;\n            },\n            refreshCalendarCells: function (month, firstDay, calendarID) {\n              if (this.view == \"year\" || this.view == \"decade\" || this.view == 'centuries') {\n                this.refreshViews(month, firstDay, calendarID);\n                return;\n              }\n              var tableElement = this.table;\n              var cellsTable = tableElement.find(\"#\" + 'cellTable' + calendarID.toString());\n              var currentDate = firstDay;\n              var cells = new Array();\n              var k = 0;\n              var today = new $.jqx._jqxDateTimeInput.getDateTime(new Date());\n              for (var i = 0; i < 6; i++) {\n                for (var j = 0; j < 7; j++) {\n                  var cellRowID = i + 1;\n                  var r = j;\n                  if (this.rtl) r = 6 - r;\n                  var cellColumnID = r + 1;\n                  var cellID = \"#cell\" + cellRowID + cellColumnID + this.element.id;\n                  var date = new Date(currentDate.dateTime.getFullYear(), currentDate.dateTime.getMonth(), currentDate.dateTime.getDate());\n                  var cell = new $.jqx._jqxCalendar.cell(date);\n                  var cellElement = $(cellsTable[0].rows[i].cells[cellColumnID - 1]);\n                  cellElement[0].id = cellID.substring(1);\n                  cell.element = cellElement;\n                  cell.row = i;\n                  cell.column = j;\n                  cell.isVisible = true;\n                  cell.isOtherMonth = false;\n                  cell.isToday = false;\n                  cell.isWeekend = false;\n                  cell.isHighlighted = false;\n                  cell.isSelected = false;\n                  if (currentDate.month != this.value.month) {\n                    cell.isOtherMonth = true;\n                    cell.isVisible = this.showOtherMonthDays;\n                  }\n                  if (this._isRestrictedDate(date)) {\n                    cell.isRestricted = true;\n                    cell.isDisabled = true;\n                  }\n                  if (!cell.isDisabled) {\n                    if (date < this.getMinDate() || date > this.getMaxDate() || this._isDisabled(date)) {\n                      cell.isDisabled = true;\n                    }\n                  }\n                  if (currentDate.month == today.month && currentDate.day == today.day && currentDate.year == today.year) {\n                    cell.isToday = true;\n                  }\n                  if (currentDate.isWeekend()) {\n                    cell.isWeekend = true;\n                  }\n                  $.data(this.element, \"cellContent\" + cellID.substring(1), cell);\n                  $.data(this.element, cellID.substring(1), cell);\n                  cells[k] = cell;\n                  k++;\n                  $.jqx.utilities.html(cellElement, currentDate.day);\n                  this._applyCellStyle(cell, cellElement, cellElement);\n                  currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));\n                }\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              if (monthInstance != undefined && monthInstance != null) {\n                monthInstance.cells = cells;\n              }\n              this.renderedCells = cells;\n              this._refreshOtherMonthRows(monthInstance, calendarID);\n            },\n            _getDecadeAndCenturiesData: function () {\n              var renderYears = new Array();\n              var renderDates = new Array();\n              var length = this.getMaxDate().getFullYear() - this.getMinDate().getFullYear();\n              if (length < 12) length = 12;\n              var minDate = this.getMinDate();\n              var maxDate = this.getMaxDate();\n              var currentYear = this.value.dateTime.getFullYear();\n              if (this.view == \"decade\") {\n                if (currentYear + 12 > maxDate.getFullYear()) {\n                  currentYear = maxDate.getFullYear() - 11;\n                }\n                if (currentYear < minDate.getFullYear()) {\n                  currentYear = minDate.getFullYear();\n                }\n                for (var i = 0; i < length; i++) {\n                  var date = new Date(minDate.getFullYear() + i, 0, 1);\n                  if (minDate.getFullYear() <= currentYear && currentYear <= date.getFullYear()) {\n                    var renderStartDate = new Date(date.getFullYear(), date.getMonth(), 1);\n                    for (var j = 0; j < 12; j++) {\n                      var newDate = new Date(renderStartDate.getFullYear() + j, this.value.dateTime.getMonth(), this.value.dateTime.getDate());\n                      var year = newDate.getFullYear();\n                      if (minDate.getFullYear() <= year && year <= maxDate.getFullYear()) {\n                        renderYears.push(year);\n                        renderDates.push(newDate);\n                        if (j == 0) {\n                          this._renderStartDate = newDate;\n                        }\n                        this._renderEndDate = newDate;\n                      } else {\n                        renderYears.push(year);\n                        renderDates.push(newDate);\n                      }\n                    }\n                    break;\n                  }\n                }\n              } else if (this.view == \"centuries\") {\n                for (var i = 0; i < length; i += 120) {\n                  var date = new Date(minDate.getFullYear() + i + 120, 0, 1);\n                  if (minDate.getFullYear() <= currentYear && currentYear <= date.getFullYear()) {\n                    var renderStartDate = new Date(date.getFullYear() - 130, date.getMonth(), 1);\n                    if (renderStartDate < minDate) {\n                      renderStartDate = minDate;\n                    }\n                    for (var j = 0; j < 12; j++) {\n                      var centuriesDate = new Date(renderStartDate.getFullYear() + j * 10, renderStartDate.getMonth(), 1);\n                      if (renderStartDate.getFullYear() >= minDate.getFullYear() && centuriesDate.getFullYear() <= maxDate.getFullYear()) {\n                        renderYears.push(\"<span style='visibility: hidden;'>-</span>\" + centuriesDate.getFullYear() + \"-\" + (centuriesDate.getFullYear() + 9));\n                        renderDates.push(centuriesDate);\n                        if (j == 0) {\n                          this._renderCenturyStartDate = centuriesDate;\n                        }\n                        this._renderCenturyEndDate = new Date(centuriesDate.getFullYear() + 9, 0, 1);\n                      }\n                    }\n                    break;\n                  }\n                }\n              }\n              return {\n                years: renderYears,\n                dates: renderDates\n              };\n            },\n            refreshViews: function (month, firstDay, calendarID) {\n              var me = this;\n              var cells = new Array();\n              var cellsTable = month.find('#cellTable' + calendarID.toString());\n              var data = this._getDecadeAndCenturiesData();\n              var renderYears = data.years;\n              var renderDates = data.dates;\n              var k = 0;\n              var minDate = this.getMinDate();\n              var maxDate = this.getMaxDate();\n              for (var i = 0; i < 3; i++) {\n                for (var j = 0; j < 4; j++) {\n                  var cellRowID = i + 1;\n                  var r = j;\n                  if (this.rtl) r = 3 - r;\n                  var cellColumnID = r + 1;\n                  var date = new Date(this.value.dateTime);\n                  date.setDate(1);\n                  date.setMonth(i * 4 + r);\n                  var cell = new $.jqx._jqxCalendar.cell(date);\n                  var row = cellsTable[0].rows[\"row\" + (1 + i) + this.element.id];\n                  var cellElement = $(row.cells[j]);\n                  cell.isSelected = false;\n                  cell.isVisible = true;\n                  cell.element = cellElement;\n                  cell.row = i;\n                  cell.column = j;\n                  cell.index = cells.length;\n                  var text = \"\";\n                  if (this.view == \"year\") {\n                    var monthNames = this.localization.calendar.months.names;\n                    var monthString = monthNames[i * 4 + r];\n\n                    // Possible values: default, shortest, firstTwoLetters, firstLetter, full\n                    switch (this.monthNameFormat) {\n                      case 'default':\n                        monthString = this.localization.calendar.months.namesAbbr[i * 4 + r];\n                        break;\n                      case 'shortest':\n                        monthString = this.localization.calendar.months.namesShort[i * 4 + r];\n                        break;\n                      case 'firstTwoLetters':\n                        monthString = monthString.substring(0, 2);\n                        break;\n                      case 'firstLetter':\n                        monthString = monthString.substring(0, 1);\n                        break;\n                    }\n                    text = monthString;\n                  } else if (this.view == \"decade\" || this.view == \"centuries\") {\n                    text = renderYears[i * 4 + r];\n                    if (undefined == text) {\n                      text = \"<span style='cursor: default; visibility: hidden;'>2013</span>\";\n                    }\n                    cell.setDate(renderDates[i * 4 + r]);\n                  }\n                  var date = cell.getDate();\n                  if (this.view == \"year\") {\n                    if (date.getMonth() == this.getDate().getMonth() && date.getFullYear() == this.getDate().getFullYear()) {\n                      cell.isSelected = true;\n                    }\n                  } else {\n                    if (date.getFullYear() == this.getDate().getFullYear()) {\n                      cell.isSelected = true;\n                    }\n                  }\n                  if (this.view == \"year\") {\n                    if (this._getYearAndMonthPart(date) < this._getYearAndMonthPart(minDate)) cell.isDisabled = true;\n                    if (this._getYearAndMonthPart(date) > this._getYearAndMonthPart(maxDate)) cell.isDisabled = true;\n                  } else {\n                    if (date.getFullYear() < minDate.getFullYear()) cell.isDisabled = true;\n                    if (date.getFullYear() > maxDate.getFullYear()) cell.isDisabled = true;\n                  }\n                  $.jqx.utilities.html(cellElement, text);\n                  cells[k] = cell;\n                  k++;\n                }\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              if (monthInstance != undefined && monthInstance != null) {\n                monthInstance.cells = cells;\n              }\n              this.renderedCells = cells;\n              this._applyCellStyles();\n            },\n            _createViewClone: function () {\n              var table = this.host.find('.jqx-calendar-month');\n              var viewClone = table.clone();\n              viewClone.css('position', 'absolute');\n              viewClone.css('top', table.position().top);\n              viewClone.width(this.month.width());\n              return viewClone;\n            },\n            _addCellsTable: function (tableElement, cellsTable) {\n              var me = this;\n              //            cellsTable.find('table').css({ background: 'none', padding: 0, margin: 0, border: 0 });\n              //            cellsTable.find('td').css({ padding: 1, margin: 0 });\n              //            cellsTable.find('tr').css({ background: 'none', padding: 0, margin: 0, border: 0 });\n\n              var footerHeight = this.showFooter ? 20 : 0;\n              if (this.view != \"month\") {\n                if (this.views.indexOf('month') === -1) {\n                  cellsTable.height(this.host.height() - this.titleHeight);\n                } else {\n                  cellsTable.height(this.month.height() - this.titleHeight);\n                }\n              } else {\n                cellsTable.height(this.month.height() - this.titleHeight - this.columnHeaderHeight - footerHeight);\n              }\n              this._viewAnimating = true;\n              var container = this.host.find('.jqx-calendar-month-container');\n              container.css('position', 'relative');\n              var table = this.host.find('.jqx-calendar-month');\n              var viewClone = this._createViewClone();\n              container.append(viewClone);\n              if (this.view != \"month\") {\n                this.header.fadeOut(0);\n                if (this.showWeekNumbers) {\n                  this.rowHeader.fadeOut(0);\n                }\n                if (this.showFooter) {\n                  this._footer.fadeOut(0);\n                }\n              } else {\n                this.header.fadeIn(this.navigationDelay + 200);\n                if (this.showWeekNumbers) {\n                  this.rowHeader.fadeIn(this.navigationDelay + 200);\n                }\n                if (this.showFooter) {\n                  this._footer.fadeIn(this.navigationDelay + 200);\n                }\n              }\n              tableElement.children().remove();\n              tableElement.append(cellsTable);\n              this._animateViews(viewClone, cellsTable, function () {\n                if (!me.selectedDate && me.selectionMode != \"range\") {\n                  me.selectedDate = me.renderedCells[0].getDate();\n                }\n                try {\n                  me.renderedCells[0].element.focus();\n                  setTimeout(function () {\n                    me.renderedCells[0].element.focus();\n                  }, 10);\n                } catch (error) {}\n                me._viewAnimating = false;\n              });\n              cellsTable.addClass(this.toThemeProperty(\"jqx-calendar-view\"));\n            },\n            _animateViews: function (view1, view2, callback) {\n              var me = this;\n              me._viewAnimating = true;\n              if (me.oldView == me.view) {\n                view1.remove();\n                view2.fadeOut(0);\n                view2.fadeIn(0);\n                callback();\n                return;\n              }\n              view1.fadeOut(this.navigationDelay + 100, function () {\n                view1.remove();\n              });\n              view2.fadeOut(0);\n              view2.fadeIn(this.navigationDelay + 200, function () {\n                callback();\n              });\n            },\n            focus: function () {\n              if (this.disabled) return;\n              try {\n                if (this.renderedCells && this.renderedCells.length > 0) {\n                  var me = this;\n                  var focusChanged = false;\n                  if (!me.selectedDate && me.selectionMode != 'range') {\n                    this.setDate(new Date(), 'mouse');\n                  }\n                  this.element.focus();\n                }\n              } catch (error) {}\n            },\n            renderViews: function (month, firstDay, calendarID) {\n              var me = this;\n              var cells = new Array();\n              var cellsTable = $(\"<table role='grid' style='border-color: transparent; width: 100%; height: 100%;' cellspacing='2' cellpadding='0' id=\" + 'cellTable' + calendarID.toString() + \">\" + \"<tr role='row' id='row1\" + this.element.id + \"'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row' id='row2\" + this.element.id + \"'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row' id='row3\" + this.element.id + \"'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"</table>\");\n              var container = this.host.find('.jqx-calendar-month-container');\n              container.css('position', 'relative');\n              var tableElement = month.find(\"#cellsTable\" + month[0].id);\n              tableElement[0].style.borderColor = \"transparent\";\n              var data = this._getDecadeAndCenturiesData();\n              var renderYears = data.years;\n              var renderDates = data.dates;\n              var k = 0;\n              var minDate = this.getMinDate();\n              var maxDate = this.getMaxDate();\n              var valueDate = new Date(this.value.dateTime);\n              valueDate.setDate(1);\n              for (var i = 0; i < 3; i++) {\n                for (var j = 0; j < 4; j++) {\n                  var cellRowID = i + 1;\n                  var r = j;\n                  if (this.rtl) r = 3 - r;\n                  var cellColumnID = r + 1;\n                  var row = cellsTable[0].rows[\"row\" + (1 + i) + this.element.id];\n                  var date = new Date(valueDate);\n                  date.setMonth(i * 4 + r);\n                  var cell = new $.jqx._jqxCalendar.cell(date);\n                  var cellElement = $(row.cells[j]);\n                  cell.isVisible = true;\n                  cell.element = cellElement;\n                  cell.row = i;\n                  cell.column = j;\n                  cell.index = cells.length;\n                  cell.isSelected = false;\n                  var text = \"\";\n                  if (this.view == \"year\") {\n                    if (date.getMonth() == this.getDate().getMonth() && date.getFullYear() == this.getDate().getFullYear()) {\n                      cell.isSelected = true;\n                    }\n                    var monthNames = this.localization.calendar.months.names;\n                    var monthString = monthNames[i * 4 + r];\n\n                    // Possible values: default, shortest, firstTwoLetters, firstLetter, full\n                    switch (this.monthNameFormat) {\n                      case 'default':\n                        monthString = this.localization.calendar.months.namesAbbr[i * 4 + r];\n                        break;\n                      case 'shortest':\n                        monthString = this.localization.calendar.months.namesShort[i * 4 + r];\n                        break;\n                      case 'firstTwoLetters':\n                        monthString = monthString.substring(0, 2);\n                        break;\n                      case 'firstLetter':\n                        monthString = monthString.substring(0, 1);\n                        break;\n                    }\n                    text = monthString;\n                  } else if (this.view == \"decade\" || this.view == \"centuries\") {\n                    text = renderYears[i * 4 + r];\n                    cell.setDate(renderDates[i * 4 + r]);\n                    if (cell.getDate().getFullYear() == this.getDate().getFullYear()) {\n                      cell.isSelected = true;\n                    }\n                    if (undefined == text) {\n                      text = \"<span style='cursor: default; visibility: hidden;'>2013</span>\";\n                    }\n                  }\n                  var date = cell.getDate();\n                  if (this.view == \"year\") {\n                    var nextMonth = new Date(date);\n                    nextMonth.setDate(1);\n                    nextMonth.setHours(0, 0, 0, 0);\n                    nextMonth.setMonth(date.getMonth() + 1);\n                    nextMonth = new Date(nextMonth.valueOf() - 1);\n                    if (this._getYearAndMonthPart(date) < this._getYearAndMonthPart(minDate) || this._getYearAndMonthPart(date) > this._getYearAndMonthPart(maxDate) || !this._hasUnrestrictedRanges(date, nextMonth)) {\n                      cell.isDisabled = true;\n                    }\n                  } else {\n                    var nextYear = new Date(date);\n                    nextYear.setMonth(0);\n                    nextYear.setDate(1);\n                    nextYear.setHours(0, 0, 0, 0);\n                    nextYear.setFullYear(date.getFullYear() + 1);\n                    nextYear = new Date(nextYear.valueOf() - 1);\n                    if (date.getFullYear() < minDate.getFullYear() || date.getFullYear() > maxDate.getFullYear() || !this._hasUnrestrictedRanges(date, nextYear)) {\n                      cell.isDisabled = true;\n                    }\n                  }\n                  $.jqx.utilities.html(cellElement, text);\n                  cells[k] = cell;\n                  k++;\n                }\n              }\n              $.each(cells, function () {\n                var element = this.element;\n                var cell = this;\n                if (!me.disabled) {\n                  me.addHandler(element, 'mousedown', function (event) {\n                    me._setDateAndSwitchViews(cell, event, 'mouse');\n                  });\n                  me.addHandler(element, 'mouseover', function (event) {\n                    var renderCell = me.renderedCells[cell.index];\n                    if (me.view != 'centuries' && renderCell.element.html().toLowerCase().indexOf('span') != -1) return;\n                    renderCell.isHighlighted = true;\n                    me._applyCellStyle(renderCell, renderCell.element, renderCell.element);\n                  });\n                  me.addHandler(element, 'mouseout', function (event) {\n                    var renderCell = me.renderedCells[cell.index];\n                    if (me.view != 'centuries' && renderCell.element.html().toLowerCase().indexOf('span') != -1) return;\n                    renderCell.isHighlighted = false;\n                    me._applyCellStyle(renderCell, renderCell.element, renderCell.element);\n                  });\n                }\n              });\n              var monthInstance = $.data(this.element, month[0].id);\n              if (monthInstance != undefined && monthInstance != null) {\n                monthInstance.cells = cells;\n              }\n              this.renderedCells = cells;\n              this._addCellsTable(tableElement, cellsTable);\n              this._applyCellStyles();\n            },\n            _setDateAndSwitchViews: function (cell, event, type) {\n              if (!this._viewAnimating && !this._animating) {\n                var oldDate = this.getDate();\n                var date = this.renderedCells[cell.index].getDate();\n                var day = this.value.dateTime.getDate();\n                var newDate = new Date(date);\n                if (this.views.indexOf('month') != -1) {\n                  newDate.setDate(day);\n                } else {\n                  newDate.setDate(1);\n                  date.setDate(1);\n                }\n                if (newDate.getMonth() == date.getMonth()) {\n                  date = newDate;\n                }\n                var minDate = this.getMinDate();\n                var maxDate = this.getMaxDate();\n                if (this.view == \"year\") {\n                  if (this._getYearAndMonthPart(date) < this._getYearAndMonthPart(minDate)) return;\n                  if (this._getYearAndMonthPart(date) > this._getYearAndMonthPart(maxDate)) return;\n                } else {\n                  if (date.getFullYear() < minDate.getFullYear()) return;\n                  if (date.getFullYear() > maxDate.getFullYear()) return;\n                }\n                if (this.selectionMode != \"range\") {\n                  this._selectDate(date, type);\n                }\n                this.oldView = this.view;\n                switch (this.view) {\n                  case \"year\":\n                    this.view = 'month';\n                    break;\n                  case \"decade\":\n                    this.view = 'year';\n                    break;\n                }\n                if (this.views.indexOf('month') == -1) this.view = 'year';\n                if (this.views.indexOf('year') == -1) this.view = 'decade';\n                if (this.view == \"year\") {\n                  if (this._getYearAndMonthPart(date) < this._getYearAndMonthPart(minDate)) date = minDate;\n                  if (this._getYearAndMonthPart(date) > this._getYearAndMonthPart(maxDate)) date = maxDate;\n                } else {\n                  if (date.getFullYear() < minDate.getFullYear()) date = minDate;\n                  if (date.getFullYear() > maxDate.getFullYear()) date = maxDate;\n                }\n                if (this.changing && this.selectedDate && (this.selectedDate.getFullYear() != date.getFullYear() || this.selectedDate.getMonth() != date.getMonth() || this.selectedDate.getDate() != date.getDate())) {\n                  date = this.selectedDate;\n                }\n                this.value._setYear(date.getFullYear());\n                this.value._setDay(date.getDate());\n                this.value._setMonth(date.getMonth() + 1);\n                this.value._setDay(date.getDate());\n                var visibleDate = this.getVisibleDate();\n                var firstDay = this.getFirstDayOfWeek(visibleDate);\n                var calendarID = \"View\" + this.element.id;\n                this.renderCalendarCells(this.month, firstDay, calendarID, true);\n                this.refreshTitle(this.month);\n                if (this.showWeekNumbers) {\n                  this.refreshRowHeader(this.month, calendarID);\n                }\n                if (this.views.length == 3) {\n                  if (this.view == \"month\") {\n                    if (this.selectionMode != \"range\") {\n                      this._selectDate(this.selectedDate, 'view');\n                    } else {\n                      var self = this;\n                      $.each(this.renderedCells, function (index) {\n                        var cell = this;\n                        var cellDate = cell.getDate();\n                        var cellElement = $(cell.element);\n                        var cellContent = cellElement;\n                        if (cellElement.length == 0) return false;\n                        var getDatePart = function (date) {\n                          if (date == null) {\n                            return new Date();\n                          }\n                          var newDate = new Date();\n                          newDate.setHours(0, 0, 0, 0);\n                          newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n                          return newDate;\n                        };\n                        if (!cell.isOtherMonth && getDatePart(cellDate).toString() == getDatePart(date).toString()) {\n                          self.value._setMonth(date.getMonth() + 1);\n                          self.value._setDay(date.getDate());\n                          self.value._setYear(date.getFullYear());\n                        }\n                        cell.isSelected = false;\n                        cell.isDisabled = false;\n                        if (getDatePart(cellDate) < getDatePart(self.selection.from) && self._clicks == 1) {\n                          cell.isDisabled = true;\n                        }\n                        if (self.getMaxDate() < cellDate) {\n                          cell.isDisabled = true;\n                        }\n                        if (self.getMinDate() > cellDate) {\n                          cell.isDisabled = true;\n                        }\n                        if (self._isDisabled(cellDate)) {\n                          cell.isDisabled = true;\n                        }\n                        if (!cell.isDisabled) {\n                          if (getDatePart(cellDate) >= getDatePart(self.selection.from) && getDatePart(cellDate) <= getDatePart(self.selection.to)) {\n                            cell.isSelected = true;\n                          }\n                        }\n                      });\n                      this._applyCellStyles();\n                    }\n                  }\n                }\n                if (this.view != \"month\") {\n                  if (this.oldView == \"year\" || this.views.indexOf(\"year\") == -1 && this.view == \"decade\") {\n                    if (type != 'keyboard') {\n                      this._raiseEvent('3');\n                    }\n                    this._raiseEvent('5', {\n                      selectionType: 'mouse'\n                    });\n                  }\n                }\n                this._raiseEvent('8');\n              }\n            },\n            renderCalendarCells: function (month, firstDay, calendarID, switchViews) {\n              if (this.view == \"year\" || this.view == \"decade\" || this.view == 'centuries') {\n                this.renderViews(month, firstDay, calendarID);\n                return;\n              }\n              var cellsTable = $(\"<table role='grid' style='width: 100%; height: 100%; border-color: transparent;' cellspacing='2' cellpadding='1' id=\" + 'cellTable' + calendarID.toString() + \">\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"</table>\");\n              var tableElement = this.table;\n              tableElement[0].style.borderColor = \"transparent\";\n              if (switchViews == undefined) {\n                var oldCellsTable = tableElement.find(\"#\" + 'cellTable' + calendarID.toString());\n                if (oldCellsTable != null) {\n                  oldCellsTable.remove();\n                }\n                tableElement.append(cellsTable);\n              }\n              var currentDate = firstDay;\n              var startRow = this.showDayNames ? 1 : 0;\n              var startColumn = this.showWeekNumbers ? 1 : 0;\n              var cells = new Array();\n              var k = 0;\n              var cellWidth = (month.width() - this.rowHeaderWidth - 2) / 7;\n              if (!this.showWeekNumbers) {\n                cellWidth = (month.width() - 2) / 7;\n              }\n              cellWidth = parseInt(cellWidth);\n              var today = new $.jqx._jqxDateTimeInput.getDateTime(new Date());\n              for (var i = 0; i < 6; i++) {\n                for (var j = 0; j < 7; j++) {\n                  var cellRowID = i + 1;\n                  var r = j;\n                  if (this.rtl) r = 6 - r;\n                  var cellColumnID = r + 1;\n                  var cellID = \"#cell\" + cellRowID + cellColumnID + this.element.id;\n                  var date = new Date(currentDate.dateTime.getFullYear(), currentDate.dateTime.getMonth(), currentDate.dateTime.getDate());\n                  var cell = new $.jqx._jqxCalendar.cell(date);\n                  var cellElement = $(cellsTable[0].rows[i].cells[cellColumnID - 1]);\n                  cellElement[0].id = cellID.substring(1);\n                  cell.isVisible = true;\n                  cell.isDisabled = false;\n                  if (currentDate.month != this.value.month) {\n                    cell.isOtherMonth = true;\n                    cell.isVisible = this.showOtherMonthDays;\n                  }\n                  if (this._isRestrictedDate(date)) {\n                    cell.isRestricted = true;\n                    cell.isDisabled = true;\n                  }\n                  if (!cell.isDisabled) {\n                    if (date < this.getMinDate() || date > this.getMaxDate() || this._isDisabled(date)) {\n                      cell.isDisabled = true;\n                    }\n                  }\n                  if (currentDate.month == today.month && currentDate.day == today.day && currentDate.year == today.year) {\n                    cell.isToday = true;\n                  }\n                  if (currentDate.isWeekend()) {\n                    cell.isWeekend = true;\n                  }\n                  cell.element = cellElement;\n                  cell.row = startRow;\n                  cell.column = startColumn;\n                  $.jqx.utilities.html(cellElement, currentDate.day);\n                  currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));\n                  $.data(this.element, \"cellContent\" + cellID.substring(1), cell);\n                  $.data(this.element, \"\" + cellID.substring(1), cell);\n                  var me = this;\n                  if (me.isMaterialized()) {\n                    $(cellElement).addClass('ripple');\n                    $.jqx.ripple($(cellElement));\n                  }\n                  this.addHandler(cellElement, 'mousedown', function (event) {\n                    if (!me.readOnly && !me.disabled) {\n                      var content = $(event.target);\n                      var cell = $.data(me.element, content[0].id);\n                      var result = me._raiseEvent(3, event);\n                      if (cell != null && cell != undefined) {\n                        var date = cell.getDate();\n                        if (me.getMinDate() <= date && date <= me.getMaxDate()) {\n                          if (!cell.isDisabled) {\n                            if (cell.isOtherMonth && me.enableAutoNavigation) {\n                              if (cell.row < 2) me.navigateBackward();else me.navigateForward();\n                              me._selectDate(cell.getDate(), 'mouse', event.shiftKey);\n                            } else {\n                              var oldDate = new Date(me.getDate());\n                              me._selectDate(cell.getDate(), 'mouse', event.shiftKey);\n                              me.value._setYear(date.getFullYear());\n                              me.value._setDay(1);\n                              me.value._setMonth(date.getMonth() + 1);\n                              me.value._setDay(date.getDate());\n                              var table = me.host.find('.jqx-calendar-month');\n                              table.stop();\n                              table.css('margin-left', '0px');\n                              var currentDate = me.getDate();\n                              me._raiseEvent('2');\n                              if (cell.isOtherMonth) {\n                                me._raiseEvent('5', {\n                                  selectionType: 'mouse'\n                                });\n                              }\n                            }\n                          }\n                        }\n                      }\n                      return false;\n                    }\n                  });\n                  if (!me.disabled) {\n                    var highlight = function (event, highlight) {\n                      if (!me.readOnly) {\n                        var content = $(event.target);\n                        var cell = $.data(me.element, content[0].id);\n                        if (cell != null && cell != undefined) {\n                          var date = cell.getDate();\n                          if (me.getMinDate() <= date && date <= me.getMaxDate()) {\n                            cell.isHighlighted = highlight;\n                            me._applyCellStyle(cell, cell.element, content);\n                          }\n                        }\n                      }\n                    };\n                    this.addHandler(cellElement, 'mouseenter', function (event) {\n                      highlight(event, true);\n                      return false;\n                    });\n                    this.addHandler(cellElement, 'mouseleave', function (event) {\n                      highlight(event, false);\n                      return false;\n                    });\n                  }\n                  startColumn++;\n                  cells[k] = cell;\n                  k++;\n                }\n                startColumn = 0;\n                startRow++;\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              if (monthInstance != undefined && monthInstance != null) {\n                monthInstance.cells = cells;\n              }\n              this.renderedCells = cells;\n              if (switchViews != undefined) {\n                this._addCellsTable(tableElement, cellsTable);\n              }\n              this._applyCellStyles();\n              this._refreshOtherMonthRows(monthInstance, calendarID);\n            },\n            // sets the maximum navigation date.\n            // @param - Date\n            setMaxDate: function (date, refresh) {\n              if (date != null && typeof date == \"string\") {\n                date = new Date(date);\n                if (date == \"Invalid Date\") return;\n              }\n              this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(date);\n              if (refresh !== false) this.render();\n            },\n            // gets the maximum navigation date.\n            getMaxDate: function () {\n              if (this.maxDate != null && this.maxDate != undefined) {\n                return this.maxDate.dateTime;\n              }\n              return null;\n            },\n            // sets the minimum date.\n            // @param - Date\n            setMinDate: function (date, refresh) {\n              if (date != null && typeof date == \"string\") {\n                date = new Date(date);\n                if (date == \"Invalid Date\") return;\n              }\n              this.minDate = $.jqx._jqxDateTimeInput.getDateTime(date);\n              if (refresh !== false) this.render();\n            },\n            // gets the minimum date.\n            getMinDate: function () {\n              if (this.minDate != null && this.minDate != undefined) {\n                return this.minDate.dateTime;\n              }\n              return null;\n            },\n            // sets the calendar's date.\n            // @param - Date\n            navigateTo: function (date, reason) {\n              if (this.view == 'month') {\n                var minDate = this.getMinDate();\n                var maxDate = new Date(this.getMaxDate().getFullYear(), this.getMaxDate().getMonth() + 1, this.getMaxDate().getDate());\n                if (date < this._getYearAndMonthPart(minDate) || date > this._getYearAndMonthPart(maxDate)) {\n                  return false;\n                }\n              } else if (date && (date.getFullYear() < this.getMinDate().getFullYear() || date.getFullYear() > this.getMaxDate().getFullYear())) {\n                return false;\n              }\n              if (date == null) {\n                return false;\n              }\n              if (reason == undefined) {\n                var me = this;\n                if (this._animating) {\n                  return;\n                }\n                this._animating = true;\n                var container = this.host.find('.jqx-calendar-month-container');\n                var animationContainer = $(\"<div></div>\");\n                animationContainer[0].style.width = \"100%\";\n                animationContainer[0].style.height = \"100%\";\n                animationContainer[0].style.overflow = \"hidden\";\n                animationContainer[0].style.position = \"relative\";\n                animationContainer[0].style.left = \"0px\";\n                animationContainer[0].style.top = \"-100%\";\n                container.append(animationContainer);\n                if (this._viewClone) {\n                  this._viewClone.stop();\n                  this._viewClone.remove();\n                }\n                if (this._newViewClone) {\n                  this._newViewClone.stop();\n                  this._newViewClone.remove();\n                }\n                var table = this.host.find('.jqx-calendar-month');\n                table.stop();\n                table.css('margin-left', '0px');\n                var viewClone = table.clone();\n                this._viewClone = viewClone;\n                var value = new Date(this.value.dateTime);\n                this.value._setYear(date.getFullYear());\n                this.value._setDay(date.getDate());\n                this.value._setMonth(date.getMonth() + 1);\n                var topPadding = parseInt(this.month.css('padding-top'));\n                me.refreshControl();\n                animationContainer.css('overflow', 'hidden');\n                container.css('position', 'relative');\n                container.css('overflow', 'hidden');\n                viewClone.css('position', 'absolute');\n                viewClone.css('top', table.position().top - topPadding);\n                animationContainer.append(viewClone);\n                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                  this.month.css('position', 'relative');\n                  this.month.css('overflow', 'hidden');\n                  this.table.css('position', 'relative');\n                  this.table.css('overflow', 'hidden');\n                }\n                var width = -this.month.width();\n                if (date < value) {\n                  if (this.view == \"month\" && date.getMonth() != value.getMonth()) {\n                    width = this.month.width();\n                  } else if (date.getFullYear() != value.getFullYear()) {\n                    width = this.month.width();\n                  }\n                }\n                viewClone.animate({\n                  marginLeft: parseInt(width) + 'px'\n                }, this.navigationDelay, function () {\n                  viewClone.remove();\n                });\n                var newViewClone = table.clone();\n                this._newViewClone = newViewClone;\n                newViewClone.css('position', 'absolute');\n                newViewClone.css('top', table.position().top - topPadding);\n                animationContainer.append(newViewClone);\n                newViewClone.css('margin-left', -width);\n                table.css('visibility', 'hidden');\n                newViewClone.animate({\n                  marginLeft: '0px'\n                }, this.navigationDelay, function () {\n                  newViewClone.remove();\n                  table.css('visibility', 'inherit');\n                  animationContainer.remove();\n                  me._animating = false;\n                });\n              } else {\n                this.value._setYear(date.getFullYear());\n                this.value._setDay(date.getDate());\n                this.value._setMonth(date.getMonth() + 1);\n                var table = this.host.find('.jqx-calendar-month');\n                table.stop();\n                table.css('margin-left', '0px');\n                this.refreshControl();\n              }\n              this._raiseEvent('2');\n              this._raiseEvent('8');\n              return true;\n            },\n            // sets the calendar's date.\n            // @param - Date\n            setDate: function (date) {\n              if (date != null && typeof date == \"string\") {\n                date = new Date(date);\n              }\n              if (this.canRender == false) {\n                this.canRender = true;\n                this.render();\n              }\n              this.navigateTo(date, 'api');\n              this._selectDate(date);\n              if (this.selectionMode == 'range') {\n                this._selectDate(date, 'mouse');\n              }\n              return true;\n            },\n            val: function (value) {\n              if (arguments.length != 0) {\n                if (value == null) this.setDate(null);\n                if (value instanceof Date) this.setDate(value);\n                if (typeof value == \"string\") {\n                  this.setDate(value);\n                }\n              }\n              return this.getDate();\n            },\n            // gets the calendar's date.\n            getDate: function () {\n              if (this.selectedDate == undefined) return new Date();\n              return this.selectedDate;\n            },\n            getValue: function () {\n              if (this.value == undefined) return new Date();\n              return this.value.dateTime;\n            },\n            setRange: function (from, to) {\n              if (this.canRender == false) {\n                this.canRender = true;\n                this.render();\n              }\n              this.navigateTo(from, 'api');\n              this._selectDate(from, 'mouse');\n              this._selectDate(to, 'mouse');\n            },\n            getRange: function () {\n              return this.selection;\n            },\n            // selects a date.\n            // @param - Date\n            _selectDate: function (date, type, shift) {\n              if (this.selectionMode == 'none') return;\n              if (type == null || type == undefined) type = 'none';\n              if (shift == null || shift == undefined) shift = false;\n              var monthInstance = $.data(this.element, \"View\" + this.element.id);\n              if (monthInstance == undefined || monthInstance == null) return;\n              if (this.changing) {\n                if (date && this.selectedDate) {\n                  if (this.selectedDate.getFullYear() != date.getFullYear() || this.selectedDate.getDate() != date.getDate() || this.selectedDate.getMonth() != date.getMonth()) var newDate = this.changing(this.selectedDate, date);\n                  if (newDate) {\n                    date = newDate;\n                  }\n                }\n              }\n              var self = this;\n              if (this.input) {\n                if (date != null) {\n                  this.input.val(date.toString());\n                } else this.input.val(\"\");\n              }\n              var oldDate = this.selectedDate;\n              this.selectedDate = date;\n              if (this.view != \"month\") {\n                if (oldDate != date) {\n                  this._raiseEvent(7, {\n                    selectionType: type\n                  });\n                }\n                $.each(this.renderedCells, function (index) {\n                  var cell = this;\n                  var cellDate = cell.getDate();\n                  var cellElement = $(cell.element);\n                  var cellContent = cellElement.find(\"#cellContent\" + cellElement[0].id);\n                  if (date == null) {\n                    cell.isSelected = false;\n                    cell.isDisabled = false;\n                  } else {\n                    cell.isSelected = false;\n                    if (cellDate) {\n                      if (cellDate.getMonth() == date.getMonth() && self.view == \"year\" && cellDate.getFullYear() == date.getFullYear() || self.view == \"decade\" && cellDate.getFullYear() == date.getFullYear()) {\n                        cell.isSelected = true;\n                        try {\n                          if (type != \"none\") {\n                            cell.element.focus();\n                          }\n                        } catch (error) {}\n                      }\n                    }\n                  }\n                  self._applyCellStyle(cell, cellElement, cellElement);\n                });\n                if (this.change) {\n                  this.change(date);\n                }\n                return;\n              }\n              if (this.view == \"month\") {\n                if (this.selectionMode == \"range\" && type == \"key\") {\n                  var visibleDate = this.getVisibleDate();\n                  var firstDay = this.getFirstDayOfWeek(visibleDate);\n                  this.refreshCalendarCells(this.month, firstDay, \"View\" + this.element.id);\n                }\n              }\n              var cellDisabledDefault = false;\n              $.each(this.renderedCells, function (index) {\n                var cell = this;\n                var cellDate = cell.getDate();\n                var cellElement = $(cell.element);\n                var cellContent = cellElement;\n                if (cellElement.length == 0) return false;\n                if (date == null) {\n                  cell.isSelected = false;\n                  cell.isDisabled = false;\n                  if (index == 0) {\n                    self.selection = {\n                      from: null,\n                      to: null\n                    };\n                    self._raiseEvent('2');\n                    self._raiseEvent('5', {\n                      selectionType: type\n                    });\n                  }\n                } else {\n                  if (self.selectionMode != 'range' || type == 'key') {\n                    if (cellDate.getDate() == date.getDate() && cellDate.getMonth() == date.getMonth() && cellDate.getFullYear() == date.getFullYear() && cell.isSelected) {\n                      self._applyCellStyle(cell, cellElement, cellContent);\n                      self._raiseEvent('5', {\n                        selectionType: type\n                      });\n                      return;\n                    }\n                    if (cell.isSelected) {\n                      self._raiseEvent('6', {\n                        selectionType: type\n                      });\n                    }\n                    cell.isSelected = false;\n                    if (cellDate.getDate() == date.getDate() && cellDate.getMonth() == date.getMonth() && cellDate.getFullYear() == date.getFullYear()) {\n                      cell.isSelected = true;\n                      if (index == 0) {\n                        self.selection = {\n                          date: date\n                        };\n                      }\n                      try {\n                        if (type != \"none\") {\n                          cell.element.focus();\n                          self.host.focus();\n                        }\n                      } catch (error) {}\n                      if (!cell.isOtherMonth) {\n                        self.value._setMonth(date.getMonth() + 1);\n                        self.value._setDay(date.getDate());\n                        self.value._setYear(date.getFullYear());\n                        self._raiseEvent('2');\n                        self._raiseEvent('5', {\n                          selectionType: type\n                        });\n                      }\n                    }\n                    if (self.selectionMode == 'range') {\n                      self._clicks = 0;\n                      self.selection = {\n                        from: date,\n                        to: date\n                      };\n                    }\n                  } else if (self.selectionMode == 'range') {\n                    if (type == \"view\") {\n                      cell.isSelected = false;\n                      cell.isDisabled = false;\n                      if (self.getMaxDate() < cellDate) {\n                        cell.isDisabled = true;\n                      }\n                      if (self.getMinDate() > cellDate) {\n                        cell.isDisabled = true;\n                      }\n                      if (self._isRestrictedDate(cellDate)) {\n                        cell.isDisabled = true;\n                        cell.isRestricted = true;\n                      }\n                      if (!cell.isDisabled && self._isDisabled(cellDate)) {\n                        cell.isDisabled = true;\n                      }\n                      self._applyCellStyle(cell, cellElement, cellContent);\n                      return true;\n                    }\n                    if (index == 0) {\n                      if (type != 'none') {\n                        if (self._clicks == undefined) self._clicks = 0;\n                        self._clicks++;\n                        if (shift) {\n                          self._clicks++;\n                        }\n                        if (self._clicks == 1) {\n                          self.selection = {\n                            from: date,\n                            to: date\n                          };\n                        } else {\n                          var from = self.selection.from;\n                          var min = from <= date ? from : date;\n                          var max = from <= date ? date : from;\n                          if (min) {\n                            var start = new Date(min.getFullYear(), min.getMonth(), min.getDate());\n                          }\n                          if (max) {\n                            var end = new Date(max.getFullYear(), max.getMonth(), max.getDate(), 23, 59, 59);\n                          }\n                          self.selection = {\n                            from: start,\n                            to: end\n                          };\n                          self._clicks = 0;\n                        }\n                      } else {\n                        if (self.selection == null || self.selection.from == null) {\n                          self.selection = {\n                            from: date,\n                            to: date\n                          };\n                          if (self._clicks == undefined) self._clicks = 0;\n                          self._clicks++;\n                          if (self._clicks == 2) self._clicks = 0;\n                        }\n                      }\n                    }\n                    var getDatePart = function (date) {\n                      if (date == null) {\n                        return new Date();\n                      }\n                      var newDate = new Date();\n                      newDate.setHours(0, 0, 0, 0);\n                      newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n                      return newDate;\n                    };\n                    if (!cell.isOtherMonth && getDatePart(cellDate).toString() == getDatePart(date).toString()) {\n                      self.value._setMonth(date.getMonth() + 1);\n                      self.value._setDay(date.getDate());\n                      self.value._setYear(date.getFullYear());\n                      self._raiseEvent('2');\n                      self._raiseEvent('5', {\n                        selectionType: type\n                      });\n                    }\n                    cell.isSelected = false;\n                    cell.isDisabled = cellDisabledDefault;\n                    if (getDatePart(cellDate) < getDatePart(self.selection.from) && self._clicks == 1) {\n                      cell.isDisabled = true;\n                    }\n                    if (self.getMaxDate() < cellDate) {\n                      cell.isDisabled = true;\n                    }\n                    if (self.getMinDate() > cellDate) {\n                      cell.isDisabled = true;\n                    }\n                    if (self._isRestrictedDate(cellDate)) {\n                      cell.isRestricted = true;\n                      cell.isDisabled = true;\n                    }\n                    if (!cell.isDisabled && self._isDisabled(cellDate)) {\n                      cell.isDisabled = true;\n                    }\n                    if (!cell.isDisabled) {\n                      if (getDatePart(cellDate) >= getDatePart(self.selection.from) && getDatePart(cellDate) <= getDatePart(self.selection.to)) {\n                        cell.isSelected = true;\n                      }\n                    } else if (!self.allowRestrictedDaysInRange && getDatePart(cellDate) >= getDatePart(self.selection.from) && self.selection.to == self.selection.from) {\n                      // disable all cells after the first non-selectable cell in the sequence\n                      cellDisabledDefault = true;\n                    }\n                  }\n                }\n                self._applyCellStyle(cell, cellElement, cellContent);\n              });\n              if (self.selectionMode == \"range\" && self._clicks == 0) {\n                self._raiseEvent(7, {\n                  selectionType: type\n                });\n                return;\n              } else if (self.selectionMode == \"range\") return;\n              if (oldDate != date) {\n                self._raiseEvent(7, {\n                  selectionType: type\n                });\n                if (this.change) {\n                  this.change(date);\n                }\n              }\n            },\n            // gets the selected date.\n            _getSelectedDate: function () {\n              var monthInstance = $.data(this.element, \"View\" + this.element.id);\n              if (monthInstance == undefined || monthInstance == null) return;\n              if (this.view != \"month\") return this.selectedDate;\n              for (var i = 0; i < monthInstance.cells.length; i++) {\n                var cell = monthInstance.cells[i];\n                var cellDate = cell.getDate();\n                if (cell.isSelected) {\n                  return cellDate;\n                }\n              }\n              if (this.selectedDate) {\n                return this.selectedDate;\n              }\n            },\n            // gets the selected cell.\n            _getSelectedCell: function () {\n              var monthInstance = $.data(this.element, \"View\" + this.element.id);\n              if (monthInstance == undefined || monthInstance == null) return;\n              for (var i = 0; i < monthInstance.cells.length; i++) {\n                var cell = monthInstance.cells[i];\n                var cellDate = cell.getDate();\n                if (cell.isSelected) {\n                  return cell;\n                }\n              }\n            },\n            _applyCellStyle: function (cell, cellElement, cellContent) {\n              var self = this;\n              if (cellContent == null || cellContent != null && cellContent.length == 0) {\n                cellContent = cellElement;\n              }\n              var cssClassName = \"\";\n              cssClassName = this.toThemeProperty(\"jqx-rc-all\");\n              cssClassName += \" \" + this.toThemeProperty(\"jqx-item\");\n              if (this.disabled || cell.isDisabled && !cell.isRestricted) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-disabled\");\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-fill-state-disabled\");\n              }\n              if (!this.disabled && cell.isRestricted) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-restrictedDate\");\n              }\n              if (cell.isOtherMonth && this.enableOtherMonthDays && cell.isVisible) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-othermonth\");\n              }\n              if (cell.isWeekend && this.enableWeekend && cell.isVisible && cell.isVisible) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-weekend\");\n              }\n              if (this.isMaterialized()) {\n                cssClassName += \" ripple\";\n              }\n              if (!cell.isVisible) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-hidden\");\n              } else {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell\");\n                if (this.view != \"month\") {\n                  if (cellContent.length > 0 && cellContent.html().toLowerCase().indexOf('span') != -1) {\n                    cellContent.css('cursor', 'default');\n                  }\n                }\n              }\n              cellContent.removeAttr('aria-selected');\n              if (cell.isSelected && cell.isVisible) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-selected\");\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-fill-state-pressed\");\n                cellContent.attr('aria-selected', true);\n                this.host.removeAttr(\"aria-activedescendant\").attr(\"aria-activedescendant\", cellContent[0].id);\n                var date = cell.getDate();\n                if (this._isDisabled(date)) {\n                  cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-selected-invalid\");\n                }\n              }\n              if (cell.isHighlighted && cell.isVisible && this.enableHover) {\n                if (!cell.isDisabled) {\n                  cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-hover\");\n                  cssClassName += \" \" + this.toThemeProperty(\"jqx-fill-state-hover\");\n                }\n              }\n              cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-\" + this.view);\n              if (cell.isToday && cell.isVisible) {\n                cssClassName += \" \" + this.toThemeProperty(\"jqx-calendar-cell-today\");\n              }\n              cellContent[0].className = cssClassName;\n              if (this.specialDates.length > 0) {\n                var me = this;\n                $.each(this.specialDates, function () {\n                  if (this.Class != undefined && this.Class != null && this.Class != '') {\n                    cellContent.removeClass(this.Class);\n                  } else {\n                    cellContent.removeClass(self.toThemeProperty(\"jqx-calendar-cell-specialDate\"));\n                  }\n                  var date = cell.getDate();\n                  if (date.getFullYear() == this.Date.getFullYear() && date.getMonth() == this.Date.getMonth() && date.getDate() == this.Date.getDate()) {\n                    if (cell.tooltip == null && this.Tooltip != null) {\n                      cell.tooltip = this.Tooltip;\n                      if ($(cellContent).jqxTooltip) {\n                        var className = this.Class;\n                        $(cellContent).jqxTooltip({\n                          value: {\n                            cell: cell,\n                            specialDate: this.Date\n                          },\n                          name: me.element.id,\n                          content: this.Tooltip,\n                          position: 'mouse',\n                          theme: me.theme,\n                          opening: function (tooltip) {\n                            if (cellContent.hasClass(self.toThemeProperty(\"jqx-calendar-cell-specialDate\"))) {\n                              return true;\n                            }\n                            if (cellContent.hasClass(className)) {\n                              return true;\n                            }\n                            return false;\n                          }\n                        });\n                      }\n                    }\n                    cellContent.removeClass(self.toThemeProperty(\"jqx-calendar-cell-othermonth\"));\n                    cellContent.removeClass(self.toThemeProperty(\"jqx-calendar-cell-weekend\"));\n                    if (this.Class == undefined || this.Class == '') {\n                      cellContent.addClass(self.toThemeProperty(\"jqx-calendar-cell-specialDate\"));\n                      return false;\n                    } else {\n                      cellContent.addClass(this.Class);\n                      return false;\n                    }\n                  }\n                });\n              }\n            },\n            _applyCellStyles: function () {\n              var monthInstance = $.data(this.element, \"View\" + this.element.id);\n              if (monthInstance == undefined || monthInstance == null) return;\n              for (var i = 0; i < monthInstance.cells.length; i++) {\n                var cell = monthInstance.cells[i];\n                var cellElement = $(cell.element);\n                var cellContent = cellElement.find(\"#cellContent\" + cellElement[0].id);\n                if (cellContent.length == 0) cellContent = cellElement;\n                this._applyCellStyle(cell, cellElement, cellContent);\n              }\n            },\n            // gets the week of year by Date.\n            getWeekOfYear: function (date) {\n              var dateObj = new Date(date.dateTime);\n              var dowOffset = this.firstDayOfWeek; //default dowOffset to zero\n              var newYear = new Date(dateObj.getFullYear(), 0, 1);\n              var day = newYear.getDay() - dowOffset; //the day of week the year begins on\n              day = day >= 0 ? day : day + 7;\n              var daynum = Math.floor((dateObj.getTime() - newYear.getTime() - (dateObj.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n              var weeknum;\n              //if the year starts before the middle of a week\n              if (day < 4) {\n                weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n                if (weeknum > 52) {\n                  var nYear = new Date(dateObj.getFullYear() + 1, 0, 1);\n                  var nday = nYear.getDay() - dowOffset;\n                  nday = nday >= 0 ? nday : nday + 7;\n                  /*if the next year starts before the middle of\r\n                    the week, it is week #1 of that year*/\n                  weeknum = nday < 4 ? 1 : 53;\n                }\n              } else {\n                weeknum = Math.floor((daynum + day - 1) / 7);\n              }\n              return weeknum;\n\n              //var dayOfYear = date.dayOfYear(date.dateTime) - 1;\n              //var week = date.dayOfWeek - (dayOfYear % 7);\n              //var offset = ((week - this.firstDayOfWeek) + 14) % 7;\n              //return Math.ceil((((dayOfYear + offset) / 7) + 1));\n            },\n            renderColumnHeader: function (month) {\n              if (!this.showDayNames) return;\n              var columnHeader = $(\"<table role='grid' style='border-spacing: 0px; border-collapse: collapse; width: 100%; height: 100%;' cellspacing='0' cellpadding='1'>\" + \"<tr role='row'>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"<td role='gridcell'></td>\" + \"</tr>\" + \"</table>\");\n              columnHeader.find('table').addClass(this.toThemeProperty('jqx-reset'));\n              columnHeader.find('tr').addClass(this.toThemeProperty('jqx-reset'));\n              columnHeader.find('td').css({\n                background: 'transparent',\n                padding: 1,\n                margin: 0,\n                border: 'none'\n              });\n              columnHeader.addClass(this.toThemeProperty(\"jqx-reset\"));\n              columnHeader.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n              columnHeader.addClass(this.toThemeProperty(\"jqx-calendar-column-header\"));\n              this.columnHeader.append(columnHeader);\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              var dayOfWeek = firstDay.dayOfWeek;\n              var weekOfYear = this.getWeekOfYear(firstDay);\n              var day = this.firstDayOfWeek;\n              var dayNames = this.localization.calendar.days.names;\n              var columnHeaderCells = new Array();\n              var currentDate = firstDay;\n              var cellWidth = (month.width() - this.rowHeaderWidth - 2) / 7;\n              if (!this.showWeekNumbers) {\n                cellWidth = (month.width() - 2) / 7;\n              }\n              for (var i = 0; i < 7; i++) {\n                var dayString = dayNames[day];\n                if (this.rtl) {\n                  dayString = dayNames[6 - day];\n                }\n\n                // Possible values: default, shortest, firstTwoLetters, firstLetter, full\n                switch (this.dayNameFormat) {\n                  case 'default':\n                    dayString = this.localization.calendar.days.namesAbbr[day];\n                    if (this.rtl) {\n                      dayString = this.localization.calendar.days.namesAbbr[6 - day];\n                    }\n                    break;\n                  case 'shortest':\n                    dayString = this.localization.calendar.days.namesShort[day];\n                    if (this.rtl) {\n                      dayString = this.localization.calendar.days.namesShort[6 - day];\n                    }\n                    break;\n                  case 'firstTwoLetters':\n                    dayString = dayString.substring(0, 2);\n                    break;\n                  case 'firstLetter':\n                    dayString = dayString.substring(0, 1);\n                    break;\n                }\n                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);\n                var r = i + 1;\n                var cellID = r + this.element.id;\n                var cellElement = $(columnHeader[0].rows[0].cells[i]);\n                var oldI = i;\n                if (this.enableTooltips) {\n                  if ($(cellElement).jqxTooltip) {\n                    $(cellElement).jqxTooltip({\n                      name: this.element.id,\n                      content: dayNames[day],\n                      theme: this.theme,\n                      position: 'mouse'\n                    });\n                  }\n                }\n                if (day >= 6) {\n                  day = 0;\n                } else {\n                  day++;\n                }\n                i = oldI;\n                cell.element = cellElement;\n                cell.row = 0;\n                cell.column = i + 1;\n                var textWidth = this._textwidth(dayString);\n                var cellContent = \"<div style='padding: 0; margin: 0; border: none; background: transparent;' id='columnCell\" + cellID + \"'>\" + dayString + \"</div>\";\n                cellElement.append(cellContent);\n                cellElement.find(\"#columnCell\" + cellID).addClass(this.toThemeProperty('jqx-calendar-column-cell'));\n                cellElement.width(cellWidth);\n                if (this.disabled) {\n                  cellElement.find(\"#columnCell\" + cellID).addClass(this.toThemeProperty('jqx-calendar-column-cell-disabled'));\n                }\n                if (textWidth > 0 && cellWidth > 0) {\n                  while (textWidth > cellElement.width()) {\n                    if (dayString.length == 0) break;\n                    dayString = dayString.substring(0, dayString.length - 1);\n                    $.jqx.utilities.html(cellElement.find(\"#columnCell\" + cellID), dayString);\n                    textWidth = this._textwidth(dayString);\n                  }\n                }\n                columnHeaderCells[i] = cell;\n                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));\n              }\n              if (parseInt(this.columnHeader.width()) > parseInt(this.month.width())) {\n                this.columnHeader.width(this.month.width());\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              monthInstance.columnCells = columnHeaderCells;\n            },\n            _format: function (date, format, culture) {\n              var globalize = false;\n              try {\n                if (window.Globalize != undefined) {\n                  globalize = true;\n                } else if (document.Globalize) {\n                  window.Globalize = document.Globalize;\n                  globalize = true;\n                }\n              } catch (error) {\n                if (document.Globalize) {\n                  window.Globalize = document.Globalize;\n                  globalize = true;\n                }\n              }\n              if (document.Globalize) {\n                window.Globalize = document.Globalize;\n                globalize = true;\n              }\n              if ($.global) {\n                $.global.culture.calendar = this.localization.calendar;\n                return $.global.format(date, format, this.culture);\n              } else if (globalize) {\n                try {\n                  if (window.Globalize.cultures[this.culture]) {\n                    window.Globalize.cultures[this.culture].calendar = this.localization.calendar;\n                    return window.Globalize.format(date, format, this.culture);\n                  } else {\n                    return window.Globalize.format(date, format, this.culture);\n                  }\n                } catch (error) {\n                  return window.Globalize.format(date, format);\n                }\n              } else if ($.jqx.dataFormat) {\n                return $.jqx.dataFormat.formatdate(date, format, this.localization.calendar);\n              }\n            },\n            _textwidth: function (text) {\n              var measureElement = $('<span>' + text + '</span>');\n              measureElement.addClass(this.toThemeProperty('jqx-calendar-column-cell'));\n              $(this.host).append(measureElement);\n              var width = measureElement.width();\n              measureElement.remove();\n              return width;\n            },\n            _textheight: function (text) {\n              var measureElement = $('<span>' + text + '</span>');\n              $(this.host).append(measureElement);\n              var height = measureElement.height();\n              measureElement.remove();\n              return height;\n            },\n            _renderRowHeader: function (month) {\n              var visibleDate = this.getVisibleDate();\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              var dayOfWeek = firstDay.dayOfWeek;\n              var weekOfYear = this.getWeekOfYear(firstDay);\n              var newDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(firstDay.dateTime));\n              newDate._addDays(5);\n              newDate.dayOfWeek = newDate.dateTime.getDay();\n              var newWeekOfYear = this.getWeekOfYear(newDate);\n              if (53 == weekOfYear && newDate.dateTime.getMonth() == 0) weekOfYear = 1;\n              var rowHeader = $(\"<table style='overflow: hidden; width: 100%; height: 100%;' cellspacing='0' cellpadding='1'>\" + \"<tr>\" + \"<td></td>\" + \"</tr>\" + \"<tr>\" + \"<td/>\" + \"</tr>\" + \"<tr>\" + \"<td/>\" + \"</tr>\" + \"<tr>\" + \"<td/>\" + \"</tr>\" + \"<tr>\" + \"<td/>\" + \"</tr>\" + \"<tr>\" + \"<td/>\" + \"</tr>\" + \"</table>\");\n              rowHeader.find('table').addClass(this.toThemeProperty('jqx-reset'));\n              rowHeader.find('td').addClass(this.toThemeProperty('jqx-reset'));\n              rowHeader.find('tr').addClass(this.toThemeProperty('jqx-reset'));\n              rowHeader.addClass(this.toThemeProperty(\"jqx-calendar-row-header\"));\n              rowHeader.width(this.rowHeaderWidth);\n              this.rowHeader.append(rowHeader);\n              var currentDate = firstDay;\n              var rowHeaderCells = new Array();\n              for (var i = 0; i < 6; i++) {\n                var weekString = weekOfYear.toString();\n                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);\n                var cellID = i + 1 + this.element.id;\n                var cellElement = $(rowHeader[0].rows[i].cells[0]);\n                cell.element = cellElement;\n                cell.row = i;\n                cell.column = 0;\n                var cellContent = \"<div style='background: transparent; border: none; padding: 0; margin: 0;' id ='headerCellContent\" + cellID + \"'>\" + weekString + \"</div>\";\n                cellElement.append(cellContent);\n                cellElement.find(\"#headerCellContent\" + cellID).addClass(this.toThemeProperty('jqx-calendar-row-cell'));\n                rowHeaderCells[i] = cell;\n                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addWeeks(1)));\n                weekOfYear = this.getWeekOfYear(currentDate);\n              }\n              var monthInstance = $.data(this.element, month[0].id);\n              monthInstance.rowCells = rowHeaderCells;\n            },\n            // gets the first week day.\n            // @param - Date\n            getFirstDayOfWeek: function (visibleDate) {\n              var date = visibleDate;\n              if (this.firstDayOfWeek < 0 || this.firstDayOfWeek > 6) this.firstDayOfWeek = 6;\n              var num = date.dayOfWeek - this.firstDayOfWeek;\n              if (num <= 0) {\n                num += 7;\n              }\n              var newDate = $.jqx._jqxDateTimeInput.getDateTime(date._addDays(-num));\n              return newDate;\n            },\n            // gets the visible date in the current month.\n            getVisibleDate: function () {\n              var visibleDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(this.value.dateTime));\n              if (visibleDate < this.minDate) {\n                visibleDate = this.minDate;\n              }\n              if (visibleDate > this.maxDate) {\n                this.visibleDate = this.maxDate;\n              }\n              visibleDate.dateTime.setHours(0);\n              var dayInMonth = visibleDate.day;\n              var newVisibleDate = $.jqx._jqxDateTimeInput.getDateTime(visibleDate._addDays(-dayInMonth + 1));\n              visibleDate = newVisibleDate;\n              return visibleDate;\n            },\n            destroy: function (removeFromDom) {\n              $.jqx.utilities.resize(this.host, null, true);\n              this.host.removeClass();\n              if (removeFromDom != false) {\n                this.host.remove();\n              }\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg ? arg : {};\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              if (id == 0 || id == 1 || id == 2 || id == 3 || id == 4 || id == 5 || id == 6 || id == 7 || id == 8) {\n                event.args.date = event.args.selectedDate = this.getDate();\n                event.args.range = this.getRange();\n                var start = this.getViewStart();\n                var end = this.getViewEnd();\n                event.args.view = {\n                  from: start,\n                  to: end\n                };\n              }\n              if (id == 7) {\n                var selectionType = args.selectionType;\n                if (!selectionType) selectionType = null;\n                if (selectionType == \"key\") {\n                  selectionType = \"keyboard\";\n                }\n                if (selectionType == \"none\") {\n                  selectionType = null;\n                }\n                args.type = selectionType;\n              }\n              var result = this.host.trigger(event);\n              if (id == 0 || id == 1) {\n                result = false;\n              }\n              return result;\n            },\n            propertyMap: function (key) {\n              if (key == \"value\") {\n                if (this.selectionMode != 'range') {\n                  return this.getDate();\n                } else return this.getRange();\n              }\n              return null;\n            },\n            _setSize: function () {\n              var month = this.host.find(\"#View\" + this.element.id);\n              if (month.length > 0) {\n                this.setCalendarSize();\n                month[0].style.height = \"100%\";\n                month[0].style.width = \"100%\";\n                /*if (this.height != undefined && !isNaN(this.height)) {\r\n                    month.height(this.height);\r\n                }\r\n                else if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\r\n                    month.height(this.height);\r\n                }\r\n                  if (this.width != undefined && !isNaN(this.width)) {\r\n                    month.width(this.width);\r\n                }\r\n                else if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\r\n                    month.width(this.width);\r\n                }*/\n\n                var contentHeight = this.month.height() - this.titleHeight - this.columnHeaderHeight;\n                var calendarID = \"View\" + this.element.id;\n                month.find('#cellsTable' + calendarID).height(contentHeight);\n                month.find('#calendarRowHeader' + calendarID).height(contentHeight);\n                this.refreshControl();\n              }\n            },\n            resize: function () {\n              this._setSize();\n            },\n            clear: function () {\n              if (this.selectionMode == \"range\") {\n                this._clicks = 1;\n                this.setRange(null, null);\n                this._raiseEvent(7);\n              } else {\n                this.setDate(null, 'mouse');\n              }\n              this._clicks = 0;\n              this.selection = {\n                from: null,\n                to: null\n              };\n            },\n            today: function () {\n              if (this.selectionMode == 'range') {\n                this.setRange(new Date(), new Date());\n              } else {\n                this.setDate(new Date(), 'mouse');\n              }\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object._setSize();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"enableHover\") return;\n              if (key == \"keyboardNavigation\") return;\n              if (key == 'localization') {\n                if (this.localization) {\n                  if (this.localization.backString) {\n                    this.backText = this.localization.backString;\n                  }\n                  if (this.localization.forwardString) {\n                    this.forwardText = this.localization.forwardString;\n                  }\n                  if (this.localization.todayString) {\n                    this.todayString = this.localization.todayString;\n                  }\n                  if (this.localization.clearString) {\n                    this.clearString = this.localization.clearString;\n                  }\n                  this.firstDayOfWeek = this.localization.calendar.firstDay;\n                }\n              }\n              if (key == 'culture') {\n                try {\n                  if ($.global) {\n                    $.global.preferCulture(object.culture);\n                    object.localization.calendar = $.global.culture.calendar;\n                  } else if (window.Globalize) {\n                    var culture = window.Globalize.culture(object.culture);\n                    object.localization.calendar = culture.calendar;\n                  }\n                  if (object.localization.calendar && object.localization.calendar.firstDay != undefined && object.culture != \"default\") {\n                    object.firstDayOfWeek = object.localization.calendar.firstDay;\n                  }\n                } catch (error) {}\n              }\n              if (key == \"views\") {\n                if (object.views.indexOf('month') == -1) object.view = \"year\";\n                if (object.views.indexOf('year') == -1 && object.views.indexOf('month') == -1) object.view = \"decade\";\n                object.render();\n                return;\n              }\n              if (key == \"showFooter\") {\n                object.render();\n              }\n              if (key == 'width' || key == 'height') {\n                object._setSize();\n                return;\n              } else if (key == 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              } else if (key == \"rowHeaderWidth\" || key == \"showWeekNumbers\") {\n                object.render();\n              } else {\n                object.view = \"month\";\n                object.render();\n                object.refreshControl();\n              }\n              if (key === \"firstDayOfWeek\") {\n                object.refreshControl();\n              }\n            }\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          $.jqx._jqxCalendar.cell = function (date) {\n            var cell = {\n              dateTime: new $.jqx._jqxDateTimeInput.getDateTime(date),\n              _date: date,\n              getDate: function () {\n                return this._date;\n              },\n              setDate: function (date) {\n                this.dateTime = new $.jqx._jqxDateTimeInput.getDateTime(date);\n                this._date = date;\n              },\n              isToday: false,\n              isWeekend: false,\n              isOtherMonth: false,\n              isVisible: true,\n              isSelected: false,\n              isHighlighted: false,\n              element: null,\n              row: -1,\n              column: -1,\n              tooltip: null\n            };\n            return cell;\n          }; // calendar cell\n\n          $.jqx._jqxCalendar.monthView = function (startDate, endDate, cells, rowHeaderCells, columnHeaderCells, element) {\n            var month = {\n              start: startDate,\n              end: endDate,\n              cells: cells,\n              rowCells: rowHeaderCells,\n              columnCells: columnHeaderCells,\n              element: element\n            };\n            return month;\n          }; // calendar month\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/4545: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxCheckBox\", \"\", {});\n          $.extend($.jqx._jqxCheckBox.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: Number\n                // Default: 250\n                // Gets or sets the delay of the fade animation when the CheckBox is going to be opened.\n                animationShowDelay: 300,\n                // Type: Number\n                // Default: 300\n                // Gets or sets the delay of the fade animation when the CheckBox is going to be closed. \n                animationHideDelay: 300,\n                // Type: Number.\n                // Default: null.\n                // Sets the width.\n                width: null,\n                // Type: Number.\n                // Default: null.\n                // Sets the height.\n                height: null,\n                // Type: String\n                // Default: '16px'\n                // Gets or sets the checkbox's size.\n                boxSize: '16px',\n                // Type: Bool and Null\n                // Default: false\n                // Gets or sets the ckeck state.\n                // Possible Values: true, false and null.\n                checked: false,\n                // Type: Bool\n                // Default: false\n                // Gets or sets whether the checkbox has 3 states - checked, unchecked and indeterminate.\n                hasThreeStates: false,\n                // Type: Bool\n                // Default: false\n                // Gets whether the CheckBox is disabled.\n                disabled: false,\n                // Type: Bool\n                // Default: true\n                // Gets or sets whether the clicks on the container are handled as clicks on the check box.\n                enableContainerClick: true,\n                // Type: Bool\n                // Default: true\n                // Gets or sets whether the checkbox is locked. In this mode the user is not allowed to check/uncheck the checkbox.\n                locked: false,\n                // Type: String\n                // Default: ''\n                // Gets or sets the group name. When this property is set, the checkboxes in the same group behave as radio buttons.\n                groupName: '',\n                keyboardCheck: true,\n                enableHover: true,\n                hasInput: true,\n                rtl: false,\n                updated: null,\n                disabledContainer: false,\n                changeType: null,\n                _canFocus: true,\n                rippleEffect: true,\n                aria: {\n                  \"aria-checked\": {\n                    name: \"checked\",\n                    type: \"boolean\"\n                  },\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                // 'checked' is triggered when the checkbox is checked.\n                // 'unchecked' is triggered when the checkbox is unchecked.\n                // 'indeterminate' is triggered when the checkbox's ckecked property is going to be null.\n                // 'change' is triggered when the checkbox's state is changed.\n                events: ['checked', 'unchecked', 'indeterminate', 'change']\n              };\n              if (this === $.jqx._jqxCheckBox.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var that = this;\n              that._createFromInput(\"CheckBox\");\n              that.render();\n            },\n            _createFromInput: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.value) {\n                  properties.value = that.field.value;\n                }\n                if (that.field.checked) {\n                  properties.checked = true;\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                }\n                var textField = that.element.nextSibling;\n                var hasTextField = false;\n                if (textField && (textField.nodeName == \"#text\" || textField.nodeName == \"span\")) {\n                  hasTextField = true;\n                }\n                var offsetWidth = 0;\n                var wrapper = $(\"<div></div>\", properties);\n                if (hasTextField) {\n                  wrapper.append(textField);\n                  var f = $(\"<span>\" + $(textField).text() + \"</span>\");\n                  f.appendTo($(document.body));\n                  offsetWidth += f.width();\n                  f.remove();\n                }\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width() + offsetWidth + 10;\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight() + 10;\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n            },\n            _addInput: function () {\n              if (this.hasInput) {\n                if (this.input) this.input.remove();\n                var name = this.host.attr('name');\n                this.input = $(\"<input type='hidden'/>\");\n                this.host.append(this.input);\n                if (name) {\n                  this.input.attr('name', name);\n                }\n                this.input.val(this.checked);\n                this.host.attr('role', 'checkbox');\n                $.jqx.aria(this);\n              }\n            },\n            render: function () {\n              this.init = true;\n              var me = this;\n              this.setSize();\n              this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {\n                me.setSize();\n              };\n              this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {\n                me.setSize();\n              };\n              this._removeHandlers();\n              if (!this.width) this.host.css('overflow-x', 'visible');\n              if (!this.height) this.host.css('overflow-y', 'visible');\n              if (this.checkbox) {\n                this.checkbox.remove();\n                this.checkbox = null;\n              }\n              if (this.checkMark) {\n                this.checkMark.remove();\n                this.checkMark = null;\n              }\n              if (this.box) {\n                this.box.remove();\n                this.box = null;\n              }\n              if (this.clear) {\n                this.clear.remove();\n                this.clear = null;\n              }\n              if (this.boxSize == null) this.boxSize = 16;\n              var boxSize = parseInt(this.boxSize) + 'px';\n              var checkSize = \"16px\";\n              var ml = Math.floor((parseInt(this.boxSize) - 16) / 2);\n              var mt = ml;\n              ml += \"px\";\n              mt += \"px\";\n              if (parseInt(this.boxSize) != 16) {\n                this.checkbox = $('<div><div style=\"width: ' + boxSize + '; height: ' + boxSize + ';\"><span style=\"position: relative; left: ' + ml + '; top: ' + mt + '; width: ' + checkSize + '; height: ' + checkSize + ';\"></span></div></div>');\n              } else {\n                this.checkbox = $('<div><div style=\"width: ' + boxSize + '; height: ' + boxSize + ';\"><span style=\"width: ' + boxSize + '; height: ' + boxSize + ';\"></span></div></div>');\n              }\n              this.host.prepend(this.checkbox);\n              if (!this.disabledContainer) {\n                if (!this.host.attr('tabIndex')) {\n                  this.host.attr('tabIndex', 0);\n                }\n                this.clear = $('<div style=\"clear: both;\"></div>');\n                this.host.append(this.clear);\n              }\n              this.checkMark = $(this.checkbox[0].firstChild.firstChild); //$(this.checkbox).find('span');\n              this.box = this.checkbox;\n              this.box.addClass(this.toThemeProperty('jqx-checkbox-default') + \" \" + this.toThemeProperty('jqx-fill-state-normal') + \" \" + this.toThemeProperty('jqx-rc-all'));\n              if (this.disabled) {\n                this.disable();\n              }\n              if (!this.disabledContainer) {\n                this.host.addClass(this.toThemeProperty('jqx-widget'));\n                this.host.addClass(this.toThemeProperty('jqx-checkbox'));\n              }\n              if (this.locked && !this.disabledContainer) {\n                this.host.css('cursor', 'auto');\n              }\n              var checked = this.element.getAttribute('checked');\n              if (checked == 'checked' || checked == 'true' || checked == true) {\n                this.checked = true;\n              }\n              this._addInput();\n              this._render();\n              this._addHandlers();\n              this.init = false;\n              this._centerBox();\n              if (this.isMaterialized()) {\n                if (this.rippleEffect) {\n                  $(this.checkbox).addClass('ripple');\n                  $.jqx.ripple($(this.checkbox), this.host, \"checkbox\");\n                }\n              }\n            },\n            _centerBox: function () {\n              if (this.height && this.height.toString().indexOf(\"%\") == -1 && this.box) {\n                var hostHeight = parseInt(this.height);\n                this.host.css('line-height', hostHeight + \"px\");\n                var top = hostHeight - parseInt(this.boxSize) - 1;\n                top /= 2;\n                this.box.css('margin-top', parseInt(top));\n              }\n            },\n            refresh: function (initialRefresh) {\n              if (!initialRefresh) {\n                this.setSize();\n                this._render();\n              }\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this.refresh();\n            },\n            setSize: function () {\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.host.width(this.width);\n              } else if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.element.style.width = this.width;\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.host.height(this.height);\n              } else if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.element.style.height = this.height;\n              }\n              this._centerBox();\n            },\n            _addHandlers: function () {\n              var me = this;\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              var eventName = 'mousedown';\n              if (isTouchDevice) eventName = $.jqx.mobile.getTouchEventName('touchend');\n              this.addHandler(this.box, eventName, function (event) {\n                if (!me.disabled && !me.enableContainerClick && !me.locked) {\n                  me.changeType = \"mouse\";\n                  me.toggle();\n                  if (me.updated) {\n                    event.owner = me;\n                    me.updated(event, me.checked, me.oldChecked);\n                  }\n                  if (event.preventDefault) {\n                    event.preventDefault();\n                  }\n                  return false;\n                }\n              });\n              if (!this.disabledContainer) {\n                this.addHandler(this.host, 'keydown', function (event) {\n                  if (!me.disabled && !me.locked && me.keyboardCheck) {\n                    if (event.keyCode == 32) {\n                      if (!me._canFocus) {\n                        return true;\n                      }\n                      me.changeType = \"keyboard\";\n                      me.toggle();\n                      if (me.updated) {\n                        event.owner = me;\n                        me.updated(event, me.checked, me.oldChecked);\n                      }\n                      if (event.preventDefault) {\n                        event.preventDefault();\n                      }\n                      return false;\n                    }\n                  }\n                });\n                this.addHandler(this.host, eventName, function (event) {\n                  if (!me.disabled && me.enableContainerClick && !me.locked) {\n                    me.clickTime = new Date();\n                    me.changeType = \"mouse\";\n                    me.toggle();\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    if (me._canFocus) {\n                      me.focus();\n                    }\n                    return false;\n                  }\n                });\n                this.addHandler(this.host, 'selectstart', function (event) {\n                  if (!me.disabled && me.enableContainerClick) {\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    return false;\n                  }\n                });\n                this.addHandler(this.host, 'mouseup', function (event) {\n                  if (!me.disabled && me.enableContainerClick) {\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                  }\n                });\n                this.addHandler(this.host, 'focus', function (event) {\n                  if (!me.disabled && !me.locked) {\n                    if (!me._canFocus) {\n                      return true;\n                    }\n                    if (me.enableHover) {\n                      me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));\n                    }\n                    me.box.addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    $(me.checkbox).removeClass('active');\n                    if (!me.clickTime || me.clickTime && new Date() - me.clickTime > 300) {\n                      $(me.checkbox).addClass('active');\n                    }\n                    me.hovered = true;\n                    return false;\n                  }\n                });\n                this.addHandler(this.host, 'blur', function (event) {\n                  $(me.checkbox).removeClass('active');\n                  if (!me.disabled && !me.locked) {\n                    if (!me._canFocus) {\n                      return true;\n                    }\n                    if (me.enableHover) {\n                      me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));\n                    }\n                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    me.hovered = false;\n                    return false;\n                  }\n                });\n                this.addHandler(this.host, 'mouseenter', function (event) {\n                  if (me.locked) {\n                    me.host.css('cursor', 'arrow');\n                  }\n                  if (me.enableHover) {\n                    if (!me.disabled && me.enableContainerClick && !me.locked) {\n                      me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));\n                      me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      if (event.preventDefault) {\n                        event.preventDefault();\n                      }\n                      me.hovered = true;\n                      return false;\n                    }\n                  }\n                });\n                this.addHandler(this.host, 'mouseleave', function (event) {\n                  if (me.enableHover) {\n                    if (!me.disabled && me.enableContainerClick && !me.locked) {\n                      me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));\n                      me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      if (event.preventDefault) {\n                        event.preventDefault();\n                      }\n                      me.hovered = false;\n                      return false;\n                    }\n                  }\n                });\n                this.addHandler(this.box, 'mouseenter', function () {\n                  if (me.locked) {\n                    return;\n                  }\n                  if (!me.disabled && !me.enableContainerClick) {\n                    me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));\n                    me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                });\n                this.addHandler(this.box, 'mouseleave', function () {\n                  if (!me.disabled && !me.enableContainerClick) {\n                    me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));\n                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                });\n              }\n            },\n            focus: function () {\n              try {\n                this.host.focus();\n              } catch (error) {}\n            },\n            _removeHandlers: function () {\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              var eventName = 'mousedown';\n              if (isTouchDevice) eventName = 'touchend';\n              if (this.box) {\n                this.removeHandler(this.box, eventName);\n                this.removeHandler(this.box, 'mouseenter');\n                this.removeHandler(this.box, 'mouseleave');\n              }\n              this.removeHandler(this.host, eventName);\n              this.removeHandler(this.host, 'mouseup');\n              this.removeHandler(this.host, 'selectstart');\n              this.removeHandler(this.host, 'mouseenter');\n              this.removeHandler(this.host, 'mouseleave');\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.host, 'blur');\n              this.removeHandler(this.host, 'focus');\n            },\n            _render: function () {\n              if (!this.disabled) {\n                if (this.enableContainerClick) {\n                  this.host.css('cursor', 'pointer');\n                } else if (!this.init) {\n                  this.host.css('cursor', 'auto');\n                }\n              } else {\n                this.disable();\n              }\n              if (this.rtl) {\n                this.box.addClass(this.toThemeProperty('jqx-checkbox-rtl'));\n                this.host.addClass(this.toThemeProperty('jqx-rtl'));\n              }\n              this.updateStates();\n              this.host.attr(\"checked\", this.checked);\n            },\n            _setState: function (checked, locked) {\n              if (this.checked != checked) {\n                this.checked = checked;\n                if (this.checked) {\n                  this.checkMark[0].className = this.toThemeProperty('jqx-checkbox-check-checked');\n                } else if (this.checked == null) {\n                  this.checkMark[0].className = this.toThemeProperty('jqx-checkbox-check-indeterminate');\n                } else {\n                  this.checkMark[0].className = \"\";\n                }\n              }\n              if (locked === false || locked === true) this.locked = locked;\n              if (checked) {\n                this.element.setAttribute('checked', true);\n              } else {\n                this.element.removeAttribute(\"checked\");\n              }\n            },\n            val: function (value) {\n              if (arguments.length == 0 || value != null && typeof value == \"object\") {\n                return this.checked;\n              }\n              if (typeof value == \"string\") {\n                if (value == \"true\") this.check();\n                if (value == \"false\") this.uncheck();\n                if (value == \"\") this.indeterminate();\n              } else {\n                if (value == true) this.check();\n                if (value == false) this.uncheck();\n                if (value == null) this.indeterminate();\n              }\n              return this.checked;\n            },\n            // checks the ckeckbox.\n            check: function () {\n              this.checked = true;\n              var me = this;\n              this.checkMark.removeClass();\n              this.element.setAttribute('checked', true);\n              if ($.jqx.browser.msie || this.animationShowDelay == 0) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));\n              } else {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));\n                this.checkMark.css('opacity', 0);\n                this.checkMark.stop().animate({\n                  opacity: 1\n                }, this.animationShowDelay, function () {});\n              }\n              if (this.groupName != null && this.groupName.length > 0) {\n                var checkboxes = $.find(this.toThemeProperty('.jqx-checkbox', true));\n                $.each(checkboxes, function () {\n                  var groupName = $(this).jqxCheckBox('groupName');\n                  if (groupName == me.groupName && this != me.element) {\n                    $(this).jqxCheckBox('uncheck');\n                  }\n                });\n              }\n              var changeType = this.changeType;\n              this._raiseEvent('0', {\n                checked: true\n              });\n              this.changeType = changeType;\n              this._raiseEvent('3', {\n                checked: true\n              });\n              if (this.input != undefined) {\n                this.input.val(this.checked);\n                $.jqx.aria(this, \"aria-checked\", this.checked);\n                this.host.attr(\"checked\", this.checked);\n              }\n            },\n            // unchecks the checkbox.\n            uncheck: function () {\n              this.checked = false;\n              var me = this;\n              this.element.removeAttribute('checked');\n              if ($.jqx.browser.msie || this.animationHideDelay == 0) {\n                if (me.checkMark[0].className != \"\") {\n                  me.checkMark[0].className = \"\";\n                }\n              } else {\n                this.checkMark.css('opacity', 1);\n                this.checkMark.stop().animate({\n                  opacity: 0\n                }, this.animationHideDelay, function () {\n                  if (me.checkMark[0].className != \"\") {\n                    me.checkMark[0].className = \"\";\n                  }\n                });\n              }\n              var changeType = this.changeType;\n              this._raiseEvent('1');\n              this.changeType = changeType;\n              this._raiseEvent('3', {\n                checked: false\n              });\n              if (this.input != undefined) {\n                this.input.val(this.checked);\n                $.jqx.aria(this, \"aria-checked\", this.checked);\n                this.host.attr(\"checked\", this.checked);\n              }\n            },\n            // sets the indeterminate state.\n            indeterminate: function () {\n              this.checked = null;\n              this.checkMark.removeClass();\n              if ($.jqx.browser.msie || this.animationShowDelay == 0) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));\n              } else {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));\n                this.checkMark.css('opacity', 0);\n                this.checkMark.stop().animate({\n                  opacity: 1\n                }, this.animationShowDelay, function () {});\n              }\n              var changeType = this.changeType;\n              this._raiseEvent('2');\n              this._raiseEvent('3', {\n                checked: null\n              });\n              if (this.input != undefined) {\n                this.input.val(this.checked);\n                $.jqx.aria(this, \"aria-checked\", \"undefined\");\n                this.host.attr(\"checked\", \"undefined\");\n              }\n            },\n            // toggles the check state.\n            toggle: function () {\n              if (this.disabled) return;\n              if (this.locked) return;\n              if (this.groupName != null && this.groupName.length > 0) {\n                if (this.checked != true) {\n                  this.checked = true;\n                  this.updateStates();\n                }\n                return;\n              }\n              this.oldChecked = this.checked;\n              if (this.checked == true) {\n                this.checked = this.hasThreeStates ? null : false;\n              } else {\n                this.checked = this.checked != null;\n              }\n              this.updateStates();\n              if (this.input != undefined) {\n                this.input.val(this.checked);\n              }\n            },\n            // updates check states depending on the value of the 'checked' property.\n            updateStates: function () {\n              if (this.checked) {\n                this.check();\n              } else if (this.checked == false) {\n                this.uncheck();\n              } else if (this.checked == null) {\n                this.indeterminate();\n              }\n            },\n            // disables the checkbox.\n            disable: function () {\n              this.disabled = true;\n              if (this.checked == true) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-disabled'));\n              } else if (this.checked == null) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));\n              }\n              this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled-box'));\n              this.host.addClass(this.toThemeProperty('jqx-checkbox-disabled'));\n              this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled'));\n              $.jqx.aria(this, \"aria-disabled\", this.disabled);\n            },\n            // enables the checkbox.\n            enable: function () {\n              if (this.checked == true) {\n                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-disabled'));\n              } else if (this.checked == null) {\n                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));\n              }\n              this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled-box'));\n              this.host.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));\n              this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));\n              this.disabled = false;\n              $.jqx.aria(this, \"aria-disabled\", this.disabled);\n            },\n            destroy: function () {\n              this.host.remove();\n            },\n            _raiseEvent: function (id, args) {\n              if (this.init) return;\n              var evt = this.events[id];\n              var event = new $.Event(evt);\n              event.owner = this;\n              if (!args) args = {};\n              args.type = this.changeType;\n              this.changeType = null;\n              event.args = args;\n              try {\n                var result = this.host.trigger(event);\n              } catch (error) {}\n              return result;\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object.setSize();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"enableContainerClick\" && !object.disabled && !object.locked) {\n                if (value) {\n                  object.host.css('cursor', 'pointer');\n                } else object.host.css('cursor', 'auto');\n              }\n              if (key == \"rtl\") {\n                if (value) {\n                  object.box.addClass(object.toThemeProperty('jqx-checkbox-rtl'));\n                  object.host.addClass(object.toThemeProperty('jqx-rtl'));\n                } else {\n                  object.box.removeClass(object.toThemeProperty('jqx-checkbox-rtl'));\n                  object.host.removeClass(object.toThemeProperty('jqx-rtl'));\n                }\n              }\n              if (key == \"boxSize\") {\n                object.render();\n              }\n              if (key == 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n              if (key == 'checked') {\n                if (value != oldvalue) {\n                  switch (value) {\n                    case true:\n                      object.check();\n                      break;\n                    case false:\n                      object.uncheck();\n                      break;\n                    case null:\n                      object.indeterminate();\n                      break;\n                  }\n                }\n              }\n              if (key == 'disabled') {\n                if (value != oldvalue) {\n                  if (value) {\n                    object.disable();\n                  } else object.enable();\n                }\n              }\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/3960: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxColorPicker\", \"\", {});\n          $.extend($.jqx._jqxColorPicker.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // enables / disables the button\n                disabled: false,\n                // sets height to the button.\n                height: null,\n                // sets width to the button.\n                width: null,\n                // sets the color.\n                color: new $.jqx.color({\n                  hex: 'ff0000'\n                }),\n                redString: \"R:\",\n                greenString: \"G:\",\n                blueString: \"B:\",\n                showTransparent: false,\n                colorMode: \"saturation\",\n                _delayLoading: false,\n                events: ['colorchange']\n              };\n              if (this === $.jqx._jqxColorPicker.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            _createFromInput: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.getAttribute('value')) {\n                  var value = that.field.getAttribute('value');\n                  that.color = new $.jqx.color({\n                    hex: value\n                  });\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width();\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight();\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n            },\n            createInstance: function (args) {\n              this._createFromInput(\"jqxColorPicker\");\n              this.render();\n              var self = this;\n              $.jqx.utilities.resize(this.host, function () {\n                self._setSize();\n                self.refresh();\n              }, false, !this._delayLoading);\n            },\n            // createInstance\n\n            render: function () {\n              this.element.innerHTML = \"\";\n              var self = this;\n              this._isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (typeof this.color == \"string\") {\n                this.color = new $.jqx.color({\n                  hex: this.color\n                });\n              }\n              this._setSize();\n              this.host.addClass(this.toThemeProperty('jqx-widget'));\n              this.host.addClass(this.toThemeProperty('jqx-reset'));\n              this.host.addClass(this.toThemeProperty('jqx-color-picker'));\n              this.container = $(\"<div style='width: 100%; height: 100%; position: relative;'></div>\");\n              this.container.appendTo(this.host);\n              this.colorMap = $(\"<div style='left: 0; top: 0; position: absolute;'></div>\");\n              this.colorMap.appendTo(this.container);\n              this.colorBar = $(\"<div style='left: 0; top: 0; position: absolute;'></div>\");\n              this.colorBar.appendTo(this.container);\n              this.colorPanel = $(\"<div style='left: 0; top: 0; position: absolute;'></div>\");\n              this.colorPanel.appendTo(this.container);\n              this.hexPanel = $(\"<div style='float: left;'></div>\");\n              this.hexPanel.appendTo(this.colorPanel);\n              this.hexPanel.append('<span style=\"text-align: left;\" >#</span>');\n              this.hex = $(\"<input maxlength='6' style='height: 18px;'/>\");\n              this.hex.addClass(this.toThemeProperty('jqx-input'));\n              this.hex.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.hex.appendTo(this.hexPanel);\n              this.colorPanel.append('<div style=\"font-size: 1px; clear: both;\"></div>');\n              this.rgb = $(\"<div style='margin-top: 2px;'></div>\");\n              this.rgb.appendTo(this.colorPanel);\n              this.red = $(\"<input style='width: 25px; height: 18px;' maxlength='3'/>\");\n              this.red.addClass(this.toThemeProperty('jqx-input'));\n              this.red.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.rgb.append('<span style=\"text-align: left;\">' + this.redString + '</span>');\n              this.red.appendTo(this.rgb);\n              this.green = $(\"<input style='margin-right: 2px; height: 18px; width: 25px;' maxlength='3'/>\");\n              this.green.addClass(this.toThemeProperty('jqx-input'));\n              this.green.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.rgb.append('<span style=\"text-align: left;\">' + this.greenString + '</span>');\n              this.green.appendTo(this.rgb);\n              this.colorPanel.addClass(this.toThemeProperty('jqx-color-picker-map-overlay'));\n              this._mapImageOverlayURL = this._getImageUrl(this.colorPanel);\n              this.colorPanel.removeClass(this.toThemeProperty('jqx-color-picker-map-overlay'));\n              this.blue = $(\"<input style='height: 18px; width: 25px;' maxlength='3'/>\");\n              this.blue.addClass(this.toThemeProperty('jqx-input'));\n              this.blue.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.rgb.append('<span style=\"text-align: left;\">' + this.blueString + '</span>');\n              this.blue.appendTo(this.rgb);\n              this.preview = $(\"<div style='background: red; position: absolute;'></div>\");\n              this.preview.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.preview.appendTo(this.colorPanel);\n              this.colorBarPointer = $(\"<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>\");\n              this.colorBarPointer.addClass(this.toThemeProperty('jqx-color-picker-bar-pointer'));\n              this.colorMapPointer = $(\"<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>\");\n              this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));\n              this.transparent = $(\"<div style='text-align: center; clear: both;'><a style='text-align: center;' href='#'>transparent</a></div>\");\n              if (this.disabled) {\n                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                this.element.disabled = true;\n              }\n              this._addHandlers();\n            },\n            val: function (value) {\n              if (arguments.length == 0) {\n                return \"#\" + this.color.hex;\n              }\n              this.setColor(value);\n              return this.color.hex;\n            },\n            _setPositionFromValue: function () {\n              var self = this;\n              var x = self.color.h;\n              var y = 100 - self.color.v;\n              var height = self.colorMap.height();\n              var width = self.colorMap.width();\n              var left = x * width / 360;\n              var top = y * height / 100;\n              if (this.colorMode == 'saturation') {\n                var sliderValue = 100 - self.color.s;\n                sliderValue = sliderValue * height / 100;\n                self._saturation = 100 - self.color.s;\n                self.colorMapPointer.css('margin-left', left - 8);\n                self.colorMapPointer.css('margin-top', top - 8);\n                self.colorBarPointer.css('margin-top', sliderValue - 8);\n                self.colorMapImageOverlay.css('opacity', (100 - self.color.s) / 100);\n              } else {\n                var x = self.color.s;\n                var left = x * width / 100;\n                var top = y * height / 100;\n                var sliderValue = 360 - self.color.h;\n                sliderValue = sliderValue * height / 360;\n                self._hue = self.color.h;\n                self.colorMapPointer.css('margin-left', left - 8);\n                self.colorMapPointer.css('margin-top', top - 8);\n                self.colorBarPointer.css('margin-top', sliderValue - 8);\n              }\n            },\n            updateRGB: function () {\n              var self = this;\n              self.color.setRgb(self.red.val(), self.green.val(), self.blue.val());\n              self._updateUI();\n              self._raiseEvent('0', {\n                color: self.color\n              });\n              self.color.transparent = false;\n            },\n            _setPosition: function (event, element, pointer) {\n              var pageX = parseInt(event.pageX);\n              var offsetLeft = parseInt(element.offset().left);\n              var pageY = parseInt(event.pageY);\n              var offsetTop = parseInt(element.offset().top);\n              if (this._isTouchDevice) {\n                var pos = $.jqx.position(event);\n                pageX = pos.left;\n                pageY = pos.top;\n              }\n              if (pointer[0].className.indexOf('jqx-color-picker-bar') == -1) {\n                pointer.css('margin-left', pageX - 8 - offsetLeft);\n              }\n              if (pageY >= offsetTop && pageY <= offsetTop + element.height()) {\n                pointer.css('margin-top', pageY - 8 - offsetTop);\n              }\n            },\n            _handleKeyInput: function (self, event, input) {\n              if (self.disabled) return;\n              if (!self._validateKey(event)) return event;\n              input.val(self._setValueInRange(input.val(), 0, 255));\n              this.updateRGB();\n              this._setPositionFromValue();\n            },\n            _addHandlers: function () {\n              var self = this;\n              this.addHandler(this.colorMapPointer, 'dragStart', function (event) {\n                event.preventDefault();\n                return false;\n              });\n              this.addHandler(this.colorBarPointer, 'dragStart', function (event) {\n                event.preventDefault();\n                return false;\n              });\n              this.addHandler(this.transparent, 'click', function (event) {\n                self._raiseEvent('0', {\n                  color: 'transparent'\n                });\n                event.preventDefault();\n                self.color.transparent = true;\n              });\n              this.addHandler(this.host, 'selectionstart', function (event) {\n                event.preventDefault();\n                return false;\n              });\n              this.addHandler(this.blue, 'keyup blur', function (event) {\n                self._handleKeyInput(self, event, self.blue);\n              });\n              this.addHandler(this.green, 'keyup blur', function (event) {\n                self._handleKeyInput(self, event, self.green);\n              });\n              this.addHandler(this.red, 'keyup blur', function (event) {\n                self._handleKeyInput(self, event, self.red);\n              });\n              this.addHandler(this.hex, 'keyup blur', function (event) {\n                if (self.disabled) return;\n                if (!self._validateKey(event)) return event;\n                if (self.hex.val().toString().length == 6) {\n                  self.hex.val(self.color.validateHex(self.hex.val()));\n                  self.color.setHex(self.hex.val());\n                  self._updateUI();\n                  self._setPositionFromValue();\n                  self._raiseEvent('0', {\n                    color: self.color\n                  });\n                }\n              });\n              this.addHandler(this.colorMap, 'dragstart', function (event) {\n                event.preventDefault();\n                return false;\n              });\n              var _setPositionInColorMap = function (event) {\n                self._setPosition(event, self.colorMap, self.colorMapPointer);\n                if (self.colorMode == 'saturation') {\n                  var point = self._valuesFromMouse(event, self.colorMap, 360, 100);\n                  if (point.x > 360) point.x = 360;\n                  self.color.setHsv(point.x, self._saturation != null ? 100 - self._saturation : 100, 100 - point.y);\n                } else {\n                  var point = self._valuesFromMouse(event, self.colorMap, 100, 100);\n                  if (point.x > 100) point.x = 100;\n                  self.color.setHsv(self._hue != null ? self._hue : 360, point.x, 100 - point.y);\n                }\n                self._updateUI();\n                self._raiseEvent('0', {\n                  color: self.color\n                });\n                self.color.transparent = false;\n              };\n              var mouseDownEvent = \"mousedown.picker\" + this.element.id;\n              if (this._isTouchDevice) {\n                mouseDownEvent = $.jqx.mobile.getTouchEventName('touchstart') + \".picker\" + this.element.id;\n              }\n              this.addHandler(this.colorMap, mouseDownEvent, function (event) {\n                if (self.disabled) return;\n                self.beginDrag = true;\n                _setPositionInColorMap(event);\n              });\n              var mouseMoveEvent = \"mousemove.picker\" + this.element.id;\n              if (this._isTouchDevice) {\n                mouseMoveEvent = $.jqx.mobile.getTouchEventName('touchmove') + \".picker\" + this.element.id;\n              }\n              this.addHandler($(document), mouseMoveEvent, function (event) {\n                if (self.disabled) return;\n                if (self.beginDrag == true) {\n                  _setPositionInColorMap(event);\n                  if (self._isTouchDevice) {\n                    event.preventDefault();\n                  }\n                }\n              });\n              if (!this._isTouchDevice) {\n                this.addHandler(this.colorBar, 'dragstart', function (event) {\n                  event.preventDefault();\n                  return false;\n                });\n              }\n              var _setPositionInColorBar = function (event) {\n                self._setPosition(event, self.colorBar, self.colorBarPointer);\n                if (self.colorMode == 'saturation') {\n                  var point = self._valuesFromMouse(event, self.colorBar, 100, 100);\n                  self.color.s = point.y;\n                  self._saturation = point.y;\n                  self.colorMapImageOverlay.css('opacity', self.color.s / 100);\n                  self.color.setHsv(self.color.h, 100 - self.color.s, self.color.v);\n                } else {\n                  var point = self._valuesFromMouse(event, self.colorBar, 100, 360);\n                  self.color.h = 360 - point.y;\n                  self._hue = self.color.h;\n                  self.color.setHsv(self.color.h, self.color.s, self.color.v);\n                }\n                self._updateUI();\n                self._raiseEvent('0', {\n                  color: self.color\n                });\n                self.color.transparent = false;\n              };\n              var colorBarMouseMoveEvent = \"mousemove.colorBar\" + this.element.id;\n              var colorBarMouseDownEvent = \"mousedown.colorBar\" + this.element.id;\n              var colorBarMouseUpEvent = \"mouseup.colorBar\" + this.element.id;\n              if (this._isTouchDevice) {\n                colorBarMouseMoveEvent = $.jqx.mobile.getTouchEventName('touchmove') + \".colorBar\" + this.element.id;\n                colorBarMouseDownEvent = $.jqx.mobile.getTouchEventName('touchstart') + \".colorBar\" + this.element.id;\n                colorBarMouseUpEvent = $.jqx.mobile.getTouchEventName('touchend') + \".colorBar\" + this.element.id;\n              }\n              this.addHandler(this.colorBar, colorBarMouseDownEvent, function (event) {\n                if (self.disabled) return;\n                self.beginDragBar = true;\n                _setPositionInColorBar(event);\n              });\n              this.addHandler($(document), colorBarMouseMoveEvent, function (event) {\n                if (self.disabled) return;\n                if (self.beginDragBar == true) {\n                  _setPositionInColorBar(event);\n                  if (self._isTouchDevice) {\n                    event.preventDefault();\n                  }\n                }\n              });\n              this.addHandler($(document), colorBarMouseUpEvent, function (event) {\n                if (self.disabled) return;\n                self.beginDrag = false;\n                self.beginDragBar = false;\n              });\n            },\n            _removeHandlers: function () {\n              this.removeHandler(this.transparent, 'click');\n              this.removeHandler(this.host, 'selectionstart');\n              this.removeHandler(this.blue, 'keyup blur');\n              this.removeHandler(this.green, 'keyup blur');\n              this.removeHandler(this.red, 'keyup blur');\n              this.removeHandler(this.hex, 'keyup blur');\n              this.removeHandler(this.colorMap, 'dragstart');\n              this.removeHandler(this.colorBar, 'dragstart');\n              this.removeHandler(this.colorMapPointer, 'dragStart');\n              this.removeHandler(this.colorBarPointer, 'dragStart');\n              var id = this.element.id;\n              var colorBarMouseMoveEvent = \"mousemove.colorBar\" + id;\n              var colorBarMouseDownEvent = \"mousedown.colorBar\" + id;\n              var colorBarMouseUpEvent = \"mouseup.colorBar\" + id;\n              var mouseDownEvent = \"mousedown.picker\" + id;\n              var mouseMoveEvent = \"mousemove.picker\" + id;\n              if (this._isTouchDevice) {\n                colorBarMouseMoveEvent = $.jqx.mobile.getTouchEventName('touchmove') + \".colorBar\" + id;\n                colorBarMouseDownEvent = $.jqx.mobile.getTouchEventName('touchstart') + \".colorBar\" + id;\n                colorBarMouseUpEvent = $.jqx.mobile.getTouchEventName('touchend') + \".colorBar\" + id;\n                mouseDownEvent = $.jqx.mobile.getTouchEventName('touchstart') + \".picker\" + id;\n                mouseMoveEvent = $.jqx.mobile.getTouchEventName('touchmove') + \".picker\" + id;\n              }\n              this.removeHandler(this.colorMap, mouseDownEvent);\n              this.removeHandler(this.colorMap, mouseMoveEvent);\n              this.removeHandler(this.colorBar, colorBarMouseDownEvent);\n              this.removeHandler(this.colorBar, colorBarMouseMoveEvent);\n              this.removeHandler($(document), mouseMoveEvent);\n              this.removeHandler($(document), colorBarMouseMoveEvent);\n              this.removeHandler($(document), colorBarMouseUpEvent);\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg ? arg : {};\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              var result = this.host.trigger(event);\n              return result;\n            },\n            setColor: function (color) {\n              if (!color) return;\n              if (color == 'transparent') {\n                this.color.transparent = true;\n                this.color.hex = \"000\";\n                this.color.r = 0;\n                this.color.g = 0;\n                this.color.b = 0;\n              } else {\n                if (color.r) {\n                  this.color = new $.jqx.color({\n                    rgb: color\n                  });\n                } else {\n                  if (color.substring(0, 1) == '#') {\n                    this.color = new $.jqx.color({\n                      hex: color.substring(1)\n                    });\n                  } else {\n                    this.color = new $.jqx.color({\n                      hex: color\n                    });\n                  }\n                }\n              }\n              this._updateUI();\n              this._setPositionFromValue();\n              this._raiseEvent('0', {\n                color: this.color\n              });\n            },\n            getColor: function () {\n              return this.color;\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._setSize();\n              this.refresh();\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (object.isInitialized == undefined || object.isInitialized == false) return;\n              if (key == 'colorMode') {\n                object.refresh();\n              }\n              if (key == 'color') {\n                object._updateUI();\n                object._setPositionFromValue();\n                object._raiseEvent('0', {\n                  color: value\n                });\n              }\n              if (key == 'width' || key == 'height') {\n                object._setSize();\n                object.refresh();\n              }\n              if (key == 'showTransparent') {\n                object.refresh();\n              }\n              if (key == 'disabled') {\n                this.element.disabled = value;\n                if (value) {\n                  object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                } else {\n                  object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                }\n              }\n            },\n            _valuesFromMouse: function (e, element, maxX, maxY) {\n              var relativeX = 0;\n              var relativeY = 0;\n              var offset = element.offset();\n              var height = element.height();\n              var width = element.width();\n              var x = e.pageX;\n              var y = e.pageY;\n              if (this._isTouchDevice) {\n                var pos = $.jqx.position(e);\n                x = pos.left;\n                y = pos.top;\n              }\n              // mouse relative to object's top left\n              if (x < offset.left) relativeX = 0;else if (x > offset.left + width) relativeX = width;else relativeX = x - offset.left + 1;\n              if (y < offset.top) relativeY = 0;else if (y > offset.top + height) relativeY = height;else relativeY = y - offset.top + 1;\n              var newXValue = parseInt(relativeX / width * maxX);\n              var newYValue = parseInt(relativeY / height * maxY);\n              return {\n                x: newXValue,\n                y: newYValue\n              };\n            },\n            _validateKey: function (e) {\n              if (e.keyCode == 9 ||\n              // TAB\n              e.keyCode == 16 ||\n              // Shift\n              e.keyCode == 38 ||\n              // Up arrow\n              e.keyCode == 29 ||\n              // Right arrow\n              e.keyCode == 40 ||\n              // Down arrow\n              e.keyCode == 17 ||\n              // Down arrow\n              e.keyCode == 37 // Left arrow\n              || e.ctrlKey && (e.keyCode == 'c'.charCodeAt() || e.keyCode == 'v'.charCodeAt()) || e.ctrlKey && (e.keyCode == 'C'.charCodeAt() || e.keyCode == 'V'.charCodeAt())) {\n                return false;\n              }\n              if (e.ctrlKey || e.shiftKey) return false;\n              return true;\n            },\n            _setValueInRange: function (value, min, max) {\n              if (value == '' || isNaN(value)) return min;\n              value = parseInt(value);\n              if (value > max) return max;\n              if (value < min) return min;\n              return value;\n            },\n            destroy: function () {\n              $.jqx.utilities.resize(this.host, null, true);\n              this.host.removeClass();\n              this._removeHandlers();\n              this.host.remove();\n            },\n            setPointerStyle: function (color) {\n              this.colorMapPointer.removeClass();\n              if (color == 'transparent' || color.hex == \"\") {\n                this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));\n              }\n              var nThreshold = 105;\n              var bgDelta = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\n              var foreColor = 255 - bgDelta < nThreshold ? 'Black' : 'White';\n              if (foreColor == 'Black') {\n                this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));\n              } else this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer-alt'));\n            },\n            _updateUI: function () {\n              var self = this;\n              self.red.val(self.color.r);\n              self.green.val(self.color.g);\n              self.blue.val(self.color.b);\n              self.hex.val(self.color.hex);\n              var color = new $.jqx.color({\n                hex: 'fff'\n              });\n              if (this.colorMode == 'saturation') {\n                color.setHsv(this.color.h, 100, this.color.v);\n                self.colorBar.css('background', '#' + color.hex);\n              } else {\n                color.setHsv(this.color.h, 100, 100);\n                self.colorMap.css('background-color', '#' + color.hex);\n              }\n              self.preview.css('background', '#' + this.color.hex);\n              self.setPointerStyle(this.color);\n            },\n            _setSize: function () {\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.host.width(this.width);\n              }\n              ;\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.host.height(this.height);\n              }\n              ;\n              if (this.host.width() < 130) {\n                this.host.width(150);\n              }\n              if (this.host.height() < 70) {\n                this.host.height(70);\n              }\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.host.width(this.width);\n              }\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.host.height(this.height);\n              }\n            },\n            _arrange: function () {\n              var hostHeight = this.host.height();\n              var hostWidth = this.host.width();\n              var height = hostHeight - 44;\n              if (this.showTransparent) {\n                height = hostHeight - 64;\n              }\n              if (height <= 0) return;\n              this.colorMap.width(85 * hostWidth / 100);\n              this.colorMap.height(height);\n              this.colorBar.height(height);\n              this.colorBar.css('left', this.colorMap.width() + 4);\n              this.colorBar.width(8 * hostWidth / 100);\n              this.colorBarPointer.width(this.colorBar.width());\n              this.colorPanel.width(hostWidth);\n              this.colorPanel.height(40);\n              if (this.showTransparent) {\n                this.colorPanel.height(60);\n              }\n              this.colorPanel.css('top', height + 4);\n              this.colorPanel.css('text-align', 'left');\n              this.hex.width(this.colorMap.width() - this.colorBar.width() - 4);\n              var leftMargin = this.red.prev().outerWidth() - this.hex.prev().outerWidth();\n              if (leftMargin < 4) leftMargin = 4;\n              this.hex.css('margin-left', leftMargin + 'px');\n              this.preview.width(this.colorBar.width() + 7);\n              this.preview.height(25);\n              this.preview.addClass(this.toThemeProperty('jqx-rc-all'));\n              this.preview.addClass(this.toThemeProperty('jqx-color-picker-preview'));\n              this.preview.css('left', this.colorMap.width() - 2);\n              this.preview.css('top', '5px');\n              var hexPosition = this.hex.width();\n              var offset = hexPosition - this.blue.prev().outerWidth() - this.green.prev().outerWidth() - 6;\n              if (offset > 0) {\n                this.blue.width(offset / 3);\n                this.green.width(offset / 3);\n                this.red.width(offset / 3);\n                return;\n              }\n            },\n            _getColorPointer: function () {\n              var element = $(\"<div></div>\");\n              element.addClass(this.toThemeProperty('jqx-color-picker-pointer'));\n              return element;\n            },\n            _getImageUrl: function (element) {\n              var imageUrl = element.css('backgroundImage');\n              imageUrl = imageUrl.replace('url(\"', '');\n              imageUrl = imageUrl.replace('\")', '');\n              imageUrl = imageUrl.replace('url(', '');\n              imageUrl = imageUrl.replace(')', '');\n              return imageUrl;\n            },\n            refresh: function () {\n              if (this._delayLoading) return;\n              this._saturation = null;\n              this._hue = null;\n              this.colorMap.removeClass();\n              this.colorBar.removeClass();\n              this.colorMap.addClass(this.toThemeProperty('jqx-disableselect'));\n              this.colorBar.addClass(this.toThemeProperty('jqx-disableselect'));\n              this.colorPanel.addClass(this.toThemeProperty('jqx-color-picker-panel'));\n              this.colorBar.css('background-image', '');\n              this.colorMap.css('background-image', '');\n              if (this.colorMode == 'saturation') {\n                this.colorMap.addClass(this.toThemeProperty('jqx-color-picker-map'));\n                this.colorBar.addClass(this.toThemeProperty('jqx-color-picker-bar'));\n              } else {\n                this.colorMap.addClass(this.toThemeProperty('jqx-color-picker-map-hue'));\n                this.colorBar.addClass(this.toThemeProperty('jqx-color-picker-bar-hue'));\n              }\n              this._barImageURL = this._getImageUrl(this.colorBar);\n              this._mapImageURL = this._getImageUrl(this.colorMap);\n              this._arrange();\n              this.colorBar.children().remove();\n              this.colorBarImageContainer = $(\"<div style='overflow: hidden;'></div>\");\n              this.colorBarImageContainer.width(this.colorBar.width());\n              this.colorBarImageContainer.height(this.colorBar.height());\n              this.colorBarImageContainer.appendTo(this.colorBar);\n              this.colorBarImage = $(\"<img/>\");\n              this.colorBarImage.appendTo(this.colorBarImageContainer);\n              this.colorBarImage.attr('src', this._barImageURL);\n              this.colorBar.css('background-image', 'none');\n              this.colorBarImage.attr('width', this.colorBar.width());\n              this.colorBarImage.attr('height', this.colorBar.height());\n              this.colorBarPointer.appendTo(this.colorBar);\n              this.colorMap.children().remove();\n              this.colorMapImage = $(\"<img/>\");\n              this.colorMapImage.appendTo(this.colorMap);\n              this.colorMapImage.attr('src', this._mapImageURL);\n              this.colorMap.css('background-image', 'none');\n              this.colorMapImage.attr('width', this.colorMap.width());\n              this.colorMapImage.attr('height', this.colorMap.height());\n              this.colorMapImageOverlay = $(\"<img style='position: absolute; left: 0; top: 0;'/>\");\n              this.colorMapImageOverlay.prependTo(this.colorMap);\n              this.colorMapImageOverlay.attr('src', this._mapImageOverlayURL);\n              this.colorMapImageOverlay.attr('width', this.colorMap.width());\n              this.colorMapImageOverlay.attr('height', this.colorMap.height());\n              this.colorMapImageOverlay.css('opacity', 0);\n              this.colorMapPointer.appendTo(this.colorMap);\n              if (this.showTransparent) {\n                this.transparent.appendTo(this.colorPanel);\n              }\n              this._updateUI();\n              this._setPositionFromValue();\n            }\n          });\n          $.jqx.color = function (init) {\n            var color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              h: 0,\n              s: 0,\n              v: 0,\n              hex: '',\n              hexToRgb: function (hex) {\n                hex = this.validateHex(hex);\n                var r = '00',\n                  g = '00',\n                  b = '00';\n                if (hex.length == 6) {\n                  r = hex.substring(0, 2);\n                  g = hex.substring(2, 4);\n                  b = hex.substring(4, 6);\n                } else {\n                  if (hex.length > 4) {\n                    r = hex.substring(4, hex.length);\n                    hex = hex.substring(0, 4);\n                  }\n                  if (hex.length > 2) {\n                    g = hex.substring(2, hex.length);\n                    hex = hex.substring(0, 2);\n                  }\n                  if (hex.length > 0) {\n                    b = hex.substring(0, hex.length);\n                  }\n                }\n                return {\n                  r: this.hexToInt(r),\n                  g: this.hexToInt(g),\n                  b: this.hexToInt(b)\n                };\n              },\n              validateHex: function (hex) {\n                hex = new String(hex).toUpperCase();\n                hex = hex.replace(/[^A-F0-9]/g, '0');\n                if (hex.length > 6) hex = hex.substring(0, 6);\n                return hex;\n              },\n              webSafeDec: function (dec) {\n                dec = Math.round(dec / 51);\n                dec *= 51;\n                return dec;\n              },\n              hexToWebSafe: function (hex) {\n                var r, g, b;\n                if (hex.length == 3) {\n                  r = hex.substring(0, 1);\n                  g = hex.substring(1, 1);\n                  b = hex.substring(2, 1);\n                } else {\n                  r = hex.substring(0, 2);\n                  g = hex.substring(2, 4);\n                  b = hex.substring(4, 6);\n                }\n                return this.intToHex(this.webSafeDec(this.hexToInt(r))) + this.intToHex(this.webSafeDec(this.hexToInt(g))) + this.intToHex(this.webSafeDec(this.hexToInt(b)));\n              },\n              rgbToWebSafe: function (rgb) {\n                return {\n                  r: this.webSafeDec(rgb.r),\n                  g: this.webSafeDec(rgb.g),\n                  b: this.webSafeDec(rgb.b)\n                };\n              },\n              rgbToHex: function (rgb) {\n                return this.intToHex(rgb.r) + this.intToHex(rgb.g) + this.intToHex(rgb.b);\n              },\n              intToHex: function (dec) {\n                var result = parseInt(dec).toString(16);\n                if (result.length == 1) result = \"0\" + result;\n                return result.toUpperCase();\n              },\n              hexToInt: function (hex) {\n                return parseInt(hex, 16);\n              },\n              hslToRgb: function (hsl) {\n                var h = parseInt(hsl.h) / 360;\n                var s = parseInt(hsl.s) / 100;\n                var l = parseInt(hsl.l) / 100;\n                if (l <= 0.5) var q = l * (1 + s);else var q = l + s - l * s;\n                var p = 2 * l - q;\n                var tr = h + 1 / 3;\n                var tg = h;\n                var tb = h - 1 / 3;\n                var r = Math.round(this.hueToRgb(p, q, tr) * 255);\n                var g = Math.round(this.hueToRgb(p, q, tg) * 255);\n                var b = Math.round(this.hueToRgb(p, q, tb) * 255);\n                return {\n                  r: r,\n                  g: g,\n                  b: b\n                };\n              },\n              hueToRgb: function (p, q, h) {\n                if (h < 0) h += 1;else if (h > 1) h -= 1;\n                if (h * 6 < 1) return p + (q - p) * h * 6;else if (h * 2 < 1) return q;else if (h * 3 < 2) return p + (q - p) * (2 / 3 - h) * 6;else return p;\n              },\n              rgbToHsv: function (rgb) {\n                var r = rgb.r / 255;\n                var g = rgb.g / 255;\n                var b = rgb.b / 255;\n                var hsv = {\n                  h: 0,\n                  s: 0,\n                  v: 0\n                };\n                var min = 0;\n                var max = 0;\n                if (r >= g && r >= b) {\n                  max = r;\n                  min = g > b ? b : g;\n                } else if (g >= b && g >= r) {\n                  max = g;\n                  min = r > b ? b : r;\n                } else {\n                  max = b;\n                  min = g > r ? r : g;\n                }\n                hsv.v = max;\n                hsv.s = max ? (max - min) / max : 0;\n                if (!hsv.s) {\n                  hsv.h = 0;\n                } else {\n                  var delta = max - min;\n                  if (r == max) {\n                    hsv.h = (g - b) / delta;\n                  } else if (g == max) {\n                    hsv.h = 2 + (b - r) / delta;\n                  } else {\n                    hsv.h = 4 + (r - g) / delta;\n                  }\n                  hsv.h = parseInt(hsv.h * 60);\n                  if (hsv.h < 0) {\n                    hsv.h += 360;\n                  }\n                }\n                hsv.s = parseInt(hsv.s * 100);\n                hsv.v = parseInt(hsv.v * 100);\n                return hsv;\n              },\n              hsvToRgb: function (hsv) {\n                var rgb = {\n                  r: 0,\n                  g: 0,\n                  b: 0\n                };\n                var h = hsv.h;\n                var s = hsv.s;\n                var v = hsv.v;\n                if (s == 0) {\n                  if (v == 0) {\n                    rgb.r = rgb.g = rgb.b = 0;\n                  } else {\n                    rgb.r = rgb.g = rgb.b = parseInt(v * 255 / 100);\n                  }\n                } else {\n                  if (h == 360) {\n                    h = 0;\n                  }\n                  h /= 60;\n\n                  // 100 scale\n                  s = s / 100;\n                  v = v / 100;\n                  var i = parseInt(h);\n                  var f = h - i;\n                  var p = v * (1 - s);\n                  var q = v * (1 - s * f);\n                  var t = v * (1 - s * (1 - f));\n                  switch (i) {\n                    case 0:\n                      rgb.r = v;\n                      rgb.g = t;\n                      rgb.b = p;\n                      break;\n                    case 1:\n                      rgb.r = q;\n                      rgb.g = v;\n                      rgb.b = p;\n                      break;\n                    case 2:\n                      rgb.r = p;\n                      rgb.g = v;\n                      rgb.b = t;\n                      break;\n                    case 3:\n                      rgb.r = p;\n                      rgb.g = q;\n                      rgb.b = v;\n                      break;\n                    case 4:\n                      rgb.r = t;\n                      rgb.g = p;\n                      rgb.b = v;\n                      break;\n                    case 5:\n                      rgb.r = v;\n                      rgb.g = p;\n                      rgb.b = q;\n                      break;\n                  }\n                  rgb.r = parseInt(rgb.r * 255);\n                  rgb.g = parseInt(rgb.g * 255);\n                  rgb.b = parseInt(rgb.b * 255);\n                }\n                return rgb;\n              },\n              setRgb: function (r, g, b) {\n                var validate = function (input) {\n                  if (input < 0 || input > 255) return 0;\n                  if (isNaN(parseInt(input))) return 0;\n                  return input;\n                };\n                this.r = validate(r);\n                this.g = validate(g);\n                this.b = validate(b);\n                var newHsv = this.rgbToHsv(this);\n                this.h = newHsv.h;\n                this.s = newHsv.s;\n                this.v = newHsv.v;\n                this.hex = this.rgbToHex(this);\n              },\n              setHsl: function (h, s, l) {\n                this.h = h;\n                this.s = s;\n                this.l = l;\n                var newRgb = this.hslToRgb(this);\n                this.r = newRgb.r;\n                this.g = newRgb.g;\n                this.b = newRgb.b;\n                this.hex = this.rgbToHex(newRgb);\n              },\n              setHsv: function (h, s, v) {\n                this.h = h;\n                this.s = s;\n                this.v = v;\n                var newRgb = this.hsvToRgb(this);\n                this.r = newRgb.r;\n                this.g = newRgb.g;\n                this.b = newRgb.b;\n                this.hex = this.rgbToHex(newRgb);\n              },\n              setHex: function (hex) {\n                this.hex = hex;\n                var newRgb = this.hexToRgb(this.hex);\n                this.r = newRgb.r;\n                this.g = newRgb.g;\n                this.b = newRgb.b;\n                var newHsv = this.rgbToHsv(newRgb);\n                this.h = newHsv.h;\n                this.s = newHsv.s;\n                this.v = newHsv.v;\n              }\n            };\n            if (init) {\n              if (init.hex) {\n                var hex = color.validateHex(init.hex);\n                color.setHex(hex);\n              } else if (init.r) color.setRgb(init.r, init.g, init.b);else if (init.h) color.setHsv(init.h, init.s, init.v);else if (init.rgb) {\n                color.setRgb(init.rgb.r, init.rgb.g, init.rgb.b);\n              }\n            }\n            return color;\n          };\n        })(jqxBaseFramework);\n\n        /* tslint:disable */\n        /* eslint-disable */\n        (function ($) {\n          $.jqx.jqxWidget('jqxMaterialColorPicker', '', {});\n          $.extend($.jqx._jqxMaterialColorPicker.prototype, {\n            defineInstance: function () {\n              var settings = {\n                events: ['colorchange']\n              };\n              if (this === $.jqx._jqxMaterialColorPicker.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function () {\n              var that = this;\n              that._renderGrid();\n              that._addHandlers();\n            },\n            _renderGrid: function () {\n              var that = this;\n              var labelsAndPaletteContainer = document.createElement('div');\n              that._renderShades();\n              that._renderColorPalette();\n              that._renderColorLabels();\n              labelsAndPaletteContainer.classList = 'jqx-labels-and-palette';\n              labelsAndPaletteContainer.appendChild(that._colorLabelsContainer);\n              labelsAndPaletteContainer.appendChild(that._paletteContainer);\n              that.element.appendChild(labelsAndPaletteContainer);\n            },\n            _renderColorPalette: function () {\n              var that = this;\n              var colorsArray = [['#ffebee', '#ffcdd2', '#ef9a9a', '#e57373', '#ef5350', '#f44336', '#e53935', '#d32f2f', '#c62828', '#b71c1c', '#ff8a80', '#ff5252', '#ff1744', '#d50000'], ['#fce4ec', '#f8bbd0', '#f48fb1', '#f06292', '#ec407a', '#e91e63', '#d81b60', '#c2185b', '#ad1457', '#880e4f', '#ff80ab', '#ff4081', '#f50057', '#c51162'], ['#f3e5f5', '#e1bee7', '#ce93d8', '#ba68c8', '#ab47bc', '#9c27b0', '#8e24aa', '#7b1fa2', '#6a1b9a', '#4a148c', '#ea80fc', '#e040fb', '#d500f9', '#aa00ff'], ['#ede7f6', '#d1c4e9', '#b39ddb', '#9575cd', '#7e57c2', '#673ab7', '#5e35b1', '#512da8', '#4527a0', '#311b92', '#b388ff', '#7c4dff', '#651fff', '#6200ea'], ['#e8eaf6', '#c5cae9', '#9fa8da', '#7986cb', '#5c6bc0', '#3f51b5', '#3949ab', '#303f9f', '#283593', '#1a237e', '#8c9eff', '#536dfe', '#3d5afe', '#304ffe'], ['#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1e88e5', '#1976d2', '#1565c0', '#0d47a1', '#82b1ff', '#448aff', '#2979ff', '#2962ff'], ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b', '#80d8ff', '#40c4ff', '#00b0ff', '#0091ea'], ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064', '#84ffff', '#18ffff', '#00e5ff', '#00b8d4'], ['#e0f2f1', '#b2dfdb', '#80cbc4', '#4db6ac', '#26a69a', '#009688', '#00897b', '#00796b', '#00695c', '#004d40', '#a7ffeb', '#64ffda', '#1de9b6', '#00bfa5'], ['#e8f5e9', '#c8e6c9', '#a5d6a7', '#81c784', '#66bb6a', '#4caf50', '#43a047', '#388e3c', '#2e7d32', '#1b5e20', '#b9f6ca', '#69f0ae', '#00e676', '#00c853'], ['#f1f8e9', '#dcedc8', '#c5e1a5', '#aed581', '#9ccc65', '#8bc34a', '#7cb342', '#689f38', '#558b2f', '#33691e', '#ccff90', '#b2ff59', '#76ff03', '#64dd17'], ['#f9fbe7', '#f0f4c3', '#e6ee9c', '#dce775', '#d4e157', '#cddc39', '#c0ca33', '#afb42b', '#9e9d24', '#827717', '#f4ff81', '#eeff41', '#c6ff00', '#aeea00'], ['#fffde7', '#fff9c4', '#fff59d', '#fff176', '#ffee58', '#ffeb3b', '#fdd835', '#fbc02d', '#f9a825', '#f57f17', '#ffff8d', '#ffff00', '#ffea00', '#ffd600'], ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00', '#ffe57f', '#ffd740', '#ffc400', '#ffab00'], ['#fff3e0', '#ffe0b2', '#ffcc80', '#ffb74d', '#ffa726', '#ff9800', '#fb8c00', '#f57c00', '#ef6c00', '#e65100', '#ffd180', '#ffab40', '#ff9100', '#ff6d00'], ['#fbe9e7', '#ffccbc', '#ffab91', '#ff8a65', '#ff7043', '#ff5722', '#f4511e', '#e64a19', '#d84315', '#bf360c', '#ff9e80', '#ff6e40', '#ff3d00', '#dd2c00'], ['#efebe9', '#d7ccc8', '#bcaaa4', '#a1887f', '#8d6e63', '#795548', '#6d4c41', '#5d4037', '#4e342e', '#3e2723'], ['#fafafa', '#f5f5f5', '#eeeeee', '#e0e0e0', '#bdbdbd', '#9e9e9e', '#757575', '#616161', '#424242', '#212121'], ['#eceff1', '#cfd8dc', '#b0bec5', '#90a4ae', '#78909c', '#607d8b', '#546e7a', '#455a64', '#37474f', '#263238']];\n              var paletteContainer = document.createElement('div');\n              for (var index = 0, length = colorsArray.length; index < length; index++) {\n                var currentRow = colorsArray[index];\n                var currentUl = that._renderRow(currentRow, 'jqx-color-cell', false);\n                paletteContainer.appendChild(currentUl);\n              }\n              paletteContainer.className = 'jqx-palette';\n              that._paletteContainer = paletteContainer;\n            },\n            _renderShades: function () {\n              var that = this;\n              var shadesContainer = document.createElement('div');\n              var shadesArray = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 'A 100', 'A 200', 'A 400', 'A 700'];\n              var shadesRow = that._renderRow(shadesArray, 'jqx-shade-cell', true);\n              shadesContainer.className = 'jqx-shades';\n              shadesContainer.appendChild(shadesRow);\n              that.element.appendChild(shadesContainer);\n            },\n            _renderColorLabels: function () {\n              var that = this;\n              var colorLabelsContainer = document.createElement('div');\n              var colorLabelsArray = ['Red', 'Pink', 'Purple', 'Deep Purple', 'Indigo', 'Blue', 'Light Blue', 'Cyan', 'Teal', 'Green', 'Light Green', 'Lime', 'Yellow', 'Amber', 'Orange', 'Deep Orange', 'Brown', 'Grey', 'Blue Grey'];\n              var colorLabelsColumn = that._renderRow(colorLabelsArray, 'jqx-color-label', true);\n              colorLabelsContainer.className = 'jqx-color-labels';\n              colorLabelsContainer.appendChild(colorLabelsColumn);\n              that._colorLabelsContainer = colorLabelsContainer;\n            },\n            _renderRow: function (array, cellClass, addInnerHtml) {\n              var ul = document.createElement('ul');\n              for (var index = 0, length = array.length; index < length; index++) {\n                var currentElement = array[index];\n                var li = document.createElement('li');\n                if (addInnerHtml) {\n                  li.innerHTML = currentElement;\n                } else {\n                  li.style.background = currentElement;\n                  li.setAttribute('data-color', currentElement);\n                }\n                li.className = cellClass;\n                ul.appendChild(li);\n              }\n              return ul;\n            },\n            _addHandlers: function () {\n              var that = this;\n              this.host.find('.jqx-color-cell').on('click', function () {\n                that._currentColorHex = event.target.getAttribute('data-color');\n                that._currentColorRgb = event.target.style.background;\n                that._raiseEvent(0, {\n                  color: that.getColor()\n                });\n              });\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg ? arg : {};\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              var result = this.host.trigger(event);\n              return result;\n            },\n            getColor: function () {\n              var that = this;\n              var rgb = that._currentColorRgb.match(/\\d+/g);\n              return {\n                hex: that._currentColorHex.substring(1),\n                r: parseInt(rgb[0]),\n                g: parseInt(rgb[1]),\n                b: parseInt(rgb[2])\n              };\n            },\n            destroy: function () {\n              var that = this;\n              that.host.remove();\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/4720: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxComboBox\", \"\", {});\n          $.extend($.jqx._jqxComboBox.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // enables/disables the combobox.\n                disabled: false,\n                // gets or sets the listbox width.\n                width: 200,\n                // gets or sets the listbox height.\n                height: 25,\n                // Represents the collection of list items.\n                items: new Array(),\n                // Gets or sets the selected index.\n                selectedIndex: -1,\n                selectedItems: new Array(),\n                _selectedItems: new Array(),\n                // data source.\n                source: null,\n                autoItemsHeight: false,\n                // gets or sets the scrollbars size.\n                scrollBarSize: $.jqx.utilities.scrollBarSize,\n                // gets or sets the scrollbars size.\n                arrowSize: 17,\n                // enables/disables the hover state.\n                enableHover: true,\n                // enables/disables the selection.\n                enableSelection: true,\n                // gets the visible items. // this property is internal for the combobox.\n                visualItems: new Array(),\n                // gets the groups. // this property is internal for the combobox.\n                groups: new Array(),\n                // gets or sets whether the items width should be equal to the combobox's width.\n                equalItemsWidth: true,\n                // gets or sets the height of the ListBox Items. When the itemHeight:= - 1, each item's height is equal to its desired height.\n                itemHeight: -1,\n                // represents the combobox's events.\n                visibleItems: new Array(),\n                // emptry group's text.\n                hint: true,\n                emptyGroupText: 'Group',\n                emptyString: \"\",\n                ready: null,\n                // Type: Number\n                // Default: 100\n                // Showing Popup Animation's delay.\n                openDelay: 250,\n                // Type: Number\n                // Default: 200\n                // Hiding Popup Animation's delay.\n                closeDelay: 300,\n                // default, none\n                // Type: String.\n                // enables or disables the animation.\n                animationType: 'default',\n                // Type: String\n                // Default: auto ( the drop down takes the combobox's width.)\n                // Sets the popup's width.\n                dropDownWidth: 'auto',\n                // Type: String\n                // Default: 200px ( the height is 200px )\n                // Sets the popup's height.\n                dropDownHeight: '200px',\n                // Type: Boolean\n                // Default: false\n                // Sets the popup's height to be equal to the items summary height,\n                autoDropDownHeight: false,\n                // Type: Boolean\n                // Default: false\n                // Enables or disables the browser detection.\n                enableBrowserBoundsDetection: false,\n                dropDownHorizontalAlignment: 'left',\n                dropDownVerticalAlignment: 'bottom',\n                dropDownContainer: \"default\",\n                // Type: String\n                // Default: startswithignorecase\n                // Possible Values: 'none, 'contains', 'containsignorecase', 'equals', 'equalsignorecase', 'startswithignorecase', 'startswith', 'endswithignorecase', 'endswith'\n                searchMode: 'startswithignorecase',\n                autoComplete: false,\n                remoteAutoComplete: false,\n                remoteAutoCompleteDelay: 500,\n                selectionMode: \"default\",\n                minLength: 2,\n                displayMember: \"\",\n                valueMember: \"\",\n                groupMember: \"\",\n                searchMember: \"\",\n                keyboardSelection: true,\n                renderer: null,\n                autoOpen: false,\n                template: \"\",\n                checkboxes: false,\n                promptText: \"\",\n                placeHolder: \"\",\n                rtl: false,\n                listBox: null,\n                validateSelection: null,\n                showCloseButtons: true,\n                renderSelectedItem: null,\n                search: null,\n                popupZIndex: 2000,\n                searchString: null,\n                multiSelect: false,\n                showArrow: true,\n                _disabledItems: new Array(),\n                touchMode: 'auto',\n                autoBind: true,\n                aria: {\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                events: [\n                // occurs when the combobox is opened.\n                'open',\n                // occurs when the combobox is closed.\n                'close',\n                // occurs when an item is selected.\n                'select',\n                // occurs when an item is unselected.\n                'unselect',\n                // occurs when the selection is changed.\n                'change',\n                // triggered when the user checks or unchecks an item.\n                'checkChange',\n                // triggered when the binding is completed.\n                'bindingComplete',\n                // triggered when a new item is added.\n                'itemAdd',\n                // triggered when a new item is removed.\n                'itemRemove',\n                // triggered when a new item is updated.\n                'itemUpdate']\n              };\n              if (this === $.jqx._jqxComboBox.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var that = this;\n              this.host.attr('role', 'combobox');\n              $.jqx.aria(this, \"aria-autocomplete\", \"both\");\n              if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {\n                throw new Error(\"jqxComboBox: Missing reference to jqxlistbox.js.\");\n              }\n              $.jqx.aria(this);\n              if (that.isMaterialized()) {\n                var elementStyle = window.getComputedStyle(this.element);\n                var animation = elementStyle.getPropertyValue('--jqx-dropdown-animation');\n                var rowHeight = elementStyle.getPropertyValue('--jqx-list-item-height');\n                var arrowSize = elementStyle.getPropertyValue('--jqx-action-button-size');\n                if (arrowSize) {\n                  this.arrowSize = parseInt(arrowSize);\n                } else {\n                  this.arrowSize = 25;\n                }\n                if (animation && this.animationType == \"default\") {\n                  this.animationType = animation.trim();\n                }\n                if (rowHeight && this.itemHeight === -1) {\n                  this.itemHeight = parseInt(rowHeight);\n                }\n              }\n\n              // prompt text is deprecated.\n              if (this.promptText != \"\") {\n                this.placeHolder = this.promptText;\n              }\n              this.render();\n            },\n            render: function () {\n              var that = this;\n              var nodeName = that.element.nodeName.toLowerCase();\n              if (nodeName == \"select\" || nodeName == \"ul\" || nodeName == \"ol\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_jqxComboBox\";\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_jqxComboBox\";\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                if (!that.width) {\n                  that.width = $(that.field).width();\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight();\n                }\n                that.element.style.cssText = that.field.style.cssText;\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n                if (that.field.innerHTML != \"\") {\n                  var result = $.jqx.parseSourceTag(that.field);\n                  that.source = result.items;\n                  if (that.selectedIndex == -1) that.selectedIndex = result.index;\n                }\n              } else {\n                if (that.host.find('li').length > 0 || that.host.find('option').length > 0) {\n                  var result = $.jqx.parseSourceTag(that.element);\n                  that.source = result.items;\n                }\n              }\n              that.removeHandlers();\n              that.isanimating = false;\n              that.id = $.jqx.utilities.createId();\n              that.element.innerHTML = \"\";\n              var comboStructure = $(\"<div style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>\" + \"<div id='dropdownlistWrapper' style='padding: 0; margin: 0; border: none; background-color: transparent; float: left; width:100%; height: 100%; position: relative;'>\" + \"<div id='dropdownlistContent' style='padding: 0; margin: 0; border-top: none; border-bottom: none; float: left; position: absolute;'></div>\" + \"<div id='dropdownlistArrow' role='button' style='padding: 0; margin: 0; border-left-width: 1px; border-bottom-width: 0px; border-top-width: 0px; border-right-width: 0px; float: right; position: absolute;'></div>\" + \"</div>\" + \"</div>\");\n              that.comboStructure = comboStructure;\n              if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {\n                throw \"jqxComboBox: Missing reference to jqxlistbox.js.\";\n              }\n              that.touch = $.jqx.mobile.isTouchDevice();\n              if (that.touchMode === true) {\n                that.touch = true;\n              }\n              that.host.append(comboStructure);\n              that.dropdownlistWrapper = that.host.find('#dropdownlistWrapper');\n              that.dropdownlistArrow = that.host.find('#dropdownlistArrow');\n              that.dropdownlistContent = that.host.find('#dropdownlistContent');\n              that.dropdownlistContent.addClass(that.toThemeProperty('jqx-combobox-content'));\n              that.dropdownlistContent.addClass(that.toThemeProperty('jqx-widget-content'));\n              that.dropdownlistWrapper[0].id = \"dropdownlistWrapper\" + that.element.id;\n              that.dropdownlistArrow[0].id = \"dropdownlistArrow\" + that.element.id;\n              that.dropdownlistContent[0].id = \"dropdownlistContent\" + that.element.id;\n              if (that.template) {\n                that.dropdownlistArrow.addClass(that.toThemeProperty(\"jqx-\" + that.template + \"\"));\n              }\n              that.dropdownlistContent.append($('<input autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" style=\"box-sizing: border-box; margin: 0; padding: 0; padding-left: 3px; padding-right: 3px; border: 0;\" type=\"textarea\"/>'));\n              that.input = that.dropdownlistContent.find('input');\n              that.input.addClass(that.toThemeProperty('jqx-combobox-input'));\n              that.input.addClass(that.toThemeProperty('jqx-widget-content'));\n              if (that.host.attr('tabindex')) {\n                that.input.attr('tabindex', that.host.attr('tabindex'));\n                that.host.removeAttr('tabindex');\n              }\n              var label = $(\"<label></label>\");\n              if (this.hint) {\n                label[0].innerHTML = this.placeHolder;\n              }\n              label.addClass(that.toThemeProperty('jqx-input-label'));\n              that.dropdownlistWrapper.append(label);\n              that.label = label;\n              var bar = $(\"<span></span>\");\n              that.dropdownlistWrapper.append(bar);\n              bar.addClass(that.toThemeProperty('jqx-input-bar'));\n              that.bar = bar;\n              var that = this;\n              if (that.template) {\n                that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n              }\n              that._addInput();\n              if (that.rtl) {\n                that.input.css({\n                  direction: \"rtl\"\n                });\n                that.dropdownlistContent.addClass(that.toThemeProperty('jqx-combobox-content-rtl'));\n              }\n              try {\n                var listBoxID = 'listBox' + that.id;\n                var oldContainer = $($.find('#' + listBoxID));\n                if (oldContainer.length > 0) {\n                  oldContainer.remove();\n                }\n                $.jqx.aria(this, \"aria-owns\", listBoxID);\n                $.jqx.aria(this, \"aria-haspopup\", true);\n                $.jqx.aria(this, \"aria-multiline\", false);\n                if (that.listBoxContainer) that.listBoxContainer.jqxListBox('destroy');\n                if (that.container) that.container.remove();\n                var container = $(\"<div style='overflow: hidden; border: none; background-color: transparent; position: absolute;' id='listBox\" + that.id + \"'><div id='innerListBox\" + that.id + \"'></div></div>\");\n                container.hide();\n                if (that.dropDownContainer == \"element\") {\n                  container.appendTo(that.host);\n                } else {\n                  container.appendTo(document.body);\n                }\n                container.addClass(that.toThemeProperty('jqx-listbox-container'));\n                that.container = container;\n                that.listBoxContainer = $($.find('#innerListBox' + that.id));\n                var width = that.width;\n                if (that.dropDownWidth != 'auto') {\n                  width = that.dropDownWidth;\n                }\n                if (that.dropDownHeight == null) {\n                  that.dropDownHeight = 200;\n                }\n                that.container.width(parseInt(width) + 25);\n                that.container.height(parseInt(that.dropDownHeight) + 25);\n                that._ready = false;\n                that.addHandler(that.listBoxContainer, 'bindingComplete', function (event) {\n                  if (!that.listBox) {\n                    that.listBox = $.data(that.listBoxContainer[0], \"jqxListBox\").instance;\n                  }\n                  if (!that._ready) {\n                    if (that.ready) {\n                      that.ready();\n                    }\n                    that._ready = true;\n                  }\n                  that._raiseEvent('6');\n                });\n                that.addHandler(that.listBoxContainer, 'itemAdd', function (event) {\n                  that._raiseEvent('7', event.args);\n                });\n                that.addHandler(that.listBoxContainer, 'itemRemove', function (event) {\n                  that._raiseEvent('8', event.args);\n                });\n                that.addHandler(that.listBoxContainer, 'itemUpdate', function (event) {\n                  that._raiseEvent('9', event.args);\n                });\n                var initializing = true;\n                that.listBoxContainer.jqxListBox({\n                  autoItemsHeight: that.autoItemsHeight,\n                  _checkForHiddenParent: false,\n                  allowDrop: false,\n                  allowDrag: false,\n                  checkboxes: that.checkboxes,\n                  emptyString: that.emptyString,\n                  autoBind: !that.remoteAutoComplete && that.autoBind,\n                  renderer: that.renderer,\n                  rtl: that.rtl,\n                  itemHeight: that.itemHeight,\n                  selectedIndex: that.selectedIndex,\n                  incrementalSearch: false,\n                  width: width,\n                  scrollBarSize: that.scrollBarSize,\n                  autoHeight: that.autoDropDownHeight,\n                  height: that.dropDownHeight,\n                  groupMember: that.groupMember,\n                  searchMember: that.searchMember,\n                  displayMember: that.displayMember,\n                  valueMember: that.valueMember,\n                  source: that.source,\n                  theme: that.theme,\n                  rendered: function () {\n                    that.listBox = $.data(that.listBoxContainer[0], \"jqxListBox\").instance;\n                    if (that.remoteAutoComplete) {\n                      if (that.autoDropDownHeight) {\n                        that.container.height(that.listBox.virtualSize.height + 25);\n                        that.listBoxContainer.height(that.listBox.virtualSize.height);\n                        that.listBox._arrange();\n                      } else {\n                        that.listBox._arrange();\n                        that.listBox.ensureVisible(0);\n                        that.listBox._renderItems();\n                        that.container.height(that.listBoxContainer.height() + 25);\n                      }\n                      if (that.searchString != undefined && that.searchString.length >= that.minLength) {\n                        var items = that.listBoxContainer.jqxListBox('items');\n                        if (items) {\n                          if (items.length > 0) {\n                            if (!that.isOpened()) {\n                              that.open();\n                            }\n                          } else that.close();\n                        } else that.close();\n                      } else {\n                        that.close();\n                      }\n                    } else {\n                      that.renderSelection('mouse');\n                      if (that.multiSelect) {\n                        that.doMultiSelect(false);\n                      }\n                    }\n                    if (that.rendered) {\n                      that.rendered();\n                    }\n                  }\n                });\n                if (that.dropDownContainer == \"element\") {\n                  that.listBoxContainer.css({\n                    position: 'absolute',\n                    top: 0,\n                    left: 0\n                  });\n                } else {\n                  that.listBoxContainer.css({\n                    position: 'absolute',\n                    zIndex: that.popupZIndex,\n                    top: 0,\n                    left: 0\n                  });\n                }\n                that.listBoxContainer.css('border-top-width', '1px');\n                that.listBoxContainer.addClass(that.toThemeProperty('jqx-popup'));\n                if ($.jqx.browser.msie) {\n                  that.listBoxContainer.addClass(that.toThemeProperty('jqx-noshadow'));\n                }\n                if (that.template) {\n                  that.listBoxContainer.addClass(that.toThemeProperty(\"jqx-\" + that.template + \"-item\"));\n                }\n                that.listBox = $.data(that.listBoxContainer[0], \"jqxListBox\").instance;\n                that.listBox.enableSelection = that.enableSelection;\n                that.listBox.enableHover = that.enableHover;\n                that.listBox.equalItemsWidth = that.equalItemsWidth;\n                that.listBox._arrange();\n                that.addHandler(that.listBoxContainer, 'unselect', function (event) {\n                  if (!that.multiSelect) {\n                    that._raiseEvent('3', {\n                      index: event.args.index,\n                      type: event.args.type,\n                      item: event.args.item\n                    });\n                  }\n                });\n                that.addHandler(that.listBoxContainer, 'change', function (event) {\n                  if (!that.multiSelect) {\n                    that.selectedIndex = that.listBox.selectedIndex;\n                    that._raiseEvent('4', {\n                      index: event.args.index,\n                      type: event.args.type,\n                      item: event.args.item\n                    });\n                  }\n                });\n                if (that.animationType == 'none') {\n                  that.container.css('display', 'none');\n                } else {\n                  that.container.hide();\n                }\n                initializing = false;\n              } catch (e) {\n                throw e;\n              }\n              var that = this;\n              that.input.attr('disabled', that.disabled);\n              var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n              if (!ie7) {\n                if (that.isMaterialized() && that.hint) {\n                  that.label[0].innerHTML = that.placeHolder;\n                } else {\n                  that.input.attr('placeholder', that.placeHolder);\n                }\n              }\n              that.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (value) {\n                  instance.host.addClass(that.toThemeProperty('jqx-combobox-state-disabled'));\n                  instance.host.addClass(that.toThemeProperty('jqx-fill-state-disabled'));\n                  instance.dropdownlistContent.addClass(that.toThemeProperty('jqx-combobox-content-disabled'));\n                } else {\n                  instance.host.removeClass(that.toThemeProperty('jqx-combobox-state-disabled'));\n                  instance.host.removeClass(that.toThemeProperty('jqx-fill-state-disabled'));\n                  instance.dropdownlistContent.removeClass(that.toThemeProperty('jqx-combobox-content-disabled'));\n                }\n                instance.input.attr('disabled', instance.disabled);\n                $.jqx.aria(instance, \"aria-disabled\", instance.disabled);\n                instance.input.attr('disabled', instance.disabled);\n              };\n              if (that.disabled) {\n                that.host.addClass(that.toThemeProperty('jqx-combobox-state-disabled'));\n                that.host.addClass(that.toThemeProperty('jqx-fill-state-disabled'));\n                that.dropdownlistContent.addClass(that.toThemeProperty('jqx-combobox-content-disabled'));\n              }\n              that.host.addClass(that.toThemeProperty('jqx-combobox-state-normal'));\n              that.host.addClass(that.toThemeProperty('jqx-combobox'));\n              that.host.addClass(that.toThemeProperty('jqx-rc-all'));\n              that.host.addClass(that.toThemeProperty('jqx-widget'));\n              that.host.addClass(that.toThemeProperty('jqx-widget-content'));\n              that.dropdownlistArrowIcon = $(\"<div></div>\");\n              if (that.dropDownVerticalAlignment == \"top\") {\n                that.dropdownlistArrowIcon.addClass(that.toThemeProperty('jqx-icon-arrow-up'));\n              } else {\n                that.dropdownlistArrowIcon.addClass(that.toThemeProperty('jqx-icon-arrow-down'));\n              }\n              that.dropdownlistArrowIcon.addClass(that.toThemeProperty('jqx-icon'));\n              that.dropdownlistArrow.append(that.dropdownlistArrowIcon);\n              that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-combobox-arrow-normal'));\n              that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-fill-state-normal'));\n              if (!that.rtl) {\n                that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-rc-r'));\n              } else {\n                that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-rc-l'));\n              }\n              that._setSize();\n              that._updateHandlers();\n              that.addHandler(that.input, 'keyup.textchange', function (event) {\n                if (that._writeTimer) clearTimeout(that._writeTimer);\n                that._writeTimer = setTimeout(function () {\n                  var foundMatch = that._search(event);\n                  if (that.cinput && that.input) {\n                    if (!that.displayMember) {\n                      that.cinput[0].value = that.input[0].value;\n                    } else {\n                      that._updateInputSelection();\n                    }\n                  }\n                }, 50);\n              });\n\n              // fix for IE7\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                if (that.host.parents('.jqx-window').length > 0) {\n                  var zIndex = that.host.parents('.jqx-window').css('z-index');\n                  container.css('z-index', zIndex + 10);\n                  that.listBoxContainer.css('z-index', zIndex + 10);\n                }\n              }\n              if (that.checkboxes) {\n                that.input.attr('readonly', true);\n                $.jqx.aria(this, \"aria-readonly\", true);\n              } else {\n                $.jqx.aria(this, \"aria-readonly\", false);\n              }\n              if (!that.remoteAutoComplete) {\n                that.searchString = \"\";\n              }\n              this.bar.css('top', this.host.height());\n            },\n            _addInput: function () {\n              var name = this.host.attr('name');\n              this.cinput = $(\"<input type='hidden'/>\");\n              this.host.append(this.cinput);\n              if (name) {\n                this.cinput.attr('name', name);\n              }\n            },\n            _updateInputSelection: function () {\n              if (this.cinput) {\n                var selectedValues = new Array();\n                if (this.selectedIndex == -1) {\n                  this.cinput.val(\"\");\n                } else {\n                  var selectedItem = this.getSelectedItem();\n                  if (selectedItem != null) {\n                    this.cinput.val(selectedItem.value);\n                    selectedValues.push(selectedItem.value);\n                  } else {\n                    this.cinput.val(this.dropdownlistContent.text());\n                  }\n                }\n                if (this.checkboxes || this.multiSelect) {\n                  if (!this.multiSelect) {\n                    var items = this.getCheckedItems();\n                  } else {\n                    var items = this.getSelectedItems();\n                  }\n                  var str = \"\";\n                  if (items != null) {\n                    for (var i = 0; i < items.length; i++) {\n                      if (i == items.length - 1) {\n                        str += items[i].value;\n                      } else {\n                        str += items[i].value + \",\";\n                      }\n                      selectedValues.push(items[i].value);\n                    }\n                  }\n                  this.cinput.val(str);\n                }\n                if (this.field && this.cinput) {\n                  if (this.field.nodeName.toLowerCase() == \"select\") {\n                    $.each(this.field, function (index, value) {\n                      $(this).removeAttr('selected');\n                      this.selected = selectedValues.indexOf(this.value) >= 0;\n                      if (this.selected) {\n                        $(this).attr('selected', true);\n                      }\n                    });\n                  } else {\n                    $.each(this.items, function (index, value) {\n                      $(this.originalItem.originalItem).removeAttr('data-selected');\n                      this.selected = selectedValues.indexOf(this.value) >= 0;\n                      if (this.selected) {\n                        $(this.originalItem.originalItem).attr('data-selected', true);\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            _search: function (event) {\n              var that = this;\n              if (event.keyCode == 9) return;\n              if (that.searchMode == 'none' || that.searchMode == null || that.searchMode == 'undefined') {\n                return;\n              }\n              if (event.keyCode == 16 || event.keyCode == 17 || event.keyCode == 20) return;\n              if (that.checkboxes) {\n                return;\n              }\n              if (that.multiSelect) {\n                var span = $(\"<span style='visibility: hidden; white-space: nowrap;'>\" + document.createTextNode(that.input.val()) + \"</span>\");\n                span.addClass(that.toThemeProperty('jqx-widget'));\n                $(document.body).append(span);\n                var width = span.width() + 15;\n                span.remove();\n                if (width > that.host.width()) {\n                  width = that.host.width();\n                }\n                if (width < 25) {\n                  width = 25;\n                }\n                that.input.css('width', width + 'px');\n                if (that.selectedItems.length == 0) {\n                  that.input.css('width', '100%');\n                  if (!that.isMaterialized()) {\n                    that.input.attr('placeholder', that.placeHolder);\n                  }\n                } else {\n                  if (!that.isMaterialized()) {\n                    that.input.attr('placeholder', \"\");\n                  }\n                }\n                var top = parseInt(this._findPos(that.host[0])[1]) + parseInt(that.host.outerHeight()) - 1 + 'px';\n                var isMobileBrowser = false; // $.jqx.mobile.isSafariMobileBrowser() || $.jqx.mobile.isWindowsPhone();\n                if (isMobileBrowser != null && isMobileBrowser) {\n                  top = $.jqx.mobile.getTopPos(this.element) + parseInt(that.host.outerHeight());\n                  if ($('body').css('border-top-width') != '0px') {\n                    top = parseInt(top) - this._getBodyOffset().top + 'px';\n                  }\n                }\n                that.container.css('top', top);\n                var height = parseInt(that.host.height());\n                that.dropdownlistArrow.height(height);\n              }\n              if (!that.isanimating) {\n                if (event.altKey && event.keyCode == 38) {\n                  that.hideListBox('altKey');\n                  return false;\n                }\n                if (event.altKey && event.keyCode == 40) {\n                  if (!that.isOpened()) {\n                    that.showListBox('altKey');\n                  }\n                  return false;\n                }\n              }\n              if (event.keyCode == 37 || event.keyCode == 39) return false;\n              if (event.altKey || event.keyCode == 18) return;\n              if (event.keyCode >= 33 && event.keyCode <= 40) {\n                return;\n              }\n              if (event.ctrlKey || that.ctrlKey) {\n                if (event.keyCode != 88 && event.keyCode != 86) {\n                  return;\n                }\n              }\n              var value = that.input.val();\n              if (value.length == 0 && !that.autoComplete) {\n                that.listBox.searchString = that.input.val();\n                that.listBox.clearSelection();\n                that.hideListBox('search');\n                that.searchString = that.input.val();\n                return;\n              }\n              if (that.remoteAutoComplete) {\n                var that = this;\n                var clearListSelection = function () {\n                  that.listBox.vScrollInstance.value = 0;\n                };\n                if (value.length >= that.minLength) {\n                  if (!event.ctrlKey && !event.altKey) {\n                    if (that.searchString != value) {\n                      var source = that.listBoxContainer.jqxListBox('source');\n                      if (source == null) {\n                        that.listBoxContainer.jqxListBox({\n                          source: that.source\n                        });\n                      }\n                      if (that._searchTimer) {\n                        clearTimeout(that._searchTimer);\n                      }\n                      if (event.keyCode != 13 && event.keyCode != 27) {\n                        that._searchTimer = setTimeout(function () {\n                          clearListSelection();\n                          if (that.autoDropDownHeight) {\n                            that.listBox.autoHeight = true;\n                          }\n                          that.searchString = that.input.val();\n                          if (that.search != null) {\n                            that.search(that.input.val());\n                          } else {\n                            throw \"'search' function is not defined\";\n                          }\n                        }, that.remoteAutoCompleteDelay);\n                      }\n                    }\n                    that.searchString = value;\n                  }\n                } else {\n                  if (that._searchTimer) clearTimeout(that._searchTimer);\n                  clearListSelection();\n                  that.searchString = \"\";\n                  that.search(\"\");\n                  that.listBoxContainer.jqxListBox({\n                    source: null\n                  });\n                }\n                return;\n              }\n              var that = this;\n              if (value === that.searchString) {\n                return;\n              }\n              if (!(event.keyCode == '27' || event.keyCode == '13')) {\n                var currentValue = that.input[0].value;\n                var matches = that._updateItemsVisibility(value);\n                var matchItems = matches.matchItems;\n                if (that.autoComplete && that.autoItemsHeight) {\n                  that.input[0].value = currentValue;\n                }\n                var index = matches.index;\n                if (!that.autoComplete && !that.remoteAutoComplete) {\n                  if (!that.multiSelect || that.multiSelect && index >= 0) {\n                    that.listBox.selectIndex(index);\n                    var isInView = that.listBox.isIndexInView(index);\n                    if (!isInView) {\n                      that.listBox.ensureVisible(index);\n                    } else {\n                      that.listBox._renderItems();\n                    }\n                  }\n                }\n                if (that.autoComplete && matchItems.length === 0) {\n                  that.hideListBox('search');\n                }\n              }\n              if (event.keyCode == '13') {\n                var isOpen = that.container.css('display') == 'block';\n                if (isOpen && !that.isanimating) {\n                  that.hideListBox('keyboard');\n                  that._oldvalue = that.listBox.selectedValue;\n                  return;\n                }\n              } else if (event.keyCode == '27') {\n                var isOpen = that.container.css('display') == 'block';\n                if (isOpen && !that.isanimating) {\n                  if (!that.multiSelect) {\n                    var item = that.listBox.getVisibleItem(that._oldvalue);\n                    if (item) {\n                      var that = this;\n                      setTimeout(function () {\n                        if (that.autoComplete) {\n                          that._updateItemsVisibility(\"\");\n                        }\n                        that.listBox.selectIndex(item.index);\n                        that.renderSelection('api');\n                      }, that.closeDelay);\n                    } else {\n                      that.clearSelection();\n                    }\n                  } else {\n                    that.input.val(\"\");\n                    that.listBox.selectedValue = null;\n                  }\n                  that.hideListBox('keyboard');\n                  that.renderSelection('api');\n                  event.preventDefault();\n                  return false;\n                }\n              } else {\n                if (!that.isOpened() && !that.opening && !event.ctrlKey) {\n                  if (that.listBox.visibleItems && that.listBox.visibleItems.length > 0) {\n                    if (that.input.val() != that.searchString && that.searchString != undefined && index != -1) {\n                      that.showListBox('search');\n                    }\n                  }\n                }\n                that.searchString = that.input.val();\n                if (that.searchString == \"\") {\n                  if (!that.listBox.itemsByValue[\"\"]) {\n                    index = -1;\n                    if (!that.multiSelect) {\n                      that.clearSelection();\n                    }\n                  }\n                }\n                var item = that.listBox.getVisibleItem(index);\n                if (item != undefined) {\n                  that._updateInputSelection();\n                }\n              }\n            },\n            val: function (value) {\n              if (!this.input) return \"\";\n              var isEmpty = function (obj) {\n                for (var key in obj) {\n                  if (obj.hasOwnProperty(key)) return false;\n                }\n                if (typeof value == \"number\") return false;\n                if (typeof value == \"date\") return false;\n                if (typeof value == \"boolean\") return false;\n                if (typeof value == \"string\") return false;\n                return true;\n              };\n              if (isEmpty(value) || arguments.length == 0) {\n                var item = this.getSelectedItem();\n                if (item) {\n                  return item.value;\n                }\n                return this.input.val();\n              } else {\n                var item = this.getItemByValue(value);\n                if (item != null) {\n                  this.selectItem(item);\n                } else {\n                  this.input.val(value);\n                }\n                return this.input.val();\n              }\n            },\n            focus: function () {\n              var that = this;\n              var doFocus = function () {\n                that.input.focus();\n                var val = that.input.val();\n                that._setSelection(0, val.length);\n              };\n              doFocus();\n              setTimeout(function () {\n                doFocus();\n              }, 10);\n            },\n            _setSelection: function (start, end) {\n              try {\n                if ('selectionStart' in this.input[0]) {\n                  this.input[0].focus();\n                  this.input[0].setSelectionRange(start, end);\n                } else {\n                  var range = this.input[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', end);\n                  range.moveStart('character', start);\n                  range.select();\n                }\n              } catch (error) {}\n            },\n            setContent: function (value) {\n              this.input.val(value);\n            },\n            // get all matches of a searched value.\n            _updateItemsVisibility: function (value) {\n              var items = this.getItems();\n              if (items == undefined) {\n                return {\n                  index: -1,\n                  matchItem: new Array()\n                };\n              }\n              var that = this;\n              var index = -1;\n              var matchItems = new Array();\n              var newItemsIndex = 0;\n              $.each(items, function (i) {\n                var itemValue = '';\n                if (!this.isGroup) {\n                  if (this.searchLabel) {\n                    itemValue = this.searchLabel;\n                  } else if (this.label) {\n                    itemValue = this.label;\n                  } else if (this.value) {\n                    itemValue = this.value;\n                  } else if (this.title) {\n                    itemValue = this.title;\n                  } else itemValue = 'jqxItem';\n                  itemValue = itemValue.toString();\n                  var matches = false;\n                  switch (that.searchMode) {\n                    case 'containsignorecase':\n                      matches = $.jqx.string.containsIgnoreCase(itemValue, value);\n                      break;\n                    case 'contains':\n                      matches = $.jqx.string.contains(itemValue, value);\n                      break;\n                    case 'equals':\n                      matches = $.jqx.string.equals(itemValue, value);\n                      break;\n                    case 'equalsignorecase':\n                      matches = $.jqx.string.equalsIgnoreCase(itemValue, value);\n                      break;\n                    case 'startswith':\n                      matches = $.jqx.string.startsWith(itemValue, value);\n                      break;\n                    case 'startswithignorecase':\n                      matches = $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                      break;\n                    case 'endswith':\n                      matches = $.jqx.string.endsWith(itemValue, value);\n                      break;\n                    case 'endswithignorecase':\n                      matches = $.jqx.string.endsWithIgnoreCase(itemValue, value);\n                      break;\n                  }\n                  if (that.autoComplete && !matches) {\n                    this.visible = false;\n                  }\n                  if (matches && that.autoComplete) {\n                    matchItems[newItemsIndex++] = this;\n                    this.visible = true;\n                    index = this.visibleIndex;\n                  }\n                  if (value == '' && that.autoComplete) {\n                    this.visible = true;\n                    matches = false;\n                  }\n                  if (that.multiSelect) {\n                    this.disabled = false;\n                    if (that.selectedItems.indexOf(this.value) >= 0 || that._disabledItems.indexOf(this.value) >= 0) {\n                      this.disabled = true;\n                      matches = false;\n                    }\n                  }\n                  if (!that.multiSelect) {\n                    if (matches && !that.autoComplete) {\n                      index = this.visibleIndex;\n                      return false;\n                    }\n                  } else {\n                    if (matches && !that.autoComplete) {\n                      if (index === -1) {\n                        index = this.visibleIndex;\n                      }\n                      return true;\n                    }\n                  }\n                }\n              });\n              this.listBox.searchString = value;\n              var that = this;\n              var selectFirstItem = function () {\n                if (that.multiSelect) return;\n                var nonDisabledIndex = 0;\n                var foundIndex = false;\n                var item = null;\n                for (var indx = 0; indx < that.listBox.items.length; indx++) {\n                  that.listBox.selectedIndexes[indx] = -1;\n                  if (!that.listBox.items[indx].disabled) {\n                    if (foundIndex == false) {\n                      item = that.listBox.items[indx];\n                      nonDisabledIndex = item.visibleIndex;\n                      foundIndex = true;\n                    }\n                  }\n                }\n                that.listBox.selectedIndex = -1;\n                that.listBox.selectedIndex = nonDisabledIndex;\n                that.listBox.selectedIndexes[nonDisabledIndex] = nonDisabledIndex;\n                if (that.listBox.visibleItems.length > 0) {\n                  if (item) {\n                    that.listBox.selectedValue = item.value;\n                  } else {\n                    that.listBox.selectedValue = null;\n                  }\n                } else {\n                  that.listBox.selectedValue = null;\n                }\n                that.listBox.ensureVisible(0);\n              };\n              if (!this.autoComplete) {\n                selectFirstItem();\n                return {\n                  index: index,\n                  matchItems: matchItems\n                };\n              }\n              this.listBox.renderedVisibleItems = new Array();\n              var vScrollValue = this.listBox.vScrollInstance.value;\n              this.listBox.vScrollInstance.value = 0;\n              this.listBox.visibleItems = new Array();\n              this.listBox._renderItems();\n              var selectedValue = this.listBox.selectedValue;\n              var item = this.listBox.getItemByValue(selectedValue);\n              if (!this.multiSelect) {\n                if (item) {\n                  if (item.visible) {\n                    this.listBox.selectedIndex = item.visibleIndex;\n                    for (var indx = 0; indx < this.listBox.items.length; indx++) {\n                      this.listBox.selectedIndexes[indx] = -1;\n                    }\n                    this.listBox.selectedIndexes[item.visibleIndex] = item.visibleIndex;\n                  } else {\n                    for (var indx = 0; indx < this.listBox.items.length; indx++) {\n                      this.listBox.selectedIndexes[indx] = -1;\n                    }\n                    this.listBox.selectedIndex = -1;\n                  }\n                }\n              } else {\n                selectFirstItem();\n              }\n              this.listBox._renderItems();\n              var height = this.listBox._calculateVirtualSize().height;\n              if (height < vScrollValue) {\n                vScrollValue = 0;\n                this.listBox.vScrollInstance.refresh();\n              }\n              if (this.autoDropDownHeight) {\n                this._disableSelection = true;\n                if (this.listBox.autoHeight != this.autoDropDownHeight) {\n                  this.listBoxContainer.jqxListBox({\n                    autoHeight: this.autoDropDownHeight\n                  });\n                }\n                this.container.height(height + 25);\n                this.listBox.invalidate();\n                this._disableSelection = false;\n              } else {\n                if (height < parseInt(this.dropDownHeight)) {\n                  var scrollOffset = this.listBox.hScrollBar[0].style.visibility == \"hidden\" ? 0 : 20;\n                  this.listBox.height = scrollOffset + height;\n                  this.container.height(height + 25 + scrollOffset);\n                  this.listBox.invalidate();\n                } else {\n                  this.listBox.height = parseInt(this.dropDownHeight);\n                  this.container.height(parseInt(this.dropDownHeight) + 25);\n                  this.listBox.invalidate();\n                }\n              }\n              this.listBox.vScrollInstance.setPosition(vScrollValue);\n              return {\n                index: index,\n                matchItems: matchItems\n              };\n            },\n            // gets all items that match to a search value.\n            findItems: function (value) {\n              var items = this.getItems();\n              var that = this;\n              var index = 0;\n              var matchItems = new Array();\n              $.each(items, function (i) {\n                var itemValue = '';\n                if (!this.isGroup) {\n                  if (this.label) {\n                    itemValue = this.label;\n                  } else if (this.value) {\n                    itemValue = this.value;\n                  } else if (this.title) {\n                    itemValue = this.title;\n                  } else itemValue = 'jqxItem';\n                  var matches = false;\n                  switch (that.searchMode) {\n                    case 'containsignorecase':\n                      matches = $.jqx.string.containsIgnoreCase(itemValue, value);\n                      break;\n                    case 'contains':\n                      matches = $.jqx.string.contains(itemValue, value);\n                      break;\n                    case 'equals':\n                      matches = $.jqx.string.equals(itemValue, value);\n                      break;\n                    case 'equalsignorecase':\n                      matches = $.jqx.string.equalsIgnoreCase(itemValue, value);\n                      break;\n                    case 'startswith':\n                      matches = $.jqx.string.startsWith(itemValue, value);\n                      break;\n                    case 'startswithignorecase':\n                      matches = $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                      break;\n                    case 'endswith':\n                      matches = $.jqx.string.endsWith(itemValue, value);\n                      break;\n                    case 'endswithignorecase':\n                      matches = $.jqx.string.endsWithIgnoreCase(itemValue, value);\n                      break;\n                  }\n                  if (matches) {\n                    matchItems[index++] = this;\n                  }\n                }\n              });\n              return matchItems;\n            },\n            //[optimize]\n            _resetautocomplete: function () {\n              $.each(this.listBox.items, function (i) {\n                this.visible = true;\n              });\n              this.listBox.vScrollInstance.value = 0;\n              this.listBox._addItems();\n              this.listBox.autoHeight = false;\n              this.listBox.height = this.dropDownHeight;\n              this.container.height(parseInt(this.dropDownHeight) + 25);\n              this.listBoxContainer.height(parseInt(this.dropDownHeight));\n              this.listBox._arrange();\n              this.listBox._addItems();\n              this.listBox._renderItems();\n            },\n            // gets all items.\n            getItems: function () {\n              var item = this.listBox.items;\n              return item;\n            },\n            getVisibleItems: function () {\n              return this.listBox.getVisibleItems();\n            },\n            _setSize: function () {\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              }\n              ;\n              var isPercentage = false;\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.element.style.width = this.width;\n                if (borderSize > 0) {\n                  this.host.css('box-sizing', 'border-box');\n                }\n              }\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.element.style.height = this.height;\n              }\n              if (isPercentage) {\n                var that = this;\n                var width = this.host.width();\n                if (this.dropDownWidth != 'auto') {\n                  width = this.dropDownWidth;\n                }\n                this.listBoxContainer.jqxListBox({\n                  width: width\n                });\n                this.container.width(parseInt(width) + 25);\n                this._arrange();\n              }\n              var that = this;\n              var resizeFunc = function () {\n                if (that.multiSelect) {\n                  that.host.height(that.height);\n                }\n                that._arrange();\n                if (that.multiSelect) {\n                  that.host.height('auto');\n                }\n              };\n              that.oldWidth = that.host.width();\n              that.oldHeight = that.host.height();\n              $.jqx.utilities.resize(this.host, function () {\n                var w = that.host.width();\n                var h = that.host.height();\n                if (w != that.oldWidth || h != that.oldHeight) {\n                  resizeFunc();\n                  that.hideListBox('api');\n                }\n                that.oldWidth = w;\n                that.oldHeight = h;\n              });\n            },\n            // returns true when the listbox is opened, otherwise returns false.\n            isOpened: function () {\n              var that = this;\n              var openedListBox = $.data(document.body, \"openedCombojqxListBox\" + this.element.id);\n              if (this.container.css('display') != 'block') return false;\n              if (openedListBox != null && openedListBox == that.listBoxContainer) {\n                return true;\n              }\n              return false;\n            },\n            _updateHandlers: function () {\n              var that = this;\n              var hovered = false;\n              this.removeHandlers();\n              if (this.multiSelect) {\n                this.addHandler(this.dropdownlistContent, 'click', function (event) {\n                  if (event.target.href) return false;\n                  that.input.focus();\n                  setTimeout(function () {\n                    that.input.focus();\n                  }, 10);\n                });\n                this.addHandler(this.dropdownlistContent, 'focus', function (event) {\n                  if (event.target.href) return false;\n                  that.input.focus();\n                  setTimeout(function () {\n                    that.input.focus();\n                  }, 10);\n                });\n              }\n              if (!this.touch) {\n                if (this.host.parents()) {\n                  this.addHandler(this.host.parents(), 'scroll.combobox' + this.element.id, function (event) {\n                    var opened = that.isOpened();\n                    if (opened) {\n                      that.close();\n                    }\n                  });\n                }\n                this.addHandler(this.host, 'mouseenter', function () {\n                  if (!that.disabled && that.enableHover) {\n                    hovered = true;\n                    that.host.addClass(that.toThemeProperty('jqx-combobox-state-hover'));\n                    if (that.dropDownVerticalAlignment == \"top\") {\n                      that.dropdownlistArrowIcon.addClass(that.toThemeProperty('jqx-icon-arrow-up'));\n                    } else {\n                      that.dropdownlistArrowIcon.addClass(that.toThemeProperty('jqx-icon-arrow-down-hover'));\n                    }\n                    that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-combobox-arrow-hover'));\n                    that.dropdownlistArrow.addClass(that.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                });\n                this.addHandler(this.host, 'mouseleave', function () {\n                  if (!that.disabled && that.enableHover) {\n                    that.host.removeClass(that.toThemeProperty('jqx-combobox-state-hover'));\n                    that.dropdownlistArrowIcon.removeClass(that.toThemeProperty('jqx-icon-arrow-down-hover'));\n                    that.dropdownlistArrowIcon.removeClass(that.toThemeProperty('jqx-icon-arrow-up-hover'));\n                    that.dropdownlistArrow.removeClass(that.toThemeProperty('jqx-combobox-arrow-hover'));\n                    that.dropdownlistArrow.removeClass(that.toThemeProperty('jqx-fill-state-hover'));\n                    hovered = false;\n                  }\n                });\n              }\n              if (that.autoOpen) {\n                this.addHandler(this.host, 'mouseenter', function () {\n                  var isOpened = that.isOpened();\n                  if (!isOpened && that.autoOpen) {\n                    that.open();\n                    that.host.focus();\n                  }\n                });\n                this.addHandler($(document), 'mousemove.' + that.id, function (event) {\n                  var isOpened = that.isOpened();\n                  if (isOpened && that.autoOpen) {\n                    var offset = that.host.coord();\n                    var top = offset.top;\n                    var left = offset.left;\n                    var popupOffset = that.container.coord();\n                    var popupLeft = popupOffset.left;\n                    var popupTop = popupOffset.top;\n                    var canClose = true;\n                    if (event.pageY >= top && event.pageY <= top + that.host.height() + 2) {\n                      if (event.pageX >= left && event.pageX < left + that.host.width()) canClose = false;\n                    }\n                    if (event.pageY >= popupTop && event.pageY <= popupTop + that.container.height() - 20) {\n                      if (event.pageX >= popupLeft && event.pageX < popupLeft + that.container.width()) canClose = false;\n                    }\n                    if (canClose) {\n                      that.close();\n                    }\n                  }\n                });\n              }\n              var eventName = 'mousedown';\n              if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');\n              var dropDownButtonClicked = function (event) {\n                if (!that.disabled) {\n                  var isOpen = that.container.css('display') == 'block';\n                  if (!that.isanimating) {\n                    if (isOpen) {\n                      that.hideListBox('api');\n                      if (!$.jqx.mobile.isTouchDevice()) {\n                        that.input.focus();\n                        setTimeout(function () {\n                          that.input.focus();\n                        }, 10);\n                      }\n                      return true;\n                    } else {\n                      if (that.autoDropDownHeight) {\n                        that.container.height(that.listBoxContainer.height() + 25);\n                        var autoheight = that.listBoxContainer.jqxListBox('autoHeight');\n                        if (!autoheight) {\n                          that.listBoxContainer.jqxListBox({\n                            autoHeight: that.autoDropDownHeight\n                          });\n                          that.listBox._arrange();\n                          that.listBox.ensureVisible(0);\n                          that.listBox._renderItems();\n                          that.container.height(that.listBoxContainer.height() + 25);\n                        }\n                      }\n                      that.showListBox('api');\n                      if (!$.jqx.mobile.isTouchDevice()) {\n                        setTimeout(function () {\n                          that.input.focus();\n                        }, 10);\n                      } else {\n                        return true;\n                      }\n                    }\n                  }\n                }\n              };\n              this.addHandler(this.dropdownlistArrow, eventName, function (event) {\n                dropDownButtonClicked(event);\n                //       return false;\n              });\n              this.addHandler(this.dropdownlistArrowIcon, eventName, function (event) {\n\n                //   dropDownButtonClicked(event);\n                //     return false;\n              });\n              this.addHandler(this.host, 'focus', function () {\n                that.focus();\n              });\n              this.addHandler(this.input, 'focus', function (event) {\n                that.focused = true;\n                that.host.addClass(that.toThemeProperty('jqx-combobox-state-focus'));\n                that.host.addClass(that.toThemeProperty('jqx-fill-state-focus'));\n                that.bar.addClass('focused');\n                that.label.addClass('focused');\n                that.dropdownlistContent.addClass(that.toThemeProperty('jqx-combobox-content-focus'));\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n              });\n              this.addHandler(this.input, 'blur', function () {\n                that.focused = false;\n                that.bar.removeClass('focused');\n                that.label.removeClass('focused');\n                if (!that.isOpened() && !that.opening) {\n                  if (that.selectionMode == \"dropDownList\") {\n                    that._selectOldValue();\n                  }\n                  that.host.removeClass(that.toThemeProperty('jqx-combobox-state-focus'));\n                  that.host.removeClass(that.toThemeProperty('jqx-fill-state-focus'));\n                  that.dropdownlistContent.removeClass(that.toThemeProperty('jqx-combobox-content-focus'));\n                }\n                if (that._searchTimer) clearTimeout(that._searchTimer);\n              });\n              this.addHandler($(document), 'mousedown.' + this.id, that.closeOpenedListBox, {\n                that: this,\n                listbox: this.listBox,\n                id: this.id\n              });\n              if (this.touch) {\n                this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id, that.closeOpenedListBox, {\n                  that: this,\n                  listbox: this.listBox,\n                  id: this.id\n                });\n              }\n              this.addHandler(this.host, 'keydown', function (event) {\n                var isOpen = that.container.css('display') == 'block';\n                that.ctrlKey = event.ctrlKey;\n                if (that.host.css('display') == 'none') {\n                  return true;\n                }\n                if (event.keyCode == '13' || event.keyCode == '9') {\n                  if (isOpen && !that.isanimating) {\n                    if (that.listBox.selectedIndex != -1) {\n                      that.renderSelection('mouse');\n                      var index = that.listBox.selectedIndex;\n                      var item = that.listBox.getVisibleItem(index);\n                      if (item) {\n                        that.listBox.selectedValue = item.value;\n                      }\n                      that._setSelection(that.input.val().length, that.input.val().length);\n                      that.hideListBox('keyboard');\n                    }\n                    if (event.keyCode == '13') {\n                      that._oldvalue = that.listBox.selectedValue;\n                    }\n                    if (!that.keyboardSelection) {\n                      that._raiseEvent('2', {\n                        index: that.selectedIndex,\n                        type: 'keyboard',\n                        item: that.getItem(that.selectedIndex)\n                      });\n                    }\n                    if (event.keyCode == '9') return true;\n                    return false;\n                  }\n                }\n                if (event.keyCode == 115) {\n                  if (!that.isanimating) {\n                    if (!that.isOpened()) {\n                      that.showListBox('keyboard');\n                    } else if (that.isOpened()) {\n                      that.hideListBox('keyboard');\n                    }\n                  }\n                  return false;\n                }\n                if (event.altKey) {\n                  if (that.host.css('display') == 'block') {\n                    if (!that.isanimating) {\n                      if (event.keyCode == 38) {\n                        if (that.isOpened()) {\n                          that.hideListBox('altKey');\n                        }\n                      } else if (event.keyCode == 40) {\n                        if (!that.isOpened()) {\n                          that.showListBox('altKey');\n                        }\n                      }\n                    }\n                  }\n                }\n                if (event.keyCode == '27' || event.keyCode == '9') {\n                  if (that.isOpened() && !that.isanimating) {\n                    if (event.keyCode == '27') {\n                      if (!that.multiSelect) {\n                        var item = that.listBox.getItemByValue(that._oldvalue);\n                        if (item) {\n                          setTimeout(function () {\n                            if (that.autoComplete) {\n                              that._updateItemsVisibility(\"\");\n                            }\n                            that.listBox.selectIndex(item.index);\n                            that.renderSelection('api');\n                          }, that.closeDelay);\n                        } else {\n                          that.clearSelection();\n                        }\n                      } else {\n                        that.listBox.selectedValue = null;\n                        that.input.val(\"\");\n                      }\n                    }\n                    that.hideListBox('keyboard');\n                    if (event.keyCode == '9') return true;\n                    that.renderSelection('api');\n                    event.preventDefault();\n                    return false;\n                  }\n                }\n                var key = event.keyCode;\n                if (isOpen && !that.disabled && key != 8) {\n                  return that.listBox._handleKeyDown(event);\n                } else if (!that.disabled && !isOpen) {\n                  var key = event.keyCode;\n                  // arrow keys.\n                  if (key == 33 || key == 34 || key == 35 || key == 36 || key == 38 || key == 40) {\n                    return that.listBox._handleKeyDown(event);\n                  }\n                }\n                if (key === 8 && that.multiSelect) {\n                  if (that.input.val().length === 0) {\n                    var lastItem = that.selectedItems[that.selectedItems.length - 1];\n                    that.selectedItems.pop();\n                    that._selectedItems.pop();\n                    if (lastItem) {\n                      that._raiseEvent('3', {\n                        index: lastItem.index,\n                        type: 'keyboard',\n                        item: lastItem\n                      });\n                      that._raiseEvent('4', {\n                        index: lastItem.index,\n                        type: 'keyboard',\n                        item: lastItem\n                      });\n                    }\n                    that.listBox.selectedValue = null;\n                    that.doMultiSelect();\n                    return false;\n                  }\n                }\n                if (that.isMaterialized() && that.hint) {\n                  setTimeout(function () {\n                    if (that.input[0].value.length === 0) {\n                      that.element.removeAttribute('hint');\n                      that.label[0].innerHTML = that.placeHolder;\n                    } else if (that.hint) {\n                      that.element.setAttribute('hint', true);\n                    }\n                  });\n                }\n              });\n              this.addHandler(this.listBoxContainer, 'checkChange', function (event) {\n                that.renderSelection('mouse');\n                that._updateInputSelection();\n                that._raiseEvent(5, {\n                  label: event.args.label,\n                  value: event.args.value,\n                  checked: event.args.checked,\n                  item: event.args.item\n                });\n              });\n              this.addHandler(this.listBoxContainer, 'select', function (event) {\n                if (!that.disabled) {\n                  if (event.args.type != 'keyboard' || that.keyboardSelection) {\n                    that.renderSelection(event.args.type);\n                    if (!that.multiSelect) {\n                      that._raiseEvent('2', {\n                        index: event.args.index,\n                        type: event.args.type,\n                        item: event.args.item\n                      });\n                    }\n                    if (event.args.type == 'mouse') {\n                      that._oldvalue = that.listBox.selectedValue;\n                      if (!that.checkboxes) {\n                        that.hideListBox('mouse');\n                        if (!that.touch) {\n                          that.input.focus();\n                        } else {\n                          return false;\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n              if (this.listBox != null && this.listBox.content != null) {\n                this.addHandler(this.listBox.content, 'click', function (event) {\n                  if (!that.disabled) {\n                    if (that.listBox.itemswrapper) {\n                      if (event.target === that.listBox.itemswrapper[0]) return true;\n                    }\n                    if (event.target && event.target.className) {\n                      if (event.target.className.indexOf('jqx-fill-state-disabled') >= 0) {\n                        return true;\n                      }\n                    }\n                    that.renderSelection('mouse');\n                    that._oldvalue = that.listBox.selectedValue;\n                    if (!that.touch && !that.ishiding) {\n                      if (!that.checkboxes) {\n                        that.hideListBox('mouse');\n                        that.input.focus();\n                      }\n                    }\n                    if (that.touch === true) {\n                      if (!that.checkboxes) {\n                        that.hideListBox('mouse');\n                      }\n                    }\n                  }\n                });\n              }\n            },\n            _selectOldValue: function () {\n              var that = this;\n              if (that.listBox.selectedIndex == -1) {\n                if (!that.multiSelect) {\n                  var item = that.listBox.getItemByValue(that._oldvalue);\n                  if (item) {\n                    setTimeout(function () {\n                      if (that.autoComplete) {\n                        that._updateItemsVisibility(\"\");\n                      }\n                      that.listBox.selectIndex(item.index);\n                      that.renderSelection('api');\n                    }, that.closeDelay);\n                  } else {\n                    that.clearSelection();\n                    that.listBox.selectIndex(0);\n                    that.renderSelection('api');\n                  }\n                } else {\n                  that.listBox.selectedValue = null;\n                  that.input.val(\"\");\n                }\n              } else {\n                that.renderSelection('api');\n              }\n            },\n            removeHandlers: function () {\n              var that = this;\n              if (this.dropdownlistWrapper != null) {\n                this.removeHandler(this.dropdownlistWrapper, 'mousedown');\n              }\n              if (this.dropdownlistContent) {\n                this.removeHandler(this.dropdownlistContent, 'click');\n                this.removeHandler(this.dropdownlistContent, 'focus');\n              }\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.host, 'focus');\n              if (this.input != null) {\n                this.removeHandler(this.input, 'focus');\n                this.removeHandler(this.input, 'blur');\n              }\n              this.removeHandler(this.host, 'mouseenter');\n              this.removeHandler(this.host, 'mouseleave');\n              this.removeHandler($(document), 'mousemove.' + that.id);\n              if (this.listBoxContainer) {\n                this.removeHandler(this.listBoxContainer, 'checkChange');\n                this.removeHandler(this.listBoxContainer, 'select');\n              }\n              if (this.host.parents()) {\n                this.removeHandler(this.host.parents(), 'scroll.combobox' + this.element.id);\n              }\n              if (this.dropdownlistArrowIcon && this.dropdownlistArrow) {\n                var eventName = 'mousedown';\n                if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');\n                this.removeHandler(this.dropdownlistArrowIcon, eventName);\n                this.removeHandler(this.dropdownlistArrow, eventName);\n              }\n            },\n            // gets an item by index.\n            getItem: function (index) {\n              var item = this.listBox.getItem(index);\n              return item;\n            },\n            getItemByValue: function (value) {\n              var item = this.listBox.getItemByValue(value);\n              return item;\n            },\n            getVisibleItem: function (index) {\n              var item = this.listBox.getVisibleItem(index);\n              return item;\n            },\n            // renders the selection.\n            renderSelection: function (type) {\n              if (type == undefined || type == 'none') {\n                return;\n              }\n              if (this._disableSelection === true) return;\n              if (this.listBox == null) return;\n              if (this.multiSelect) {\n                return;\n              }\n              var item = this.listBox.visibleItems[this.listBox.selectedIndex];\n              if (this.autoComplete && !this.checkboxes) {\n                if (this.listBox.selectedValue !== undefined) {\n                  var item = this.getItemByValue(this.listBox.selectedValue);\n                }\n              }\n              if (this.checkboxes) {\n                var checkedItems = this.getCheckedItems();\n                if (checkedItems != null && checkedItems.length > 0) {\n                  item = checkedItems[0];\n                } else item = null;\n              }\n              if (this.hint) {\n                this.label[0].innerHTML = this.placeHolder;\n              }\n              if (item != null) {\n                if (this.hint) {\n                  this.element.setAttribute('hint', true);\n                }\n              } else {\n                this.element.removeAttribute('hint');\n              }\n              this.bar.css('top', this.host.height());\n              if (item == null) {\n                var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n                this.input.val(\"\");\n                this.input.attr('value', '');\n                if (!ie7) {\n                  if (this.isMaterialized()) {\n                    this.label[0].innerHTML = this.placeHolder;\n                    this.input.removeAttr('placeholder');\n                  } else {\n                    this.input.attr('placeholder', this.placeHolder);\n                  }\n                }\n                this._updateInputSelection();\n                return;\n              }\n              this.selectedIndex = this.listBox.selectedIndex;\n              var spanElement = $('<span></span>');\n              if (item.label != undefined && item.label != null && item.label.toString().length > 0) {\n                $.jqx.utilities.html(spanElement, item.label);\n              } else if (item.value != undefined && item.value != null && item.value.toString().length > 0) {\n                $.jqx.utilities.html(spanElement, item.value);\n              } else if (item.title != undefined && item.title != null && item.title.toString().length > 0) {\n                $.jqx.utilities.html(spanElement, item.title);\n              } else {\n                $.jqx.utilities.html(spanElement, this.emptyString);\n              }\n              var spanHeight = spanElement.outerHeight();\n              if (this.checkboxes) {\n                var items = this.getCheckedItems();\n                var str = \"\";\n                for (var i = 0; i < items.length; i++) {\n                  if (i == items.length - 1) {\n                    str += items[i].label;\n                  } else {\n                    str += items[i].label + \", \";\n                  }\n                }\n                this.input.val(str);\n              } else {\n                this.input.val(spanElement.text());\n              }\n              spanElement.remove();\n              this._updateInputSelection();\n              if (this.renderSelectedItem) {\n                var result = this.renderSelectedItem(this.listBox.selectedIndex, item);\n                if (result != undefined) {\n                  this.input[0].value = result;\n                }\n              }\n              this.input.attr('value', this.input.val());\n              if (this.listBox && this.listBox._activeElement) {\n                $.jqx.aria(this, \"aria-activedescendant\", this.listBox._activeElement.id);\n              }\n            },\n            dataBind: function () {\n              this.listBoxContainer.jqxListBox({\n                source: this.source\n              });\n              this.renderSelection('mouse');\n              if (this.source == null) {\n                this.clearSelection();\n              }\n            },\n            clear: function () {\n              this.listBoxContainer.jqxListBox({\n                source: null\n              });\n              this.clearSelection();\n            },\n            // clears the selection.\n            clearSelection: function (render) {\n              this.selectedIndex = -1;\n              this.listBox.clearSelection();\n              this.input.val(\"\");\n              if (this.multiSelect) {\n                this.listBox.selectedValue = \"\";\n                this.selectedItems = new Array();\n                this._selectedItems = new Array();\n                this.doMultiSelect(false);\n              }\n            },\n            // unselects an item at specific index.\n            // @param Number\n            unselectIndex: function (index, render) {\n              if (isNaN(index)) return;\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              this.listBox.unselectIndex(index, render);\n              this.renderSelection('mouse');\n              if (this.multiSelect) {\n                if (index >= 0) {\n                  var multiItem = this.getItem(index);\n                  var indx = this.selectedItems.indexOf(multiItem.value);\n                  if (indx >= 0) {\n                    if (multiItem.value === this.listBox.selectedValue) {\n                      this.listBox.selectedValue = null;\n                    }\n                    this.selectedItems.splice(indx, 1);\n                    this._selectedItems.splice(indx, 1);\n                  }\n                }\n                this.doMultiSelect(false);\n              }\n            },\n            // selects an item at specific index.\n            // @param Number\n            selectIndex: function (index, ensureVisible, render, forceSelect) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              this.listBox.selectIndex(index, ensureVisible, render, forceSelect);\n              this.renderSelection('mouse');\n              this.selectedIndex = index;\n              if (this.multiSelect) {\n                this.doMultiSelect();\n              }\n            },\n            selectItem: function (item) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              if (this.listBox != undefined) {\n                this.listBox.selectedIndex = -1;\n                this.listBox.selectItem(item);\n                this.selectedIndex = this.listBox.selectedIndex;\n                this.renderSelection('mouse');\n                if (this.multiSelect) {\n                  this.doMultiSelect(false);\n                }\n              }\n            },\n            unselectItem: function (item) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              if (this.listBox != undefined) {\n                this.listBox.unselectItem(item);\n                this.renderSelection('mouse');\n                if (this.multiSelect) {\n                  var multiItem = this.getItemByValue(item);\n                  if (multiItem) {\n                    var index = this.selectedItems.indexOf(multiItem.value);\n                    if (index >= 0) {\n                      if (multiItem.value === this.listBox.selectedValue) {\n                        this.listBox.selectedValue = null;\n                      }\n                      this.selectedItems.splice(index, 1);\n                      this._selectedItems.splice(index, 1);\n                    }\n                  }\n                  this.doMultiSelect(false);\n                }\n              }\n            },\n            checkItem: function (item) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              if (this.listBox != undefined) {\n                this.listBox.checkItem(item);\n              }\n            },\n            uncheckItem: function (item) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              if (this.listBox != undefined) {\n                this.listBox.uncheckItem(item);\n              }\n            },\n            indeterminateItem: function (item) {\n              if (this.autoComplete) {\n                this._updateItemsVisibility(\"\");\n              }\n              if (this.listBox != undefined) {\n                this.listBox.indeterminateItem(item);\n              }\n            },\n            getSelectedValue: function () {\n              return this.listBox.selectedValue;\n            },\n            // gets the selected index.\n            getSelectedIndex: function () {\n              if (!this.multiSelect) {\n                return this.listBox.selectedIndex;\n              } else {\n                if (this.remoteAutoComplete && this.multiSelect && this._selectedItems.length > 0) return this.getSelectedItems()[0].index;\n                if (this._selectedItems && this._selectedItems.length > 0) {\n                  return this.getSelectedItems()[0].index;\n                }\n              }\n            },\n            // gets the selected item.\n            getSelectedItem: function () {\n              if (!this.multiSelect) {\n                return this.getVisibleItem(this.listBox.selectedIndex);\n              } else {\n                if (this.remoteAutoComplete && this.multiSelect && this._selectedItems.length > 0) return this.getSelectedItems()[0];\n                if (this._selectedItems && this._selectedItems.length > 0) {\n                  return this.getSelectedItems()[0];\n                }\n                return null;\n              }\n            },\n            // gets the selected items when multiselect is enabled.\n            getSelectedItems: function () {\n              if (this.remoteAutoComplete && this.multiSelect) return this._selectedItems;\n              var array = new Array();\n              var that = this;\n              $.each(this.selectedItems, function () {\n                var item = that.getItemByValue(this);\n                if (item) {\n                  array.push(item);\n                } else {\n                  var item = that._selectedItems[this];\n                  if (item) {\n                    array.push(item);\n                  }\n                }\n              });\n              return array;\n            },\n            getCheckedItems: function () {\n              return this.listBox.getCheckedItems();\n            },\n            checkIndex: function (index) {\n              this.listBox.checkIndex(index);\n            },\n            uncheckIndex: function (index) {\n              this.listBox.uncheckIndex(index);\n            },\n            indeterminateIndex: function (index) {\n              this.listBox.indeterminateIndex(index);\n            },\n            checkAll: function () {\n              this.listBox.checkAll();\n              this.renderSelection(\"mouse\");\n            },\n            uncheckAll: function () {\n              this.listBox.uncheckAll();\n              this.renderSelection(\"mouse\");\n            },\n            insertAt: function (item, index) {\n              if (item == null) return false;\n              return this.listBox.insertAt(item, index);\n            },\n            addItem: function (item) {\n              return this.listBox.addItem(item);\n            },\n            removeAt: function (index) {\n              var result = this.listBox.removeAt(index);\n              this.renderSelection('mouse');\n              return result;\n            },\n            removeItem: function (item) {\n              var result = this.listBox.removeItem(item);\n              this.renderSelection('mouse');\n              return result;\n            },\n            updateItem: function (item, oldItem) {\n              var result = this.listBox.updateItem(item, oldItem);\n              this.renderSelection('mouse');\n              return result;\n            },\n            updateAt: function (item, index) {\n              var result = this.listBox.updateAt(item, index);\n              this.renderSelection('mouse');\n              return result;\n            },\n            ensureVisible: function (index) {\n              return this.listBox.ensureVisible(index);\n            },\n            disableAt: function (index) {\n              var item = this.getVisibleItem(index);\n              if (item) {\n                this._disabledItems.push(item.value);\n              }\n              return this.listBox.disableAt(index);\n            },\n            enableAt: function (index) {\n              var item = this.getVisibleItem(index);\n              if (item) {\n                this._disabledItems.splice(this._disabledItems.indexOf(item.value), 1);\n              }\n              return this.listBox.enableAt(index);\n            },\n            disableItem: function (item) {\n              var item = this.getVisibleItem(item);\n              if (item) {\n                this._disabledItems.push(item.value);\n              }\n              return this.listBox.disableItem(item);\n            },\n            enableItem: function (item) {\n              var item = this.getVisibleItem(item);\n              if (item) {\n                this._disabledItems.splice(this._disabledItems.indexOf(item.value), 1);\n              }\n              return this.listBox.enableItem(item);\n            },\n            _findPos: function (obj) {\n              while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {\n                obj = obj['nextSibling'];\n              }\n              if (obj) {\n                var position = $(obj).coord(true);\n                return [position.left, position.top];\n              }\n            },\n            testOffset: function (element, offset, inputHeight) {\n              var dpWidth = element.outerWidth();\n              var dpHeight = element.outerHeight();\n              var viewWidth = $(window).width() + $(window).scrollLeft();\n              var viewHeight = $(window).height() + $(window).scrollTop();\n              if (offset.left + dpWidth > viewWidth) {\n                if (dpWidth > this.host.width()) {\n                  var hostLeft = this.host.coord().left;\n                  var hOffset = dpWidth - this.host.width();\n                  offset.left = hostLeft - hOffset + 2;\n                }\n              }\n              if (offset.left < 0) {\n                offset.left = parseInt(this.host.coord().left) + 'px';\n              }\n              offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight + 23) : 0);\n              return offset;\n            },\n            open: function () {\n              if (!this.isOpened() && !this.opening) {\n                this.showListBox('api');\n              }\n            },\n            close: function () {\n              if (this.isOpened()) {\n                this.hideListBox('api');\n              }\n            },\n            _getBodyOffset: function () {\n              var top = 0;\n              var left = 0;\n              if ($('body').css('border-top-width') != '0px') {\n                top = parseInt($('body').css('border-top-width'));\n                if (isNaN(top)) top = 0;\n              }\n              if ($('body').css('border-left-width') != '0px') {\n                left = parseInt($('body').css('border-left-width'));\n                if (isNaN(left)) left = 0;\n              }\n              return {\n                left: left,\n                top: top\n              };\n            },\n            // shows the listbox.\n            showListBox: function (mode) {\n              if (this.listBox.items && this.listBox.items.length == 0) return;\n              if (mode == \"search\" && !this.autoComplete && !this.remoteAutoComplete) {\n                if (this.autoDropDownHeight) {\n                  this.container.height(this.listBoxContainer.height() + 25);\n                }\n              }\n              this.element.setAttribute('opened', true);\n              if (this.autoComplete || this.multiSelect && !this.remoteAutoComplete) {\n                if (mode != 'search') {\n                  this._updateItemsVisibility(\"\");\n                  if (this.multiSelect) {\n                    var visibleItems = this.getVisibleItems();\n                    for (var i = 0; i < visibleItems.length; i++) {\n                      if (!visibleItems[i].disabled) {\n                        this.ensureVisible(i);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n              if (this.remoteAutoComplete) {\n                this.listBox.clearSelection();\n              }\n              if (mode != 'search') {\n                this._oldvalue = this.listBox.selectedValue;\n              }\n              $.jqx.aria(this, \"aria-expanded\", true);\n              if (this.dropDownWidth == 'auto' && this.width != null && this.width.indexOf && this.width.indexOf('%') != -1) {\n                if (this.listBox.host.width() != this.host.width()) {\n                  var width = this.element.offsetWidth;\n                  this.listBoxContainer.jqxListBox({\n                    width: width\n                  });\n                  this.listBoxContainer[0].style.width = width + \"px\";\n                  this.container.width(parseInt(width) + 25);\n                }\n              }\n              if (this.dropDownWidth == 'auto' && this.host.css('border-left-width') === \"0px\") {\n                var width = this.element.offsetWidth;\n                this.listBoxContainer.jqxListBox({\n                  width: width + 1\n                });\n                this.container.width(parseInt(width) + 25);\n              }\n              var that = this;\n              var listBox = this.listBoxContainer;\n              var listBoxInstance = this.listBox;\n              var scrollPosition = $(window).scrollTop();\n              var scrollLeftPosition = $(window).scrollLeft();\n              var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';\n              var left,\n                leftPos = parseInt(Math.round(this.host.coord(true).left));\n              left = leftPos + 'px';\n              if (this.dropDownContainer === 'element') {\n                top = parseInt(this.host.outerHeight()) - 1 + 'px';\n                left = 0;\n              }\n              var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser() || $.jqx.mobile.isWindowsPhone();\n              this.ishiding = false;\n              var hasTransform = $.jqx.utilities.hasTransform(this.host);\n              if (hasTransform || isMobileBrowser != null && isMobileBrowser) {\n                left = $.jqx.mobile.getLeftPos(this.element);\n                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());\n                if ($('body').css('border-top-width') != '0px') {\n                  top = parseInt(top) - this._getBodyOffset().top + 'px';\n                }\n                if ($('body').css('border-left-width') != '0px') {\n                  left = parseInt(left) - this._getBodyOffset().left + 'px';\n                }\n              }\n              this.host.addClass(this.toThemeProperty('jqx-combobox-state-selected'));\n              if (this.dropDownVerticalAlignment == \"top\") {\n                this.dropdownlistArrowIcon.addClass(this.toThemeProperty('jqx-icon-arrow-up-selected'));\n              } else {\n                this.dropdownlistArrowIcon.addClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));\n              }\n              this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-combobox-arrow-selected'));\n              this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.host.addClass(this.toThemeProperty('jqx-combobox-state-focus'));\n              this.host.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.dropdownlistContent.addClass(this.toThemeProperty('jqx-combobox-content-focus'));\n              this.container.css('left', left);\n              this.container.css('top', top);\n              listBoxInstance._arrange();\n              var closeAfterSelection = true;\n              var positionChanged = false;\n              if (this.dropDownHorizontalAlignment == 'right' || this.rtl) {\n                var containerWidth = this.container.outerWidth();\n                var containerLeftOffset = Math.abs(containerWidth - this.host.width());\n                if (containerWidth > this.host.width()) {\n                  this.container.css('left', 25 + parseInt(Math.round(leftPos)) - containerLeftOffset + \"px\");\n                } else this.container.css('left', 25 + parseInt(Math.round(leftPos)) + containerLeftOffset + \"px\");\n              }\n              if (this.dropDownVerticalAlignment == \"top\") {\n                var dpHeight = listBox.height();\n                positionChanged = true;\n                listBox.css('top', 23);\n                listBox.addClass(this.toThemeProperty('jqx-popup-up'));\n                var inputHeight = parseInt(this.host.outerHeight());\n                var t = parseInt(top) - Math.abs(dpHeight + inputHeight + 23);\n                this.container.css('top', t);\n              }\n              if (this.enableBrowserBoundsDetection) {\n                var newOffset = this.testOffset(listBox, {\n                  left: parseInt(this.container.css('left')),\n                  top: parseInt(top)\n                }, parseInt(this.host.outerHeight()));\n                if (parseInt(this.container.css('top')) != newOffset.top) {\n                  positionChanged = true;\n                  listBox.css('top', 23);\n                  listBox.addClass(this.toThemeProperty('jqx-popup-up'));\n                } else listBox.css('top', 0);\n                this.container.css('top', newOffset.top);\n                this.container.css('top', newOffset.top);\n                if (parseInt(this.container.css('left')) != newOffset.left) {\n                  this.container.css('left', newOffset.left);\n                }\n              }\n              if (this.animationType == 'none' || this.animationType === 'transform') {\n                this.container.css('display', 'block');\n                $.data(document.body, \"openedCombojqxListBoxParent\", that);\n                $.data(document.body, \"openedCombojqxListBox\" + that.element.id, listBox);\n                listBox.css('margin-top', 0);\n                listBox.css('opacity', 1);\n              } else {\n                this.container.css('display', 'block');\n                var height = listBox.outerHeight();\n                listBox.stop();\n                if (this.animationType == 'fade') {\n                  listBox.css('margin-top', 0);\n                  listBox.css('opacity', 0);\n                  listBox.animate({\n                    'opacity': 1\n                  }, this.openDelay, function () {\n                    that.isanimating = false;\n                    that.opening = false;\n                    $.data(document.body, \"openedCombojqxListBoxParent\", that);\n                    $.data(document.body, \"openedCombojqxListBox\" + that.element.id, listBox);\n                  });\n                } else {\n                  listBox.css('opacity', 1);\n                  if (positionChanged) {\n                    listBox.css('margin-top', height);\n                  } else {\n                    listBox.css('margin-top', -height);\n                  }\n                  this.isanimating = true;\n                  this.opening = true;\n                  listBox.animate({\n                    'margin-top': 0\n                  }, this.openDelay, function () {\n                    that.isanimating = false;\n                    that.opening = false;\n                    $.data(document.body, \"openedCombojqxListBoxParent\", that);\n                    $.data(document.body, \"openedCombojqxListBox\" + that.element.id, listBox);\n                  });\n                }\n              }\n              listBoxInstance._renderItems();\n              if (!positionChanged) {\n                this.host.addClass(this.toThemeProperty('jqx-rc-b-expanded'));\n                listBox.addClass(this.toThemeProperty('jqx-rc-t-expanded'));\n                this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              } else {\n                this.host.addClass(this.toThemeProperty('jqx-rc-t-expanded'));\n                listBox.addClass(this.toThemeProperty('jqx-rc-b-expanded'));\n                this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              }\n              listBox.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this._raiseEvent('0', listBoxInstance);\n              listBox.addClass(this.toThemeProperty('jqx-popup-show'));\n            },\n            doMultiSelect: function (setFocus) {\n              if (this.checkboxes) {\n                this.multiSelect = false;\n              }\n              var that = this;\n              if (!this.multiSelect) {\n                var buttons = that.dropdownlistContent.find('.jqx-button');\n                var eventName = 'mousedown';\n                if (this.touch) {\n                  eventName = $.jqx.mobile.getTouchEventName('touchstart');\n                }\n                this.removeHandler(buttons, eventName);\n                this.removeHandler(buttons.find('.jqx-icon-close'), eventName);\n                buttons.remove();\n                var items = this.listBox.items;\n                if (!items) return;\n                for (var i = 0; i < items.length; i++) {\n                  items[i].disabled = false;\n                }\n                this.listBox._renderItems();\n                this.selectedItems = new Array();\n                this._selectedItems = new Array();\n                return;\n              }\n              if (this.validateSelection) {\n                var result = this.validateSelection(this.listBox.selectedValue);\n                if (!result) {\n                  return;\n                }\n              }\n              var oldItems = this.selectedItems;\n              if (this.listBox.selectedValue) {\n                if (this.selectedItems.indexOf(this.listBox.selectedValue) === -1) {\n                  var item = this.getItemByValue(this.listBox.selectedValue);\n                  if (item && item.visible) {\n                    this.selectedItems.push(this.listBox.selectedValue);\n                    this._selectedItems.push(item);\n                    this._raiseEvent('2', {\n                      index: item.index,\n                      item: item\n                    });\n                    this._raiseEvent('4', {\n                      index: item.index,\n                      item: item\n                    });\n                  }\n                }\n                this.listBox.selectedIndex = -1;\n              }\n              var items = this.listBox.items;\n              if (!items) return;\n              for (var i = 0; i < items.length; i++) {\n                items[i].disabled = false;\n                if (this.selectedItems.indexOf(items[i].value) >= 0 || this._disabledItems.indexOf(this.value) >= 0) {\n                  items[i].disabled = true;\n                }\n              }\n              this.listBox._renderItems();\n              this.searchString = \"\";\n              this.input.val(\"\");\n              var items = \"\";\n              var eventName = 'mousedown';\n              var buttons = that.dropdownlistContent.find('.jqx-button');\n              if (this.touch) {\n                eventName = $.jqx.mobile.getTouchEventName('touchstart');\n              }\n              this.removeHandler(buttons, eventName);\n              this.removeHandler(buttons.find('.jqx-icon-close'), eventName);\n              buttons.remove();\n              that.input.detach();\n              if (this.selectedItems.length > 0) {\n                that.input.css('width', '25px');\n                if (this.isMaterialized() && that.hint) {\n                  that.label[0].innerHTML = this.placeHolder;\n                } else {\n                  that.input.attr('placeholder', \"\");\n                }\n              } else {\n                that.input.css('width', '100%');\n                if (that.isMaterialized() && that.hint) {\n                  that.label[0].innerHTML = this.placeHolder;\n                } else {\n                  that.input.attr('placeholder', this.placeHolder);\n                }\n              }\n              if (that.isMaterialized()) {\n                if (that.hint) {\n                  setTimeout(function () {\n                    if (that.selectedItems.length === 0) {\n                      that.element.removeAttribute('hint');\n                      that.label[0].innerHTML = that.placeHolder;\n                    } else {\n                      if (that.hint) {\n                        that.element.setAttribute('hint', true);\n                      }\n                    }\n                  });\n                }\n              }\n              $.each(this.selectedItems, function (index) {\n                var item = that.getItemByValue(this);\n                if (!item || that.remoteAutoComplete) {\n                  item = that._selectedItems[index];\n                }\n                var group = $('<div style=\"overflow: hidden; float: left;\"></div>');\n                group.addClass(that.toThemeProperty('jqx-button'));\n                group.addClass(that.toThemeProperty('jqx-combobox-multi-item'));\n                group.addClass(that.toThemeProperty('jqx-fill-state-normal'));\n                group.addClass(that.toThemeProperty('jqx-rc-all'));\n                if (item) {\n                  var text = item.label;\n                  if (that.renderSelectedItem) {\n                    var result = that.renderSelectedItem(index, item);\n                    if (result) text = result;\n                  }\n                  if (group[0].innerHTML == '') {\n                    group[0].innerHTML = '<a data-value=\"' + item.value + '\" style=\"float: left;\" href=\"#\">' + text + '</a>';\n                  }\n                  if (that.rtl) {\n                    group[0].innerHTML = '<a data-value=\"' + item.value + '\" style=\"float: right;\" href=\"#\">' + text + '</a>';\n                  }\n                  var fl = !that.rtl ? 'right' : 'left';\n                  if (that.showCloseButtons) {\n                    var closebutton = '<div style=\"position: relative; overflow: hidden; float: ' + fl + '; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px; float: none; width: 16px; height: 16px;\" class=\"' + that.toThemeProperty('jqx-icon-close') + '\"></div></div>';\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                      closebutton = '<div style=\"position: relative; overflow: hidden; float: left; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px; float: none; width: 16px; height: 16px;\" class=\"' + that.toThemeProperty('jqx-icon-close') + '\"></div></div>';\n                    }\n                    if (that.rtl) {\n                      var closebutton = '<div style=\"position: relative; overflow: hidden; float: ' + fl + '; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-top: -7px; float: none; width: 16px; height: 16px;\" class=\"' + that.toThemeProperty('jqx-icon-close') + '\"></div></div>';\n                      if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                        closebutton = '<div style=\"position: relative; overflow: hidden; float: left; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-top: -7px; float: none; width: 16px; height: 16px;\" class=\"' + that.toThemeProperty('jqx-icon-close') + '\"></div></div>';\n                      }\n                    }\n                    group[0].innerHTML += closebutton;\n                  }\n                } else {\n                  if (group[0].innerHTML == '') {\n                    group[0].innerHTML = '<a href=\"#\"></a>';\n                  }\n                }\n                that.dropdownlistContent.append(group);\n              });\n              that.dropdownlistContent.append(that.input);\n              that.input.val(\"\");\n              if (setFocus !== false) {\n                that.input.focus();\n                setTimeout(function () {\n                  that.input.focus();\n                }, 10);\n              }\n              var buttons = that.dropdownlistContent.find('.jqx-button');\n              if (this.touchMode === true) eventName = \"mousedown\";\n              this.addHandler(buttons, eventName, function (event) {\n                if (event.target.className.indexOf('jqx-icon-close') >= 0) return true;\n                if (that.disabled) {\n                  return true;\n                }\n                var text = $(event.target).attr('data-value');\n                var item = that.getItemByValue(text);\n                if (item) {\n                  that.listBox.selectedValue = null;\n                  that.listBox.clearSelection();\n                }\n                that.listBox.scrollTo(0, 0);\n                that.open();\n                if (event.preventDefault) {\n                  event.preventDefault();\n                }\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n                return false;\n              });\n              this.addHandler(buttons.find('.jqx-icon-close'), eventName, function (event) {\n                if (that.disabled) {\n                  return;\n                }\n                var text = $(event.target).parent().parent().find('a').attr('data-value');\n                var item = that.getItemByValue(text);\n                if (item || that.remoteAutoComplete && !item && that.selectedItems.indexOf(text) >= 0) {\n                  that.listBox.selectedValue = null;\n                  var index = that.selectedItems.indexOf(text);\n                  var indx = item && item.index >= 0 ? item.index : index;\n                  if (index >= 0) {\n                    that.selectedItems.splice(index, 1);\n                    var selectedItem = that._selectedItems[index];\n                    if (!selectedItem) {\n                      selectedItem = item;\n                    }\n                    that._selectedItems.splice(index, 1);\n                    that._raiseEvent('3', {\n                      index: indx,\n                      type: 'mouse',\n                      item: selectedItem\n                    });\n                    that._raiseEvent('4', {\n                      index: indx,\n                      type: 'mouse',\n                      item: selectedItem\n                    });\n                    that.doMultiSelect();\n                  } else {\n                    for (var i = 0; i < that.selectedItems.length; i++) {\n                      var selectedItem = that.selectedItems[i];\n                      if (selectedItem == text) {\n                        that.selectedItems.splice(i, 1);\n                        that._selectedItems.splice(i, 1);\n                        that._raiseEvent('3', {\n                          index: indx,\n                          type: 'mouse',\n                          item: item\n                        });\n                        that._raiseEvent('4', {\n                          index: indx,\n                          type: 'mouse',\n                          item: item\n                        });\n                        that.doMultiSelect();\n                        break;\n                      }\n                    }\n                  }\n                }\n              });\n              if (this.isMaterialized()) {\n                this.host.height(this.dropdownlistContent.height());\n              }\n              this.bar.css('top', this.host.height());\n              that.dropdownlistArrow.height(this.host.height());\n              that._updateInputSelection();\n            },\n            // hides the listbox.\n            hideListBox: function (mode) {\n              var listBox = this.listBoxContainer;\n              var listBoxInstance = this.listBox;\n              var container = this.container;\n              if (this.container[0].style.display == 'none') return;\n              this.element.setAttribute('opened', false);\n              $.jqx.aria(this, \"aria-expanded\", false);\n              if (mode == \"keyboard\" || mode == \"mouse\") {\n                this.listBox.searchString = \"\";\n              }\n              listBox.removeClass('jqx-popup-show');\n              if (mode == \"keyboard\" || mode == \"mouse\" && this.multiSelect) {\n                this.doMultiSelect();\n              }\n              var that = this;\n              $.data(document.body, \"openedCombojqxListBox\" + this.element.id, null);\n              if (this.animationType == 'none') {\n                this.opening = false;\n                this.container.css('display', 'none');\n              } else if (this.animationType === 'transform') {\n                setTimeout(function () {\n                  container.css('display', 'none');\n                }, this.closeDelay);\n              } else {\n                if (!this.ishiding) {\n                  var height = listBox.outerHeight();\n                  listBox.css('margin-top', 0);\n                  listBox.stop();\n                  this.opening = false;\n                  this.isanimating = true;\n                  var animationValue = -height;\n                  if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) {\n                    animationValue = height;\n                  }\n                  if (this.animationType == 'fade') {\n                    listBox.css({\n                      'opacity': 1\n                    });\n                    listBox.animate({\n                      'opacity': 0\n                    }, this.closeDelay, function () {\n                      that.isanimating = false;\n                      container.css('display', 'none');\n                      that.ishiding = false;\n                    });\n                  } else {\n                    listBox.animate({\n                      'margin-top': animationValue\n                    }, this.closeDelay, function () {\n                      that.isanimating = false;\n                      container.css('display', 'none');\n                      that.ishiding = false;\n                    });\n                  }\n                }\n              }\n              this.ishiding = true;\n              this.host.removeClass(this.toThemeProperty('jqx-combobox-state-selected'));\n              this.dropdownlistArrowIcon.removeClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));\n              this.dropdownlistArrowIcon.removeClass(this.toThemeProperty('jqx-icon-arrow-up-selected'));\n              this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-combobox-arrow-selected'));\n              this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              if (!this.focused) {\n                this.host.removeClass(this.toThemeProperty('jqx-combobox-state-focus'));\n                this.host.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n                this.dropdownlistContent.removeClass(this.toThemeProperty('jqx-combobox-content-focus'));\n              }\n              this.host.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              this.host.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              this._raiseEvent('1', listBoxInstance);\n            },\n            /* Close popup if clicked elsewhere. */\n            closeOpenedListBox: function (event) {\n              var that = event.data.that;\n              var $target = $(event.target);\n              var openedListBox = event.data.listbox;\n              if (openedListBox == null) return true;\n              if ($(event.target).ischildof(that.host)) {\n                return;\n              }\n              var dropdownlistInstance = that;\n              var isListBox = false;\n              $.each($target.parents(), function () {\n                if (this.className != 'undefined') {\n                  if (this.className.indexOf) {\n                    if (this.className.indexOf('jqx-listbox') != -1) {\n                      isListBox = true;\n                      return false;\n                    }\n                    if (this.className.indexOf('jqx-combobox') != -1) {\n                      if (that.element.id == this.id) {\n                        isListBox = true;\n                      }\n                      return false;\n                    }\n                  }\n                }\n              });\n              if (openedListBox != null && !isListBox) {\n                if (that.isOpened()) {\n                  that.hideListBox('api');\n                  that.input.blur();\n                }\n              }\n              return true;\n            },\n            loadFromSelect: function (id) {\n              this.listBox.loadFromSelect(id);\n              this.clearSelection();\n            },\n            refresh: function (initialRefresh) {\n              this._setSize();\n              this._arrange();\n              if (this.listBox) {\n                this.renderSelection();\n              }\n            },\n            resize: function () {\n              this._setSize();\n              this._arrange();\n            },\n            _arrange: function () {\n              var width = parseInt(this.host.width());\n              var height = parseInt(this.host.height());\n              var arrowHeight = this.arrowSize;\n              var arrowWidth = this.arrowSize;\n              var rightOffset = 1;\n              if (!this.showArrow) {\n                arrowWidth = 0;\n                arrowHeight = 0;\n                this.dropdownlistArrow.hide();\n                rightOffset = 0;\n                this.host.css('cursor', 'arrow');\n                if (this.theme === \"fluent\") {\n                  rightOffset = 1;\n                }\n              } else {\n                if (this.dropdownlistArrow[0].style.display === \"none\") {\n                  this.dropdownlistArrow.show();\n                }\n              }\n              var contentWidth = width - arrowWidth - 1 * rightOffset;\n              if (contentWidth > 0) {\n                this.dropdownlistContent[0].style.width = contentWidth + 'px';\n              }\n              if (this.rtl) {\n                this.dropdownlistContent[0].style.width = -1 + contentWidth + 'px';\n              }\n              this.dropdownlistContent[0].style.height = height + 'px';\n              this.dropdownlistContent[0].style.left = '0px';\n              this.dropdownlistContent[0].style.top = '0px';\n              this.dropdownlistArrow[0].style.width = arrowWidth + 'px';\n              this.dropdownlistArrow[0].style.height = height + 'px';\n              this.dropdownlistArrow[0].style.left = 1 + contentWidth + 'px';\n              this.input[0].style.width = '100%';\n              if (!this.multiSelect) {\n                this.input.height(height);\n              }\n              var inputHeight = this.input.height();\n              if (inputHeight == 0) {\n                inputHeight = parseInt(this.input.css('font-size')) + 3;\n              }\n              if (this.input[0].className.indexOf('jqx-rc-all') == -1) {\n                this.input.addClass(this.toThemeProperty('jqx-rc-all'));\n              }\n              var top = parseInt(height) / 2 - parseInt(inputHeight) / 2;\n              if (top > 0) {\n                //      this.input[0].style.marginTop = parseInt(top) + \"px\";\n              }\n              if (this.rtl) {\n                this.dropdownlistArrow.css('left', '0px');\n                this.dropdownlistContent.css('left', this.dropdownlistArrow.width());\n                if ($.jqx.browser.msie && $.jqx.browser.version <= 8) {\n                  this.dropdownlistContent.css('left', 1 + this.dropdownlistArrow.width());\n                }\n              }\n              if (this.multiSelect) {\n                this.input.css('float', 'left');\n                this.input.width(25);\n                this.dropdownlistWrapper.parent().css('height', 'auto');\n                this.dropdownlistContent.css('height', 'auto');\n                this.dropdownlistWrapper.css('height', 'auto');\n                this.dropdownlistContent.css('position', 'relative');\n                this.dropdownlistContent.css('cursor', 'text');\n                this.host.css('height', 'auto');\n                this.host.css('min-height', this.height);\n                this.dropdownlistContent.css('min-height', this.height);\n                var height = parseInt(this.host.height());\n                this.dropdownlistArrow.height(height);\n                var initialHeight = parseInt(this.host.css('min-height'));\n                var top = parseInt(initialHeight) / 2 - parseInt(inputHeight) / 2;\n                if (top > 0) {\n                  this.input.css('margin-top', top);\n                }\n                if (this.isMaterialized()) {\n                  this.host.height(this.dropdownlistContent.height());\n                }\n                this.bar.css('top', this.host.height());\n                this.dropdownlistArrow.height(this.host.height());\n              }\n            },\n            destroy: function () {\n              if (this.source && this.source.unbindBindingUpdate) {\n                this.source.unbindBindingUpdate(this.element.id);\n                this.source.unbindBindingUpdate(this.listBoxContainer[0].id);\n                this.source.unbindDownloadComplete(this.element.id);\n                this.source.unbindDownloadComplete(this.listBoxContainer[0].id);\n              }\n              $.jqx.utilities.resize(this.host, null, true);\n              this.removeHandler(this.listBoxContainer, 'select');\n              this.removeHandler(this.listBoxContainer, 'unselect');\n              this.removeHandler(this.listBoxContainer, 'change');\n              this.removeHandler(this.listBoxContainer, 'bindingComplete');\n              this.removeHandler(this.dropdownlistWrapper, 'selectstart');\n              this.removeHandler(this.dropdownlistWrapper, 'mousedown');\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.listBoxContainer, 'select');\n              this.removeHandler(this.listBox.content, 'click');\n              this.removeHandlers();\n              this.removeHandler(this.input, 'keyup.textchange');\n              this.listBoxContainer.jqxListBox('destroy');\n              this.listBoxContainer.remove();\n              this.host.removeClass();\n              this.removeHandler($(document), 'mousedown.' + this.id, this.closeOpenedListBox);\n              if (this.touch) {\n                this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id);\n              }\n              this.cinput.remove();\n              delete this.cinput;\n              this.dropdownlistArrow.remove();\n              delete this.dropdownlistArrow;\n              this.dropdownlistArrowIcon.remove();\n              delete this.dropdownlistArrowIcon;\n              delete this.dropdownlistWrapper;\n              delete this.listBoxContainer;\n              delete this.input;\n              delete this.dropdownlistContent;\n              delete this.comboStructure;\n              this.container.remove();\n              delete this.listBox;\n              delete this.container;\n              var vars = $.data(this.element, \"jqxComboBox\");\n              if (vars) {\n                delete vars.instance;\n              }\n              this.host.removeData();\n              this.host.remove();\n              delete this.host;\n              delete this.set;\n              delete this.get;\n              delete this.call;\n              delete this.element;\n            },\n            //[optimize]\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg;\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              if (id == 2 || id == 3 || id == 4 || id == 5 || id == 6 || id == 7 || id == 8 || id == 9) {\n                event.args = arg;\n              }\n              var result = this.host.trigger(event);\n              return result;\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object._setSize();\n                if (key == 'width') {\n                  if (object.dropDownWidth == 'auto') {\n                    var width = object.host.width();\n                    object.listBoxContainer.jqxListBox({\n                      width: width\n                    });\n                    object.container.width(parseInt(width) + 25);\n                  }\n                }\n                object._arrange();\n                object.close();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (object.isInitialized == undefined || object.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"template\") {\n                object.listBoxContainer.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue + \"-item\"));\n                object.listBoxContainer.addClass(object.toThemeProperty(\"jqx-\" + object.template + \"-item\"));\n                object.dropDownListArrow.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue + \"\"));\n                object.dropDownListArrow.addClass(object.toThemeProperty(\"jqx-\" + object.template + \"\"));\n                var that = this;\n                that.bar.removeClass(that.toThemeProperty(\"jqx-\" + oldvalue));\n                that.label.removeClass(that.toThemeProperty(\"jqx-\" + oldvalue));\n                that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n              }\n              if (key == \"dropDownVerticalAlignment\") {\n                object.close();\n                object.dropdownlistArrowIcon.removeClass(object.toThemeProperty('jqx-icon-arrow-up'));\n                object.dropdownlistArrowIcon.removeClass(object.toThemeProperty('jqx-icon-arrow-down'));\n                if (object.dropDownVerticalAlignment == \"top\") {\n                  object.dropdownlistArrowIcon.addClass(object.toThemeProperty('jqx-icon-arrow-up'));\n                } else {\n                  object.dropdownlistArrowIcon.addClass(object.toThemeProperty('jqx-icon-arrow-down'));\n                }\n                object.listBoxContainer.css('top', 0);\n                object.listBoxContainer.removeClass(this.toThemeProperty('jqx-popup-up'));\n              }\n              if (key == \"autoItemsHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  autoItemsHeight: value\n                });\n              }\n              if (key == \"itemHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  itemHeight: value\n                });\n              }\n              if (key == \"renderSelectedItem\") {\n                object.renderSelection('mouse');\n              }\n              if (key == \"renderer\") {\n                object.listBoxContainer.jqxListBox({\n                  renderer: value\n                });\n              }\n              if (key == \"enableSelection\") {\n                object.listBoxContainer.jqxListBox({\n                  enableSelection: value\n                });\n              }\n              if (key == \"enableHover\") {\n                object.listBoxContainer.jqxListBox({\n                  enableHover: value\n                });\n              }\n              if (key === \"touchMode\") {\n                object.listBoxContainer.jqxListBox({\n                  touchMode: value\n                });\n                object.touch = $.jqx.mobile.isTouchDevice();\n                if (object.touchMode === true) {\n                  object.touch = true;\n                }\n                object._updateHandlers();\n              }\n              if (key == \"multiSelect\") {\n                if (value) {\n                  object.doMultiSelect(false);\n                } else {\n                  var items = object.listBox.items;\n                  var selectedIndex = -1;\n                  for (var i = 0; i < items.length; i++) {\n                    items[i].disabled = false;\n                    if (object.selectedItems.indexOf(items[i].value) >= 0 || object._disabledItems.indexOf(object.value) >= 0) {\n                      items[i].disabled = true;\n                      selectedIndex = items[i].index;\n                    }\n                  }\n                  object.doMultiSelect(false);\n                  object.listBox._renderItems();\n                  if (!items) return;\n                  object.listBox.selectedIndex = selectedIndex;\n                  object.renderSelection('mouse');\n                  object.dropdownlistWrapper.parent().css('height', '100%');\n                  object.dropdownlistContent.css('height', '100');\n                  object.dropdownlistWrapper.css('height', '100');\n                  object.dropdownlistContent.css('position', 'relative');\n                  object.host.css('min-height', null);\n                  object._setSize();\n                  object._arrange();\n                }\n              }\n              if (key == \"showArrow\") {\n                object._arrange();\n                if (object.multiSelect) {\n                  object.doMultiSelect(false);\n                }\n              }\n              if (key == \"placeHolder\") {\n                if (object.isMaterialized()) {\n                  object.label.innerHTML = object.placeHolder;\n                } else {\n                  object.input.attr('placeholder', object.placeHolder);\n                }\n              }\n              if (key == 'popupZIndex') {\n                object.listBoxContainer.css({\n                  zIndex: object.popupZIndex\n                });\n              }\n              if (key == 'promptText') {\n                object.placeHolder = value;\n              }\n              if (key == 'autoOpen') {\n                object._updateHandlers();\n              }\n              if (key == 'renderer') {\n                object.listBox.renderer = object.renderer;\n              }\n              if (key == 'itemHeight') {\n                object.listBox.itemHeight = value;\n              }\n              if (key == 'source') {\n                object.input.val(\"\");\n                object.listBoxContainer.jqxListBox({\n                  source: object.source\n                });\n                object.renderSelection('mouse');\n                if (object.source == null) {\n                  object.clearSelection();\n                }\n                if (object.multiSelect) {\n                  object.selectedItems = new Array();\n                  object._selectedItems = new Array();\n                  object.doMultiSelect(false);\n                }\n              }\n              if (key == \"rtl\") {\n                if (value) {\n                  object.dropdownlistArrow.css('float', 'left');\n                  object.dropdownlistContent.css('float', 'right');\n                } else {\n                  object.dropdownlistArrow.css('float', 'right');\n                  object.dropdownlistContent.css('float', 'left');\n                }\n                object.listBoxContainer.jqxListBox({\n                  rtl: object.rtl\n                });\n              }\n              if (key == \"displayMember\" || key == \"valueMember\") {\n                object.listBoxContainer.jqxListBox({\n                  displayMember: object.displayMember,\n                  valueMember: object.valueMember\n                });\n                object.renderSelection('mouse');\n              }\n              if (key == \"autoDropDownHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  autoHeight: object.autoDropDownHeight\n                });\n                if (object.autoDropDownHeight) {\n                  object.container.height(object.listBoxContainer.height() + 25);\n                } else {\n                  object.listBoxContainer.jqxListBox({\n                    height: object.dropDownHeight\n                  });\n                  object.container.height(parseInt(object.dropDownHeight) + 25);\n                }\n                object.listBox._arrange();\n                object.listBox._updatescrollbars();\n              }\n              if (key == \"dropDownHeight\") {\n                if (!object.autoDropDownHeight) {\n                  object.listBoxContainer.jqxListBox({\n                    height: object.dropDownHeight\n                  });\n                  object.container.height(parseInt(object.dropDownHeight) + 25);\n                }\n              }\n              if (key == \"dropDownWidth\" || key == \"scrollBarSize\") {\n                var width = object.width;\n                if (object.dropDownWidth != 'auto') {\n                  width = object.dropDownWidth;\n                }\n                object.listBoxContainer.jqxListBox({\n                  width: width,\n                  scrollBarSize: object.scrollBarSize\n                });\n                object.container.width(parseInt(width) + 25);\n              }\n              if (key == 'autoComplete') {\n                object._resetautocomplete();\n              }\n              if (key == \"checkboxes\") {\n                object.listBoxContainer.jqxListBox({\n                  checkboxes: object.checkboxes\n                });\n                if (object.checkboxes) {\n                  object.input.attr('readonly', true);\n                  $.jqx.aria(object, \"aria-readonly\", true);\n                } else {\n                  $.jqx.aria(object, \"aria-readonly\", false);\n                }\n              }\n              if (key == 'theme' && value != null) {\n                object.listBoxContainer.jqxListBox({\n                  theme: value\n                });\n                object.listBoxContainer.addClass(object.toThemeProperty('jqx-popup'));\n                if ($.jqx.browser.msie) {\n                  object.listBoxContainer.addClass(object.toThemeProperty('jqx-noshadow'));\n                }\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n              if (key == 'rtl') {\n                object.render();\n                object.refresh();\n              }\n              if (key == 'width' || key == 'height') {\n                object._setSize();\n                if (key == 'width') {\n                  if (object.dropDownWidth == 'auto') {\n                    var width = object.host.width();\n                    object.listBoxContainer.jqxListBox({\n                      width: width\n                    });\n                    object.container.width(parseInt(width) + 25);\n                  }\n                }\n                object._arrange();\n                object.close();\n              }\n              if (key == 'selectedIndex') {\n                object.listBox.selectIndex(value);\n                object.renderSelection('mouse');\n              }\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/5459: ( /***/(module, exports, __webpack_require__) => {\n      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        var oldBrowser = document.all && !document.addEventListener;\n        if (!oldBrowser) {\n          (function (window, undefined) {\n            var rootJQXLite,\n              readyList,\n              document = window.document,\n              location = window.location,\n              navigator = window.navigator,\n              _JQXLite = window.JQXLite,\n              _$ = window.$,\n              // Save a reference to some core methods\n              core_push = Array.prototype.push,\n              core_slice = Array.prototype.slice,\n              core_indexOf = Array.prototype.indexOf,\n              core_toString = Object.prototype.toString,\n              core_hasOwn = Object.prototype.hasOwnProperty,\n              core_trim = String.prototype.trim,\n              // Define a local copy of JQXLite\n              JQXLite = function (selector, context) {\n                // The JQXLite object is actually just the init constructor 'enhanced'\n                return new JQXLite.fn.init(selector, context, rootJQXLite);\n              },\n              // Used for matching numbers\n              core_pnum = /[\\-+]?(?:\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/.source,\n              // Used for detecting and trimming whitespace\n              core_rnotwhite = /\\S/,\n              core_rspace = /\\s+/,\n              // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)\n              rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n              // A simple way to check for HTML strings\n              // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n              rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/,\n              // Match a standalone tag\n              rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n              // JSON RegExp\n              rvalidchars = /^[\\],:{}\\s]*$/,\n              rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n              rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n              rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/g,\n              // Matches dashed string for camelizing\n              rmsPrefix = /^-ms-/,\n              rdashAlpha = /-([\\da-z])/gi,\n              // Used by JQXLite.camelCase as callback to replace()\n              fcamelCase = function (all, letter) {\n                return (letter + \"\").toUpperCase();\n              },\n              // The ready event handler and self cleanup method\n              DOMContentLoaded = function () {\n                if (document.addEventListener) {\n                  document.removeEventListener(\"DOMContentLoaded\", DOMContentLoaded, false);\n                  JQXLite.ready();\n                } else if (document.readyState === \"complete\") {\n                  // we're here because readyState === \"complete\" in oldIE\n                  // which is good enough for us to call the dom ready!\n                  document.detachEvent(\"onreadystatechange\", DOMContentLoaded);\n                  JQXLite.ready();\n                }\n              },\n              // [[Class]] -> type pairs\n              class2type = {};\n            JQXLite.fn = JQXLite.prototype = {\n              constructor: JQXLite,\n              init: function (selector, context, rootJQXLite) {\n                var match, elem, ret, doc;\n\n                // Handle $(\"\"), $(null), $(undefined), $(false)\n                if (!selector) {\n                  return this;\n                }\n\n                // Handle $(DOMElement)\n                if (selector.nodeType) {\n                  this.context = this[0] = selector;\n                  this.length = 1;\n                  return this;\n                }\n\n                // Handle HTML strings\n                if (typeof selector === \"string\") {\n                  if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\n                    // Assume that strings that start and end with <> are HTML and skip the regex check\n                    match = [null, selector, null];\n                  } else {\n                    match = rquickExpr.exec(selector);\n                  }\n\n                  // Match html or make sure no context is specified for #id\n                  if (match && (match[1] || !context)) {\n                    // HANDLE: $(html) -> $(array)\n                    if (match[1]) {\n                      context = context instanceof JQXLite ? context[0] : context;\n                      doc = context && context.nodeType ? context.ownerDocument || context : document;\n\n                      // scripts is true for back-compat\n                      selector = JQXLite.parseHTML(match[1], doc, true);\n                      if (rsingleTag.test(match[1]) && JQXLite.isPlainObject(context)) {\n                        this.attr.call(selector, context, true);\n                      }\n                      return JQXLite.merge(this, selector);\n\n                      // HANDLE: $(#id)\n                    } else {\n                      elem = document.getElementById(match[2]);\n\n                      // Check parentNode to catch when Blackberry 4.6 returns\n                      // nodes that are no longer in the document #6963\n                      if (elem && elem.parentNode) {\n                        // Handle the case where IE and Opera return items\n                        // by name instead of ID\n                        if (elem.id !== match[2]) {\n                          return rootJQXLite.find(selector);\n                        }\n\n                        // Otherwise, we inject the element directly into the JQXLite object\n                        this.length = 1;\n                        this[0] = elem;\n                      }\n                      this.context = document;\n                      this.selector = selector;\n                      return this;\n                    }\n\n                    // HANDLE: $(expr, $(...))\n                  } else if (!context || context.jqx) {\n                    return (context || rootJQXLite).find(selector);\n\n                    // HANDLE: $(expr, context)\n                    // (which is just equivalent to: $(context).find(expr)\n                  } else {\n                    return this.constructor(context).find(selector);\n                  }\n\n                  // HANDLE: $(function)\n                  // Shortcut for document ready\n                } else if (JQXLite.isFunction(selector)) {\n                  return rootJQXLite.ready(selector);\n                }\n                if (selector.selector !== undefined) {\n                  this.selector = selector.selector;\n                  this.context = selector.context;\n                }\n                return JQXLite.makeArray(selector, this);\n              },\n              // Start with an empty selector\n              selector: \"\",\n              // The current version of JQXLite being used\n              jqx: \"4.5.0\",\n              // The default length of a JQXLite object is 0\n              length: 0,\n              // The number of elements contained in the matched element set\n              size: function () {\n                return this.length;\n              },\n              toArray: function () {\n                return core_slice.call(this);\n              },\n              // Get the Nth element in the matched element set OR\n              // Get the whole matched element set as a clean array\n              get: function (num) {\n                return num == null ?\n                // Return a 'clean' array\n                this.toArray() :\n                // Return just the object\n                num < 0 ? this[this.length + num] : this[num];\n              },\n              // Take an array of elements and push it onto the stack\n              // (returning the new matched element set)\n              pushStack: function (elems, name, selector) {\n                // Build a new JQXLite matched element set\n                var ret = JQXLite.merge(this.constructor(), elems);\n\n                // Add the old object onto the stack (as a reference)\n                ret.prevObject = this;\n                ret.context = this.context;\n                if (name === \"find\") {\n                  ret.selector = this.selector + (this.selector ? \" \" : \"\") + selector;\n                } else if (name) {\n                  ret.selector = this.selector + \".\" + name + \"(\" + selector + \")\";\n                }\n\n                // Return the newly-formed element set\n                return ret;\n              },\n              // Execute a callback for every element in the matched set.\n              // (You can seed the arguments with an array of args, but this is\n              // only used internally.)\n              each: function (callback, args) {\n                return JQXLite.each(this, callback, args);\n              },\n              ready: function (fn) {\n                // Add the callback\n                JQXLite.ready.promise().done(fn);\n                return this;\n              },\n              eq: function (i) {\n                i = +i;\n                return i === -1 ? this.slice(i) : this.slice(i, i + 1);\n              },\n              first: function () {\n                return this.eq(0);\n              },\n              last: function () {\n                return this.eq(-1);\n              },\n              slice: function () {\n                return this.pushStack(core_slice.apply(this, arguments), \"slice\", core_slice.call(arguments).join(\",\"));\n              },\n              map: function (callback) {\n                return this.pushStack(JQXLite.map(this, function (elem, i) {\n                  return callback.call(elem, i, elem);\n                }));\n              },\n              end: function () {\n                return this.prevObject || this.constructor(null);\n              },\n              // For internal use only.\n              // Behaves like an Array's method, not like a JQXLite method.\n              push: core_push,\n              sort: [].sort,\n              splice: [].splice\n            };\n\n            // Give the init function the JQXLite prototype for later instantiation\n            JQXLite.fn.init.prototype = JQXLite.fn;\n            JQXLite.extend = JQXLite.fn.extend = function () {\n              var options,\n                name,\n                src,\n                copy,\n                copyIsArray,\n                clone,\n                target = arguments[0] || {},\n                i = 1,\n                length = arguments.length,\n                deep = false;\n\n              // Handle a deep copy situation\n              if (typeof target === \"boolean\") {\n                deep = target;\n                target = arguments[1] || {};\n                // skip the boolean and the target\n                i = 2;\n              }\n\n              // Handle case when target is a string or something (possible in deep copy)\n              if (typeof target !== \"object\" && !JQXLite.isFunction(target)) {\n                target = {};\n              }\n\n              // extend JQXLite itself if only one argument is passed\n              if (length === i) {\n                target = this;\n                --i;\n              }\n              for (; i < length; i++) {\n                // Only deal with non-null/undefined values\n                if ((options = arguments[i]) != null) {\n                  // Extend the base object\n                  for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                      continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (JQXLite.isPlainObject(copy) || (copyIsArray = JQXLite.isArray(copy)))) {\n                      if (copyIsArray) {\n                        copyIsArray = false;\n                        clone = src && JQXLite.isArray(src) ? src : [];\n                      } else {\n                        clone = src && JQXLite.isPlainObject(src) ? src : {};\n                      }\n\n                      // Never move original objects, clone them\n                      target[name] = JQXLite.extend(deep, clone, copy);\n\n                      // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                      target[name] = copy;\n                    }\n                  }\n                }\n              }\n\n              // Return the modified object\n              return target;\n            };\n            JQXLite.extend({\n              noConflict: function (deep) {\n                if (window.$ === JQXLite) {\n                  window.$ = _$;\n                }\n                if (deep && window.JQXLite === JQXLite) {\n                  window.JQXLite = _JQXLite;\n                }\n                return JQXLite;\n              },\n              // Is the DOM ready to be used? Set to true once it occurs.\n              isReady: false,\n              // A counter to track how many items to wait for before\n              // the ready event fires. See #6781\n              readyWait: 1,\n              // Hold (or release) the ready event\n              holdReady: function (hold) {\n                if (hold) {\n                  JQXLite.readyWait++;\n                } else {\n                  JQXLite.ready(true);\n                }\n              },\n              // Handle when the DOM is ready\n              ready: function (wait) {\n                // Abort if there are pending holds or we're already ready\n                if (wait === true ? --JQXLite.readyWait : JQXLite.isReady) {\n                  return;\n                }\n\n                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                if (!document.body) {\n                  return setTimeout(JQXLite.ready, 1);\n                }\n\n                // Remember that the DOM is ready\n                JQXLite.isReady = true;\n\n                // If a normal DOM Ready event fired, decrement, and wait if need be\n                if (wait !== true && --JQXLite.readyWait > 0) {\n                  return;\n                }\n\n                // If there are functions bound, to execute\n                readyList.resolveWith(document, [JQXLite]);\n\n                // Trigger any bound ready events\n                if (JQXLite.fn.trigger) {\n                  JQXLite(document).trigger(\"ready\").off(\"ready\");\n                }\n              },\n              // See test/unit/core.js for details concerning isFunction.\n              // Since version 1.3, DOM methods and functions like alert\n              // aren't supported. They return false on IE (#2968).\n              isFunction: function (obj) {\n                return JQXLite.type(obj) === \"function\";\n              },\n              isArray: Array.isArray || function (obj) {\n                return JQXLite.type(obj) === \"array\";\n              },\n              isWindow: function (obj) {\n                return obj != null && obj == obj.window;\n              },\n              isNumeric: function (obj) {\n                return !isNaN(parseFloat(obj)) && isFinite(obj);\n              },\n              type: function (obj) {\n                return obj == null ? String(obj) : class2type[core_toString.call(obj)] || \"object\";\n              },\n              isPlainObject: function (obj) {\n                // Must be an Object.\n                // Because of IE, we also have to check the presence of the constructor property.\n                // Make sure that DOM nodes and window objects don't pass through, as well\n                if (!obj || JQXLite.type(obj) !== \"object\" || obj.nodeType || JQXLite.isWindow(obj)) {\n                  return false;\n                }\n                try {\n                  // Not own constructor property must be Object\n                  if (obj.constructor && !core_hasOwn.call(obj, \"constructor\") && !core_hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n                    return false;\n                  }\n                } catch (e) {\n                  // IE8,9 Will throw exceptions on certain host objects #9897\n                  return false;\n                }\n\n                // Own properties are enumerated firstly, so to speed up,\n                // if last one is own, then all properties are own.\n\n                var key;\n                for (key in obj) {}\n                return key === undefined || core_hasOwn.call(obj, key);\n              },\n              isEmptyObject: function (obj) {\n                var name;\n                for (name in obj) {\n                  return false;\n                }\n                return true;\n              },\n              error: function (msg) {\n                throw new Error(msg);\n              },\n              // data: string of html\n              // context (optional): If specified, the fragment will be created in this context, defaults to document\n              // scripts (optional): If true, will include scripts passed in the html string\n              parseHTML: function (data, context, scripts) {\n                var parsed;\n                if (!data || typeof data !== \"string\") {\n                  return null;\n                }\n                if (typeof context === \"boolean\") {\n                  scripts = context;\n                  context = 0;\n                }\n                context = context || document;\n\n                // Single tag\n                if (parsed = rsingleTag.exec(data)) {\n                  return [context.createElement(parsed[1])];\n                }\n                parsed = JQXLite.buildFragment([data], context, scripts ? null : []);\n                return JQXLite.merge([], (parsed.cacheable ? JQXLite.clone(parsed.fragment) : parsed.fragment).childNodes);\n              },\n              parseJSON: function (data) {\n                if (!data || typeof data !== \"string\") {\n                  return null;\n                }\n\n                // Make sure leading/trailing whitespace is removed (IE can't handle it)\n                data = JQXLite.trim(data);\n\n                // Attempt to parse using the native JSON parser first\n                if (window.JSON && window.JSON.parse) {\n                  return window.JSON.parse(data);\n                }\n\n                // Make sure the incoming data is actual JSON\n                // Logic borrowed from http://json.org/json2.js\n                if (rvalidchars.test(data.replace(rvalidescape, \"@\").replace(rvalidtokens, \"]\").replace(rvalidbraces, \"\"))) {\n                  return new Function(\"return \" + data)();\n                }\n                JQXLite.error(\"Invalid JSON: \" + data);\n              },\n              // Cross-browser xml parsing\n              parseXML: function (data) {\n                var xml, tmp;\n                if (!data || typeof data !== \"string\") {\n                  return null;\n                }\n                try {\n                  if (window.DOMParser) {\n                    // Standard\n                    tmp = new DOMParser();\n                    xml = tmp.parseFromString(data, \"text/xml\");\n                  } else {\n                    // IE\n                    xml = new ActiveXObject(\"Microsoft.XMLDOM\");\n                    xml.async = \"false\";\n                    xml.loadXML(data);\n                  }\n                } catch (e) {\n                  xml = undefined;\n                }\n                if (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n                  JQXLite.error(\"Invalid XML: \" + data);\n                }\n                return xml;\n              },\n              noop: function () {},\n              // Evaluates a script in a global context\n              // Workarounds based on findings by Jim Driscoll\n              // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n              globalEval: function (data) {\n                if (data && core_rnotwhite.test(data)) {\n                  // We use execScript on Internet Explorer\n                  // We use an anonymous function so that context is window\n                  // rather than JQXLite in Firefox\n                  (window.execScript || function (data) {\n                    window[\"eval\"].call(window, data);\n                  })(data);\n                }\n              },\n              // Convert dashed to camelCase; used by the css and data modules\n              // Microsoft forgot to hump their vendor prefix (#9572)\n              camelCase: function (string) {\n                return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n              },\n              nodeName: function (elem, name) {\n                return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n              },\n              // args is for internal usage only\n              each: function (obj, callback, args) {\n                var name,\n                  i = 0,\n                  length = obj.length,\n                  isObj = length === undefined || JQXLite.isFunction(obj);\n                if (args) {\n                  if (isObj) {\n                    for (name in obj) {\n                      if (callback.apply(obj[name], args) === false) {\n                        break;\n                      }\n                    }\n                  } else {\n                    for (; i < length;) {\n                      if (callback.apply(obj[i++], args) === false) {\n                        break;\n                      }\n                    }\n                  }\n\n                  // A special, fast, case for the most common use of each\n                } else {\n                  if (isObj) {\n                    for (name in obj) {\n                      if (callback.call(obj[name], name, obj[name]) === false) {\n                        break;\n                      }\n                    }\n                  } else {\n                    for (; i < length;) {\n                      if (callback.call(obj[i], i, obj[i++]) === false) {\n                        break;\n                      }\n                    }\n                  }\n                }\n                return obj;\n              },\n              // Use native String.trim function wherever possible\n              trim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ? function (text) {\n                return text == null ? \"\" : core_trim.call(text);\n              } :\n              // Otherwise use our own trimming functionality\n              function (text) {\n                return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n              },\n              // results is for internal usage only\n              makeArray: function (arr, results) {\n                var type,\n                  ret = results || [];\n                if (arr != null) {\n                  // The window, strings (and functions) also have 'length'\n                  // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930\n                  type = JQXLite.type(arr);\n                  if (arr.length == null || type === \"string\" || type === \"function\" || type === \"regexp\" || JQXLite.isWindow(arr)) {\n                    core_push.call(ret, arr);\n                  } else {\n                    JQXLite.merge(ret, arr);\n                  }\n                }\n                return ret;\n              },\n              inArray: function (elem, arr, i) {\n                var len;\n                if (arr) {\n                  if (core_indexOf) {\n                    return core_indexOf.call(arr, elem, i);\n                  }\n                  len = arr.length;\n                  i = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n                  for (; i < len; i++) {\n                    // Skip accessing in sparse arrays\n                    if (i in arr && arr[i] === elem) {\n                      return i;\n                    }\n                  }\n                }\n                return -1;\n              },\n              merge: function (first, second) {\n                var l = second.length,\n                  i = first.length,\n                  j = 0;\n                if (typeof l === \"number\") {\n                  for (; j < l; j++) {\n                    first[i++] = second[j];\n                  }\n                } else {\n                  while (second[j] !== undefined) {\n                    first[i++] = second[j++];\n                  }\n                }\n                first.length = i;\n                return first;\n              },\n              grep: function (elems, callback, inv) {\n                var retVal,\n                  ret = [],\n                  i = 0,\n                  length = elems.length;\n                inv = !!inv;\n\n                // Go through the array, only saving the items\n                // that pass the validator function\n                for (; i < length; i++) {\n                  retVal = !!callback(elems[i], i);\n                  if (inv !== retVal) {\n                    ret.push(elems[i]);\n                  }\n                }\n                return ret;\n              },\n              // arg is for internal usage only\n              map: function (elems, callback, arg) {\n                var value,\n                  key,\n                  ret = [],\n                  i = 0,\n                  length = elems.length,\n                  // jqx objects are treated as arrays\n                  isArray = elems instanceof JQXLite || length !== undefined && typeof length === \"number\" && (length > 0 && elems[0] && elems[length - 1] || length === 0 || JQXLite.isArray(elems));\n\n                // Go through the array, translating each of the items to their\n                if (isArray) {\n                  for (; i < length; i++) {\n                    value = callback(elems[i], i, arg);\n                    if (value != null) {\n                      ret[ret.length] = value;\n                    }\n                  }\n\n                  // Go through every key on the object,\n                } else {\n                  for (key in elems) {\n                    value = callback(elems[key], key, arg);\n                    if (value != null) {\n                      ret[ret.length] = value;\n                    }\n                  }\n                }\n\n                // Flatten any nested arrays\n                return ret.concat.apply([], ret);\n              },\n              // A global GUID counter for objects\n              guid: 1,\n              // Bind a function to a context, optionally partially applying any\n              // arguments.\n              proxy: function (fn, context) {\n                var tmp, args, proxy;\n                if (typeof context === \"string\") {\n                  tmp = fn[context];\n                  context = fn;\n                  fn = tmp;\n                }\n\n                // Quick check to determine if target is callable, in the spec\n                // this throws a TypeError, but we will just return undefined.\n                if (!JQXLite.isFunction(fn)) {\n                  return undefined;\n                }\n\n                // Simulated bind\n                args = core_slice.call(arguments, 2);\n                proxy = function () {\n                  return fn.apply(context, args.concat(core_slice.call(arguments)));\n                };\n\n                // Set the guid of unique handler to the same of original handler, so it can be removed\n                proxy.guid = fn.guid = fn.guid || JQXLite.guid++;\n                return proxy;\n              },\n              // Multifunctional method to get and set values of a collection\n              // The value/s can optionally be executed if it's a function\n              access: function (elems, fn, key, value, chainable, emptyGet, pass) {\n                var exec,\n                  bulk = key == null,\n                  i = 0,\n                  length = elems.length;\n\n                // Sets many values\n                if (key && typeof key === \"object\") {\n                  for (i in key) {\n                    JQXLite.access(elems, fn, i, key[i], 1, emptyGet, value);\n                  }\n                  chainable = 1;\n\n                  // Sets one value\n                } else if (value !== undefined) {\n                  // Optionally, function values get executed if exec is true\n                  exec = pass === undefined && JQXLite.isFunction(value);\n                  if (bulk) {\n                    // Bulk operations only iterate when executing function values\n                    if (exec) {\n                      exec = fn;\n                      fn = function (elem, key, value) {\n                        return exec.call(JQXLite(elem), value);\n                      };\n\n                      // Otherwise they run against the entire set\n                    } else {\n                      fn.call(elems, value);\n                      fn = null;\n                    }\n                  }\n                  if (fn) {\n                    for (; i < length; i++) {\n                      fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);\n                    }\n                  }\n                  chainable = 1;\n                }\n                return chainable ? elems :\n                // Gets\n                bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;\n              },\n              now: function () {\n                return new Date().getTime();\n              }\n            });\n            JQXLite.ready.promise = function (obj) {\n              if (!readyList) {\n                readyList = JQXLite.Deferred();\n\n                // Catch cases where $(document).ready() is called after the browser event has already occurred.\n                // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n                // discovered by ChrisS here: http://bugs.jqx.com/ticket/12282#comment:15\n                if (document.readyState === \"complete\") {\n                  // Handle it asynchronously to allow scripts the opportunity to delay ready\n                  setTimeout(JQXLite.ready, 1);\n\n                  // Standards-based browsers support DOMContentLoaded\n                } else if (document.addEventListener) {\n                  // Use the handy event callback\n                  document.addEventListener(\"DOMContentLoaded\", DOMContentLoaded, false);\n\n                  // A fallback to window.onload, that will always work\n                  window.addEventListener(\"load\", JQXLite.ready, false);\n\n                  // If IE event model is used\n                } else {\n                  // Ensure firing before onload, maybe late but safe also for iframes\n                  document.attachEvent(\"onreadystatechange\", DOMContentLoaded);\n\n                  // A fallback to window.onload, that will always work\n                  window.attachEvent(\"onload\", JQXLite.ready);\n\n                  // If IE and not a frame\n                  // continually check to see if the document is ready\n                  var top = false;\n                  try {\n                    top = window.frameElement == null && document.documentElement;\n                  } catch (e) {}\n                  if (top && top.doScroll) {\n                    (function doScrollCheck() {\n                      if (!JQXLite.isReady) {\n                        try {\n                          // Use the trick by Diego Perini\n                          // http://javascript.nwbox.com/IEContentLoaded/\n                          top.doScroll(\"left\");\n                        } catch (e) {\n                          return setTimeout(doScrollCheck, 50);\n                        }\n\n                        // and execute any waiting functions\n                        JQXLite.ready();\n                      }\n                    })();\n                  }\n                }\n              }\n              return readyList.promise(obj);\n            };\n\n            // Populate the class2type map\n            JQXLite.each(\"Boolean Number String Function Array Date RegExp Object\".split(\" \"), function (i, name) {\n              class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n            });\n\n            // All JQXLite objects should point back to these\n            rootJQXLite = JQXLite(document);\n            // String to Object options format cache\n            var optionsCache = {};\n\n            // Convert String-formatted options into Object-formatted ones and store in cache\n            function createOptions(options) {\n              var object = optionsCache[options] = {};\n              JQXLite.each(options.split(core_rspace), function (_, flag) {\n                object[flag] = true;\n              });\n              return object;\n            }\n\n            /*\r\n             * Create a callback list using the following parameters:\r\n             *\r\n             *\toptions: an optional list of space-separated options that will change how\r\n             *\t\t\tthe callback list behaves or a more traditional option object\r\n             *\r\n             * By default a callback list will act like an event callback list and can be\r\n             * \"fired\" multiple times.\r\n             *\r\n             * Possible options:\r\n             *\r\n             *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n             *\r\n             *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n             *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n             *\t\t\t\t\tvalues (like a Deferred)\r\n             *\r\n             *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n             *\r\n             *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n             *\r\n             */\n            JQXLite.Callbacks = function (options) {\n              // Convert options from String-formatted to Object-formatted if needed\n              // (we check in cache first)\n              options = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : JQXLite.extend({}, options);\n              var\n                // Last fire value (for non-forgettable lists)\n                memory,\n                // Flag to know if list was already fired\n                fired,\n                // Flag to know if list is currently firing\n                firing,\n                // First callback to fire (used internally by add and fireWith)\n                firingStart,\n                // End of the loop when firing\n                firingLength,\n                // Index of currently firing callback (modified by remove if needed)\n                firingIndex,\n                // Actual callback list\n                list = [],\n                // Stack of fire calls for repeatable lists\n                stack = !options.once && [],\n                // Fire callbacks\n                fire = function (data) {\n                  memory = options.memory && data;\n                  fired = true;\n                  firingIndex = firingStart || 0;\n                  firingStart = 0;\n                  firingLength = list.length;\n                  firing = true;\n                  for (; list && firingIndex < firingLength; firingIndex++) {\n                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n                      memory = false; // To prevent further calls using add\n                      break;\n                    }\n                  }\n                  firing = false;\n                  if (list) {\n                    if (stack) {\n                      if (stack.length) {\n                        fire(stack.shift());\n                      }\n                    } else if (memory) {\n                      list = [];\n                    } else {\n                      self.disable();\n                    }\n                  }\n                },\n                // Actual Callbacks object\n                self = {\n                  // Add a callback or a collection of callbacks to the list\n                  add: function () {\n                    if (list) {\n                      // First, we save the current length\n                      var start = list.length;\n                      (function add(args) {\n                        JQXLite.each(args, function (_, arg) {\n                          var type = JQXLite.type(arg);\n                          if (type === \"function\") {\n                            if (!options.unique || !self.has(arg)) {\n                              list.push(arg);\n                            }\n                          } else if (arg && arg.length && type !== \"string\") {\n                            // Inspect recursively\n                            add(arg);\n                          }\n                        });\n                      })(arguments);\n                      // Do we need to add the callbacks to the\n                      // current firing batch?\n                      if (firing) {\n                        firingLength = list.length;\n                        // With memory, if we're not firing then\n                        // we should call right away\n                      } else if (memory) {\n                        firingStart = start;\n                        fire(memory);\n                      }\n                    }\n                    return this;\n                  },\n                  // Remove a callback from the list\n                  remove: function () {\n                    if (list) {\n                      JQXLite.each(arguments, function (_, arg) {\n                        var index;\n                        while ((index = JQXLite.inArray(arg, list, index)) > -1) {\n                          list.splice(index, 1);\n                          // Handle firing indexes\n                          if (firing) {\n                            if (index <= firingLength) {\n                              firingLength--;\n                            }\n                            if (index <= firingIndex) {\n                              firingIndex--;\n                            }\n                          }\n                        }\n                      });\n                    }\n                    return this;\n                  },\n                  // Control if a given callback is in the list\n                  has: function (fn) {\n                    return JQXLite.inArray(fn, list) > -1;\n                  },\n                  // Remove all callbacks from the list\n                  empty: function () {\n                    list = [];\n                    return this;\n                  },\n                  // Have the list do nothing anymore\n                  disable: function () {\n                    list = stack = memory = undefined;\n                    return this;\n                  },\n                  // Is it disabled?\n                  disabled: function () {\n                    return !list;\n                  },\n                  // Lock the list in its current state\n                  lock: function () {\n                    stack = undefined;\n                    if (!memory) {\n                      self.disable();\n                    }\n                    return this;\n                  },\n                  // Is it locked?\n                  locked: function () {\n                    return !stack;\n                  },\n                  // Call all callbacks with the given context and arguments\n                  fireWith: function (context, args) {\n                    args = args || [];\n                    args = [context, args.slice ? args.slice() : args];\n                    if (list && (!fired || stack)) {\n                      if (firing) {\n                        stack.push(args);\n                      } else {\n                        fire(args);\n                      }\n                    }\n                    return this;\n                  },\n                  // Call all the callbacks with the given arguments\n                  fire: function () {\n                    self.fireWith(this, arguments);\n                    return this;\n                  },\n                  // To know if the callbacks have already been called at least once\n                  fired: function () {\n                    return !!fired;\n                  }\n                };\n              return self;\n            };\n            JQXLite.extend({\n              Deferred: function (func) {\n                var tuples = [\n                  // action, add listener, listener list, final state\n                  [\"resolve\", \"done\", JQXLite.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", JQXLite.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", JQXLite.Callbacks(\"memory\")]],\n                  state = \"pending\",\n                  promise = {\n                    state: function () {\n                      return state;\n                    },\n                    always: function () {\n                      deferred.done(arguments).fail(arguments);\n                      return this;\n                    },\n                    then: function /* fnDone, fnFail, fnProgress */\n                    () {\n                      var fns = arguments;\n                      return JQXLite.Deferred(function (newDefer) {\n                        JQXLite.each(tuples, function (i, tuple) {\n                          var action = tuple[0],\n                            fn = fns[i];\n                          // deferred[ done | fail | progress ] for forwarding actions to newDefer\n                          deferred[tuple[1]](JQXLite.isFunction(fn) ? function () {\n                            var returned = fn.apply(this, arguments);\n                            if (returned && JQXLite.isFunction(returned.promise)) {\n                              returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n                            } else {\n                              newDefer[action + \"With\"](this === deferred ? newDefer : this, [returned]);\n                            }\n                          } : newDefer[action]);\n                        });\n                        fns = null;\n                      }).promise();\n                    },\n                    // Get a promise for this deferred\n                    // If obj is provided, the promise aspect is added to the object\n                    promise: function (obj) {\n                      return obj != null ? JQXLite.extend(obj, promise) : promise;\n                    }\n                  },\n                  deferred = {};\n\n                // Keep pipe for back-compat\n                promise.pipe = promise.then;\n\n                // Add list-specific methods\n                JQXLite.each(tuples, function (i, tuple) {\n                  var list = tuple[2],\n                    stateString = tuple[3];\n\n                  // promise[ done | fail | progress ] = list.add\n                  promise[tuple[1]] = list.add;\n\n                  // Handle state\n                  if (stateString) {\n                    list.add(function () {\n                      // state = [ resolved | rejected ]\n                      state = stateString;\n\n                      // [ reject_list | resolve_list ].disable; progress_list.lock\n                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n                  }\n\n                  // deferred[ resolve | reject | notify ] = list.fire\n                  deferred[tuple[0]] = list.fire;\n                  deferred[tuple[0] + \"With\"] = list.fireWith;\n                });\n\n                // Make the deferred a promise\n                promise.promise(deferred);\n\n                // Call given func if any\n                if (func) {\n                  func.call(deferred, deferred);\n                }\n\n                // All done!\n                return deferred;\n              },\n              // Deferred helper\n              when: function (subordinate /* , ..., subordinateN */) {\n                var i = 0,\n                  resolveValues = core_slice.call(arguments),\n                  length = resolveValues.length,\n                  // the count of uncompleted subordinates\n                  remaining = length !== 1 || subordinate && JQXLite.isFunction(subordinate.promise) ? length : 0,\n                  // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n                  deferred = remaining === 1 ? subordinate : JQXLite.Deferred(),\n                  // Update function for both resolve and progress values\n                  updateFunc = function (i, contexts, values) {\n                    return function (value) {\n                      contexts[i] = this;\n                      values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;\n                      if (values === progressValues) {\n                        deferred.notifyWith(contexts, values);\n                      } else if (! --remaining) {\n                        deferred.resolveWith(contexts, values);\n                      }\n                    };\n                  },\n                  progressValues,\n                  progressContexts,\n                  resolveContexts;\n\n                // add listeners to Deferred subordinates; treat others as resolved\n                if (length > 1) {\n                  progressValues = new Array(length);\n                  progressContexts = new Array(length);\n                  resolveContexts = new Array(length);\n                  for (; i < length; i++) {\n                    if (resolveValues[i] && JQXLite.isFunction(resolveValues[i].promise)) {\n                      resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n                    } else {\n                      --remaining;\n                    }\n                  }\n                }\n\n                // if we're not waiting on anything, resolve the master\n                if (!remaining) {\n                  deferred.resolveWith(resolveContexts, resolveValues);\n                }\n                return deferred.promise();\n              }\n            });\n            JQXLite.support = function () {\n              var support,\n                all,\n                a,\n                select,\n                opt,\n                input,\n                fragment,\n                eventName,\n                i,\n                isSupported,\n                clickFn,\n                div = document.createElement(\"div\");\n\n              // Setup\n              div.setAttribute(\"className\", \"t\");\n              div.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n              // Support tests won't run in some limited or non-browser environments\n              all = div.getElementsByTagName(\"*\");\n              a = div.getElementsByTagName(\"a\")[0];\n              if (!all || !a || !all.length) {\n                return {};\n              }\n\n              // First batch of tests\n              select = document.createElement(\"select\");\n              opt = select.appendChild(document.createElement(\"option\"));\n              input = div.getElementsByTagName(\"input\")[0];\n              a.style.cssText = \"top:1px;float:left;opacity:.5\";\n              support = {\n                // IE strips leading whitespace when .innerHTML is used\n                leadingWhitespace: div.firstChild.nodeType === 3,\n                // Make sure that tbody elements aren't automatically inserted\n                // IE will insert them into empty tables\n                tbody: !div.getElementsByTagName(\"tbody\").length,\n                // Make sure that link elements get serialized correctly by innerHTML\n                // This requires a wrapper element in IE\n                htmlSerialize: !!div.getElementsByTagName(\"link\").length,\n                // Get the style information from getAttribute\n                // (IE uses .cssText instead)\n                style: /top/.test(a.getAttribute(\"style\")),\n                // Make sure that URLs aren't manipulated\n                // (IE normalizes it by default)\n                hrefNormalized: a.getAttribute(\"href\") === \"/a\",\n                // Make sure that element opacity exists\n                // (IE uses filter instead)\n                // Use a regex to work around a WebKit issue. See #5145\n                opacity: /^0.5/.test(a.style.opacity),\n                // Verify style float existence\n                // (IE uses styleFloat instead of cssFloat)\n                cssFloat: !!a.style.cssFloat,\n                // Make sure that if no value is specified for a checkbox\n                // that it defaults to \"on\".\n                // (WebKit defaults to \"\" instead)\n                checkOn: input.value === \"on\",\n                // Make sure that a selected-by-default option has a working selected property.\n                // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n                optSelected: opt.selected,\n                // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n                getSetAttribute: div.className !== \"t\",\n                // Tests for enctype support on a form (#6743)\n                enctype: !!document.createElement(\"form\").enctype,\n                // Makes sure cloning an html5 element does not cause problems\n                // Where outerHTML is undefined, this still works\n                html5Clone: document.createElement(\"nav\").cloneNode(true).outerHTML !== \"<:nav></:nav>\",\n                // JQXLite.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode\n                boxModel: document.compatMode === \"CSS1Compat\",\n                // Will be defined later\n                submitBubbles: true,\n                changeBubbles: true,\n                focusinBubbles: false,\n                deleteExpando: true,\n                noCloneEvent: true,\n                inlineBlockNeedsLayout: false,\n                shrinkWrapBlocks: false,\n                reliableMarginRight: true,\n                boxSizingReliable: true,\n                pixelPosition: false\n              };\n\n              // Make sure checked status is properly cloned\n              input.checked = true;\n              support.noCloneChecked = input.cloneNode(true).checked;\n\n              // Make sure that the options inside disabled selects aren't marked as disabled\n              // (WebKit marks them as disabled)\n              select.disabled = true;\n              support.optDisabled = !opt.disabled;\n\n              // Test to see if it's possible to delete an expando from an element\n              // Fails in Internet Explorer\n              try {\n                delete div.test;\n              } catch (e) {\n                support.deleteExpando = false;\n              }\n              if (!div.addEventListener && div.attachEvent && div.fireEvent) {\n                div.attachEvent(\"onclick\", clickFn = function () {\n                  // Cloning a node shouldn't copy over any\n                  // bound event handlers (IE does this)\n                  support.noCloneEvent = false;\n                });\n                div.cloneNode(true).fireEvent(\"onclick\");\n                div.detachEvent(\"onclick\", clickFn);\n              }\n\n              // Check if a radio maintains its value\n              // after being appended to the DOM\n              input = document.createElement(\"input\");\n              input.value = \"t\";\n              input.setAttribute(\"type\", \"radio\");\n              support.radioValue = input.value === \"t\";\n              input.setAttribute(\"checked\", \"checked\");\n\n              // #11217 - WebKit loses check when the name is after the checked attribute\n              input.setAttribute(\"name\", \"t\");\n              div.appendChild(input);\n              fragment = document.createDocumentFragment();\n              fragment.appendChild(div.lastChild);\n\n              // WebKit doesn't clone checked state correctly in fragments\n              support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;\n\n              // Check if a disconnected checkbox will retain its checked\n              // value of true after appended to the DOM (IE6/7)\n              support.appendChecked = input.checked;\n              fragment.removeChild(input);\n              fragment.appendChild(div);\n\n              // Technique from Juriy Zaytsev\n              // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/\n              // We only care about the case where non-standard event systems\n              // are used, namely in IE. Short-circuiting here helps us to\n              // avoid an eval call (in setAttribute) which can cause CSP\n              // to go haywire. See: https://developer.mozilla.org/en/Security/CSP\n              if (div.attachEvent) {\n                for (i in {\n                  submit: true,\n                  change: true,\n                  focusin: true\n                }) {\n                  eventName = \"on\" + i;\n                  isSupported = eventName in div;\n                  if (!isSupported) {\n                    div.setAttribute(eventName, \"return;\");\n                    isSupported = typeof div[eventName] === \"function\";\n                  }\n                  support[i + \"Bubbles\"] = isSupported;\n                }\n              }\n\n              // Run tests that need a body at doc ready\n              JQXLite(function () {\n                var container,\n                  div,\n                  tds,\n                  marginDiv,\n                  divReset = \"padding:0;margin:0;border:0;display:block;overflow:hidden;\",\n                  body = document.getElementsByTagName(\"body\")[0];\n                if (!body) {\n                  // Return for frameset docs that don't have a body\n                  return;\n                }\n                container = document.createElement(\"div\");\n                container.style.cssText = \"visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px\";\n                body.insertBefore(container, body.firstChild);\n\n                // Construct the test element\n                div = document.createElement(\"div\");\n                container.appendChild(div);\n\n                // Check if table cells still have offsetWidth/Height when they are set\n                // to display:none and there are still other visible table cells in a\n                // table row; if so, offsetWidth/Height are not reliable for use when\n                // determining if an element has been hidden directly using\n                // display:none (it is still safe to use offsets if a parent element is\n                // hidden; don safety goggles and see bug #4512 for more information).\n                // (only IE 8 fails this test)\n                div.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n                tds = div.getElementsByTagName(\"td\");\n                tds[0].style.cssText = \"padding:0;margin:0;border:0;display:none\";\n                isSupported = tds[0].offsetHeight === 0;\n                tds[0].style.display = \"\";\n                tds[1].style.display = \"none\";\n\n                // Check if empty table cells still have offsetWidth/Height\n                // (IE <= 8 fail this test)\n                support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;\n\n                // Check box-sizing and margin behavior\n                div.innerHTML = \"\";\n                div.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\";\n                support.boxSizing = div.offsetWidth === 4;\n                support.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;\n\n                // NOTE: To any future maintainer, we've window.getComputedStyle\n                // because jsdom on node.js will break without it.\n                if (window.getComputedStyle) {\n                  support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== \"1%\";\n                  support.boxSizingReliable = (window.getComputedStyle(div, null) || {\n                    width: \"4px\"\n                  }).width === \"4px\";\n\n                  // Check if div with explicit width and no margin-right incorrectly\n                  // gets computed margin-right based on width of container. For more\n                  // info see bug #3333\n                  // Fails in WebKit before Feb 2011 nightlies\n                  // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n                  marginDiv = document.createElement(\"div\");\n                  marginDiv.style.cssText = div.style.cssText = divReset;\n                  marginDiv.style.marginRight = marginDiv.style.width = \"0\";\n                  div.style.width = \"1px\";\n                  div.appendChild(marginDiv);\n                  support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);\n                }\n                if (typeof div.style.zoom !== \"undefined\") {\n                  // Check if natively block-level elements act like inline-block\n                  // elements when setting their display to 'inline' and giving\n                  // them layout\n                  // (IE < 8 does this)\n                  div.innerHTML = \"\";\n                  div.style.cssText = divReset + \"width:1px;padding:1px;display:inline;zoom:1\";\n                  support.inlineBlockNeedsLayout = div.offsetWidth === 3;\n\n                  // Check if elements with layout shrink-wrap their children\n                  // (IE 6 does this)\n                  div.style.display = \"block\";\n                  div.style.overflow = \"visible\";\n                  div.innerHTML = \"<div></div>\";\n                  div.firstChild.style.width = \"5px\";\n                  support.shrinkWrapBlocks = div.offsetWidth !== 3;\n                  container.style.zoom = 1;\n                }\n\n                // Null elements to avoid leaks in IE\n                body.removeChild(container);\n                container = div = tds = marginDiv = null;\n              });\n\n              // Null elements to avoid leaks in IE\n              fragment.removeChild(div);\n              all = a = select = opt = input = fragment = div = null;\n              return support;\n            }();\n            var rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n              rmultiDash = /([A-Z])/g;\n            JQXLite.extend({\n              cache: {},\n              deletedIds: [],\n              // Remove at next major release (1.9/2.0)\n              uuid: 0,\n              // Unique for each copy of JQXLite on the page\n              // Non-digits removed to match rinlinejQuery\n              expando: \"JQXLite\" + (JQXLite.fn.jqx + Math.random()).replace(/\\D/g, \"\"),\n              // The following elements throw uncatchable exceptions if you\n              // attempt to add expando properties to them.\n              noData: {\n                \"embed\": true,\n                // Ban all objects except for Flash (which handle expandos)\n                \"object\": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",\n                \"applet\": true\n              },\n              hasData: function (elem) {\n                elem = elem.nodeType ? JQXLite.cache[elem[JQXLite.expando]] : elem[JQXLite.expando];\n                return !!elem && !isEmptyDataObject(elem);\n              },\n              data: function (elem, name, data, pvt /* Internal Use Only */) {\n                if (!JQXLite.acceptData(elem)) {\n                  return;\n                }\n                var thisCache,\n                  ret,\n                  internalKey = JQXLite.expando,\n                  getByName = typeof name === \"string\",\n                  // We have to handle DOM nodes and JS objects differently because IE6-7\n                  // can't GC object references properly across the DOM-JS boundary\n                  isNode = elem.nodeType,\n                  // Only DOM nodes need the global JQXLite cache; JS object data is\n                  // attached directly to the object so GC can occur automatically\n                  cache = isNode ? JQXLite.cache : elem,\n                  // Only defining an ID for JS objects if its cache already exists allows\n                  // the code to shortcut on the same path as a DOM node with no cache\n                  id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;\n\n                // Avoid doing any more work than we need to when trying to get data on an\n                // object that has no data at all\n                if ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {\n                  return;\n                }\n                if (!id) {\n                  // Only DOM nodes need a new unique ID for each element since their data\n                  // ends up in the global cache\n                  if (isNode) {\n                    elem[internalKey] = id = JQXLite.deletedIds.pop() || JQXLite.guid++;\n                  } else {\n                    id = internalKey;\n                  }\n                }\n                if (!cache[id]) {\n                  cache[id] = {};\n\n                  // Avoids exposing JQXLite metadata on plain JS objects when the object\n                  // is serialized using JSON.stringify\n                  if (!isNode) {\n                    cache[id].toJSON = JQXLite.noop;\n                  }\n                }\n\n                // An object can be passed to JQXLite.data instead of a key/value pair; this gets\n                // shallow copied over onto the existing cache\n                if (typeof name === \"object\" || typeof name === \"function\") {\n                  if (pvt) {\n                    cache[id] = JQXLite.extend(cache[id], name);\n                  } else {\n                    cache[id].data = JQXLite.extend(cache[id].data, name);\n                  }\n                }\n                thisCache = cache[id];\n\n                // JQXLite data() is stored in a separate object inside the object's internal data\n                // cache in order to avoid key collisions between internal data and user-defined\n                // data.\n                if (!pvt) {\n                  if (!thisCache.data) {\n                    thisCache.data = {};\n                  }\n                  thisCache = thisCache.data;\n                }\n                if (data !== undefined) {\n                  thisCache[JQXLite.camelCase(name)] = data;\n                }\n\n                // Check for both converted-to-camel and non-converted data property names\n                // If a data property was specified\n                if (getByName) {\n                  // First Try to find as-is property data\n                  ret = thisCache[name];\n\n                  // Test for null|undefined property data\n                  if (ret == null) {\n                    // Try to find the camelCased property\n                    ret = thisCache[JQXLite.camelCase(name)];\n                  }\n                } else {\n                  ret = thisCache;\n                }\n                return ret;\n              },\n              removeData: function (elem, name, pvt /* Internal Use Only */) {\n                if (!JQXLite.acceptData(elem)) {\n                  return;\n                }\n                var thisCache,\n                  i,\n                  l,\n                  isNode = elem.nodeType,\n                  // See JQXLite.data for more information\n                  cache = isNode ? JQXLite.cache : elem,\n                  id = isNode ? elem[JQXLite.expando] : JQXLite.expando;\n\n                // If there is already no cache entry for this object, there is no\n                // purpose in continuing\n                if (!cache[id]) {\n                  return;\n                }\n                if (name) {\n                  thisCache = pvt ? cache[id] : cache[id].data;\n                  if (thisCache) {\n                    // Support array or space separated string names for data keys\n                    if (!JQXLite.isArray(name)) {\n                      // try the string as a key before any manipulation\n                      if (name in thisCache) {\n                        name = [name];\n                      } else {\n                        // split the camel cased version by spaces unless a key with the spaces exists\n                        name = JQXLite.camelCase(name);\n                        if (name in thisCache) {\n                          name = [name];\n                        } else {\n                          name = name.split(\" \");\n                        }\n                      }\n                    }\n                    for (i = 0, l = name.length; i < l; i++) {\n                      delete thisCache[name[i]];\n                    }\n\n                    // If there is no data left in the cache, we want to continue\n                    // and let the cache object itself get destroyed\n                    if (!(pvt ? isEmptyDataObject : JQXLite.isEmptyObject)(thisCache)) {\n                      return;\n                    }\n                  }\n                }\n\n                // See JQXLite.data for more information\n                if (!pvt) {\n                  delete cache[id].data;\n\n                  // Don't destroy the parent cache unless the internal data object\n                  // had been the only thing left in it\n                  if (!isEmptyDataObject(cache[id])) {\n                    return;\n                  }\n                }\n\n                // Destroy the cache\n                if (isNode) {\n                  JQXLite.cleanData([elem], true);\n\n                  // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n                } else if (JQXLite.support.deleteExpando || cache != cache.window) {\n                  delete cache[id];\n\n                  // When all else fails, null\n                } else {\n                  cache[id] = null;\n                }\n              },\n              // For internal use only.\n              _data: function (elem, name, data) {\n                return JQXLite.data(elem, name, data, true);\n              },\n              // A method for determining if a DOM node can handle the data expando\n              acceptData: function (elem) {\n                var noData = elem.nodeName && JQXLite.noData[elem.nodeName.toLowerCase()];\n\n                // nodes accept data unless otherwise specified; rejection can be conditional\n                return !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n              }\n            });\n            JQXLite.fn.extend({\n              data: function (key, value) {\n                var parts,\n                  part,\n                  attr,\n                  name,\n                  l,\n                  elem = this[0],\n                  i = 0,\n                  data = null;\n\n                // Gets all values\n                if (key === undefined) {\n                  if (this.length) {\n                    data = JQXLite.data(elem);\n                    if (elem.nodeType === 1 && !JQXLite._data(elem, \"parsedAttrs\")) {\n                      attr = elem.attributes;\n                      for (l = attr.length; i < l; i++) {\n                        name = attr[i].name;\n                        if (!name.indexOf(\"data-\")) {\n                          name = JQXLite.camelCase(name.substring(5));\n                          dataAttr(elem, name, data[name]);\n                        }\n                      }\n                      JQXLite._data(elem, \"parsedAttrs\", true);\n                    }\n                  }\n                  return data;\n                }\n\n                // Sets multiple values\n                if (typeof key === \"object\") {\n                  return this.each(function () {\n                    JQXLite.data(this, key);\n                  });\n                }\n                parts = key.split(\".\", 2);\n                parts[1] = parts[1] ? \".\" + parts[1] : \"\";\n                part = parts[1] + \"!\";\n                return JQXLite.access(this, function (value) {\n                  if (value === undefined) {\n                    data = this.triggerHandler(\"getData\" + part, [parts[0]]);\n\n                    // Try to fetch any internally stored data first\n                    if (data === undefined && elem) {\n                      data = JQXLite.data(elem, key);\n                      data = dataAttr(elem, key, data);\n                    }\n                    return data === undefined && parts[1] ? this.data(parts[0]) : data;\n                  }\n                  parts[1] = value;\n                  this.each(function () {\n                    var self = JQXLite(this);\n                    self.triggerHandler(\"setData\" + part, parts);\n                    JQXLite.data(this, key, value);\n                    self.triggerHandler(\"changeData\" + part, parts);\n                  });\n                }, null, value, arguments.length > 1, null, false);\n              },\n              removeData: function (key) {\n                return this.each(function () {\n                  JQXLite.removeData(this, key);\n                });\n              }\n            });\n            function dataAttr(elem, key, data) {\n              // If nothing was found internally, try to fetch any\n              // data from the HTML5 data-* attribute\n              if (data === undefined && elem.nodeType === 1) {\n                var name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n                data = elem.getAttribute(name);\n                if (typeof data === \"string\") {\n                  try {\n                    data = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\n                    // Only convert to a number if it doesn't change the string\n                    +data + \"\" === data ? +data : rbrace.test(data) ? JQXLite.parseJSON(data) : data;\n                  } catch (e) {}\n\n                  // Make sure we set the data so it isn't changed later\n                  JQXLite.data(elem, key, data);\n                } else {\n                  data = undefined;\n                }\n              }\n              return data;\n            }\n\n            // checks a cache object for emptiness\n            function isEmptyDataObject(obj) {\n              var name;\n              for (name in obj) {\n                // if the public data object is empty, the private is still empty\n                if (name === \"data\" && JQXLite.isEmptyObject(obj[name])) {\n                  continue;\n                }\n                if (name !== \"toJSON\") {\n                  return false;\n                }\n              }\n              return true;\n            }\n            JQXLite.extend({\n              queue: function (elem, type, data) {\n                var queue;\n                if (elem) {\n                  type = (type || \"fx\") + \"queue\";\n                  queue = JQXLite._data(elem, type);\n\n                  // Speed up dequeue by getting out quickly if this is just a lookup\n                  if (data) {\n                    if (!queue || JQXLite.isArray(data)) {\n                      queue = JQXLite._data(elem, type, JQXLite.makeArray(data));\n                    } else {\n                      queue.push(data);\n                    }\n                  }\n                  return queue || [];\n                }\n              },\n              dequeue: function (elem, type) {\n                type = type || \"fx\";\n                var queue = JQXLite.queue(elem, type),\n                  startLength = queue.length,\n                  fn = queue.shift(),\n                  hooks = JQXLite._queueHooks(elem, type),\n                  next = function () {\n                    JQXLite.dequeue(elem, type);\n                  };\n\n                // If the fx queue is dequeued, always remove the progress sentinel\n                if (fn === \"inprogress\") {\n                  fn = queue.shift();\n                  startLength--;\n                }\n                if (fn) {\n                  // Add a progress sentinel to prevent the fx queue from being\n                  // automatically dequeued\n                  if (type === \"fx\") {\n                    queue.unshift(\"inprogress\");\n                  }\n\n                  // clear up the last queue stop function\n                  delete hooks.stop;\n                  fn.call(elem, next, hooks);\n                }\n                if (!startLength && hooks) {\n                  hooks.empty.fire();\n                }\n              },\n              // not intended for public consumption - generates a queueHooks object, or returns the current one\n              _queueHooks: function (elem, type) {\n                var key = type + \"queueHooks\";\n                return JQXLite._data(elem, key) || JQXLite._data(elem, key, {\n                  empty: JQXLite.Callbacks(\"once memory\").add(function () {\n                    JQXLite.removeData(elem, type + \"queue\", true);\n                    JQXLite.removeData(elem, key, true);\n                  })\n                });\n              }\n            });\n            JQXLite.fn.extend({\n              queue: function (type, data) {\n                var setter = 2;\n                if (typeof type !== \"string\") {\n                  data = type;\n                  type = \"fx\";\n                  setter--;\n                }\n                if (arguments.length < setter) {\n                  return JQXLite.queue(this[0], type);\n                }\n                return data === undefined ? this : this.each(function () {\n                  var queue = JQXLite.queue(this, type, data);\n\n                  // ensure a hooks for this queue\n                  JQXLite._queueHooks(this, type);\n                  if (type === \"fx\" && queue[0] !== \"inprogress\") {\n                    JQXLite.dequeue(this, type);\n                  }\n                });\n              },\n              dequeue: function (type) {\n                return this.each(function () {\n                  JQXLite.dequeue(this, type);\n                });\n              },\n              // Based off of the plugin by Clint Helfers, with permission.\n              // http://blindsignals.com/index.php/2009/07/jqx-delay/\n              delay: function (time, type) {\n                time = JQXLite.fx ? JQXLite.fx.speeds[time] || time : time;\n                type = type || \"fx\";\n                return this.queue(type, function (next, hooks) {\n                  var timeout = setTimeout(next, time);\n                  hooks.stop = function () {\n                    clearTimeout(timeout);\n                  };\n                });\n              },\n              clearQueue: function (type) {\n                return this.queue(type || \"fx\", []);\n              },\n              // Get a promise resolved when queues of a certain type\n              // are emptied (fx is the type by default)\n              promise: function (type, obj) {\n                var tmp,\n                  count = 1,\n                  defer = JQXLite.Deferred(),\n                  elements = this,\n                  i = this.length,\n                  resolve = function () {\n                    if (! --count) {\n                      defer.resolveWith(elements, [elements]);\n                    }\n                  };\n                if (typeof type !== \"string\") {\n                  obj = type;\n                  type = undefined;\n                }\n                type = type || \"fx\";\n                while (i--) {\n                  tmp = JQXLite._data(elements[i], type + \"queueHooks\");\n                  if (tmp && tmp.empty) {\n                    count++;\n                    tmp.empty.add(resolve);\n                  }\n                }\n                resolve();\n                return defer.promise(obj);\n              }\n            });\n            var nodeHook,\n              boolHook,\n              fixSpecified,\n              rclass = /[\\t\\r\\n]/g,\n              rreturn = /\\r/g,\n              rtype = /^(?:button|input)$/i,\n              rfocusable = /^(?:button|input|object|select|textarea)$/i,\n              rclickable = /^a(?:rea|)$/i,\n              rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,\n              getSetAttribute = JQXLite.support.getSetAttribute;\n            JQXLite.fn.extend({\n              attr: function (name, value) {\n                return JQXLite.access(this, JQXLite.attr, name, value, arguments.length > 1);\n              },\n              removeAttr: function (name) {\n                return this.each(function () {\n                  JQXLite.removeAttr(this, name);\n                });\n              },\n              prop: function (name, value) {\n                return JQXLite.access(this, JQXLite.prop, name, value, arguments.length > 1);\n              },\n              removeProp: function (name) {\n                name = JQXLite.propFix[name] || name;\n                return this.each(function () {\n                  // try/catch handles cases where IE balks (such as removing a property on window)\n                  try {\n                    this[name] = undefined;\n                    delete this[name];\n                  } catch (e) {}\n                });\n              },\n              addClass: function (value) {\n                var classNames, i, l, elem, setClass, c, cl;\n                if (JQXLite.isFunction(value)) {\n                  return this.each(function (j) {\n                    JQXLite(this).addClass(value.call(this, j, this.className));\n                  });\n                }\n                if (value && typeof value === \"string\") {\n                  classNames = value.split(core_rspace);\n                  for (i = 0, l = this.length; i < l; i++) {\n                    elem = this[i];\n                    if (elem.nodeType === 1) {\n                      if (!elem.className && classNames.length === 1) {\n                        elem.className = value;\n                      } else {\n                        setClass = \" \" + elem.className + \" \";\n                        for (c = 0, cl = classNames.length; c < cl; c++) {\n                          if (setClass.indexOf(\" \" + classNames[c] + \" \") < 0) {\n                            setClass += classNames[c] + \" \";\n                          }\n                        }\n                        elem.className = JQXLite.trim(setClass);\n                      }\n                    }\n                  }\n                }\n                return this;\n              },\n              removeClass: function (value) {\n                var removes, className, elem, c, cl, i, l;\n                if (JQXLite.isFunction(value)) {\n                  return this.each(function (j) {\n                    JQXLite(this).removeClass(value.call(this, j, this.className));\n                  });\n                }\n                if (value && typeof value === \"string\" || value === undefined) {\n                  removes = (value || \"\").split(core_rspace);\n                  for (i = 0, l = this.length; i < l; i++) {\n                    elem = this[i];\n                    if (elem.nodeType === 1 && elem.className) {\n                      className = (\" \" + elem.className + \" \").replace(rclass, \" \");\n\n                      // loop over each item in the removal list\n                      for (c = 0, cl = removes.length; c < cl; c++) {\n                        // Remove until there is nothing to remove,\n                        while (className.indexOf(\" \" + removes[c] + \" \") >= 0) {\n                          className = className.replace(\" \" + removes[c] + \" \", \" \");\n                        }\n                      }\n                      elem.className = value ? JQXLite.trim(className) : \"\";\n                    }\n                  }\n                }\n                return this;\n              },\n              toggleClass: function (value, stateVal) {\n                var type = typeof value,\n                  isBool = typeof stateVal === \"boolean\";\n                if (JQXLite.isFunction(value)) {\n                  return this.each(function (i) {\n                    JQXLite(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n                  });\n                }\n                return this.each(function () {\n                  if (type === \"string\") {\n                    // toggle individual class names\n                    var className,\n                      i = 0,\n                      self = JQXLite(this),\n                      state = stateVal,\n                      classNames = value.split(core_rspace);\n                    while (className = classNames[i++]) {\n                      // check each className given, space separated list\n                      state = isBool ? state : !self.hasClass(className);\n                      self[state ? \"addClass\" : \"removeClass\"](className);\n                    }\n                  } else if (type === \"undefined\" || type === \"boolean\") {\n                    if (this.className) {\n                      // store className if set\n                      JQXLite._data(this, \"__className__\", this.className);\n                    }\n\n                    // toggle whole className\n                    this.className = this.className || value === false ? \"\" : JQXLite._data(this, \"__className__\") || \"\";\n                  }\n                });\n              },\n              hasClass: function (selector) {\n                var className = \" \" + selector + \" \",\n                  i = 0,\n                  l = this.length;\n                for (; i < l; i++) {\n                  if (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n                    return true;\n                  }\n                }\n                return false;\n              },\n              val: function (value) {\n                var hooks,\n                  ret,\n                  isFunction,\n                  elem = this[0];\n                if (!arguments.length) {\n                  if (elem) {\n                    hooks = JQXLite.valHooks[elem.type] || JQXLite.valHooks[elem.nodeName.toLowerCase()];\n                    if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n                      return ret;\n                    }\n                    ret = elem.value;\n                    return typeof ret === \"string\" ?\n                    // handle most common string cases\n                    ret.replace(rreturn, \"\") :\n                    // handle cases where value is null/undef or number\n                    ret == null ? \"\" : ret;\n                  }\n                  return;\n                }\n                isFunction = JQXLite.isFunction(value);\n                return this.each(function (i) {\n                  var val,\n                    self = JQXLite(this);\n                  if (this.nodeType !== 1) {\n                    return;\n                  }\n                  if (isFunction) {\n                    val = value.call(this, i, self.val());\n                  } else {\n                    val = value;\n                  }\n\n                  // Treat null/undefined as \"\"; convert numbers to string\n                  if (val == null) {\n                    val = \"\";\n                  } else if (typeof val === \"number\") {\n                    val += \"\";\n                  } else if (JQXLite.isArray(val)) {\n                    val = JQXLite.map(val, function (value) {\n                      return value == null ? \"\" : value + \"\";\n                    });\n                  }\n                  hooks = JQXLite.valHooks[this.type] || JQXLite.valHooks[this.nodeName.toLowerCase()];\n\n                  // If set returns undefined, fall back to normal setting\n                  if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n                    this.value = val;\n                  }\n                });\n              }\n            });\n            JQXLite.extend({\n              valHooks: {\n                option: {\n                  get: function (elem) {\n                    // attributes.value is undefined in Blackberry 4.7 but\n                    // uses .value. See #6932\n                    var val = elem.attributes.value;\n                    return !val || val.specified ? elem.value : elem.text;\n                  }\n                },\n                select: {\n                  get: function (elem) {\n                    var value,\n                      option,\n                      options = elem.options,\n                      index = elem.selectedIndex,\n                      one = elem.type === \"select-one\" || index < 0,\n                      values = one ? null : [],\n                      max = one ? index + 1 : options.length,\n                      i = index < 0 ? max : one ? index : 0;\n\n                    // Loop through all the selected options\n                    for (; i < max; i++) {\n                      option = options[i];\n\n                      // oldIE doesn't update selected after form reset (#2551)\n                      if ((option.selected || i === index) && (\n                      // Don't return options that are disabled or in a disabled optgroup\n                      JQXLite.support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !JQXLite.nodeName(option.parentNode, \"optgroup\"))) {\n                        // Get the specific value for the option\n                        value = JQXLite(option).val();\n\n                        // We don't need an array for one selects\n                        if (one) {\n                          return value;\n                        }\n\n                        // Multi-Selects return an array\n                        values.push(value);\n                      }\n                    }\n                    return values;\n                  },\n                  set: function (elem, value) {\n                    var values = JQXLite.makeArray(value);\n                    JQXLite(elem).find(\"option\").each(function () {\n                      this.selected = JQXLite.inArray(JQXLite(this).val(), values) >= 0;\n                    });\n                    if (!values.length) {\n                      elem.selectedIndex = -1;\n                    }\n                    return values;\n                  }\n                }\n              },\n              // Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9\n              attrFn: {},\n              attr: function (elem, name, value, pass) {\n                var ret,\n                  hooks,\n                  notxml,\n                  nType = elem.nodeType;\n\n                // don't get/set attributes on text, comment and attribute nodes\n                if (!elem || nType === 3 || nType === 8 || nType === 2) {\n                  return;\n                }\n                if (pass && JQXLite.isFunction(JQXLite.fn[name])) {\n                  return JQXLite(elem)[name](value);\n                }\n\n                // Fallback to prop when attributes are not supported\n                if (typeof elem.getAttribute === \"undefined\") {\n                  return JQXLite.prop(elem, name, value);\n                }\n                notxml = nType !== 1 || !JQXLite.isXMLDoc(elem);\n\n                // All attributes are lowercase\n                // Grab necessary hook if one is defined\n                if (notxml) {\n                  name = name.toLowerCase();\n                  hooks = JQXLite.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);\n                }\n                if (value !== undefined) {\n                  if (value === null) {\n                    JQXLite.removeAttr(elem, name);\n                    return;\n                  } else if (hooks && \"set\" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {\n                    return ret;\n                  } else {\n                    elem.setAttribute(name, value + \"\");\n                    return value;\n                  }\n                } else if (hooks && \"get\" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {\n                  return ret;\n                } else {\n                  ret = elem.getAttribute(name);\n\n                  // Non-existent attributes return null, we normalize to undefined\n                  return ret === null ? undefined : ret;\n                }\n              },\n              removeAttr: function (elem, value) {\n                var propName,\n                  attrNames,\n                  name,\n                  isBool,\n                  i = 0;\n                if (value && elem.nodeType === 1) {\n                  attrNames = value.split(core_rspace);\n                  for (; i < attrNames.length; i++) {\n                    name = attrNames[i];\n                    if (name) {\n                      propName = JQXLite.propFix[name] || name;\n                      isBool = rboolean.test(name);\n\n                      // See #9699 for explanation of this approach (setting first, then removal)\n                      // Do not do this for boolean attributes (see #10870)\n                      if (!isBool) {\n                        JQXLite.attr(elem, name, \"\");\n                      }\n                      elem.removeAttribute(getSetAttribute ? name : propName);\n\n                      // Set corresponding property to false for boolean attributes\n                      if (isBool && propName in elem) {\n                        elem[propName] = false;\n                      }\n                    }\n                  }\n                }\n              },\n              attrHooks: {\n                type: {\n                  set: function (elem, value) {\n                    // We can't allow the type property to be changed (since it causes problems in IE)\n                    if (rtype.test(elem.nodeName) && elem.parentNode) {\n                      JQXLite.error(\"type property can't be changed\");\n                    } else if (!JQXLite.support.radioValue && value === \"radio\" && JQXLite.nodeName(elem, \"input\")) {\n                      // Setting the type on a radio button after the value resets the value in IE6-9\n                      // Reset value to it's default in case type is set after value\n                      // This is for element creation\n                      var val = elem.value;\n                      elem.setAttribute(\"type\", value);\n                      if (val) {\n                        elem.value = val;\n                      }\n                      return value;\n                    }\n                  }\n                },\n                // Use the value property for back compat\n                // Use the nodeHook for button elements in IE6/7 (#1954)\n                value: {\n                  get: function (elem, name) {\n                    if (nodeHook && JQXLite.nodeName(elem, \"button\")) {\n                      return nodeHook.get(elem, name);\n                    }\n                    return name in elem ? elem.value : null;\n                  },\n                  set: function (elem, value, name) {\n                    if (nodeHook && JQXLite.nodeName(elem, \"button\")) {\n                      return nodeHook.set(elem, value, name);\n                    }\n                    // Does not return so that setAttribute is also used\n                    elem.value = value;\n                  }\n                }\n              },\n              propFix: {\n                tabindex: \"tabIndex\",\n                readonly: \"readOnly\",\n                \"for\": \"htmlFor\",\n                \"class\": \"className\",\n                maxlength: \"maxLength\",\n                cellspacing: \"cellSpacing\",\n                cellpadding: \"cellPadding\",\n                rowspan: \"rowSpan\",\n                colspan: \"colSpan\",\n                usemap: \"useMap\",\n                frameborder: \"frameBorder\",\n                contenteditable: \"contentEditable\"\n              },\n              prop: function (elem, name, value) {\n                var ret,\n                  hooks,\n                  notxml,\n                  nType = elem.nodeType;\n\n                // don't get/set properties on text, comment and attribute nodes\n                if (!elem || nType === 3 || nType === 8 || nType === 2) {\n                  return;\n                }\n                notxml = nType !== 1 || !JQXLite.isXMLDoc(elem);\n                if (notxml) {\n                  // Fix name and attach hooks\n                  name = JQXLite.propFix[name] || name;\n                  hooks = JQXLite.propHooks[name];\n                }\n                if (value !== undefined) {\n                  if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n                    return ret;\n                  } else {\n                    return elem[name] = value;\n                  }\n                } else {\n                  if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n                    return ret;\n                  } else {\n                    return elem[name];\n                  }\n                }\n              },\n              propHooks: {\n                tabIndex: {\n                  get: function (elem) {\n                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n                    var attributeNode = elem.getAttributeNode(\"tabindex\");\n                    return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;\n                  }\n                }\n              }\n            });\n\n            // Hook for boolean attributes\n            boolHook = {\n              get: function (elem, name) {\n                // Align boolean attributes with corresponding properties\n                // Fall back to attribute presence where some booleans are not supported\n                var attrNode,\n                  property = JQXLite.prop(elem, name);\n                return property === true || typeof property !== \"boolean\" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ? name.toLowerCase() : undefined;\n              },\n              set: function (elem, value, name) {\n                var propName;\n                if (value === false) {\n                  // Remove boolean attributes when set to false\n                  JQXLite.removeAttr(elem, name);\n                } else {\n                  // value is true since we know at this point it's type boolean and not false\n                  // Set boolean attributes to the same name and set the DOM property\n                  propName = JQXLite.propFix[name] || name;\n                  if (propName in elem) {\n                    // Only set the IDL specifically if it already exists on the element\n                    elem[propName] = true;\n                  }\n                  elem.setAttribute(name, name.toLowerCase());\n                }\n                return name;\n              }\n            };\n\n            // IE6/7 call enctype encoding\n            if (!JQXLite.support.enctype) {\n              JQXLite.propFix.enctype = \"encoding\";\n            }\n            var rformElems = /^(?:textarea|input|select)$/i,\n              rtypenamespace = /^([^\\.]*|)(?:\\.(.+)|)$/,\n              rhoverHack = /(?:^|\\s)hover(\\.\\S+|)\\b/,\n              rkeyEvent = /^key/,\n              rmouseEvent = /^(?:mouse|contextmenu)|click/,\n              rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n              hoverHack = function (events) {\n                return JQXLite.event.special.hover ? events : events.replace(rhoverHack, \"mouseenter$1 mouseleave$1\");\n              };\n\n            /*\r\n             * Helper functions for managing events -- not part of the public interface.\r\n             * Props to Dean Edwards' addEvent library for many of the ideas.\r\n             */\n            JQXLite.event = {\n              add: function (elem, types, handler, data, selector) {\n                var elemData, eventHandle, events, t, tns, type, namespaces, handleObj, handleObjIn, handlers, special;\n\n                // Don't attach events to noData or text/comment nodes (allow plain objects tho)\n                if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = JQXLite._data(elem))) {\n                  return;\n                }\n\n                // Caller can pass in an object of custom data in lieu of the handler\n                if (handler.handler) {\n                  handleObjIn = handler;\n                  handler = handleObjIn.handler;\n                  selector = handleObjIn.selector;\n                }\n\n                // Make sure that the handler has a unique ID, used to find/remove it later\n                if (!handler.guid) {\n                  handler.guid = JQXLite.guid++;\n                }\n\n                // Init the element's event structure and main handler, if this is the first\n                events = elemData.events;\n                if (!events) {\n                  elemData.events = events = {};\n                }\n                eventHandle = elemData.handle;\n                if (!eventHandle) {\n                  elemData.handle = eventHandle = function (e) {\n                    // Discard the second event of a JQXLite.event.trigger() and\n                    // when an event is called after a page has unloaded\n                    return typeof JQXLite !== \"undefined\" && (!e || JQXLite.event.triggered !== e.type) ? JQXLite.event.dispatch.apply(eventHandle.elem, arguments) : undefined;\n                  };\n                  // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n                  eventHandle.elem = elem;\n                }\n\n                // Handle multiple events separated by a space\n                // JQXLite(...).bind(\"mouseover mouseout\", fn);\n                types = JQXLite.trim(hoverHack(types)).split(\" \");\n                for (t = 0; t < types.length; t++) {\n                  tns = rtypenamespace.exec(types[t]) || [];\n                  type = tns[1];\n                  namespaces = (tns[2] || \"\").split(\".\").sort();\n\n                  // If event changes its type, use the special event handlers for the changed type\n                  special = JQXLite.event.special[type] || {};\n\n                  // If selector defined, determine special event api type, otherwise given type\n                  type = (selector ? special.delegateType : special.bindType) || type;\n\n                  // Update special based on newly reset type\n                  special = JQXLite.event.special[type] || {};\n\n                  // handleObj is passed to all event handlers\n                  handleObj = JQXLite.extend({\n                    type: type,\n                    origType: tns[1],\n                    data: data,\n                    handler: handler,\n                    guid: handler.guid,\n                    selector: selector,\n                    needsContext: selector && JQXLite.expr.match.needsContext.test(selector),\n                    namespace: namespaces.join(\".\")\n                  }, handleObjIn);\n\n                  // Init the event handler queue if we're the first\n                  handlers = events[type];\n                  if (!handlers) {\n                    handlers = events[type] = [];\n                    handlers.delegateCount = 0;\n\n                    // Only use addEventListener/attachEvent if the special events handler returns false\n                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n                      // Bind the global event handler to the element\n                      if (elem.addEventListener) {\n                        if (data && data.passive !== undefined) {\n                          elem.addEventListener(type, eventHandle, data);\n                        } else {\n                          elem.addEventListener(type, eventHandle, false);\n                        }\n                      } else if (elem.attachEvent) {\n                        elem.attachEvent(\"on\" + type, eventHandle);\n                      }\n                    }\n                  }\n                  if (special.add) {\n                    special.add.call(elem, handleObj);\n                    if (!handleObj.handler.guid) {\n                      handleObj.handler.guid = handler.guid;\n                    }\n                  }\n\n                  // Add to the element's handler list, delegates in front\n                  if (selector) {\n                    handlers.splice(handlers.delegateCount++, 0, handleObj);\n                  } else {\n                    handlers.push(handleObj);\n                  }\n\n                  // Keep track of which events have ever been used, for event optimization\n                  JQXLite.event.global[type] = true;\n                }\n\n                // Nullify elem to prevent memory leaks in IE\n                elem = null;\n              },\n              global: {},\n              // Detach an event or set of events from an element\n              remove: function (elem, types, handler, selector, mappedTypes) {\n                var t,\n                  tns,\n                  type,\n                  origType,\n                  namespaces,\n                  origCount,\n                  j,\n                  events,\n                  special,\n                  eventType,\n                  handleObj,\n                  elemData = JQXLite.hasData(elem) && JQXLite._data(elem);\n                if (!elemData || !(events = elemData.events)) {\n                  return;\n                }\n\n                // Once for each type.namespace in types; type may be omitted\n                types = JQXLite.trim(hoverHack(types || \"\")).split(\" \");\n                for (t = 0; t < types.length; t++) {\n                  tns = rtypenamespace.exec(types[t]) || [];\n                  type = origType = tns[1];\n                  namespaces = tns[2];\n\n                  // Unbind all events (on this namespace, if provided) for the element\n                  if (!type) {\n                    for (type in events) {\n                      JQXLite.event.remove(elem, type + types[t], handler, selector, true);\n                    }\n                    continue;\n                  }\n                  special = JQXLite.event.special[type] || {};\n                  type = (selector ? special.delegateType : special.bindType) || type;\n                  eventType = events[type] || [];\n                  origCount = eventType.length;\n                  namespaces = namespaces ? new RegExp(\"(^|\\\\.)\" + namespaces.split(\".\").sort().join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n                  // Remove matching events\n                  for (j = 0; j < eventType.length; j++) {\n                    handleObj = eventType[j];\n                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!namespaces || namespaces.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n                      eventType.splice(j--, 1);\n                      if (handleObj.selector) {\n                        eventType.delegateCount--;\n                      }\n                      if (special.remove) {\n                        special.remove.call(elem, handleObj);\n                      }\n                    }\n                  }\n\n                  // Remove generic event handler if we removed something and no more handlers exist\n                  // (avoids potential for endless recursion during removal of special event handlers)\n                  if (eventType.length === 0 && origCount !== eventType.length) {\n                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n                      JQXLite.removeEvent(elem, type, elemData.handle);\n                    }\n                    delete events[type];\n                  }\n                }\n\n                // Remove the expando if it's no longer used\n                if (JQXLite.isEmptyObject(events)) {\n                  delete elemData.handle;\n\n                  // removeData also checks for emptiness and clears the expando if empty\n                  // so use it instead of delete\n                  JQXLite.removeData(elem, \"events\", true);\n                }\n              },\n              // Events that are safe to short-circuit if no handlers are attached.\n              // Native DOM events should not be added, they may have inline handlers.\n              customEvent: {\n                \"getData\": true,\n                \"setData\": true,\n                \"changeData\": true\n              },\n              trigger: function (event, data, elem, onlyHandlers) {\n                // Don't do events on text and comment nodes\n                if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {\n                  return;\n                }\n\n                // Event object or event type\n                var cache,\n                  exclusive,\n                  i,\n                  cur,\n                  old,\n                  ontype,\n                  special,\n                  handle,\n                  eventPath,\n                  bubbleType,\n                  type = event.type || event,\n                  namespaces = [];\n\n                // focus/blur morphs to focusin/out; ensure we're not firing them right now\n                if (rfocusMorph.test(type + JQXLite.event.triggered)) {\n                  return;\n                }\n                if (type.indexOf(\"!\") >= 0) {\n                  // Exclusive events trigger only for the exact event (no namespaces)\n                  type = type.slice(0, -1);\n                  exclusive = true;\n                }\n                if (type.indexOf(\".\") >= 0) {\n                  // Namespaced trigger; create a regexp to match event type in handle()\n                  namespaces = type.split(\".\");\n                  type = namespaces.shift();\n                  namespaces.sort();\n                }\n                if ((!elem || JQXLite.event.customEvent[type]) && !JQXLite.event.global[type]) {\n                  // No JQXLite handlers for this event type, and it can't have inline handlers\n                  return;\n                }\n\n                // Caller can pass in an Event, Object, or just an event type string\n                event = typeof event === \"object\" ?\n                // JQXLite.Event object\n                event[JQXLite.expando] ? event :\n                // Object literal\n                new JQXLite.Event(type, event) :\n                // Just the event type (string)\n                new JQXLite.Event(type);\n                event.type = type;\n                event.isTrigger = true;\n                event.exclusive = exclusive;\n                event.namespace = namespaces.join(\".\");\n                event.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n                ontype = type.indexOf(\":\") < 0 ? \"on\" + type : \"\";\n\n                // Handle a global trigger\n                if (!elem) {\n                  // TODO: Stop taunting the data cache; remove global events and always attach to document\n                  cache = JQXLite.cache;\n                  for (i in cache) {\n                    if (cache[i].events && cache[i].events[type]) {\n                      JQXLite.event.trigger(event, data, cache[i].handle.elem, true);\n                    }\n                  }\n                  return;\n                }\n\n                // Clean up the event in case it is being reused\n                event.result = undefined;\n                if (!event.target) {\n                  event.target = elem;\n                }\n\n                // Clone any incoming data and prepend the event, creating the handler arg list\n                data = data != null ? JQXLite.makeArray(data) : [];\n                data.unshift(event);\n\n                // Allow special events to draw outside the lines\n                special = JQXLite.event.special[type] || {};\n                if (special.trigger && special.trigger.apply(elem, data) === false) {\n                  return;\n                }\n\n                // Determine event propagation path in advance, per W3C events spec (#9951)\n                // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n                eventPath = [[elem, special.bindType || type]];\n                if (!onlyHandlers && !special.noBubble && !JQXLite.isWindow(elem)) {\n                  bubbleType = special.delegateType || type;\n                  cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;\n                  for (old = elem; cur; cur = cur.parentNode) {\n                    eventPath.push([cur, bubbleType]);\n                    old = cur;\n                  }\n\n                  // Only add window if we got to document (e.g., not plain obj or detached DOM)\n                  if (old === (elem.ownerDocument || document)) {\n                    eventPath.push([old.defaultView || old.parentWindow || window, bubbleType]);\n                  }\n                }\n\n                // Fire handlers on the event path\n                for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {\n                  cur = eventPath[i][0];\n                  event.type = eventPath[i][1];\n                  handle = (JQXLite._data(cur, \"events\") || {})[event.type] && JQXLite._data(cur, \"handle\");\n                  if (handle) {\n                    handle.apply(cur, data);\n                  }\n                  // Note that this is a bare JS function and not a JQXLite handler\n                  handle = ontype && cur[ontype];\n                  if (handle && JQXLite.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {\n                    event.preventDefault();\n                  }\n                }\n                event.type = type;\n\n                // If nobody prevented the default action, do it now\n                if (!onlyHandlers && !event.isDefaultPrevented()) {\n                  if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === \"click\" && JQXLite.nodeName(elem, \"a\")) && JQXLite.acceptData(elem)) {\n                    // Call a native DOM method on the target with the same name name as the event.\n                    // Can't use an .isFunction() check here because IE6/7 fails that test.\n                    // Don't do default actions on window, that's where global variables be (#6170)\n                    // IE<9 dies on focus/blur to hidden element (#1486)\n                    if (ontype && elem[type] && (type !== \"focus\" && type !== \"blur\" || event.target.offsetWidth !== 0) && !JQXLite.isWindow(elem)) {\n                      // Don't re-trigger an onFOO event when we call its FOO() method\n                      old = elem[ontype];\n                      if (old) {\n                        elem[ontype] = null;\n                      }\n\n                      // Prevent re-triggering of the same event, since we already bubbled it above\n                      JQXLite.event.triggered = type;\n                      elem[type]();\n                      JQXLite.event.triggered = undefined;\n                      if (old) {\n                        elem[ontype] = old;\n                      }\n                    }\n                  }\n                }\n                return event.result;\n              },\n              dispatch: function (event) {\n                // Make a writable JQXLite.Event from the native event object\n                event = JQXLite.event.fix(event || window.event);\n                var i,\n                  j,\n                  cur,\n                  ret,\n                  selMatch,\n                  matched,\n                  matches,\n                  handleObj,\n                  sel,\n                  related,\n                  handlers = (JQXLite._data(this, \"events\") || {})[event.type] || [],\n                  delegateCount = handlers.delegateCount,\n                  args = core_slice.call(arguments),\n                  run_all = !event.exclusive && !event.namespace,\n                  special = JQXLite.event.special[event.type] || {},\n                  handlerQueue = [];\n\n                // Use the fix-ed JQXLite.Event rather than the (read-only) native event\n                args[0] = event;\n                event.delegateTarget = this;\n\n                // Call the preDispatch hook for the mapped type, and let it bail if desired\n                if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n                  return;\n                }\n\n                // Determine handlers that should run if there are delegated events\n                // Avoid non-left-click bubbling in Firefox (#3861)\n                if (delegateCount && !(event.button && event.type === \"click\")) {\n                  for (cur = event.target; cur != this; cur = cur.parentNode || this) {\n                    // Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)\n                    if (cur.disabled !== true || event.type !== \"click\") {\n                      selMatch = {};\n                      matches = [];\n                      for (i = 0; i < delegateCount; i++) {\n                        handleObj = handlers[i];\n                        sel = handleObj.selector;\n                        if (selMatch[sel] === undefined) {\n                          selMatch[sel] = handleObj.needsContext ? JQXLite(sel, this).index(cur) >= 0 : JQXLite.find(sel, this, null, [cur]).length;\n                        }\n                        if (selMatch[sel]) {\n                          matches.push(handleObj);\n                        }\n                      }\n                      if (matches.length) {\n                        handlerQueue.push({\n                          elem: cur,\n                          matches: matches\n                        });\n                      }\n                    }\n                  }\n                }\n\n                // Add the remaining (directly-bound) handlers\n                if (handlers.length > delegateCount) {\n                  handlerQueue.push({\n                    elem: this,\n                    matches: handlers.slice(delegateCount)\n                  });\n                }\n\n                // Run delegates first; they may want to stop propagation beneath us\n                for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {\n                  matched = handlerQueue[i];\n                  event.currentTarget = matched.elem;\n                  for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {\n                    handleObj = matched.matches[j];\n\n                    // Triggered event must either 1) be non-exclusive and have no namespace, or\n                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n                    if (run_all || !event.namespace && !handleObj.namespace || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {\n                      event.data = handleObj.data;\n                      event.handleObj = handleObj;\n                      ret = ((JQXLite.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n                      if (ret !== undefined) {\n                        event.result = ret;\n                        if (ret === false) {\n                          event.preventDefault();\n                          event.stopPropagation();\n                        }\n                      }\n                    }\n                  }\n                }\n\n                // Call the postDispatch hook for the mapped type\n                if (special.postDispatch) {\n                  special.postDispatch.call(this, event);\n                }\n                return event.result;\n              },\n              // Includes some event props shared by KeyEvent and MouseEvent\n              // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***\n              props: \"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n              fixHooks: {},\n              keyHooks: {\n                props: \"char charCode key keyCode\".split(\" \"),\n                filter: function (event, original) {\n                  // Add which for key events\n                  if (event.which == null) {\n                    event.which = original.charCode != null ? original.charCode : original.keyCode;\n                  }\n                  return event;\n                }\n              },\n              mouseHooks: {\n                props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n                filter: function (event, original) {\n                  var eventDoc,\n                    doc,\n                    body,\n                    button = original.button,\n                    fromElement = original.fromElement;\n\n                  // Calculate pageX/Y if missing and clientX/Y available\n                  if (event.pageX == null && original.clientX != null) {\n                    eventDoc = event.target.ownerDocument || document;\n                    doc = eventDoc.documentElement;\n                    body = eventDoc.body;\n                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n                  }\n\n                  // Add relatedTarget, if necessary\n                  if (!event.relatedTarget && fromElement) {\n                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n                  }\n\n                  // Add which for click: 1 === left; 2 === middle; 3 === right\n                  // Note: button is not normalized, so don't use it\n                  if (!event.which && button !== undefined) {\n                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n                  }\n                  return event;\n                }\n              },\n              fix: function (event) {\n                if (event[JQXLite.expando]) {\n                  return event;\n                }\n\n                // Create a writable copy of the event object and normalize some properties\n                var i,\n                  prop,\n                  originalEvent = event,\n                  fixHook = JQXLite.event.fixHooks[event.type] || {},\n                  copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n                event = JQXLite.Event(originalEvent);\n                for (i = copy.length; i;) {\n                  prop = copy[--i];\n                  event[prop] = originalEvent[prop];\n                }\n\n                // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)\n                if (!event.target) {\n                  event.target = originalEvent.srcElement || document;\n                }\n\n                // Target should not be a text node (#504, Safari)\n                if (event.target.nodeType === 3) {\n                  event.target = event.target.parentNode;\n                }\n\n                // For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)\n                event.metaKey = !!event.metaKey;\n                return fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n              },\n              special: {\n                load: {\n                  // Prevent triggered image.load events from bubbling to window.load\n                  noBubble: true\n                },\n                focus: {\n                  delegateType: \"focusin\"\n                },\n                blur: {\n                  delegateType: \"focusout\"\n                },\n                beforeunload: {\n                  setup: function (data, namespaces, eventHandle) {\n                    // We only want to do this special case on windows\n                    if (JQXLite.isWindow(this)) {\n                      this.onbeforeunload = eventHandle;\n                    }\n                  },\n                  teardown: function (namespaces, eventHandle) {\n                    if (this.onbeforeunload === eventHandle) {\n                      this.onbeforeunload = null;\n                    }\n                  }\n                }\n              },\n              simulate: function (type, elem, event, bubble) {\n                // Piggyback on a donor event to simulate a different one.\n                // Fake originalEvent to avoid donor's stopPropagation, but if the\n                // simulated event prevents default then we do the same on the donor.\n                var e = JQXLite.extend(new JQXLite.Event(), event, {\n                  type: type,\n                  isSimulated: true,\n                  originalEvent: {}\n                });\n                if (bubble) {\n                  JQXLite.event.trigger(e, null, elem);\n                } else {\n                  JQXLite.event.dispatch.call(elem, e);\n                }\n                if (e.isDefaultPrevented()) {\n                  event.preventDefault();\n                }\n              }\n            };\n\n            // Some plugins are using, but it's undocumented/deprecated and will be removed.\n            // The 1.7 special event interface should provide all the hooks needed now.\n            JQXLite.event.handle = JQXLite.event.dispatch;\n            JQXLite.removeEvent = document.removeEventListener ? function (elem, type, handle) {\n              if (elem.removeEventListener) {\n                elem.removeEventListener(type, handle, false);\n              }\n            } : function (elem, type, handle) {\n              var name = \"on\" + type;\n              if (elem.detachEvent) {\n                // #8545, #7054, preventing memory leaks for custom events in IE6-8\n                // detachEvent needed property on element, by name of that event, to properly expose it to GC\n                if (typeof elem[name] === \"undefined\") {\n                  elem[name] = null;\n                }\n                elem.detachEvent(name, handle);\n              }\n            };\n            JQXLite.Event = function (src, props) {\n              // Allow instantiation without the 'new' keyword\n              if (!(this instanceof JQXLite.Event)) {\n                return new JQXLite.Event(src, props);\n              }\n\n              // Event object\n              if (src && src.type) {\n                this.originalEvent = src;\n                this.type = src.type;\n\n                // Events bubbling up the document may have been marked as prevented\n                // by a handler lower down the tree; reflect the correct value.\n                this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;\n\n                // Event type\n              } else {\n                this.type = src;\n              }\n\n              // Put explicitly provided properties onto the event object\n              if (props) {\n                JQXLite.extend(this, props);\n              }\n\n              // Create a timestamp if incoming event doesn't have one\n              this.timeStamp = src && src.timeStamp || JQXLite.now();\n\n              // Mark it as fixed\n              this[JQXLite.expando] = true;\n            };\n            function returnFalse() {\n              return false;\n            }\n            function returnTrue() {\n              return true;\n            }\n\n            // JQXLite.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n            // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n            JQXLite.Event.prototype = {\n              preventDefault: function () {\n                this.isDefaultPrevented = returnTrue;\n                var e = this.originalEvent;\n                if (!e) {\n                  return;\n                }\n\n                // if preventDefault exists run it on the original event\n                if (e.preventDefault) {\n                  e.preventDefault();\n\n                  // otherwise set the returnValue property of the original event to false (IE)\n                } else {\n                  e.returnValue = false;\n                }\n              },\n              stopPropagation: function () {\n                this.isPropagationStopped = returnTrue;\n                var e = this.originalEvent;\n                if (!e) {\n                  return;\n                }\n                // if stopPropagation exists run it on the original event\n                if (e.stopPropagation) {\n                  e.stopPropagation();\n                }\n                // otherwise set the cancelBubble property of the original event to true (IE)\n                e.cancelBubble = true;\n              },\n              stopImmediatePropagation: function () {\n                this.isImmediatePropagationStopped = returnTrue;\n                this.stopPropagation();\n              },\n              isDefaultPrevented: returnFalse,\n              isPropagationStopped: returnFalse,\n              isImmediatePropagationStopped: returnFalse\n            };\n\n            // Create mouseenter/leave events using mouseover/out and event-time checks\n            JQXLite.each({\n              mouseenter: \"mouseover\",\n              mouseleave: \"mouseout\"\n            }, function (orig, fix) {\n              JQXLite.event.special[orig] = {\n                delegateType: fix,\n                bindType: fix,\n                handle: function (event) {\n                  var ret,\n                    target = this,\n                    related = event.relatedTarget,\n                    handleObj = event.handleObj,\n                    selector = handleObj.selector;\n\n                  // For mousenter/leave call the handler if related is outside the target.\n                  // NB: No relatedTarget if the mouse left/entered the browser window\n                  if (!related || related !== target && !JQXLite.contains(target, related)) {\n                    event.type = handleObj.origType;\n                    ret = handleObj.handler.apply(this, arguments);\n                    event.type = fix;\n                  }\n                  return ret;\n                }\n              };\n            });\n            JQXLite.fn.extend({\n              on: function (types, selector, data, fn, /*INTERNAL*/one) {\n                var origFn, type;\n\n                // Types can be a map of types/handlers\n                if (typeof types === \"object\") {\n                  // ( types-Object, selector, data )\n                  if (typeof selector !== \"string\") {\n                    // && selector != null\n                    // ( types-Object, data )\n                    data = data || selector;\n                    selector = undefined;\n                  }\n                  for (type in types) {\n                    this.on(type, selector, data, types[type], one);\n                  }\n                  return this;\n                }\n                if (data == null && fn == null) {\n                  // ( types, fn )\n                  fn = selector;\n                  data = selector = undefined;\n                } else if (fn == null) {\n                  if (typeof selector === \"string\") {\n                    // ( types, selector, fn )\n                    fn = data;\n                    data = undefined;\n                  } else {\n                    // ( types, data, fn )\n                    fn = data;\n                    data = selector;\n                    selector = undefined;\n                  }\n                }\n                if (fn === false) {\n                  fn = returnFalse;\n                } else if (!fn) {\n                  return this;\n                }\n                if (one === 1) {\n                  origFn = fn;\n                  fn = function (event) {\n                    // Can use an empty set, since event contains the info\n                    JQXLite().off(event);\n                    return origFn.apply(this, arguments);\n                  };\n                  // Use same guid so caller can remove using origFn\n                  fn.guid = origFn.guid || (origFn.guid = JQXLite.guid++);\n                }\n                return this.each(function () {\n                  JQXLite.event.add(this, types, fn, data, selector);\n                });\n              },\n              off: function (types, selector, fn) {\n                var handleObj, type;\n                if (types && types.preventDefault && types.handleObj) {\n                  // ( event )  dispatched JQXLite.Event\n                  handleObj = types.handleObj;\n                  JQXLite(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n                  return this;\n                }\n                if (typeof types === \"object\") {\n                  // ( types-object [, selector] )\n                  for (type in types) {\n                    this.off(type, selector, types[type]);\n                  }\n                  return this;\n                }\n                if (selector === false || typeof selector === \"function\") {\n                  // ( types [, fn] )\n                  fn = selector;\n                  selector = undefined;\n                }\n                if (fn === false) {\n                  fn = returnFalse;\n                }\n                return this.each(function () {\n                  JQXLite.event.remove(this, types, fn, selector);\n                });\n              },\n              delegate: function (selector, types, data, fn) {\n                return this.on(types, selector, data, fn);\n              },\n              undelegate: function (selector, types, fn) {\n                // ( namespace ) or ( selector, types [, fn] )\n                return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n              },\n              trigger: function (type, data) {\n                return this.each(function () {\n                  JQXLite.event.trigger(type, data, this);\n                });\n              },\n              triggerHandler: function (type, data) {\n                if (this[0]) {\n                  return JQXLite.event.trigger(type, data, this[0], true);\n                }\n              },\n              toggle: function (fn) {\n                // Save reference to arguments for access in closure\n                var args = arguments,\n                  guid = fn.guid || JQXLite.guid++,\n                  i = 0,\n                  toggler = function (event) {\n                    // Figure out which function to execute\n                    var lastToggle = (JQXLite._data(this, \"lastToggle\" + fn.guid) || 0) % i;\n                    JQXLite._data(this, \"lastToggle\" + fn.guid, lastToggle + 1);\n\n                    // Make sure that clicks stop\n                    event.preventDefault();\n\n                    // and execute the function\n                    return args[lastToggle].apply(this, arguments) || false;\n                  };\n\n                // link all the functions, so any of them can unbind this click handler\n                toggler.guid = guid;\n                while (i < args.length) {\n                  args[i++].guid = guid;\n                }\n                return this.click(toggler);\n              },\n              hover: function (fnOver, fnOut) {\n                return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n              }\n            });\n            JQXLite.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n              // Handle event binding\n              JQXLite.fn[name] = function (data, fn) {\n                if (fn == null) {\n                  fn = data;\n                  data = null;\n                }\n                return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n              };\n              if (rkeyEvent.test(name)) {\n                JQXLite.event.fixHooks[name] = JQXLite.event.keyHooks;\n              }\n              if (rmouseEvent.test(name)) {\n                JQXLite.event.fixHooks[name] = JQXLite.event.mouseHooks;\n              }\n            });\n            /*!\r\n             * Sizzle CSS Selector Engine\r\n             * Copyright 2012 JQXLite Foundation and other contributors\r\n             * Released under the MIT license\r\n             * http://sizzlejs.com/\r\n             */\n            (function (window, undefined) {\n              var cachedruns,\n                assertGetIdNotName,\n                Expr,\n                getText,\n                isXML,\n                contains,\n                compile,\n                sortOrder,\n                hasDuplicate,\n                outermostContext,\n                baseHasDuplicate = true,\n                strundefined = \"undefined\",\n                expando = (\"sizcache\" + Math.random()).replace(\".\", \"\"),\n                Token = String,\n                document = window.document,\n                docElem = document.documentElement,\n                dirruns = 0,\n                done = 0,\n                pop = [].pop,\n                push = [].push,\n                slice = [].slice,\n                // Use a stripped-down indexOf if a native one is unavailable\n                indexOf = [].indexOf || function (elem) {\n                  var i = 0,\n                    len = this.length;\n                  for (; i < len; i++) {\n                    if (this[i] === elem) {\n                      return i;\n                    }\n                  }\n                  return -1;\n                },\n                // Augment a function for special use by Sizzle\n                markFunction = function (fn, value) {\n                  fn[expando] = value == null || value;\n                  return fn;\n                },\n                createCache = function () {\n                  var cache = {},\n                    keys = [];\n                  return markFunction(function (key, value) {\n                    // Only keep the most recent entries\n                    if (keys.push(key) > Expr.cacheLength) {\n                      delete cache[keys.shift()];\n                    }\n\n                    // Retrieve with (key + \" \") to avoid collision with native Object.prototype properties (see Issue #157)\n                    return cache[key + \" \"] = value;\n                  }, cache);\n                },\n                classCache = createCache(),\n                tokenCache = createCache(),\n                compilerCache = createCache(),\n                // Regex\n\n                // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n                whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n                // http://www.w3.org/TR/css3-syntax/#characters\n                characterEncoding = \"(?:\\\\\\\\.|[-\\\\w]|[^\\\\x00-\\\\xa0])+\",\n                // Loosely modeled on CSS identifier characters\n                // An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)\n                // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n                identifier = characterEncoding.replace(\"w\", \"w#\"),\n                // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors\n                operators = \"([*^$|!~]?=)\",\n                attributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace + \"*(?:\" + operators + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\",\n                // Prefer arguments not in parens/brackets,\n                //   then attribute selectors and non-pseudos (denoted by :),\n                //   then anything else\n                // These preferences are here to reduce the number of selectors\n                //   needing tokenize in the PSEUDO preFilter\n                pseudos = \":(\" + characterEncoding + \")(?:\\\\((?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\2|([^()[\\\\]]*|(?:(?:\" + attributes + \")|[^:]|\\\\\\\\.)*|.*))\\\\)|)\",\n                // For matchExpr.POS and matchExpr.needsContext\n                pos = \":(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\",\n                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n                rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n                rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n                rcombinators = new RegExp(\"^\" + whitespace + \"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\" + whitespace + \"*\"),\n                rpseudo = new RegExp(pseudos),\n                // Easily-parseable/retrievable ID or TAG or CLASS selectors\n                rquickExpr = /^(?:#([\\w\\-]+)|(\\w+)|\\.([\\w\\-]+))$/,\n                rnot = /^:not/,\n                rsibling = /[\\x20\\t\\r\\n\\f]*[+~]/,\n                rendsWithNot = /:not\\($/,\n                rheader = /h\\d/i,\n                rinputs = /input|select|textarea|button/i,\n                rbackslash = /\\\\(?!\\\\)/g,\n                matchExpr = {\n                  \"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n                  \"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n                  \"NAME\": new RegExp(\"^\\\\[name=['\\\"]?(\" + characterEncoding + \")['\\\"]?\\\\]\"),\n                  \"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n                  \"ATTR\": new RegExp(\"^\" + attributes),\n                  \"PSEUDO\": new RegExp(\"^\" + pseudos),\n                  \"POS\": new RegExp(pos, \"i\"),\n                  \"CHILD\": new RegExp(\"^:(only|nth|first|last)-child(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n                  // For use in libraries implementing .is()\n                  \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|\" + pos, \"i\")\n                },\n                // Support\n\n                // Used for testing something on an element\n                assert = function (fn) {\n                  var div = document.createElement(\"div\");\n                  try {\n                    return fn(div);\n                  } catch (e) {\n                    return false;\n                  } finally {\n                    // release memory in IE\n                    div = null;\n                  }\n                },\n                // Check if getElementsByTagName(\"*\") returns only elements\n                assertTagNameNoComments = assert(function (div) {\n                  div.appendChild(document.createComment(\"\"));\n                  return !div.getElementsByTagName(\"*\").length;\n                }),\n                // Check if getAttribute returns normalized href attributes\n                assertHrefNotNormalized = assert(function (div) {\n                  div.innerHTML = \"<a href='#'></a>\";\n                  return div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute(\"href\") === \"#\";\n                }),\n                // Check if attributes should be retrieved by attribute nodes\n                assertAttributes = assert(function (div) {\n                  div.innerHTML = \"<select></select>\";\n                  var type = typeof div.lastChild.getAttribute(\"multiple\");\n                  // IE8 returns a string for some attributes even when not present\n                  return type !== \"boolean\" && type !== \"string\";\n                }),\n                // Check if getElementsByClassName can be trusted\n                assertUsableClassName = assert(function (div) {\n                  // Opera can't find a second classname (in 9.6)\n                  div.innerHTML = \"<div class='hidden e'></div><div class='hidden'></div>\";\n                  if (!div.getElementsByClassName || !div.getElementsByClassName(\"e\").length) {\n                    return false;\n                  }\n\n                  // Safari 3.2 caches class attributes and doesn't catch changes\n                  div.lastChild.className = \"e\";\n                  return div.getElementsByClassName(\"e\").length === 2;\n                }),\n                // Check if getElementById returns elements by name\n                // Check if getElementsByName privileges form controls or returns elements by ID\n                assertUsableName = assert(function (div) {\n                  // Inject content\n                  div.id = expando + 0;\n                  div.innerHTML = \"<a name='\" + expando + \"'></a><div name='\" + expando + \"'></div>\";\n                  docElem.insertBefore(div, docElem.firstChild);\n\n                  // Test\n                  var pass = document.getElementsByName &&\n                  // buggy browsers will return fewer than the correct 2\n                  document.getElementsByName(expando).length === 2 +\n                  // buggy browsers will return more than the correct 0\n                  document.getElementsByName(expando + 0).length;\n                  assertGetIdNotName = !document.getElementById(expando);\n\n                  // Cleanup\n                  docElem.removeChild(div);\n                  return pass;\n                });\n\n              // If slice is not available, provide a backup\n              try {\n                slice.call(docElem.childNodes, 0)[0].nodeType;\n              } catch (e) {\n                slice = function (i) {\n                  var elem,\n                    results = [];\n                  for (; elem = this[i]; i++) {\n                    results.push(elem);\n                  }\n                  return results;\n                };\n              }\n              function Sizzle(selector, context, results, seed) {\n                results = results || [];\n                context = context || document;\n                var match,\n                  elem,\n                  xml,\n                  m,\n                  nodeType = context.nodeType;\n                if (!selector || typeof selector !== \"string\") {\n                  return results;\n                }\n                if (nodeType !== 1 && nodeType !== 9) {\n                  return [];\n                }\n                xml = isXML(context);\n                if (!xml && !seed) {\n                  if (match = rquickExpr.exec(selector)) {\n                    // Speed-up: Sizzle(\"#ID\")\n                    if (m = match[1]) {\n                      if (nodeType === 9) {\n                        elem = context.getElementById(m);\n                        // Check parentNode to catch when Blackberry 4.6 returns\n                        // nodes that are no longer in the document #6963\n                        if (elem && elem.parentNode) {\n                          // Handle the case where IE, Opera, and Webkit return items\n                          // by name instead of ID\n                          if (elem.id === m) {\n                            results.push(elem);\n                            return results;\n                          }\n                        } else {\n                          return results;\n                        }\n                      } else {\n                        // Context is not a document\n                        if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                          results.push(elem);\n                          return results;\n                        }\n                      }\n\n                      // Speed-up: Sizzle(\"TAG\")\n                    } else if (match[2]) {\n                      push.apply(results, slice.call(context.getElementsByTagName(selector), 0));\n                      return results;\n\n                      // Speed-up: Sizzle(\".CLASS\")\n                    } else if ((m = match[3]) && assertUsableClassName && context.getElementsByClassName) {\n                      push.apply(results, slice.call(context.getElementsByClassName(m), 0));\n                      return results;\n                    }\n                  }\n                }\n\n                // All others\n                return select(selector.replace(rtrim, \"$1\"), context, results, seed, xml);\n              }\n              Sizzle.matches = function (expr, elements) {\n                return Sizzle(expr, null, null, elements);\n              };\n              Sizzle.matchesSelector = function (elem, expr) {\n                return Sizzle(expr, null, null, [elem]).length > 0;\n              };\n\n              // Returns a function to use in pseudos for input types\n              function createInputPseudo(type) {\n                return function (elem) {\n                  var name = elem.nodeName.toLowerCase();\n                  return name === \"input\" && elem.type === type;\n                };\n              }\n\n              // Returns a function to use in pseudos for buttons\n              function createButtonPseudo(type) {\n                return function (elem) {\n                  var name = elem.nodeName.toLowerCase();\n                  return (name === \"input\" || name === \"button\") && elem.type === type;\n                };\n              }\n\n              // Returns a function to use in pseudos for positionals\n              function createPositionalPseudo(fn) {\n                return markFunction(function (argument) {\n                  argument = +argument;\n                  return markFunction(function (seed, matches) {\n                    var j,\n                      matchIndexes = fn([], seed.length, argument),\n                      i = matchIndexes.length;\n\n                    // Match elements found at the specified indexes\n                    while (i--) {\n                      if (seed[j = matchIndexes[i]]) {\n                        seed[j] = !(matches[j] = seed[j]);\n                      }\n                    }\n                  });\n                });\n              }\n\n              /**\r\n               * Utility function for retrieving the text value of an array of DOM nodes\r\n               * @param {Array|Element} elem\r\n               */\n              getText = Sizzle.getText = function (elem) {\n                var node,\n                  ret = \"\",\n                  i = 0,\n                  nodeType = elem.nodeType;\n                if (nodeType) {\n                  if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n                    // Use textContent for elements\n                    // innerText usage removed for consistency of new lines (see #11153)\n                    if (typeof elem.textContent === \"string\") {\n                      return elem.textContent;\n                    } else {\n                      // Traverse its children\n                      for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n                        ret += getText(elem);\n                      }\n                    }\n                  } else if (nodeType === 3 || nodeType === 4) {\n                    return elem.nodeValue;\n                  }\n                  // Do not include comment or processing instruction nodes\n                } else {\n                  // If no nodeType, this is expected to be an array\n                  for (; node = elem[i]; i++) {\n                    // Do not traverse comment nodes\n                    ret += getText(node);\n                  }\n                }\n                return ret;\n              };\n              isXML = Sizzle.isXML = function (elem) {\n                // documentElement is verified for cases where it doesn't yet exist\n                // (such as loading iframes in IE - #4833)\n                var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n                return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n              };\n\n              // Element contains another\n              contains = Sizzle.contains = docElem.contains ? function (a, b) {\n                var adown = a.nodeType === 9 ? a.documentElement : a,\n                  bup = b && b.parentNode;\n                return a === bup || !!(bup && bup.nodeType === 1 && adown.contains && adown.contains(bup));\n              } : docElem.compareDocumentPosition ? function (a, b) {\n                return b && !!(a.compareDocumentPosition(b) & 16);\n              } : function (a, b) {\n                while (b = b.parentNode) {\n                  if (b === a) {\n                    return true;\n                  }\n                }\n                return false;\n              };\n              Sizzle.attr = function (elem, name) {\n                var val,\n                  xml = isXML(elem);\n                if (!xml) {\n                  name = name.toLowerCase();\n                }\n                if (val = Expr.attrHandle[name]) {\n                  return val(elem);\n                }\n                if (xml || assertAttributes) {\n                  return elem.getAttribute(name);\n                }\n                val = elem.getAttributeNode(name);\n                return val ? typeof elem[name] === \"boolean\" ? elem[name] ? name : null : val.specified ? val.value : null : null;\n              };\n              Expr = Sizzle.selectors = {\n                // Can be adjusted by the user\n                cacheLength: 50,\n                createPseudo: markFunction,\n                match: matchExpr,\n                // IE6/7 return a modified href\n                attrHandle: assertHrefNotNormalized ? {} : {\n                  \"href\": function (elem) {\n                    return elem.getAttribute(\"href\", 2);\n                  },\n                  \"type\": function (elem) {\n                    return elem.getAttribute(\"type\");\n                  }\n                },\n                find: {\n                  \"ID\": assertGetIdNotName ? function (id, context, xml) {\n                    if (typeof context.getElementById !== strundefined && !xml) {\n                      var m = context.getElementById(id);\n                      // Check parentNode to catch when Blackberry 4.6 returns\n                      // nodes that are no longer in the document #6963\n                      return m && m.parentNode ? [m] : [];\n                    }\n                  } : function (id, context, xml) {\n                    if (typeof context.getElementById !== strundefined && !xml) {\n                      var m = context.getElementById(id);\n                      return m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode(\"id\").value === id ? [m] : undefined : [];\n                    }\n                  },\n                  \"TAG\": assertTagNameNoComments ? function (tag, context) {\n                    if (typeof context.getElementsByTagName !== strundefined) {\n                      return context.getElementsByTagName(tag);\n                    }\n                  } : function (tag, context) {\n                    var results = context.getElementsByTagName(tag);\n\n                    // Filter out possible comments\n                    if (tag === \"*\") {\n                      var elem,\n                        tmp = [],\n                        i = 0;\n                      for (; elem = results[i]; i++) {\n                        if (elem.nodeType === 1) {\n                          tmp.push(elem);\n                        }\n                      }\n                      return tmp;\n                    }\n                    return results;\n                  },\n                  \"NAME\": assertUsableName && function (tag, context) {\n                    if (typeof context.getElementsByName !== strundefined) {\n                      return context.getElementsByName(name);\n                    }\n                  },\n                  \"CLASS\": assertUsableClassName && function (className, context, xml) {\n                    if (typeof context.getElementsByClassName !== strundefined && !xml) {\n                      return context.getElementsByClassName(className);\n                    }\n                  }\n                },\n                relative: {\n                  \">\": {\n                    dir: \"parentNode\",\n                    first: true\n                  },\n                  \" \": {\n                    dir: \"parentNode\"\n                  },\n                  \"+\": {\n                    dir: \"previousSibling\",\n                    first: true\n                  },\n                  \"~\": {\n                    dir: \"previousSibling\"\n                  }\n                },\n                preFilter: {\n                  \"ATTR\": function (match) {\n                    match[1] = match[1].replace(rbackslash, \"\");\n\n                    // Move the given value to match[3] whether quoted or unquoted\n                    match[3] = (match[4] || match[5] || \"\").replace(rbackslash, \"\");\n                    if (match[2] === \"~=\") {\n                      match[3] = \" \" + match[3] + \" \";\n                    }\n                    return match.slice(0, 4);\n                  },\n                  \"CHILD\": function (match) {\n                    /* matches from matchExpr[\"CHILD\"]\r\n                    \t1 type (only|nth|...)\r\n                    \t2 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n                    \t3 xn-component of xn+y argument ([+-]?\\d*n|)\r\n                    \t4 sign of xn-component\r\n                    \t5 x of xn-component\r\n                    \t6 sign of y-component\r\n                    \t7 y of y-component\r\n                    */\n                    match[1] = match[1].toLowerCase();\n                    if (match[1] === \"nth\") {\n                      // nth-child requires argument\n                      if (!match[2]) {\n                        Sizzle.error(match[0]);\n                      }\n\n                      // numeric x and y parameters for Expr.filter.CHILD\n                      // remember that false/true cast respectively to 0/1\n                      match[3] = +(match[3] ? match[4] + (match[5] || 1) : 2 * (match[2] === \"even\" || match[2] === \"odd\"));\n                      match[4] = +(match[6] + match[7] || match[2] === \"odd\");\n\n                      // other types prohibit arguments\n                    } else if (match[2]) {\n                      Sizzle.error(match[0]);\n                    }\n                    return match;\n                  },\n                  \"PSEUDO\": function (match) {\n                    var unquoted, excess;\n                    if (matchExpr[\"CHILD\"].test(match[0])) {\n                      return null;\n                    }\n                    if (match[3]) {\n                      match[2] = match[3];\n                    } else if (unquoted = match[4]) {\n                      // Only check arguments that contain a pseudo\n                      if (rpseudo.test(unquoted) && (\n                      // Get excess from tokenize (recursively)\n                      excess = tokenize(unquoted, true)) && (\n                      // advance to the next closing parenthesis\n                      excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n                        // excess is a negative index\n                        unquoted = unquoted.slice(0, excess);\n                        match[0] = match[0].slice(0, excess);\n                      }\n                      match[2] = unquoted;\n                    }\n\n                    // Return only captures needed by the pseudo filter method (type and argument)\n                    return match.slice(0, 3);\n                  }\n                },\n                filter: {\n                  \"ID\": assertGetIdNotName ? function (id) {\n                    id = id.replace(rbackslash, \"\");\n                    return function (elem) {\n                      return elem.getAttribute(\"id\") === id;\n                    };\n                  } : function (id) {\n                    id = id.replace(rbackslash, \"\");\n                    return function (elem) {\n                      var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode(\"id\");\n                      return node && node.value === id;\n                    };\n                  },\n                  \"TAG\": function (nodeName) {\n                    if (nodeName === \"*\") {\n                      return function () {\n                        return true;\n                      };\n                    }\n                    nodeName = nodeName.replace(rbackslash, \"\").toLowerCase();\n                    return function (elem) {\n                      return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n                    };\n                  },\n                  \"CLASS\": function (className) {\n                    var pattern = classCache[expando][className + \" \"];\n                    return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n                      return pattern.test(elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute(\"class\") || \"\");\n                    });\n                  },\n                  \"ATTR\": function (name, operator, check) {\n                    return function (elem, context) {\n                      var result = Sizzle.attr(elem, name);\n                      if (result == null) {\n                        return operator === \"!=\";\n                      }\n                      if (!operator) {\n                        return true;\n                      }\n                      result += \"\";\n                      return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.substr(result.length - check.length) === check : operator === \"~=\" ? (\" \" + result + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.substr(0, check.length + 1) === check + \"-\" : false;\n                    };\n                  },\n                  \"CHILD\": function (type, argument, first, last) {\n                    if (type === \"nth\") {\n                      return function (elem) {\n                        var node,\n                          diff,\n                          parent = elem.parentNode;\n                        if (first === 1 && last === 0) {\n                          return true;\n                        }\n                        if (parent) {\n                          diff = 0;\n                          for (node = parent.firstChild; node; node = node.nextSibling) {\n                            if (node.nodeType === 1) {\n                              diff++;\n                              if (elem === node) {\n                                break;\n                              }\n                            }\n                          }\n                        }\n\n                        // Incorporate the offset (or cast to NaN), then check against cycle size\n                        diff -= last;\n                        return diff === first || diff % first === 0 && diff / first >= 0;\n                      };\n                    }\n                    return function (elem) {\n                      var node = elem;\n                      switch (type) {\n                        case \"only\":\n                        case \"first\":\n                          while (node = node.previousSibling) {\n                            if (node.nodeType === 1) {\n                              return false;\n                            }\n                          }\n                          if (type === \"first\") {\n                            return true;\n                          }\n                          node = elem;\n\n                        /* falls through */\n                        case \"last\":\n                          while (node = node.nextSibling) {\n                            if (node.nodeType === 1) {\n                              return false;\n                            }\n                          }\n                          return true;\n                      }\n                    };\n                  },\n                  \"PSEUDO\": function (pseudo, argument) {\n                    // pseudo-class names are case-insensitive\n                    // http://www.w3.org/TR/selectors/#pseudo-classes\n                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n                    // Remember that setFilters inherits from pseudos\n                    var args,\n                      fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n                    // The user may use createPseudo to indicate that\n                    // arguments are needed to create the filter function\n                    // just as Sizzle does\n                    if (fn[expando]) {\n                      return fn(argument);\n                    }\n\n                    // But maintain support for old signatures\n                    if (fn.length > 1) {\n                      args = [pseudo, pseudo, \"\", argument];\n                      return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n                        var idx,\n                          matched = fn(seed, argument),\n                          i = matched.length;\n                        while (i--) {\n                          idx = indexOf.call(seed, matched[i]);\n                          seed[idx] = !(matches[idx] = matched[i]);\n                        }\n                      }) : function (elem) {\n                        return fn(elem, 0, args);\n                      };\n                    }\n                    return fn;\n                  }\n                },\n                pseudos: {\n                  \"not\": markFunction(function (selector) {\n                    // Trim the selector passed to compile\n                    // to avoid treating leading and trailing\n                    // spaces as combinators\n                    var input = [],\n                      results = [],\n                      matcher = compile(selector.replace(rtrim, \"$1\"));\n                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n                      var elem,\n                        unmatched = matcher(seed, null, xml, []),\n                        i = seed.length;\n\n                      // Match elements unmatched by `matcher`\n                      while (i--) {\n                        if (elem = unmatched[i]) {\n                          seed[i] = !(matches[i] = elem);\n                        }\n                      }\n                    }) : function (elem, context, xml) {\n                      input[0] = elem;\n                      matcher(input, null, xml, results);\n                      return !results.pop();\n                    };\n                  }),\n                  \"has\": markFunction(function (selector) {\n                    return function (elem) {\n                      return Sizzle(selector, elem).length > 0;\n                    };\n                  }),\n                  \"contains\": markFunction(function (text) {\n                    return function (elem) {\n                      return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n                    };\n                  }),\n                  \"enabled\": function (elem) {\n                    return elem.disabled === false;\n                  },\n                  \"disabled\": function (elem) {\n                    return elem.disabled === true;\n                  },\n                  \"checked\": function (elem) {\n                    // In CSS3, :checked should return both checked and selected elements\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                    var nodeName = elem.nodeName.toLowerCase();\n                    return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n                  },\n                  \"selected\": function (elem) {\n                    // Accessing this property makes selected-by-default\n                    // options in Safari work properly\n                    if (elem.parentNode) {\n                      elem.parentNode.selectedIndex;\n                    }\n                    return elem.selected === true;\n                  },\n                  \"parent\": function (elem) {\n                    return !Expr.pseudos[\"empty\"](elem);\n                  },\n                  \"empty\": function (elem) {\n                    // http://www.w3.org/TR/selectors/#empty-pseudo\n                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),\n                    //   not comment, processing instructions, or others\n                    // Thanks to Diego Perini for the nodeName shortcut\n                    //   Greater than \"@\" means alpha characters (specifically not starting with \"#\" or \"?\")\n                    var nodeType;\n                    elem = elem.firstChild;\n                    while (elem) {\n                      if (elem.nodeName > \"@\" || (nodeType = elem.nodeType) === 3 || nodeType === 4) {\n                        return false;\n                      }\n                      elem = elem.nextSibling;\n                    }\n                    return true;\n                  },\n                  \"header\": function (elem) {\n                    return rheader.test(elem.nodeName);\n                  },\n                  \"text\": function (elem) {\n                    var type, attr;\n                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)\n                    // use getAttribute instead to test this case\n                    return elem.nodeName.toLowerCase() === \"input\" && (type = elem.type) === \"text\" && ((attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === type);\n                  },\n                  // Input types\n                  \"radio\": createInputPseudo(\"radio\"),\n                  \"checkbox\": createInputPseudo(\"checkbox\"),\n                  \"file\": createInputPseudo(\"file\"),\n                  \"password\": createInputPseudo(\"password\"),\n                  \"image\": createInputPseudo(\"image\"),\n                  \"submit\": createButtonPseudo(\"submit\"),\n                  \"reset\": createButtonPseudo(\"reset\"),\n                  \"button\": function (elem) {\n                    var name = elem.nodeName.toLowerCase();\n                    return name === \"input\" && elem.type === \"button\" || name === \"button\";\n                  },\n                  \"input\": function (elem) {\n                    return rinputs.test(elem.nodeName);\n                  },\n                  \"focus\": function (elem) {\n                    var doc = elem.ownerDocument;\n                    return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n                  },\n                  \"active\": function (elem) {\n                    return elem === elem.ownerDocument.activeElement;\n                  },\n                  // Positional types\n                  \"first\": createPositionalPseudo(function () {\n                    return [0];\n                  }),\n                  \"last\": createPositionalPseudo(function (matchIndexes, length) {\n                    return [length - 1];\n                  }),\n                  \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                    return [argument < 0 ? argument + length : argument];\n                  }),\n                  \"even\": createPositionalPseudo(function (matchIndexes, length) {\n                    for (var i = 0; i < length; i += 2) {\n                      matchIndexes.push(i);\n                    }\n                    return matchIndexes;\n                  }),\n                  \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n                    for (var i = 1; i < length; i += 2) {\n                      matchIndexes.push(i);\n                    }\n                    return matchIndexes;\n                  }),\n                  \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                    for (var i = argument < 0 ? argument + length : argument; --i >= 0;) {\n                      matchIndexes.push(i);\n                    }\n                    return matchIndexes;\n                  }),\n                  \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                    for (var i = argument < 0 ? argument + length : argument; ++i < length;) {\n                      matchIndexes.push(i);\n                    }\n                    return matchIndexes;\n                  })\n                }\n              };\n              function siblingCheck(a, b, ret) {\n                if (a === b) {\n                  return ret;\n                }\n                var cur = a.nextSibling;\n                while (cur) {\n                  if (cur === b) {\n                    return -1;\n                  }\n                  cur = cur.nextSibling;\n                }\n                return 1;\n              }\n              sortOrder = docElem.compareDocumentPosition ? function (a, b) {\n                if (a === b) {\n                  hasDuplicate = true;\n                  return 0;\n                }\n                return (!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition : a.compareDocumentPosition(b) & 4) ? -1 : 1;\n              } : function (a, b) {\n                // The nodes are identical, we can exit early\n                if (a === b) {\n                  hasDuplicate = true;\n                  return 0;\n\n                  // Fallback to using sourceIndex (in IE) if it's available on both nodes\n                } else if (a.sourceIndex && b.sourceIndex) {\n                  return a.sourceIndex - b.sourceIndex;\n                }\n                var al,\n                  bl,\n                  ap = [],\n                  bp = [],\n                  aup = a.parentNode,\n                  bup = b.parentNode,\n                  cur = aup;\n\n                // If the nodes are siblings (or identical) we can do a quick check\n                if (aup === bup) {\n                  return siblingCheck(a, b);\n\n                  // If no parents were found then the nodes are disconnected\n                } else if (!aup) {\n                  return -1;\n                } else if (!bup) {\n                  return 1;\n                }\n\n                // Otherwise they're somewhere else in the tree so we need\n                // to build up a full list of the parentNodes for comparison\n                while (cur) {\n                  ap.unshift(cur);\n                  cur = cur.parentNode;\n                }\n                cur = bup;\n                while (cur) {\n                  bp.unshift(cur);\n                  cur = cur.parentNode;\n                }\n                al = ap.length;\n                bl = bp.length;\n\n                // Start walking down the tree looking for a discrepancy\n                for (var i = 0; i < al && i < bl; i++) {\n                  if (ap[i] !== bp[i]) {\n                    return siblingCheck(ap[i], bp[i]);\n                  }\n                }\n\n                // We ended someplace up the tree so do a sibling check\n                return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1);\n              };\n\n              // Always assume the presence of duplicates if sort doesn't\n              // pass them to our comparison function (as in Google Chrome).\n              [0, 0].sort(sortOrder);\n              baseHasDuplicate = !hasDuplicate;\n\n              // Document sorting and removing duplicates\n              Sizzle.uniqueSort = function (results) {\n                var elem,\n                  duplicates = [],\n                  i = 1,\n                  j = 0;\n                hasDuplicate = baseHasDuplicate;\n                results.sort(sortOrder);\n                if (hasDuplicate) {\n                  for (; elem = results[i]; i++) {\n                    if (elem === results[i - 1]) {\n                      j = duplicates.push(i);\n                    }\n                  }\n                  while (j--) {\n                    results.splice(duplicates[j], 1);\n                  }\n                }\n                return results;\n              };\n              Sizzle.error = function (msg) {\n                throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n              };\n              function tokenize(selector, parseOnly) {\n                var matched,\n                  match,\n                  tokens,\n                  type,\n                  soFar,\n                  groups,\n                  preFilters,\n                  cached = tokenCache[expando][selector + \" \"];\n                if (cached) {\n                  return parseOnly ? 0 : cached.slice(0);\n                }\n                soFar = selector;\n                groups = [];\n                preFilters = Expr.preFilter;\n                while (soFar) {\n                  // Comma and first run\n                  if (!matched || (match = rcomma.exec(soFar))) {\n                    if (match) {\n                      // Don't consume trailing commas as valid\n                      soFar = soFar.slice(match[0].length) || soFar;\n                    }\n                    groups.push(tokens = []);\n                  }\n                  matched = false;\n\n                  // Combinators\n                  if (match = rcombinators.exec(soFar)) {\n                    tokens.push(matched = new Token(match.shift()));\n                    soFar = soFar.slice(matched.length);\n\n                    // Cast descendant combinators to space\n                    matched.type = match[0].replace(rtrim, \" \");\n                  }\n\n                  // Filters\n                  for (type in Expr.filter) {\n                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n                      tokens.push(matched = new Token(match.shift()));\n                      soFar = soFar.slice(matched.length);\n                      matched.type = type;\n                      matched.matches = match;\n                    }\n                  }\n                  if (!matched) {\n                    break;\n                  }\n                }\n\n                // Return the length of the invalid excess\n                // if we're just parsing\n                // Otherwise, throw an error or return tokens\n                return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n                // Cache the tokens\n                tokenCache(selector, groups).slice(0);\n              }\n              function addCombinator(matcher, combinator, base) {\n                var dir = combinator.dir,\n                  checkNonElements = base && combinator.dir === \"parentNode\",\n                  doneName = done++;\n                return combinator.first ?\n                // Check against closest ancestor/preceding element\n                function (elem, context, xml) {\n                  while (elem = elem[dir]) {\n                    if (checkNonElements || elem.nodeType === 1) {\n                      return matcher(elem, context, xml);\n                    }\n                  }\n                } :\n                // Check against all ancestor/preceding elements\n                function (elem, context, xml) {\n                  // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n                  if (!xml) {\n                    var cache,\n                      dirkey = dirruns + \" \" + doneName + \" \",\n                      cachedkey = dirkey + cachedruns;\n                    while (elem = elem[dir]) {\n                      if (checkNonElements || elem.nodeType === 1) {\n                        if ((cache = elem[expando]) === cachedkey) {\n                          return elem.sizset;\n                        } else if (typeof cache === \"string\" && cache.indexOf(dirkey) === 0) {\n                          if (elem.sizset) {\n                            return elem;\n                          }\n                        } else {\n                          elem[expando] = cachedkey;\n                          if (matcher(elem, context, xml)) {\n                            elem.sizset = true;\n                            return elem;\n                          }\n                          elem.sizset = false;\n                        }\n                      }\n                    }\n                  } else {\n                    while (elem = elem[dir]) {\n                      if (checkNonElements || elem.nodeType === 1) {\n                        if (matcher(elem, context, xml)) {\n                          return elem;\n                        }\n                      }\n                    }\n                  }\n                };\n              }\n              function elementMatcher(matchers) {\n                return matchers.length > 1 ? function (elem, context, xml) {\n                  var i = matchers.length;\n                  while (i--) {\n                    if (!matchers[i](elem, context, xml)) {\n                      return false;\n                    }\n                  }\n                  return true;\n                } : matchers[0];\n              }\n              function condense(unmatched, map, filter, context, xml) {\n                var elem,\n                  newUnmatched = [],\n                  i = 0,\n                  len = unmatched.length,\n                  mapped = map != null;\n                for (; i < len; i++) {\n                  if (elem = unmatched[i]) {\n                    if (!filter || filter(elem, context, xml)) {\n                      newUnmatched.push(elem);\n                      if (mapped) {\n                        map.push(i);\n                      }\n                    }\n                  }\n                }\n                return newUnmatched;\n              }\n              function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n                if (postFilter && !postFilter[expando]) {\n                  postFilter = setMatcher(postFilter);\n                }\n                if (postFinder && !postFinder[expando]) {\n                  postFinder = setMatcher(postFinder, postSelector);\n                }\n                return markFunction(function (seed, results, context, xml) {\n                  var temp,\n                    i,\n                    elem,\n                    preMap = [],\n                    postMap = [],\n                    preexisting = results.length,\n                    // Get initial elements from seed or context\n                    elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n                    // Prefilter to get matcher input, preserving a map for seed-results synchronization\n                    matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n                    matcherOut = matcher ?\n                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n                    postFinder || (seed ? preFilter : preexisting || postFilter) ?\n                    // ...intermediate processing is necessary\n                    [] :\n                    // ...otherwise use results directly\n                    results : matcherIn;\n\n                  // Find primary matches\n                  if (matcher) {\n                    matcher(matcherIn, matcherOut, context, xml);\n                  }\n\n                  // Apply postFilter\n                  if (postFilter) {\n                    temp = condense(matcherOut, postMap);\n                    postFilter(temp, [], context, xml);\n\n                    // Un-match failing elements by moving them back to matcherIn\n                    i = temp.length;\n                    while (i--) {\n                      if (elem = temp[i]) {\n                        matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n                      }\n                    }\n                  }\n                  if (seed) {\n                    if (postFinder || preFilter) {\n                      if (postFinder) {\n                        // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                        temp = [];\n                        i = matcherOut.length;\n                        while (i--) {\n                          if (elem = matcherOut[i]) {\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push(matcherIn[i] = elem);\n                          }\n                        }\n                        postFinder(null, matcherOut = [], temp, xml);\n                      }\n\n                      // Move matched elements from seed to results to keep them synchronized\n                      i = matcherOut.length;\n                      while (i--) {\n                        if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\n                          seed[temp] = !(results[temp] = elem);\n                        }\n                      }\n                    }\n\n                    // Add elements to results, through postFinder if defined\n                  } else {\n                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n                    if (postFinder) {\n                      postFinder(null, results, matcherOut, xml);\n                    } else {\n                      push.apply(results, matcherOut);\n                    }\n                  }\n                });\n              }\n              function matcherFromTokens(tokens) {\n                var checkContext,\n                  matcher,\n                  j,\n                  len = tokens.length,\n                  leadingRelative = Expr.relative[tokens[0].type],\n                  implicitRelative = leadingRelative || Expr.relative[\" \"],\n                  i = leadingRelative ? 1 : 0,\n                  // The foundational matcher ensures that elements are reachable from top-level context(s)\n                  matchContext = addCombinator(function (elem) {\n                    return elem === checkContext;\n                  }, implicitRelative, true),\n                  matchAnyContext = addCombinator(function (elem) {\n                    return indexOf.call(checkContext, elem) > -1;\n                  }, implicitRelative, true),\n                  matchers = [function (elem, context, xml) {\n                    return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n                  }];\n                for (; i < len; i++) {\n                  if (matcher = Expr.relative[tokens[i].type]) {\n                    matchers = [addCombinator(elementMatcher(matchers), matcher)];\n                  } else {\n                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n                    // Return special upon seeing a positional matcher\n                    if (matcher[expando]) {\n                      // Find the next relative operator (if any) for proper handling\n                      j = ++i;\n                      for (; j < len; j++) {\n                        if (Expr.relative[tokens[j].type]) {\n                          break;\n                        }\n                      }\n                      return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && tokens.slice(0, i - 1).join(\"\").replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && tokens.join(\"\"));\n                    }\n                    matchers.push(matcher);\n                  }\n                }\n                return elementMatcher(matchers);\n              }\n              function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n                var bySet = setMatchers.length > 0,\n                  byElement = elementMatchers.length > 0,\n                  superMatcher = function (seed, context, xml, results, expandContext) {\n                    var elem,\n                      j,\n                      matcher,\n                      setMatched = [],\n                      matchedCount = 0,\n                      i = \"0\",\n                      unmatched = seed && [],\n                      outermost = expandContext != null,\n                      contextBackup = outermostContext,\n                      // We must always have either seed elements or context\n                      elems = seed || byElement && Expr.find[\"TAG\"](\"*\", expandContext && context.parentNode || context),\n                      // Nested matchers should use non-integer dirruns\n                      dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.E;\n                    if (outermost) {\n                      outermostContext = context !== document && context;\n                      cachedruns = superMatcher.el;\n                    }\n\n                    // Add elements passing elementMatchers directly to results\n                    for (; (elem = elems[i]) != null; i++) {\n                      if (byElement && elem) {\n                        for (j = 0; matcher = elementMatchers[j]; j++) {\n                          if (matcher(elem, context, xml)) {\n                            results.push(elem);\n                            break;\n                          }\n                        }\n                        if (outermost) {\n                          dirruns = dirrunsUnique;\n                          cachedruns = ++superMatcher.el;\n                        }\n                      }\n\n                      // Track unmatched elements for set filters\n                      if (bySet) {\n                        // They will have gone through all possible matchers\n                        if (elem = !matcher && elem) {\n                          matchedCount--;\n                        }\n\n                        // Lengthen the array for every element, matched or not\n                        if (seed) {\n                          unmatched.push(elem);\n                        }\n                      }\n                    }\n\n                    // Apply set filters to unmatched elements\n                    matchedCount += i;\n                    if (bySet && i !== matchedCount) {\n                      for (j = 0; matcher = setMatchers[j]; j++) {\n                        matcher(unmatched, setMatched, context, xml);\n                      }\n                      if (seed) {\n                        // Reintegrate element matches to eliminate the need for sorting\n                        if (matchedCount > 0) {\n                          while (i--) {\n                            if (!(unmatched[i] || setMatched[i])) {\n                              setMatched[i] = pop.call(results);\n                            }\n                          }\n                        }\n\n                        // Discard index placeholder values to get only actual matches\n                        setMatched = condense(setMatched);\n                      }\n\n                      // Add matches to results\n                      push.apply(results, setMatched);\n\n                      // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                      if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n                        Sizzle.uniqueSort(results);\n                      }\n                    }\n\n                    // Override manipulation of globals by nested matchers\n                    if (outermost) {\n                      dirruns = dirrunsUnique;\n                      outermostContext = contextBackup;\n                    }\n                    return unmatched;\n                  };\n                superMatcher.el = 0;\n                return bySet ? markFunction(superMatcher) : superMatcher;\n              }\n              compile = Sizzle.compile = function (selector, group /* Internal Use Only */) {\n                var i,\n                  setMatchers = [],\n                  elementMatchers = [],\n                  cached = compilerCache[expando][selector + \" \"];\n                if (!cached) {\n                  // Generate a function of recursive functions that can be used to check each element\n                  if (!group) {\n                    group = tokenize(selector);\n                  }\n                  i = group.length;\n                  while (i--) {\n                    cached = matcherFromTokens(group[i]);\n                    if (cached[expando]) {\n                      setMatchers.push(cached);\n                    } else {\n                      elementMatchers.push(cached);\n                    }\n                  }\n\n                  // Cache the compiled function\n                  cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n                }\n                return cached;\n              };\n              function multipleContexts(selector, contexts, results) {\n                var i = 0,\n                  len = contexts.length;\n                for (; i < len; i++) {\n                  Sizzle(selector, contexts[i], results);\n                }\n                return results;\n              }\n              function select(selector, context, results, seed, xml) {\n                var i,\n                  tokens,\n                  token,\n                  type,\n                  find,\n                  match = tokenize(selector),\n                  j = match.length;\n                if (!seed) {\n                  // Try to minimize operations if there is only one group\n                  if (match.length === 1) {\n                    // Take a shortcut and set the context if the root selector is an ID\n                    tokens = match[0] = match[0].slice(0);\n                    if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && !xml && Expr.relative[tokens[1].type]) {\n                      context = Expr.find[\"ID\"](token.matches[0].replace(rbackslash, \"\"), context, xml)[0];\n                      if (!context) {\n                        return results;\n                      }\n                      selector = selector.slice(tokens.shift().length);\n                    }\n\n                    // Fetch a seed set for right-to-left matching\n                    for (i = matchExpr[\"POS\"].test(selector) ? -1 : tokens.length - 1; i >= 0; i--) {\n                      token = tokens[i];\n\n                      // Abort if we hit a combinator\n                      if (Expr.relative[type = token.type]) {\n                        break;\n                      }\n                      if (find = Expr.find[type]) {\n                        // Search, expanding context for leading sibling combinators\n                        if (seed = find(token.matches[0].replace(rbackslash, \"\"), rsibling.test(tokens[0].type) && context.parentNode || context, xml)) {\n                          // If seed is empty or no tokens remain, we can return early\n                          tokens.splice(i, 1);\n                          selector = seed.length && tokens.join(\"\");\n                          if (!selector) {\n                            push.apply(results, slice.call(seed, 0));\n                            return results;\n                          }\n                          break;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                // Compile and execute a filtering function\n                // Provide `match` to avoid retokenization if we modified the selector above\n                compile(selector, match)(seed, context, xml, results, rsibling.test(selector));\n                return results;\n              }\n              if (document.querySelectorAll) {\n                (function () {\n                  var disconnectedMatch,\n                    oldSelect = select,\n                    rescape = /'|\\\\/g,\n                    rattributeQuotes = /\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n                    // qSa(:focus) reports false when true (Chrome 21), no need to also add to buggyMatches since matches checks buggyQSA\n                    // A support test would require too much code (would include document ready)\n                    rbuggyQSA = [\":focus\"],\n                    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n                    // A support test would require too much code (would include document ready)\n                    // just skip matchesSelector for :active\n                    rbuggyMatches = [\":active\"],\n                    matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector;\n\n                  // Build QSA regex\n                  // Regex strategy adopted from Diego Perini\n                  assert(function (div) {\n                    // Select is set to empty string on purpose\n                    // This is to test IE's treatment of not explictly\n                    // setting a boolean content attribute,\n                    // since its presence should be enough\n                    // http://bugs.jqx.com/ticket/12359\n                    div.innerHTML = \"<select><option selected=''></option></select>\";\n\n                    // IE8 - Some boolean attributes are not treated correctly\n                    if (!div.querySelectorAll(\"[selected]\").length) {\n                      rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\");\n                    }\n\n                    // Webkit/Opera - :checked should return selected option elements\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                    // IE8 throws error here (do not put tests after this one)\n                    if (!div.querySelectorAll(\":checked\").length) {\n                      rbuggyQSA.push(\":checked\");\n                    }\n                  });\n                  assert(function (div) {\n                    // Opera 10-12/IE9 - ^= $= *= and empty values\n                    // Should not select anything\n                    div.innerHTML = \"<p test=''></p>\";\n                    if (div.querySelectorAll(\"[test^='']\").length) {\n                      rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:\\\"\\\"|'')\");\n                    }\n\n                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n                    // IE8 throws error here (do not put tests after this one)\n                    div.innerHTML = \"<input type='hidden'/>\";\n                    if (!div.querySelectorAll(\":enabled\").length) {\n                      rbuggyQSA.push(\":enabled\", \":disabled\");\n                    }\n                  });\n\n                  // rbuggyQSA always contains :focus, so no need for a length check\n                  rbuggyQSA = /* rbuggyQSA.length && */new RegExp(rbuggyQSA.join(\"|\"));\n                  select = function (selector, context, results, seed, xml) {\n                    // Only use querySelectorAll when not filtering,\n                    // when this is not xml,\n                    // and when no QSA bugs apply\n                    if (!seed && !xml && !rbuggyQSA.test(selector)) {\n                      var groups,\n                        i,\n                        old = true,\n                        nid = expando,\n                        newContext = context,\n                        newSelector = context.nodeType === 9 && selector;\n\n                      // qSA works strangely on Element-rooted queries\n                      // We can work around this by specifying an extra ID on the root\n                      // and working up from there (Thanks to Andrew Dupont for the technique)\n                      // IE 8 doesn't work on object elements\n                      if (context.nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n                        groups = tokenize(selector);\n                        if (old = context.getAttribute(\"id\")) {\n                          nid = old.replace(rescape, \"\\\\$&\");\n                        } else {\n                          context.setAttribute(\"id\", nid);\n                        }\n                        nid = \"[id='\" + nid + \"'] \";\n                        i = groups.length;\n                        while (i--) {\n                          groups[i] = nid + groups[i].join(\"\");\n                        }\n                        newContext = rsibling.test(selector) && context.parentNode || context;\n                        newSelector = groups.join(\",\");\n                      }\n                      if (newSelector) {\n                        try {\n                          push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));\n                          return results;\n                        } catch (qsaError) {} finally {\n                          if (!old) {\n                            context.removeAttribute(\"id\");\n                          }\n                        }\n                      }\n                    }\n                    return oldSelect(selector, context, results, seed, xml);\n                  };\n                  if (matches) {\n                    assert(function (div) {\n                      // Check to see if it's possible to do matchesSelector\n                      // on a disconnected node (IE 9)\n                      disconnectedMatch = matches.call(div, \"div\");\n\n                      // This should fail with an exception\n                      // Gecko does not error, returns false instead\n                      try {\n                        matches.call(div, \"[test!='']:sizzle\");\n                        rbuggyMatches.push(\"!=\", pseudos);\n                      } catch (e) {}\n                    });\n\n                    // rbuggyMatches always contains :active and :focus, so no need for a length check\n                    rbuggyMatches = /* rbuggyMatches.length && */new RegExp(rbuggyMatches.join(\"|\"));\n                    Sizzle.matchesSelector = function (elem, expr) {\n                      // Make sure that attribute selectors are quoted\n                      expr = expr.replace(rattributeQuotes, \"='$1']\");\n\n                      // rbuggyMatches always contains :active, so no need for an existence check\n                      if (!isXML(elem) && !rbuggyMatches.test(expr) && !rbuggyQSA.test(expr)) {\n                        try {\n                          var ret = matches.call(elem, expr);\n\n                          // IE 9's matchesSelector returns false on disconnected nodes\n                          if (ret || disconnectedMatch ||\n                          // As well, disconnected nodes are said to be in a document\n                          // fragment in IE 9\n                          elem.document && elem.document.nodeType !== 11) {\n                            return ret;\n                          }\n                        } catch (e) {}\n                      }\n                      return Sizzle(expr, null, null, [elem]).length > 0;\n                    };\n                  }\n                })();\n              }\n\n              // Deprecated\n              Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n              // Back-compat\n              function setFilters() {}\n              Expr.filters = setFilters.prototype = Expr.pseudos;\n              Expr.setFilters = new setFilters();\n\n              // Override sizzle attribute retrieval\n              Sizzle.attr = JQXLite.attr;\n              JQXLite.find = Sizzle;\n              JQXLite.expr = Sizzle.selectors;\n              JQXLite.expr[\":\"] = JQXLite.expr.pseudos;\n              JQXLite.unique = Sizzle.uniqueSort;\n              JQXLite.text = Sizzle.getText;\n              JQXLite.isXMLDoc = Sizzle.isXML;\n              JQXLite.contains = Sizzle.contains;\n            })(window);\n            var runtil = /Until$/,\n              rparentsprev = /^(?:parents|prev(?:Until|All))/,\n              isSimple = /^.[^:#\\[\\.,]*$/,\n              rneedsContext = JQXLite.expr.match.needsContext,\n              // methods guaranteed to produce a unique set when starting from a unique set\n              guaranteedUnique = {\n                children: true,\n                contents: true,\n                next: true,\n                prev: true\n              };\n            JQXLite.fn.extend({\n              find: function (selector) {\n                var i,\n                  l,\n                  length,\n                  n,\n                  r,\n                  ret,\n                  self = this;\n                if (typeof selector !== \"string\") {\n                  return JQXLite(selector).filter(function () {\n                    for (i = 0, l = self.length; i < l; i++) {\n                      if (JQXLite.contains(self[i], this)) {\n                        return true;\n                      }\n                    }\n                  });\n                }\n                ret = this.pushStack(\"\", \"find\", selector);\n                for (i = 0, l = this.length; i < l; i++) {\n                  length = ret.length;\n                  JQXLite.find(selector, this[i], ret);\n                  if (i > 0) {\n                    // Make sure that the results are unique\n                    for (n = length; n < ret.length; n++) {\n                      for (r = 0; r < length; r++) {\n                        if (ret[r] === ret[n]) {\n                          ret.splice(n--, 1);\n                          break;\n                        }\n                      }\n                    }\n                  }\n                }\n                return ret;\n              },\n              has: function (target) {\n                var i,\n                  targets = JQXLite(target, this),\n                  len = targets.length;\n                return this.filter(function () {\n                  for (i = 0; i < len; i++) {\n                    if (JQXLite.contains(this, targets[i])) {\n                      return true;\n                    }\n                  }\n                });\n              },\n              not: function (selector) {\n                return this.pushStack(winnow(this, selector, false), \"not\", selector);\n              },\n              filter: function (selector) {\n                return this.pushStack(winnow(this, selector, true), \"filter\", selector);\n              },\n              is: function (selector) {\n                return !!selector && (typeof selector === \"string\" ?\n                // If this is a positional/relative selector, check membership in the returned set\n                // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n                rneedsContext.test(selector) ? JQXLite(selector, this.context).index(this[0]) >= 0 : JQXLite.filter(selector, this).length > 0 : this.filter(selector).length > 0);\n              },\n              closest: function (selectors, context) {\n                var cur,\n                  i = 0,\n                  l = this.length,\n                  ret = [],\n                  pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? JQXLite(selectors, context || this.context) : 0;\n                for (; i < l; i++) {\n                  cur = this[i];\n                  while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {\n                    if (pos ? pos.index(cur) > -1 : JQXLite.find.matchesSelector(cur, selectors)) {\n                      ret.push(cur);\n                      break;\n                    }\n                    cur = cur.parentNode;\n                  }\n                }\n                ret = ret.length > 1 ? JQXLite.unique(ret) : ret;\n                return this.pushStack(ret, \"closest\", selectors);\n              },\n              // Determine the position of an element within\n              // the matched set of elements\n              index: function (elem) {\n                // No argument, return index in parent\n                if (!elem) {\n                  return this[0] && this[0].parentNode ? this.prevAll().length : -1;\n                }\n\n                // index in selector\n                if (typeof elem === \"string\") {\n                  return JQXLite.inArray(this[0], JQXLite(elem));\n                }\n\n                // Locate the position of the desired element\n                return JQXLite.inArray(\n                // If it receives a JQXLite object, the first element is used\n                elem.jqx ? elem[0] : elem, this);\n              },\n              add: function (selector, context) {\n                var set = typeof selector === \"string\" ? JQXLite(selector, context) : JQXLite.makeArray(selector && selector.nodeType ? [selector] : selector),\n                  all = JQXLite.merge(this.get(), set);\n                return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : JQXLite.unique(all));\n              },\n              addBack: function (selector) {\n                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n              }\n            });\n            JQXLite.fn.andSelf = JQXLite.fn.addBack;\n\n            // A painfully simple check to see if an element is disconnected\n            // from a document (should be improved, where feasible).\n            function isDisconnected(node) {\n              return !node || !node.parentNode || node.parentNode.nodeType === 11;\n            }\n            function sibling(cur, dir) {\n              do {\n                cur = cur[dir];\n              } while (cur && cur.nodeType !== 1);\n              return cur;\n            }\n            JQXLite.each({\n              parent: function (elem) {\n                var parent = elem.parentNode;\n                return parent && parent.nodeType !== 11 ? parent : null;\n              },\n              parents: function (elem) {\n                return JQXLite.dir(elem, \"parentNode\");\n              },\n              parentsUntil: function (elem, i, until) {\n                return JQXLite.dir(elem, \"parentNode\", until);\n              },\n              next: function (elem) {\n                return sibling(elem, \"nextSibling\");\n              },\n              prev: function (elem) {\n                return sibling(elem, \"previousSibling\");\n              },\n              nextAll: function (elem) {\n                return JQXLite.dir(elem, \"nextSibling\");\n              },\n              prevAll: function (elem) {\n                return JQXLite.dir(elem, \"previousSibling\");\n              },\n              nextUntil: function (elem, i, until) {\n                return JQXLite.dir(elem, \"nextSibling\", until);\n              },\n              prevUntil: function (elem, i, until) {\n                return JQXLite.dir(elem, \"previousSibling\", until);\n              },\n              siblings: function (elem) {\n                return JQXLite.sibling((elem.parentNode || {}).firstChild, elem);\n              },\n              children: function (elem) {\n                return JQXLite.sibling(elem.firstChild);\n              },\n              contents: function (elem) {\n                return JQXLite.nodeName(elem, \"iframe\") ? elem.contentDocument || elem.contentWindow.document : JQXLite.merge([], elem.childNodes);\n              }\n            }, function (name, fn) {\n              JQXLite.fn[name] = function (until, selector) {\n                var ret = JQXLite.map(this, fn, until);\n                if (!runtil.test(name)) {\n                  selector = until;\n                }\n                if (selector && typeof selector === \"string\") {\n                  ret = JQXLite.filter(selector, ret);\n                }\n                ret = this.length > 1 && !guaranteedUnique[name] ? JQXLite.unique(ret) : ret;\n                if (this.length > 1 && rparentsprev.test(name)) {\n                  ret = ret.reverse();\n                }\n                return this.pushStack(ret, name, core_slice.call(arguments).join(\",\"));\n              };\n            });\n            JQXLite.extend({\n              filter: function (expr, elems, not) {\n                if (not) {\n                  expr = \":not(\" + expr + \")\";\n                }\n                return elems.length === 1 ? JQXLite.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : JQXLite.find.matches(expr, elems);\n              },\n              dir: function (elem, dir, until) {\n                var matched = [],\n                  cur = elem[dir];\n                while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !JQXLite(cur).is(until))) {\n                  if (cur.nodeType === 1) {\n                    matched.push(cur);\n                  }\n                  cur = cur[dir];\n                }\n                return matched;\n              },\n              sibling: function (n, elem) {\n                var r = [];\n                for (; n; n = n.nextSibling) {\n                  if (n.nodeType === 1 && n !== elem) {\n                    r.push(n);\n                  }\n                }\n                return r;\n              }\n            });\n\n            // Implement the identical functionality for filter and not\n            function winnow(elements, qualifier, keep) {\n              // Can't pass null or undefined to indexOf in Firefox 4\n              // Set to 0 to skip string check\n              qualifier = qualifier || 0;\n              if (JQXLite.isFunction(qualifier)) {\n                return JQXLite.grep(elements, function (elem, i) {\n                  var retVal = !!qualifier.call(elem, i, elem);\n                  return retVal === keep;\n                });\n              } else if (qualifier.nodeType) {\n                return JQXLite.grep(elements, function (elem, i) {\n                  return elem === qualifier === keep;\n                });\n              } else if (typeof qualifier === \"string\") {\n                var filtered = JQXLite.grep(elements, function (elem) {\n                  return elem.nodeType === 1;\n                });\n                if (isSimple.test(qualifier)) {\n                  return JQXLite.filter(qualifier, filtered, !keep);\n                } else {\n                  qualifier = JQXLite.filter(qualifier, filtered);\n                }\n              }\n              return JQXLite.grep(elements, function (elem, i) {\n                return JQXLite.inArray(elem, qualifier) >= 0 === keep;\n              });\n            }\n            function createSafeFragment(document) {\n              var list = nodeNames.split(\"|\"),\n                safeFrag = document.createDocumentFragment();\n              if (safeFrag.createElement) {\n                while (list.length) {\n                  safeFrag.createElement(list.pop());\n                }\n              }\n              return safeFrag;\n            }\n            var nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" + \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n              rinlinejQuery = / JQXLite\\d+=\"(?:null|\\d+)\"/g,\n              rleadingWhitespace = /^\\s+/,\n              rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n              rtagName = /<([\\w:]+)/,\n              rtbody = /<tbody/i,\n              rhtml = /<|&#?\\w+;/,\n              rnoInnerhtml = /<(?:script|style|link)/i,\n              rnocache = /<(?:script|object|embed|option|style)/i,\n              rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n              rcheckableType = /^(?:checkbox|radio)$/,\n              // checked=\"checked\" or checked\n              rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n              rscriptType = /\\/(java|ecma)script/i,\n              rcleanScript = /^\\s*<!(?:\\[CDATA\\[|\\-\\-)|[\\]\\-]{2}>\\s*$/g,\n              wrapMap = {\n                option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n                legend: [1, \"<fieldset>\", \"</fieldset>\"],\n                thead: [1, \"<table>\", \"</table>\"],\n                tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n                td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n                col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n                area: [1, \"<map>\", \"</map>\"],\n                _default: [0, \"\", \"\"]\n              },\n              safeFragment = createSafeFragment(document),\n              fragmentDiv = safeFragment.appendChild(document.createElement(\"div\"));\n            wrapMap.optgroup = wrapMap.option;\n            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n            wrapMap.th = wrapMap.td;\n\n            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n            // unless wrapped in a div with non-breaking characters in front of it.\n            if (!JQXLite.support.htmlSerialize) {\n              wrapMap._default = [1, \"X<div>\", \"</div>\"];\n            }\n            JQXLite.fn.extend({\n              text: function (value) {\n                return JQXLite.access(this, function (value) {\n                  return value === undefined ? JQXLite.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n                }, null, value, arguments.length);\n              },\n              wrapAll: function (html) {\n                if (JQXLite.isFunction(html)) {\n                  return this.each(function (i) {\n                    JQXLite(this).wrapAll(html.call(this, i));\n                  });\n                }\n                if (this[0]) {\n                  // The elements to wrap the target around\n                  var wrap = JQXLite(html, this[0].ownerDocument).eq(0).clone(true);\n                  if (this[0].parentNode) {\n                    wrap.insertBefore(this[0]);\n                  }\n                  wrap.map(function () {\n                    var elem = this;\n                    while (elem.firstChild && elem.firstChild.nodeType === 1) {\n                      elem = elem.firstChild;\n                    }\n                    return elem;\n                  }).append(this);\n                }\n                return this;\n              },\n              wrapInner: function (html) {\n                if (JQXLite.isFunction(html)) {\n                  return this.each(function (i) {\n                    JQXLite(this).wrapInner(html.call(this, i));\n                  });\n                }\n                return this.each(function () {\n                  var self = JQXLite(this),\n                    contents = self.contents();\n                  if (contents.length) {\n                    contents.wrapAll(html);\n                  } else {\n                    self.append(html);\n                  }\n                });\n              },\n              wrap: function (html) {\n                var isFunction = JQXLite.isFunction(html);\n                return this.each(function (i) {\n                  JQXLite(this).wrapAll(isFunction ? html.call(this, i) : html);\n                });\n              },\n              unwrap: function () {\n                return this.parent().each(function () {\n                  if (!JQXLite.nodeName(this, \"body\")) {\n                    JQXLite(this).replaceWith(this.childNodes);\n                  }\n                }).end();\n              },\n              append: function () {\n                return this.domManip(arguments, true, function (elem) {\n                  if (this.nodeType === 1 || this.nodeType === 11) {\n                    this.appendChild(elem);\n                  }\n                });\n              },\n              prepend: function () {\n                return this.domManip(arguments, true, function (elem) {\n                  if (this.nodeType === 1 || this.nodeType === 11) {\n                    this.insertBefore(elem, this.firstChild);\n                  }\n                });\n              },\n              before: function () {\n                if (!isDisconnected(this[0])) {\n                  return this.domManip(arguments, false, function (elem) {\n                    this.parentNode.insertBefore(elem, this);\n                  });\n                }\n                if (arguments.length) {\n                  var set = JQXLite.clean(arguments);\n                  return this.pushStack(JQXLite.merge(set, this), \"before\", this.selector);\n                }\n              },\n              after: function () {\n                if (!isDisconnected(this[0])) {\n                  return this.domManip(arguments, false, function (elem) {\n                    this.parentNode.insertBefore(elem, this.nextSibling);\n                  });\n                }\n                if (arguments.length) {\n                  var set = JQXLite.clean(arguments);\n                  return this.pushStack(JQXLite.merge(this, set), \"after\", this.selector);\n                }\n              },\n              // keepData is for internal use only--do not document\n              remove: function (selector, keepData) {\n                var elem,\n                  i = 0;\n                for (; (elem = this[i]) != null; i++) {\n                  if (!selector || JQXLite.filter(selector, [elem]).length) {\n                    if (!keepData && elem.nodeType === 1) {\n                      JQXLite.cleanData(elem.getElementsByTagName(\"*\"));\n                      JQXLite.cleanData([elem]);\n                    }\n                    if (elem.parentNode) {\n                      elem.parentNode.removeChild(elem);\n                    }\n                  }\n                }\n                return this;\n              },\n              empty: function () {\n                var elem,\n                  i = 0;\n                for (; (elem = this[i]) != null; i++) {\n                  // Remove element nodes and prevent memory leaks\n                  if (elem.nodeType === 1) {\n                    JQXLite.cleanData(elem.getElementsByTagName(\"*\"));\n                  }\n\n                  // Remove any remaining nodes\n                  while (elem.firstChild) {\n                    elem.removeChild(elem.firstChild);\n                  }\n                }\n                return this;\n              },\n              clone: function (dataAndEvents, deepDataAndEvents) {\n                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n                deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n                return this.map(function () {\n                  return JQXLite.clone(this, dataAndEvents, deepDataAndEvents);\n                });\n              },\n              html: function (value) {\n                return JQXLite.access(this, function (value) {\n                  var elem = this[0] || {},\n                    i = 0,\n                    l = this.length;\n                  if (value === undefined) {\n                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n                  }\n\n                  // See if we can take a shortcut and just use innerHTML\n                  if (typeof value === \"string\" && !rnoInnerhtml.test(value) && (JQXLite.support.htmlSerialize || !rnoshimcache.test(value)) && (JQXLite.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n                    value = value.replace(rxhtmlTag, \"<$1></$2>\");\n                    try {\n                      for (; i < l; i++) {\n                        // Remove element nodes and prevent memory leaks\n                        elem = this[i] || {};\n                        if (elem.nodeType === 1) {\n                          JQXLite.cleanData(elem.getElementsByTagName(\"*\"));\n                          elem.innerHTML = value;\n                        }\n                      }\n                      elem = 0;\n\n                      // If using innerHTML throws an exception, use the fallback method\n                    } catch (e) {}\n                  }\n                  if (elem) {\n                    this.empty().append(value);\n                  }\n                }, null, value, arguments.length);\n              },\n              replaceWith: function (value) {\n                if (!isDisconnected(this[0])) {\n                  // Make sure that the elements are removed from the DOM before they are inserted\n                  // this can help fix replacing a parent with child elements\n                  if (JQXLite.isFunction(value)) {\n                    return this.each(function (i) {\n                      var self = JQXLite(this),\n                        old = self.html();\n                      self.replaceWith(value.call(this, i, old));\n                    });\n                  }\n                  if (typeof value !== \"string\") {\n                    value = JQXLite(value).detach();\n                  }\n                  return this.each(function () {\n                    var next = this.nextSibling,\n                      parent = this.parentNode;\n                    JQXLite(this).remove();\n                    if (next) {\n                      JQXLite(next).before(value);\n                    } else {\n                      JQXLite(parent).append(value);\n                    }\n                  });\n                }\n                return this.length ? this.pushStack(JQXLite(JQXLite.isFunction(value) ? value() : value), \"replaceWith\", value) : this;\n              },\n              detach: function (selector) {\n                return this.remove(selector, true);\n              },\n              domManip: function (args, table, callback) {\n                // Flatten any nested arrays\n                args = [].concat.apply([], args);\n                var results,\n                  first,\n                  fragment,\n                  iNoClone,\n                  i = 0,\n                  value = args[0],\n                  scripts = [],\n                  l = this.length;\n\n                // We can't cloneNode fragments that contain checked, in WebKit\n                if (!JQXLite.support.checkClone && l > 1 && typeof value === \"string\" && rchecked.test(value)) {\n                  return this.each(function () {\n                    JQXLite(this).domManip(args, table, callback);\n                  });\n                }\n                if (JQXLite.isFunction(value)) {\n                  return this.each(function (i) {\n                    var self = JQXLite(this);\n                    args[0] = value.call(this, i, table ? self.html() : undefined);\n                    self.domManip(args, table, callback);\n                  });\n                }\n                if (this[0]) {\n                  results = JQXLite.buildFragment(args, this, scripts);\n                  fragment = results.fragment;\n                  first = fragment.firstChild;\n                  if (fragment.childNodes.length === 1) {\n                    fragment = first;\n                  }\n                  if (first) {\n                    table = table && JQXLite.nodeName(first, \"tr\");\n\n                    // Use the original fragment for the last item instead of the first because it can end up\n                    // being emptied incorrectly in certain situations (#8070).\n                    // Fragments from the fragment cache must always be cloned and never used in place.\n                    for (iNoClone = results.cacheable || l - 1; i < l; i++) {\n                      callback.call(table && JQXLite.nodeName(this[i], \"table\") ? findOrAppend(this[i], \"tbody\") : this[i], i === iNoClone ? fragment : JQXLite.clone(fragment, true, true));\n                    }\n                  }\n\n                  // Fix #11809: Avoid leaking memory\n                  fragment = first = null;\n                  if (scripts.length) {\n                    JQXLite.each(scripts, function (i, elem) {\n                      if (elem.src) {\n                        if (JQXLite.ajax) {\n                          JQXLite.ajax({\n                            url: elem.src,\n                            type: \"GET\",\n                            dataType: \"script\",\n                            async: false,\n                            global: false,\n                            \"throws\": true\n                          });\n                        } else {\n                          JQXLite.error(\"no ajax\");\n                        }\n                      } else {\n                        JQXLite.globalEval((elem.text || elem.textContent || elem.innerHTML || \"\").replace(rcleanScript, \"\"));\n                      }\n                      if (elem.parentNode) {\n                        elem.parentNode.removeChild(elem);\n                      }\n                    });\n                  }\n                }\n                return this;\n              }\n            });\n            function findOrAppend(elem, tag) {\n              return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));\n            }\n            function cloneCopyEvent(src, dest) {\n              if (dest.nodeType !== 1 || !JQXLite.hasData(src)) {\n                return;\n              }\n              var type,\n                i,\n                l,\n                oldData = JQXLite._data(src),\n                curData = JQXLite._data(dest, oldData),\n                events = oldData.events;\n              if (events) {\n                delete curData.handle;\n                curData.events = {};\n                for (type in events) {\n                  for (i = 0, l = events[type].length; i < l; i++) {\n                    JQXLite.event.add(dest, type, events[type][i]);\n                  }\n                }\n              }\n\n              // make the cloned public data object a copy from the original\n              if (curData.data) {\n                curData.data = JQXLite.extend({}, curData.data);\n              }\n            }\n            function cloneFixAttributes(src, dest) {\n              var nodeName;\n\n              // We do not need to do anything for non-Elements\n              if (dest.nodeType !== 1) {\n                return;\n              }\n\n              // clearAttributes removes the attributes, which we don't want,\n              // but also removes the attachEvent events, which we *do* want\n              if (dest.clearAttributes) {\n                dest.clearAttributes();\n              }\n\n              // mergeAttributes, in contrast, only merges back on the\n              // original attributes, not the events\n              if (dest.mergeAttributes) {\n                dest.mergeAttributes(src);\n              }\n              nodeName = dest.nodeName.toLowerCase();\n              if (nodeName === \"object\") {\n                // IE6-10 improperly clones children of object elements using classid.\n                // IE10 throws NoModificationAllowedError if parent is null, #12132.\n                if (dest.parentNode) {\n                  dest.outerHTML = src.outerHTML;\n                }\n\n                // This path appears unavoidable for IE9. When cloning an object\n                // element in IE9, the outerHTML strategy above is not sufficient.\n                // If the src has innerHTML and the destination does not,\n                // copy the src.innerHTML into the dest.innerHTML. #10324\n                if (JQXLite.support.html5Clone && src.innerHTML && !JQXLite.trim(dest.innerHTML)) {\n                  dest.innerHTML = src.innerHTML;\n                }\n              } else if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n                // IE6-8 fails to persist the checked state of a cloned checkbox\n                // or radio button. Worse, IE6-7 fail to give the cloned element\n                // a checked appearance if the defaultChecked value isn't also set\n\n                dest.defaultChecked = dest.checked = src.checked;\n\n                // IE6-7 get confused and end up setting the value of a cloned\n                // checkbox/radio button to an empty string instead of \"on\"\n                if (dest.value !== src.value) {\n                  dest.value = src.value;\n                }\n\n                // IE6-8 fails to return the selected option to the default selected\n                // state when cloning options\n              } else if (nodeName === \"option\") {\n                dest.selected = src.defaultSelected;\n\n                // IE6-8 fails to set the defaultValue to the correct value when\n                // cloning other types of input fields\n              } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n                dest.defaultValue = src.defaultValue;\n\n                // IE blanks contents when cloning scripts\n              } else if (nodeName === \"script\" && dest.text !== src.text) {\n                dest.text = src.text;\n              }\n\n              // Event data gets referenced instead of copied if the expando\n              // gets copied too\n              dest.removeAttribute(JQXLite.expando);\n            }\n            JQXLite.buildFragment = function (args, context, scripts) {\n              var fragment,\n                cacheable,\n                cachehit,\n                first = args[0];\n\n              // Set context from what may come in as undefined or a JQXLite collection or a node\n              // Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &\n              // also doubles as fix for #8950 where plain objects caused createDocumentFragment exception\n              context = context || document;\n              context = !context.nodeType && context[0] || context;\n              context = context.ownerDocument || context;\n\n              // Only cache \"small\" (1/2 KB) HTML strings that are associated with the main document\n              // Cloning options loses the selected state, so don't cache them\n              // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment\n              // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache\n              // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501\n              if (args.length === 1 && typeof first === \"string\" && first.length < 512 && context === document && first.charAt(0) === \"<\" && !rnocache.test(first) && (JQXLite.support.checkClone || !rchecked.test(first)) && (JQXLite.support.html5Clone || !rnoshimcache.test(first))) {\n                // Mark cacheable and look for a hit\n                cacheable = true;\n                fragment = JQXLite.fragments[first];\n                cachehit = fragment !== undefined;\n              }\n              if (!fragment) {\n                fragment = context.createDocumentFragment();\n                JQXLite.clean(args, context, fragment, scripts);\n\n                // Update the cache, but only store false\n                // unless this is a second parsing of the same content\n                if (cacheable) {\n                  JQXLite.fragments[first] = cachehit && fragment;\n                }\n              }\n              return {\n                fragment: fragment,\n                cacheable: cacheable\n              };\n            };\n            JQXLite.fragments = {};\n            JQXLite.each({\n              appendTo: \"append\",\n              prependTo: \"prepend\",\n              insertBefore: \"before\",\n              insertAfter: \"after\",\n              replaceAll: \"replaceWith\"\n            }, function (name, original) {\n              JQXLite.fn[name] = function (selector) {\n                var elems,\n                  i = 0,\n                  ret = [],\n                  insert = JQXLite(selector),\n                  l = insert.length,\n                  parent = this.length === 1 && this[0].parentNode;\n                if ((parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1) {\n                  insert[original](this[0]);\n                  return this;\n                } else {\n                  for (; i < l; i++) {\n                    elems = (i > 0 ? this.clone(true) : this).get();\n                    JQXLite(insert[i])[original](elems);\n                    ret = ret.concat(elems);\n                  }\n                  return this.pushStack(ret, name, insert.selector);\n                }\n              };\n            });\n            function getAll(elem) {\n              if (typeof elem.getElementsByTagName !== \"undefined\") {\n                return elem.getElementsByTagName(\"*\");\n              } else if (typeof elem.querySelectorAll !== \"undefined\") {\n                return elem.querySelectorAll(\"*\");\n              } else {\n                return [];\n              }\n            }\n\n            // Used in clean, fixes the defaultChecked property\n            function fixDefaultChecked(elem) {\n              if (rcheckableType.test(elem.type)) {\n                elem.defaultChecked = elem.checked;\n              }\n            }\n            JQXLite.extend({\n              clone: function (elem, dataAndEvents, deepDataAndEvents) {\n                var srcElements, destElements, i, clone;\n                if (JQXLite.support.html5Clone || JQXLite.isXMLDoc(elem) || !rnoshimcache.test(\"<\" + elem.nodeName + \">\")) {\n                  clone = elem.cloneNode(true);\n\n                  // IE<=8 does not properly clone detached, unknown element nodes\n                } else {\n                  fragmentDiv.innerHTML = elem.outerHTML;\n                  fragmentDiv.removeChild(clone = fragmentDiv.firstChild);\n                }\n                if ((!JQXLite.support.noCloneEvent || !JQXLite.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !JQXLite.isXMLDoc(elem)) {\n                  // IE copies events bound via attachEvent when using cloneNode.\n                  // Calling detachEvent on the clone will also remove the events\n                  // from the original. In order to get around this, we use some\n                  // proprietary methods to clear the events. Thanks to MooTools\n                  // guys for this hotness.\n\n                  cloneFixAttributes(elem, clone);\n\n                  // Using Sizzle here is crazy slow, so we use getElementsByTagName instead\n                  srcElements = getAll(elem);\n                  destElements = getAll(clone);\n\n                  // Weird iteration because IE will replace the length property\n                  // with an element if you are cloning the body and one of the\n                  // elements on the page has a name or id of \"length\"\n                  for (i = 0; srcElements[i]; ++i) {\n                    // Ensure that the destination node is not null; Fixes #9587\n                    if (destElements[i]) {\n                      cloneFixAttributes(srcElements[i], destElements[i]);\n                    }\n                  }\n                }\n\n                // Copy the events from the original to the clone\n                if (dataAndEvents) {\n                  cloneCopyEvent(elem, clone);\n                  if (deepDataAndEvents) {\n                    srcElements = getAll(elem);\n                    destElements = getAll(clone);\n                    for (i = 0; srcElements[i]; ++i) {\n                      cloneCopyEvent(srcElements[i], destElements[i]);\n                    }\n                  }\n                }\n                srcElements = destElements = null;\n\n                // Return the cloned set\n                return clone;\n              },\n              clean: function (elems, context, fragment, scripts) {\n                var i,\n                  j,\n                  elem,\n                  tag,\n                  wrap,\n                  depth,\n                  div,\n                  hasBody,\n                  tbody,\n                  len,\n                  handleScript,\n                  jsTags,\n                  safe = context === document && safeFragment,\n                  ret = [];\n\n                // Ensure that context is a document\n                if (!context || typeof context.createDocumentFragment === \"undefined\") {\n                  context = document;\n                }\n\n                // Use the already-created safe fragment if context permits\n                for (i = 0; (elem = elems[i]) != null; i++) {\n                  if (typeof elem === \"number\") {\n                    elem += \"\";\n                  }\n                  if (!elem) {\n                    continue;\n                  }\n\n                  // Convert html string into DOM nodes\n                  if (typeof elem === \"string\") {\n                    if (!rhtml.test(elem)) {\n                      elem = context.createTextNode(elem);\n                    } else {\n                      // Ensure a safe container in which to render the html\n                      safe = safe || createSafeFragment(context);\n                      div = context.createElement(\"div\");\n                      safe.appendChild(div);\n\n                      // Fix \"XHTML\"-style tags in all browsers\n                      elem = elem.replace(rxhtmlTag, \"<$1></$2>\");\n\n                      // Go to html and back, then peel off extra wrappers\n                      tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n                      wrap = wrapMap[tag] || wrapMap._default;\n                      depth = wrap[0];\n                      div.innerHTML = wrap[1] + elem + wrap[2];\n\n                      // Move to the right depth\n                      while (depth--) {\n                        div = div.lastChild;\n                      }\n\n                      // Remove IE's autoinserted <tbody> from table fragments\n                      if (!JQXLite.support.tbody) {\n                        // String was a <table>, *may* have spurious <tbody>\n                        hasBody = rtbody.test(elem);\n                        tbody = tag === \"table\" && !hasBody ? div.firstChild && div.firstChild.childNodes :\n                        // String was a bare <thead> or <tfoot>\n                        wrap[1] === \"<table>\" && !hasBody ? div.childNodes : [];\n                        for (j = tbody.length - 1; j >= 0; --j) {\n                          if (JQXLite.nodeName(tbody[j], \"tbody\") && !tbody[j].childNodes.length) {\n                            tbody[j].parentNode.removeChild(tbody[j]);\n                          }\n                        }\n                      }\n\n                      // IE completely kills leading whitespace when innerHTML is used\n                      if (!JQXLite.support.leadingWhitespace && rleadingWhitespace.test(elem)) {\n                        div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);\n                      }\n                      elem = div.childNodes;\n\n                      // Take out of fragment container (we need a fresh div each time)\n                      div.parentNode.removeChild(div);\n                    }\n                  }\n                  if (elem.nodeType) {\n                    ret.push(elem);\n                  } else {\n                    JQXLite.merge(ret, elem);\n                  }\n                }\n\n                // Fix #11356: Clear elements from safeFragment\n                if (div) {\n                  elem = div = safe = null;\n                }\n\n                // Reset defaultChecked for any radios and checkboxes\n                // about to be appended to the DOM in IE 6/7 (#8060)\n                if (!JQXLite.support.appendChecked) {\n                  for (i = 0; (elem = ret[i]) != null; i++) {\n                    if (JQXLite.nodeName(elem, \"input\")) {\n                      fixDefaultChecked(elem);\n                    } else if (typeof elem.getElementsByTagName !== \"undefined\") {\n                      JQXLite.grep(elem.getElementsByTagName(\"input\"), fixDefaultChecked);\n                    }\n                  }\n                }\n\n                // Append elements to a provided document fragment\n                if (fragment) {\n                  // Special handling of each script element\n                  handleScript = function (elem) {\n                    // Check if we consider it executable\n                    if (!elem.type || rscriptType.test(elem.type)) {\n                      // Detach the script and store it in the scripts array (if provided) or the fragment\n                      // Return truthy to indicate that it has been handled\n                      return scripts ? scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) : fragment.appendChild(elem);\n                    }\n                  };\n                  for (i = 0; (elem = ret[i]) != null; i++) {\n                    // Check if we're done after handling an executable script\n                    if (!(JQXLite.nodeName(elem, \"script\") && handleScript(elem))) {\n                      // Append to fragment and handle embedded scripts\n                      fragment.appendChild(elem);\n                      if (typeof elem.getElementsByTagName !== \"undefined\") {\n                        // handleScript alters the DOM, so use JQXLite.merge to ensure snapshot iteration\n                        jsTags = JQXLite.grep(JQXLite.merge([], elem.getElementsByTagName(\"script\")), handleScript);\n\n                        // Splice the scripts into ret after their former ancestor and advance our index beyond them\n                        ret.splice.apply(ret, [i + 1, 0].concat(jsTags));\n                        i += jsTags.length;\n                      }\n                    }\n                  }\n                }\n                return ret;\n              },\n              cleanData: function (elems, /* internal */acceptData) {\n                var data,\n                  id,\n                  elem,\n                  type,\n                  i = 0,\n                  internalKey = JQXLite.expando,\n                  cache = JQXLite.cache,\n                  deleteExpando = JQXLite.support.deleteExpando,\n                  special = JQXLite.event.special;\n                for (; (elem = elems[i]) != null; i++) {\n                  if (acceptData || JQXLite.acceptData(elem)) {\n                    id = elem[internalKey];\n                    data = id && cache[id];\n                    if (data) {\n                      if (data.events) {\n                        for (type in data.events) {\n                          if (special[type]) {\n                            JQXLite.event.remove(elem, type);\n\n                            // This is a shortcut to avoid JQXLite.event.remove's overhead\n                          } else {\n                            JQXLite.removeEvent(elem, type, data.handle);\n                          }\n                        }\n                      }\n\n                      // Remove cache only if it was not already removed by JQXLite.event.remove\n                      if (cache[id]) {\n                        delete cache[id];\n\n                        // IE does not allow us to delete expando properties from nodes,\n                        // nor does it have a removeAttribute function on Document nodes;\n                        // we must handle all of these cases\n                        if (deleteExpando) {\n                          delete elem[internalKey];\n                        } else if (elem.removeAttribute) {\n                          elem.removeAttribute(internalKey);\n                        } else {\n                          elem[internalKey] = null;\n                        }\n                        JQXLite.deletedIds.push(id);\n                      }\n                    }\n                  }\n                }\n              }\n            });\n            // Limit scope pollution from any deprecated API\n            (function () {\n              var matched, browser;\n\n              // Use of JQXLite.browser is frowned upon.\n              // More details: http://api.jqx.com/JQXLite.browser\n              // JQXLite.uaMatch maintained for back-compat\n              JQXLite.uaMatch = function (ua) {\n                ua = ua.toLowerCase();\n                var match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n                return {\n                  browser: match[1] || \"\",\n                  version: match[2] || \"0\"\n                };\n              };\n              matched = JQXLite.uaMatch(navigator.userAgent);\n              browser = {};\n              if (matched.browser) {\n                browser[matched.browser] = true;\n                browser.version = matched.version;\n              }\n\n              // Chrome is Webkit, but Webkit is also Safari.\n              if (browser.chrome) {\n                browser.webkit = true;\n              } else if (browser.webkit) {\n                browser.safari = true;\n              }\n              JQXLite.browser = browser;\n              JQXLite.sub = function () {\n                function jQuerySub(selector, context) {\n                  return new jQuerySub.fn.init(selector, context);\n                }\n                JQXLite.extend(true, jQuerySub, this);\n                jQuerySub.superclass = this;\n                jQuerySub.fn = jQuerySub.prototype = this();\n                jQuerySub.fn.constructor = jQuerySub;\n                jQuerySub.sub = this.sub;\n                jQuerySub.fn.init = function init(selector, context) {\n                  if (context && context instanceof JQXLite && !(context instanceof jQuerySub)) {\n                    context = jQuerySub(context);\n                  }\n                  return JQXLite.fn.init.call(this, selector, context, rootJQXLiteSub);\n                };\n                jQuerySub.fn.init.prototype = jQuerySub.fn;\n                var rootJQXLiteSub = jQuerySub(document);\n                return jQuerySub;\n              };\n            })();\n            var curCSS,\n              iframe,\n              iframeDoc,\n              ralpha = /alpha\\([^)]*\\)/i,\n              ropacity = /opacity=([^)]*)/,\n              rposition = /^(top|right|bottom|left)$/,\n              // swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n              // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n              rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n              rmargin = /^margin/,\n              rnumsplit = new RegExp(\"^(\" + core_pnum + \")(.*)$\", \"i\"),\n              rnumnonpx = new RegExp(\"^(\" + core_pnum + \")(?!px)[a-z%]+$\", \"i\"),\n              rrelNum = new RegExp(\"^([-+])=(\" + core_pnum + \")\", \"i\"),\n              elemdisplay = {\n                BODY: \"block\"\n              },\n              cssShow = {\n                position: \"absolute\",\n                visibility: \"hidden\",\n                display: \"block\"\n              },\n              cssNormalTransform = {\n                letterSpacing: 0,\n                fontWeight: 400\n              },\n              cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n              cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"],\n              eventsToggle = JQXLite.fn.toggle;\n\n            // return a css property mapped to a potentially vendor prefixed property\n            function vendorPropName(style, name) {\n              // shortcut for names that are not vendor prefixed\n              if (name in style) {\n                return name;\n              }\n\n              // check for vendor prefixed names\n              var capName = name.charAt(0).toUpperCase() + name.slice(1),\n                origName = name,\n                i = cssPrefixes.length;\n              while (i--) {\n                name = cssPrefixes[i] + capName;\n                if (name in style) {\n                  return name;\n                }\n              }\n              return origName;\n            }\n            function isHidden(elem, el) {\n              elem = el || elem;\n              return JQXLite.css(elem, \"display\") === \"none\" || !JQXLite.contains(elem.ownerDocument, elem);\n            }\n            function showHide(elements, show) {\n              var elem,\n                display,\n                values = [],\n                index = 0,\n                length = elements.length;\n              for (; index < length; index++) {\n                elem = elements[index];\n                if (!elem.style) {\n                  continue;\n                }\n                values[index] = JQXLite._data(elem, \"olddisplay\");\n                if (show) {\n                  // Reset the inline display of this element to learn if it is\n                  // being hidden by cascaded rules or not\n                  if (!values[index] && elem.style.display === \"none\") {\n                    elem.style.display = \"\";\n                  }\n\n                  // Set elements which have been overridden with display: none\n                  // in a stylesheet to whatever the default browser style is\n                  // for such an element\n                  if (elem.style.display === \"\" && isHidden(elem)) {\n                    values[index] = JQXLite._data(elem, \"olddisplay\", css_defaultDisplay(elem.nodeName));\n                  }\n                } else {\n                  display = curCSS(elem, \"display\");\n                  if (!values[index] && display !== \"none\") {\n                    JQXLite._data(elem, \"olddisplay\", display);\n                  }\n                }\n              }\n\n              // Set the display of most of the elements in a second loop\n              // to avoid the constant reflow\n              for (index = 0; index < length; index++) {\n                elem = elements[index];\n                if (!elem.style) {\n                  continue;\n                }\n                if (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n                  elem.style.display = show ? values[index] || \"\" : \"none\";\n                }\n              }\n              return elements;\n            }\n            JQXLite.fn.extend({\n              css: function (name, value) {\n                return JQXLite.access(this, function (elem, name, value) {\n                  return value !== undefined ? JQXLite.style(elem, name, value) : JQXLite.css(elem, name);\n                }, name, value, arguments.length > 1);\n              },\n              show: function () {\n                return showHide(this, true);\n              },\n              hide: function () {\n                return showHide(this);\n              },\n              toggle: function (state, fn2) {\n                var bool = typeof state === \"boolean\";\n                if (JQXLite.isFunction(state) && JQXLite.isFunction(fn2)) {\n                  return eventsToggle.apply(this, arguments);\n                }\n                return this.each(function () {\n                  if (bool ? state : isHidden(this)) {\n                    JQXLite(this).show();\n                  } else {\n                    JQXLite(this).hide();\n                  }\n                });\n              }\n            });\n            JQXLite.extend({\n              // Add in style property hooks for overriding the default\n              // behavior of getting and setting a style property\n              cssHooks: {\n                opacity: {\n                  get: function (elem, computed) {\n                    if (computed) {\n                      // We should always get a number back from opacity\n                      var ret = curCSS(elem, \"opacity\");\n                      return ret === \"\" ? \"1\" : ret;\n                    }\n                  }\n                }\n              },\n              // Exclude the following css properties to add px\n              cssNumber: {\n                \"fillOpacity\": true,\n                \"fontWeight\": true,\n                \"lineHeight\": true,\n                \"opacity\": true,\n                \"orphans\": true,\n                \"widows\": true,\n                \"zIndex\": true,\n                \"zoom\": true\n              },\n              // Add in properties whose names you wish to fix before\n              // setting or getting the value\n              cssProps: {\n                // normalize float css property\n                \"float\": JQXLite.support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n              },\n              // Get and set the style property on a DOM Node\n              style: function (elem, name, value, extra) {\n                // Don't set styles on text and comment nodes\n                if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n                  return;\n                }\n\n                // Make sure that we're working with the right name\n                var ret,\n                  type,\n                  hooks,\n                  origName = JQXLite.camelCase(name),\n                  style = elem.style;\n                name = JQXLite.cssProps[origName] || (JQXLite.cssProps[origName] = vendorPropName(style, origName));\n\n                // gets hook for the prefixed version\n                // followed by the unprefixed version\n                hooks = JQXLite.cssHooks[name] || JQXLite.cssHooks[origName];\n\n                // Check if we're setting a value\n                if (value !== undefined) {\n                  type = typeof value;\n\n                  // convert relative number strings (+= or -=) to relative numbers. #7345\n                  if (type === \"string\" && (ret = rrelNum.exec(value))) {\n                    value = (ret[1] + 1) * ret[2] + parseFloat(JQXLite.css(elem, name));\n                    // Fixes bug #9237\n                    type = \"number\";\n                  }\n\n                  // Make sure that NaN and null values aren't set. See: #7116\n                  if (value == null || type === \"number\" && isNaN(value)) {\n                    return;\n                  }\n\n                  // If a number was passed in, add 'px' to the (except for certain CSS properties)\n                  if (type === \"number\" && !JQXLite.cssNumber[origName]) {\n                    value += \"px\";\n                  }\n\n                  // If a hook was provided, use that value, otherwise just set the specified value\n                  if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided\n                    // Fixes bug #5509\n                    try {\n                      style[name] = value;\n                    } catch (e) {}\n                  }\n                } else {\n                  // If a hook was provided get the non-computed value from there\n                  if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n                    return ret;\n                  }\n\n                  // Otherwise just get the value from the style object\n                  return style[name];\n                }\n              },\n              css: function (elem, name, numeric, extra) {\n                var val,\n                  num,\n                  hooks,\n                  origName = JQXLite.camelCase(name);\n\n                // Make sure that we're working with the right name\n                name = JQXLite.cssProps[origName] || (JQXLite.cssProps[origName] = vendorPropName(elem.style, origName));\n\n                // gets hook for the prefixed version\n                // followed by the unprefixed version\n                hooks = JQXLite.cssHooks[name] || JQXLite.cssHooks[origName];\n\n                // If a hook was provided get the computed value from there\n                if (hooks && \"get\" in hooks) {\n                  val = hooks.get(elem, true, extra);\n                }\n\n                // Otherwise, if a way to get the computed value exists, use that\n                if (val === undefined) {\n                  val = curCSS(elem, name);\n                }\n\n                //convert \"normal\" to computed value\n                if (val === \"normal\" && name in cssNormalTransform) {\n                  val = cssNormalTransform[name];\n                }\n\n                // Return, converting to number if forced or a qualifier was provided and val looks numeric\n                if (numeric || extra !== undefined) {\n                  num = parseFloat(val);\n                  return numeric || JQXLite.isNumeric(num) ? num || 0 : val;\n                }\n                return val;\n              },\n              // A method for quickly swapping in/out CSS properties to get correct calculations\n              swap: function (elem, options, callback) {\n                var ret,\n                  name,\n                  old = {};\n\n                // Remember the old values, and insert the new ones\n                for (name in options) {\n                  old[name] = elem.style[name];\n                  elem.style[name] = options[name];\n                }\n                ret = callback.call(elem);\n\n                // Revert the old values\n                for (name in options) {\n                  elem.style[name] = old[name];\n                }\n                return ret;\n              }\n            });\n\n            // NOTE: To any future maintainer, we've window.getComputedStyle\n            // because jsdom on node.js will break without it.\n            if (window.getComputedStyle) {\n              curCSS = function (elem, name) {\n                var ret,\n                  width,\n                  minWidth,\n                  maxWidth,\n                  computed = window.getComputedStyle(elem, null),\n                  style = elem.style;\n                if (computed) {\n                  // getPropertyValue is only needed for .css('filter') in IE9, see #12537\n                  ret = computed.getPropertyValue(name) || computed[name];\n                  if (ret === \"\" && !JQXLite.contains(elem.ownerDocument, elem)) {\n                    ret = JQXLite.style(elem, name);\n                  }\n\n                  // A tribute to the \"awesome hack by Dean Edwards\"\n                  // Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n                  // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n                  // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n                  if (rnumnonpx.test(ret) && rmargin.test(name)) {\n                    width = style.width;\n                    minWidth = style.minWidth;\n                    maxWidth = style.maxWidth;\n                    style.minWidth = style.maxWidth = style.width = ret;\n                    ret = computed.width;\n                    style.width = width;\n                    style.minWidth = minWidth;\n                    style.maxWidth = maxWidth;\n                  }\n                }\n                return ret;\n              };\n            } else if (document.documentElement.currentStyle) {\n              curCSS = function (elem, name) {\n                var left,\n                  rsLeft,\n                  ret = elem.currentStyle && elem.currentStyle[name],\n                  style = elem.style;\n\n                // Avoid setting ret to empty string here\n                // so we don't default to auto\n                if (ret == null && style && style[name]) {\n                  ret = style[name];\n                }\n\n                // From the awesome hack by Dean Edwards\n                // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n                // If we're not dealing with a regular pixel number\n                // but a number that has a weird ending, we need to convert it to pixels\n                // but not position css attributes, as those are proportional to the parent element instead\n                // and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n                if (rnumnonpx.test(ret) && !rposition.test(name)) {\n                  // Remember the original values\n                  left = style.left;\n                  rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;\n\n                  // Put in the new values to get a computed value out\n                  if (rsLeft) {\n                    elem.runtimeStyle.left = elem.currentStyle.left;\n                  }\n                  style.left = name === \"fontSize\" ? \"1em\" : ret;\n                  ret = style.pixelLeft + \"px\";\n\n                  // Revert the changed values\n                  style.left = left;\n                  if (rsLeft) {\n                    elem.runtimeStyle.left = rsLeft;\n                  }\n                }\n                return ret === \"\" ? \"auto\" : ret;\n              };\n            }\n            function setPositiveNumber(elem, value, subtract) {\n              var matches = rnumsplit.exec(value);\n              return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n            }\n            function augmentWidthOrHeight(elem, name, extra, isBorderBox) {\n              var i = extra === (isBorderBox ? \"border\" : \"content\") ?\n                // If we already have the right measurement, avoid augmentation\n                4 :\n                // Otherwise initialize for horizontal or vertical properties\n                name === \"width\" ? 1 : 0,\n                val = 0;\n              for (; i < 4; i += 2) {\n                // both box models exclude margin, so add it if we want it\n                if (extra === \"margin\") {\n                  // we use JQXLite.css instead of curCSS here\n                  // because of the reliableMarginRight CSS hook!\n                  val += JQXLite.css(elem, extra + cssExpand[i], true);\n                }\n\n                // From this point on we use curCSS for maximum performance (relevant in animations)\n                if (isBorderBox) {\n                  // border-box includes padding, so remove it if we want content\n                  if (extra === \"content\") {\n                    val -= parseFloat(curCSS(elem, \"padding\" + cssExpand[i])) || 0;\n                  }\n\n                  // at this point, extra isn't border nor margin, so remove border\n                  if (extra !== \"margin\") {\n                    val -= parseFloat(curCSS(elem, \"border\" + cssExpand[i] + \"Width\")) || 0;\n                  }\n                } else {\n                  // at this point, extra isn't content, so add padding\n                  val += parseFloat(curCSS(elem, \"padding\" + cssExpand[i])) || 0;\n\n                  // at this point, extra isn't content nor padding, so add border\n                  if (extra !== \"padding\") {\n                    val += parseFloat(curCSS(elem, \"border\" + cssExpand[i] + \"Width\")) || 0;\n                  }\n                }\n              }\n              return val;\n            }\n            function getWidthOrHeight(elem, name, extra) {\n              // Start with offset property, which is equivalent to the border-box value\n              var val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n                valueIsBorderBox = true,\n                isBorderBox = JQXLite.support.boxSizing && JQXLite.css(elem, \"boxSizing\") === \"border-box\";\n\n              // some non-html elements return undefined for offsetWidth, so check for null/undefined\n              // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n              // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n              if (val <= 0 || val == null) {\n                // Fall back to computed then uncomputed css if necessary\n                val = curCSS(elem, name);\n                if (val < 0 || val == null) {\n                  val = elem.style[name];\n                }\n\n                // Computed unit is not pixels. Stop here and return.\n                if (rnumnonpx.test(val)) {\n                  return val;\n                }\n\n                // we need the check for style in case a browser which returns unreliable values\n                // for getComputedStyle silently falls back to the reliable elem.style\n                valueIsBorderBox = isBorderBox && (JQXLite.support.boxSizingReliable || val === elem.style[name]);\n\n                // Normalize \"\", auto, and prepare for extra\n                val = parseFloat(val) || 0;\n              }\n\n              // use the active box-sizing model to add/subtract irrelevant styles\n              return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox) + \"px\";\n            }\n\n            // Try to determine the default display value of an element\n            function css_defaultDisplay(nodeName) {\n              if (elemdisplay[nodeName]) {\n                return elemdisplay[nodeName];\n              }\n              var elem = JQXLite(\"<\" + nodeName + \">\").appendTo(document.body),\n                display = elem.css(\"display\");\n              elem.remove();\n\n              // If the simple way fails,\n              // get element's real default display by attaching it to a temp iframe\n              if (display === \"none\" || display === \"\") {\n                // Use the already-created iframe if possible\n                iframe = document.body.appendChild(iframe || JQXLite.extend(document.createElement(\"iframe\"), {\n                  frameBorder: 0,\n                  width: 0,\n                  height: 0\n                }));\n\n                // Create a cacheable copy of the iframe document on first call.\n                // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML\n                // document to it; WebKit & Firefox won't allow reusing the iframe document.\n                if (!iframeDoc || !iframe.createElement) {\n                  iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;\n                  iframeDoc.write(\"<!doctype html><html><body>\");\n                  iframeDoc.close();\n                }\n                elem = iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));\n                display = curCSS(elem, \"display\");\n                document.body.removeChild(iframe);\n              }\n\n              // Store the correct default display\n              elemdisplay[nodeName] = display;\n              return display;\n            }\n            JQXLite.each([\"height\", \"width\"], function (i, name) {\n              JQXLite.cssHooks[name] = {\n                get: function (elem, computed, extra) {\n                  if (computed) {\n                    // certain elements can have dimension info if we invisibly show them\n                    // however, it must have a current display style that would benefit from this\n                    if (elem.offsetWidth === 0 && rdisplayswap.test(curCSS(elem, \"display\"))) {\n                      return JQXLite.swap(elem, cssShow, function () {\n                        return getWidthOrHeight(elem, name, extra);\n                      });\n                    } else {\n                      return getWidthOrHeight(elem, name, extra);\n                    }\n                  }\n                },\n                set: function (elem, value, extra) {\n                  return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, JQXLite.support.boxSizing && JQXLite.css(elem, \"boxSizing\") === \"border-box\") : 0);\n                }\n              };\n            });\n            if (!JQXLite.support.opacity) {\n              JQXLite.cssHooks.opacity = {\n                get: function (elem, computed) {\n                  // IE uses filters for opacity\n                  return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\") ? 0.01 * parseFloat(RegExp.$1) + \"\" : computed ? \"1\" : \"\";\n                },\n                set: function (elem, value) {\n                  var style = elem.style,\n                    currentStyle = elem.currentStyle,\n                    opacity = JQXLite.isNumeric(value) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n                    filter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n                  // IE has trouble with opacity if it does not have layout\n                  // Force it by setting the zoom level\n                  style.zoom = 1;\n\n                  // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n                  if (value >= 1 && JQXLite.trim(filter.replace(ralpha, \"\")) === \"\" && style.removeAttribute) {\n                    // Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n                    // if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n                    // style.removeAttribute is IE Only, but so apparently is this code path...\n                    style.removeAttribute(\"filter\");\n\n                    // if there there is no filter style applied in a css rule, we are done\n                    if (currentStyle && !currentStyle.filter) {\n                      return;\n                    }\n                  }\n\n                  // otherwise, set new filter values\n                  style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + \" \" + opacity;\n                }\n              };\n            }\n\n            // These hooks cannot be added until DOM ready because the support test\n            // for it is not run until after DOM ready\n            JQXLite(function () {\n              if (!JQXLite.support.reliableMarginRight) {\n                JQXLite.cssHooks.marginRight = {\n                  get: function (elem, computed) {\n                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n                    // Work around by temporarily setting element display to inline-block\n                    return JQXLite.swap(elem, {\n                      \"display\": \"inline-block\"\n                    }, function () {\n                      if (computed) {\n                        return curCSS(elem, \"marginRight\");\n                      }\n                    });\n                  }\n                };\n              }\n\n              // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n              // getComputedStyle returns percent when specified for top/left/bottom/right\n              // rather than make the css module depend on the offset module, we just check for it here\n              if (!JQXLite.support.pixelPosition && JQXLite.fn.position) {\n                JQXLite.each([\"top\", \"left\"], function (i, prop) {\n                  JQXLite.cssHooks[prop] = {\n                    get: function (elem, computed) {\n                      if (computed) {\n                        var ret = curCSS(elem, prop);\n                        // if curCSS returns percentage, fallback to offset\n                        return rnumnonpx.test(ret) ? JQXLite(elem).position()[prop] + \"px\" : ret;\n                      }\n                    }\n                  };\n                });\n              }\n            });\n            if (JQXLite.expr && JQXLite.expr.filters) {\n              JQXLite.expr.filters.hidden = function (elem) {\n                return elem.offsetWidth === 0 && elem.offsetHeight === 0 || !JQXLite.support.reliableHiddenOffsets && (elem.style && elem.style.display || curCSS(elem, \"display\")) === \"none\";\n              };\n              JQXLite.expr.filters.visible = function (elem) {\n                return !JQXLite.expr.filters.hidden(elem);\n              };\n            }\n\n            // These hooks are used by animate to expand properties\n            JQXLite.each({\n              margin: \"\",\n              padding: \"\",\n              border: \"Width\"\n            }, function (prefix, suffix) {\n              JQXLite.cssHooks[prefix + suffix] = {\n                expand: function (value) {\n                  var i,\n                    // assumes a single number if not a string\n                    parts = typeof value === \"string\" ? value.split(\" \") : [value],\n                    expanded = {};\n                  for (i = 0; i < 4; i++) {\n                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n                  }\n                  return expanded;\n                }\n              };\n              if (!rmargin.test(prefix)) {\n                JQXLite.cssHooks[prefix + suffix].set = setPositiveNumber;\n              }\n            });\n            var r20 = /%20/g,\n              rbracket = /\\[\\]$/,\n              rCRLF = /\\r?\\n/g,\n              rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,\n              rselectTextarea = /^(?:select|textarea)/i;\n            JQXLite.fn.extend({\n              serialize: function () {\n                return JQXLite.param(this.serializeArray());\n              },\n              serializeArray: function () {\n                return this.map(function () {\n                  return this.elements ? JQXLite.makeArray(this.elements) : this;\n                }).filter(function () {\n                  return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));\n                }).map(function (i, elem) {\n                  var val = JQXLite(this).val();\n                  return val == null ? null : JQXLite.isArray(val) ? JQXLite.map(val, function (val, i) {\n                    return {\n                      name: elem.name,\n                      value: val.replace(rCRLF, \"\\r\\n\")\n                    };\n                  }) : {\n                    name: elem.name,\n                    value: val.replace(rCRLF, \"\\r\\n\")\n                  };\n                }).get();\n              }\n            });\n\n            //Serialize an array of form elements or a set of\n            //key/values into a query string\n            JQXLite.param = function (a, traditional) {\n              var prefix,\n                s = [],\n                add = function (key, value) {\n                  // If value is a function, invoke it and return its value\n                  value = JQXLite.isFunction(value) ? value() : value == null ? \"\" : value;\n                  s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n                };\n\n              // Set traditional to true for JQXLite <= 1.3.2 behavior.\n              if (traditional === undefined) {\n                traditional = JQXLite.ajaxSettings && JQXLite.ajaxSettings.traditional;\n              }\n\n              // If an array was passed in, assume that it is an array of form elements.\n              if (JQXLite.isArray(a) || a.jqx && !JQXLite.isPlainObject(a)) {\n                // Serialize the form elements\n                JQXLite.each(a, function () {\n                  add(this.name, this.value);\n                });\n              } else {\n                // If traditional, encode the \"old\" way (the way 1.3.2 or older\n                // did it), otherwise encode params recursively.\n                for (prefix in a) {\n                  buildParams(prefix, a[prefix], traditional, add);\n                }\n              }\n\n              // Return the resulting serialization\n              return s.join(\"&\").replace(r20, \"+\");\n            };\n            function buildParams(prefix, obj, traditional, add) {\n              var name;\n              if (JQXLite.isArray(obj)) {\n                // Serialize array item.\n                JQXLite.each(obj, function (i, v) {\n                  if (traditional || rbracket.test(prefix)) {\n                    // Treat each array item as a scalar.\n                    add(prefix, v);\n                  } else {\n                    // If array item is non-scalar (array or object), encode its\n                    // numeric index to resolve deserialization ambiguity issues.\n                    // Note that rack (as of 1.0.0) can't currently deserialize\n                    // nested arrays properly, and attempting to do so may cause\n                    // a server error. Possible fixes are to modify rack's\n                    // deserialization algorithm or to provide an option or flag\n                    // to force array serialization to be shallow.\n                    buildParams(prefix + \"[\" + (typeof v === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n                  }\n                });\n              } else if (!traditional && JQXLite.type(obj) === \"object\") {\n                // Serialize object item.\n                for (name in obj) {\n                  buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n                }\n              } else {\n                // Serialize scalar item.\n                add(prefix, obj);\n              }\n            }\n\n            // Create transport if the browser can provide an xhr\n            if (JQXLite.support.ajax) {\n              JQXLite.ajaxTransport(function (s) {\n                // Cross domain only allowed if supported through XMLHttpRequest\n                if (!s.crossDomain || JQXLite.support.cors) {\n                  var callback;\n                  return {\n                    send: function (headers, complete) {\n                      // Get a new xhr\n                      var handle,\n                        i,\n                        xhr = s.xhr();\n\n                      // Open the socket\n                      // Passing null username, generates a login popup on Opera (#2865)\n                      if (s.username) {\n                        xhr.open(s.type, s.url, s.async, s.username, s.password);\n                      } else {\n                        xhr.open(s.type, s.url, s.async);\n                      }\n\n                      // Apply custom fields if provided\n                      if (s.xhrFields) {\n                        for (i in s.xhrFields) {\n                          xhr[i] = s.xhrFields[i];\n                        }\n                      }\n\n                      // Override mime type if needed\n                      if (s.mimeType && xhr.overrideMimeType) {\n                        xhr.overrideMimeType(s.mimeType);\n                      }\n\n                      // X-Requested-With header\n                      // For cross-domain requests, seeing as conditions for a preflight are\n                      // akin to a jigsaw puzzle, we simply never set it to be sure.\n                      // (it can always be set on a per-request basis or even using ajaxSetup)\n                      // For same-domain requests, won't change header if already provided.\n                      if (!s.crossDomain && !headers[\"X-Requested-With\"]) {\n                        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                      }\n\n                      // Need an extra try/catch for cross domain requests in Firefox 3\n                      try {\n                        for (i in headers) {\n                          xhr.setRequestHeader(i, headers[i]);\n                        }\n                      } catch (_) {}\n\n                      // Do send the request\n                      // This may raise an exception which is actually\n                      // handled in JQXLite.ajax (so no try/catch here)\n                      xhr.send(s.hasContent && s.data || null);\n\n                      // Listener\n                      callback = function (_, isAbort) {\n                        var status, statusText, responseHeaders, responses, xml;\n\n                        // Firefox throws exceptions when accessing properties\n                        // of an xhr when a network error occurred\n                        // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)\n                        try {\n                          // Was never called and is aborted or complete\n                          if (callback && (isAbort || xhr.readyState === 4)) {\n                            // Only called once\n                            callback = undefined;\n\n                            // Do not keep as active anymore\n                            if (handle) {\n                              xhr.onreadystatechange = JQXLite.noop;\n                              if (xhrOnUnloadAbort) {\n                                delete xhrCallbacks[handle];\n                              }\n                            }\n\n                            // If it's an abort\n                            if (isAbort) {\n                              // Abort it manually if needed\n                              if (xhr.readyState !== 4) {\n                                xhr.abort();\n                              }\n                            } else {\n                              status = xhr.status;\n                              responseHeaders = xhr.getAllResponseHeaders();\n                              responses = {};\n                              xml = xhr.responseXML;\n\n                              // Construct response list\n                              if (xml && xml.documentElement /* #4958 */) {\n                                responses.xml = xml;\n                              }\n\n                              // When requesting binary data, IE6-9 will throw an exception\n                              // on any attempt to access responseText (#11426)\n                              try {\n                                responses.text = xhr.responseText;\n                              } catch (e) {}\n\n                              // Firefox throws an exception when accessing\n                              // statusText for faulty cross-domain requests\n                              try {\n                                statusText = xhr.statusText;\n                              } catch (e) {\n                                // We normalize with Webkit giving an empty statusText\n                                statusText = \"\";\n                              }\n\n                              // Filter status for non standard behaviors\n\n                              // If the request is local and we have data: assume a success\n                              // (success with no data won't get notified, that's the best we\n                              // can do given current implementations)\n                              if (!status && s.isLocal && !s.crossDomain) {\n                                status = responses.text ? 200 : 404;\n                                // IE - #1450: sometimes returns 1223 when it should be 204\n                              } else if (status === 1223) {\n                                status = 204;\n                              }\n                            }\n                          }\n                        } catch (firefoxAccessException) {\n                          if (!isAbort) {\n                            complete(-1, firefoxAccessException);\n                          }\n                        }\n\n                        // Call complete if needed\n                        if (responses) {\n                          complete(status, statusText, responses, responseHeaders);\n                        }\n                      };\n                      if (!s.async) {\n                        // if we're in sync mode we fire the callback\n                        callback();\n                      } else if (xhr.readyState === 4) {\n                        // (IE6 & IE7) if it's in cache and has been\n                        // retrieved directly we need to fire the callback\n                        setTimeout(callback, 0);\n                      } else {\n                        handle = ++xhrId;\n                        if (xhrOnUnloadAbort) {\n                          // Create the active xhrs callbacks list if needed\n                          // and attach the unload handler\n                          if (!xhrCallbacks) {\n                            xhrCallbacks = {};\n                            JQXLite(window).unload(xhrOnUnloadAbort);\n                          }\n                          // Add to list of active xhrs callbacks\n                          xhrCallbacks[handle] = callback;\n                        }\n                        xhr.onreadystatechange = callback;\n                      }\n                    },\n                    abort: function () {\n                      if (callback) {\n                        callback(0, 1);\n                      }\n                    }\n                  };\n                }\n              });\n            }\n            var fxNow,\n              timerId,\n              rfxtypes = /^(?:toggle|show|hide)$/,\n              rfxnum = new RegExp(\"^(?:([-+])=|)(\" + core_pnum + \")([a-z%]*)$\", \"i\"),\n              rrun = /queueHooks$/,\n              animationPrefilters = [defaultPrefilter],\n              tweeners = {\n                \"*\": [function (prop, value) {\n                  var end,\n                    unit,\n                    tween = this.createTween(prop, value),\n                    parts = rfxnum.exec(value),\n                    target = tween.cur(),\n                    start = +target || 0,\n                    scale = 1,\n                    maxIterations = 20;\n                  if (parts) {\n                    end = +parts[2];\n                    unit = parts[3] || (JQXLite.cssNumber[prop] ? \"\" : \"px\");\n\n                    // We need to compute starting value\n                    if (unit !== \"px\" && start) {\n                      // Iteratively approximate from a nonzero starting point\n                      // Prefer the current property, because this process will be trivial if it uses the same units\n                      // Fallback to end or a simple constant\n                      start = JQXLite.css(tween.elem, prop, true) || end || 1;\n                      do {\n                        // If previous iteration zeroed out, double until we get *something*\n                        // Use a string for doubling factor so we don't accidentally see scale as unchanged below\n                        scale = scale || \".5\";\n\n                        // Adjust and apply\n                        start = start / scale;\n                        JQXLite.style(tween.elem, prop, start + unit);\n\n                        // Update scale, tolerating zero or NaN from tween.cur()\n                        // And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n                      } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n                    }\n                    tween.unit = unit;\n                    tween.start = start;\n                    // If a +=/-= token was provided, we're doing a relative animation\n                    tween.end = parts[1] ? start + (parts[1] + 1) * end : end;\n                  }\n                  return tween;\n                }]\n              };\n\n            // Animations created synchronously will run synchronously\n            function createFxNow() {\n              setTimeout(function () {\n                fxNow = undefined;\n              }, 0);\n              return fxNow = JQXLite.now();\n            }\n            function createTweens(animation, props) {\n              JQXLite.each(props, function (prop, value) {\n                var collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n                  index = 0,\n                  length = collection.length;\n                for (; index < length; index++) {\n                  if (collection[index].call(animation, prop, value)) {\n                    // we're done with this property\n                    return;\n                  }\n                }\n              });\n            }\n            function Animation(elem, properties, options) {\n              var result,\n                index = 0,\n                tweenerIndex = 0,\n                length = animationPrefilters.length,\n                deferred = JQXLite.Deferred().always(function () {\n                  // don't match elem in the :animated selector\n                  delete tick.elem;\n                }),\n                tick = function () {\n                  var currentTime = fxNow || createFxNow(),\n                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n                    // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n                    temp = remaining / animation.duration || 0,\n                    percent = 1 - temp,\n                    index = 0,\n                    length = animation.tweens.length;\n                  for (; index < length; index++) {\n                    animation.tweens[index].run(percent);\n                  }\n                  deferred.notifyWith(elem, [animation, percent, remaining]);\n                  if (percent < 1 && length) {\n                    return remaining;\n                  } else {\n                    deferred.resolveWith(elem, [animation]);\n                    return false;\n                  }\n                },\n                animation = deferred.promise({\n                  elem: elem,\n                  props: JQXLite.extend({}, properties),\n                  opts: JQXLite.extend(true, {\n                    specialEasing: {}\n                  }, options),\n                  originalProperties: properties,\n                  originalOptions: options,\n                  startTime: fxNow || createFxNow(),\n                  duration: options.duration,\n                  tweens: [],\n                  createTween: function (prop, end, easing) {\n                    var tween = JQXLite.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n                    animation.tweens.push(tween);\n                    return tween;\n                  },\n                  stop: function (gotoEnd) {\n                    var index = 0,\n                      // if we are going to the end, we want to run all the tweens\n                      // otherwise we skip this part\n                      length = gotoEnd ? animation.tweens.length : 0;\n                    for (; index < length; index++) {\n                      animation.tweens[index].run(1);\n                    }\n\n                    // resolve when we played the last frame\n                    // otherwise, reject\n                    if (gotoEnd) {\n                      deferred.resolveWith(elem, [animation, gotoEnd]);\n                    } else {\n                      deferred.rejectWith(elem, [animation, gotoEnd]);\n                    }\n                    return this;\n                  }\n                }),\n                props = animation.props;\n              propFilter(props, animation.opts.specialEasing);\n              for (; index < length; index++) {\n                result = animationPrefilters[index].call(animation, elem, props, animation.opts);\n                if (result) {\n                  return result;\n                }\n              }\n              createTweens(animation, props);\n              if (JQXLite.isFunction(animation.opts.start)) {\n                animation.opts.start.call(elem, animation);\n              }\n              JQXLite.fx.timer(JQXLite.extend(tick, {\n                anim: animation,\n                queue: animation.opts.queue,\n                elem: elem\n              }));\n\n              // attach callbacks from options\n              return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n            }\n            function propFilter(props, specialEasing) {\n              var index, name, easing, value, hooks;\n\n              // camelCase, specialEasing and expand cssHook pass\n              for (index in props) {\n                name = JQXLite.camelCase(index);\n                easing = specialEasing[name];\n                value = props[index];\n                if (JQXLite.isArray(value)) {\n                  easing = value[1];\n                  value = props[index] = value[0];\n                }\n                if (index !== name) {\n                  props[name] = value;\n                  delete props[index];\n                }\n                hooks = JQXLite.cssHooks[name];\n                if (hooks && \"expand\" in hooks) {\n                  value = hooks.expand(value);\n                  delete props[name];\n\n                  // not quite $.extend, this wont overwrite keys already present.\n                  // also - reusing 'index' from above because we have the correct \"name\"\n                  for (index in value) {\n                    if (!(index in props)) {\n                      props[index] = value[index];\n                      specialEasing[index] = easing;\n                    }\n                  }\n                } else {\n                  specialEasing[name] = easing;\n                }\n              }\n            }\n            JQXLite.Animation = JQXLite.extend(Animation, {\n              tweener: function (props, callback) {\n                if (JQXLite.isFunction(props)) {\n                  callback = props;\n                  props = [\"*\"];\n                } else {\n                  props = props.split(\" \");\n                }\n                var prop,\n                  index = 0,\n                  length = props.length;\n                for (; index < length; index++) {\n                  prop = props[index];\n                  tweeners[prop] = tweeners[prop] || [];\n                  tweeners[prop].unshift(callback);\n                }\n              },\n              prefilter: function (callback, prepend) {\n                if (prepend) {\n                  animationPrefilters.unshift(callback);\n                } else {\n                  animationPrefilters.push(callback);\n                }\n              }\n            });\n            function defaultPrefilter(elem, props, opts) {\n              var index,\n                prop,\n                value,\n                length,\n                dataShow,\n                toggle,\n                tween,\n                hooks,\n                oldfire,\n                anim = this,\n                style = elem.style,\n                orig = {},\n                handled = [],\n                hidden = elem.nodeType && isHidden(elem);\n\n              // handle queue: false promises\n              if (!opts.queue) {\n                hooks = JQXLite._queueHooks(elem, \"fx\");\n                if (hooks.unqueued == null) {\n                  hooks.unqueued = 0;\n                  oldfire = hooks.empty.fire;\n                  hooks.empty.fire = function () {\n                    if (!hooks.unqueued) {\n                      oldfire();\n                    }\n                  };\n                }\n                hooks.unqueued++;\n                anim.always(function () {\n                  // doing this makes sure that the complete handler will be called\n                  // before this completes\n                  anim.always(function () {\n                    hooks.unqueued--;\n                    if (!JQXLite.queue(elem, \"fx\").length) {\n                      hooks.empty.fire();\n                    }\n                  });\n                });\n              }\n\n              // height/width overflow pass\n              if (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n                // Make sure that nothing sneaks out\n                // Record all 3 overflow attributes because IE does not\n                // change the overflow attribute when overflowX and\n                // overflowY are set to the same value\n                opts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n                // Set display property to inline-block for height/width\n                // animations on inline elements that are having width/height animated\n                if (JQXLite.css(elem, \"display\") === \"inline\" && JQXLite.css(elem, \"float\") === \"none\") {\n                  // inline-level elements accept inline-block;\n                  // block-level elements need to be inline with layout\n                  if (!JQXLite.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === \"inline\") {\n                    style.display = \"inline-block\";\n                  } else {\n                    style.zoom = 1;\n                  }\n                }\n              }\n              if (opts.overflow) {\n                style.overflow = \"hidden\";\n                if (!JQXLite.support.shrinkWrapBlocks) {\n                  anim.done(function () {\n                    style.overflow = opts.overflow[0];\n                    style.overflowX = opts.overflow[1];\n                    style.overflowY = opts.overflow[2];\n                  });\n                }\n              }\n\n              // show/hide pass\n              for (index in props) {\n                value = props[index];\n                if (rfxtypes.exec(value)) {\n                  delete props[index];\n                  toggle = toggle || value === \"toggle\";\n                  if (value === (hidden ? \"hide\" : \"show\")) {\n                    continue;\n                  }\n                  handled.push(index);\n                }\n              }\n              length = handled.length;\n              if (length) {\n                dataShow = JQXLite._data(elem, \"fxshow\") || JQXLite._data(elem, \"fxshow\", {});\n                if (\"hidden\" in dataShow) {\n                  hidden = dataShow.hidden;\n                }\n\n                // store state if its toggle - enables .stop().toggle() to \"reverse\"\n                if (toggle) {\n                  dataShow.hidden = !hidden;\n                }\n                if (hidden) {\n                  JQXLite(elem).show();\n                } else {\n                  anim.done(function () {\n                    JQXLite(elem).hide();\n                  });\n                }\n                anim.done(function () {\n                  var prop;\n                  JQXLite.removeData(elem, \"fxshow\", true);\n                  for (prop in orig) {\n                    JQXLite.style(elem, prop, orig[prop]);\n                  }\n                });\n                for (index = 0; index < length; index++) {\n                  prop = handled[index];\n                  tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);\n                  orig[prop] = dataShow[prop] || JQXLite.style(elem, prop);\n                  if (!(prop in dataShow)) {\n                    dataShow[prop] = tween.start;\n                    if (hidden) {\n                      tween.end = tween.start;\n                      tween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n                    }\n                  }\n                }\n              }\n            }\n            function Tween(elem, options, prop, end, easing) {\n              return new Tween.prototype.init(elem, options, prop, end, easing);\n            }\n            JQXLite.Tween = Tween;\n            Tween.prototype = {\n              constructor: Tween,\n              init: function (elem, options, prop, end, easing, unit) {\n                this.elem = elem;\n                this.prop = prop;\n                this.easing = easing || \"swing\";\n                this.options = options;\n                this.start = this.now = this.cur();\n                this.end = end;\n                this.unit = unit || (JQXLite.cssNumber[prop] ? \"\" : \"px\");\n              },\n              cur: function () {\n                var hooks = Tween.propHooks[this.prop];\n                return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n              },\n              run: function (percent) {\n                var eased,\n                  hooks = Tween.propHooks[this.prop];\n                if (this.options.duration) {\n                  this.pos = eased = JQXLite.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n                } else {\n                  this.pos = eased = percent;\n                }\n                this.now = (this.end - this.start) * eased + this.start;\n                if (this.options.step) {\n                  this.options.step.call(this.elem, this.now, this);\n                }\n                if (hooks && hooks.set) {\n                  hooks.set(this);\n                } else {\n                  Tween.propHooks._default.set(this);\n                }\n                return this;\n              }\n            };\n            Tween.prototype.init.prototype = Tween.prototype;\n            Tween.propHooks = {\n              _default: {\n                get: function (tween) {\n                  var result;\n                  if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n                    return tween.elem[tween.prop];\n                  }\n\n                  // passing any value as a 4th parameter to .css will automatically\n                  // attempt a parseFloat and fallback to a string if the parse fails\n                  // so, simple values such as \"10px\" are parsed to Float.\n                  // complex values such as \"rotate(1rad)\" are returned as is.\n                  result = JQXLite.css(tween.elem, tween.prop, false, \"\");\n                  // Empty strings, null, undefined and \"auto\" are converted to 0.\n                  return !result || result === \"auto\" ? 0 : result;\n                },\n                set: function (tween) {\n                  // use step hook for back compat - use cssHook if its there - use .style if its\n                  // available and use plain properties where available\n                  if (JQXLite.fx.step[tween.prop]) {\n                    JQXLite.fx.step[tween.prop](tween);\n                  } else if (tween.elem.style && (tween.elem.style[JQXLite.cssProps[tween.prop]] != null || JQXLite.cssHooks[tween.prop])) {\n                    JQXLite.style(tween.elem, tween.prop, tween.now + tween.unit);\n                  } else {\n                    tween.elem[tween.prop] = tween.now;\n                  }\n                }\n              }\n            };\n\n            // Remove in 2.0 - this supports IE8's panic based approach\n            // to setting things on disconnected nodes\n\n            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n              set: function (tween) {\n                if (tween.elem.nodeType && tween.elem.parentNode) {\n                  tween.elem[tween.prop] = tween.now;\n                }\n              }\n            };\n            JQXLite.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n              var cssFn = JQXLite.fn[name];\n              JQXLite.fn[name] = function (speed, easing, callback) {\n                return speed == null || typeof speed === \"boolean\" ||\n                // special check for .toggle( handler, handler, ... )\n                !i && JQXLite.isFunction(speed) && JQXLite.isFunction(easing) ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n              };\n            });\n            JQXLite.fn.extend({\n              fadeTo: function (speed, to, easing, callback) {\n                // show any hidden elements after setting opacity to 0\n                return this.filter(isHidden).css(\"opacity\", 0).show()\n\n                // animate to the value specified\n                .end().animate({\n                  opacity: to\n                }, speed, easing, callback);\n              },\n              animate: function (prop, speed, easing, callback) {\n                var empty = JQXLite.isEmptyObject(prop),\n                  optall = JQXLite.speed(speed, easing, callback),\n                  doAnimation = function () {\n                    // Operate on a copy of prop so per-property easing won't be lost\n                    var anim = Animation(this, JQXLite.extend({}, prop), optall);\n\n                    // Empty animations resolve immediately\n                    if (empty) {\n                      anim.stop(true);\n                    }\n                  };\n                return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n              },\n              stop: function (type, clearQueue, gotoEnd) {\n                var stopQueue = function (hooks) {\n                  var stop = hooks.stop;\n                  delete hooks.stop;\n                  stop(gotoEnd);\n                };\n                if (typeof type !== \"string\") {\n                  gotoEnd = clearQueue;\n                  clearQueue = type;\n                  type = undefined;\n                }\n                if (clearQueue && type !== false) {\n                  this.queue(type || \"fx\", []);\n                }\n                return this.each(function () {\n                  var dequeue = true,\n                    index = type != null && type + \"queueHooks\",\n                    timers = JQXLite.timers,\n                    data = JQXLite._data(this);\n                  if (index) {\n                    if (data[index] && data[index].stop) {\n                      stopQueue(data[index]);\n                    }\n                  } else {\n                    for (index in data) {\n                      if (data[index] && data[index].stop && rrun.test(index)) {\n                        stopQueue(data[index]);\n                      }\n                    }\n                  }\n                  for (index = timers.length; index--;) {\n                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n                      timers[index].anim.stop(gotoEnd);\n                      dequeue = false;\n                      timers.splice(index, 1);\n                    }\n                  }\n\n                  // start the next in the queue if the last step wasn't forced\n                  // timers currently will call their complete callbacks, which will dequeue\n                  // but only if they were gotoEnd\n                  if (dequeue || !gotoEnd) {\n                    JQXLite.dequeue(this, type);\n                  }\n                });\n              }\n            });\n\n            // Generate parameters to create a standard animation\n            function genFx(type, includeWidth) {\n              var which,\n                attrs = {\n                  height: type\n                },\n                i = 0;\n\n              // if we include width, step value is 1 to do all cssExpand values,\n              // if we don't include width, step value is 2 to skip over Left and Right\n              includeWidth = includeWidth ? 1 : 0;\n              for (; i < 4; i += 2 - includeWidth) {\n                which = cssExpand[i];\n                attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n              }\n              if (includeWidth) {\n                attrs.opacity = attrs.width = type;\n              }\n              return attrs;\n            }\n\n            // Generate shortcuts for custom animations\n            JQXLite.each({\n              slideDown: genFx(\"show\"),\n              slideUp: genFx(\"hide\"),\n              slideToggle: genFx(\"toggle\"),\n              fadeIn: {\n                opacity: \"show\"\n              },\n              fadeOut: {\n                opacity: \"hide\"\n              },\n              fadeToggle: {\n                opacity: \"toggle\"\n              }\n            }, function (name, props) {\n              JQXLite.fn[name] = function (speed, easing, callback) {\n                return this.animate(props, speed, easing, callback);\n              };\n            });\n            JQXLite.speed = function (speed, easing, fn) {\n              var opt = speed && typeof speed === \"object\" ? JQXLite.extend({}, speed) : {\n                complete: fn || !fn && easing || JQXLite.isFunction(speed) && speed,\n                duration: speed,\n                easing: fn && easing || easing && !JQXLite.isFunction(easing) && easing\n              };\n              opt.duration = JQXLite.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in JQXLite.fx.speeds ? JQXLite.fx.speeds[opt.duration] : JQXLite.fx.speeds._default;\n\n              // normalize opt.queue - true/undefined/null -> \"fx\"\n              if (opt.queue == null || opt.queue === true) {\n                opt.queue = \"fx\";\n              }\n\n              // Queueing\n              opt.old = opt.complete;\n              opt.complete = function () {\n                if (JQXLite.isFunction(opt.old)) {\n                  opt.old.call(this);\n                }\n                if (opt.queue) {\n                  JQXLite.dequeue(this, opt.queue);\n                }\n              };\n              return opt;\n            };\n            JQXLite.easing = {\n              linear: function (p) {\n                return p;\n              },\n              swing: function (p) {\n                return 0.5 - Math.cos(p * Math.PI) / 2;\n              }\n            };\n            JQXLite.timers = [];\n            JQXLite.fx = Tween.prototype.init;\n            JQXLite.fx.tick = function () {\n              var timer,\n                timers = JQXLite.timers,\n                i = 0;\n              fxNow = JQXLite.now();\n              for (; i < timers.length; i++) {\n                timer = timers[i];\n                // Checks the timer has not already been removed\n                if (!timer() && timers[i] === timer) {\n                  timers.splice(i--, 1);\n                }\n              }\n              if (!timers.length) {\n                JQXLite.fx.stop();\n              }\n              fxNow = undefined;\n            };\n            JQXLite.fx.timer = function (timer) {\n              if (timer() && JQXLite.timers.push(timer) && !timerId) {\n                timerId = setInterval(JQXLite.fx.tick, JQXLite.fx.interval);\n              }\n            };\n            JQXLite.fx.interval = 13;\n            JQXLite.fx.stop = function () {\n              clearInterval(timerId);\n              timerId = null;\n            };\n            JQXLite.fx.speeds = {\n              slow: 600,\n              fast: 200,\n              // Default speed\n              _default: 400\n            };\n\n            // Back Compat <1.8 extension point\n            JQXLite.fx.step = {};\n            if (JQXLite.expr && JQXLite.expr.filters) {\n              JQXLite.expr.filters.animated = function (elem) {\n                return JQXLite.grep(JQXLite.timers, function (fn) {\n                  return elem === fn.elem;\n                }).length;\n              };\n            }\n            var rroot = /^(?:body|html)$/i;\n            JQXLite.fn.offset = function (options) {\n              if (arguments.length) {\n                return options === undefined ? this : this.each(function (i) {\n                  JQXLite.offset.setOffset(this, options, i);\n                });\n              }\n              var docElem,\n                body,\n                win,\n                clientTop,\n                clientLeft,\n                scrollTop,\n                scrollLeft,\n                box = {\n                  top: 0,\n                  left: 0\n                },\n                elem = this[0],\n                doc = elem && elem.ownerDocument;\n              if (!doc) {\n                return;\n              }\n              if ((body = doc.body) === elem) {\n                return JQXLite.offset.bodyOffset(elem);\n              }\n              docElem = doc.documentElement;\n\n              // Make sure it's not a disconnected DOM node\n              if (!JQXLite.contains(docElem, elem)) {\n                return box;\n              }\n\n              // If we don't have gBCR, just use 0,0 rather than error\n              // BlackBerry 5, iOS 3 (original iPhone)\n              if (typeof elem.getBoundingClientRect !== \"undefined\") {\n                box = elem.getBoundingClientRect();\n              }\n              win = getWindow(doc);\n              clientTop = docElem.clientTop || body.clientTop || 0;\n              clientLeft = docElem.clientLeft || body.clientLeft || 0;\n              scrollTop = win.pageYOffset || docElem.scrollTop;\n              scrollLeft = win.pageXOffset || docElem.scrollLeft;\n              return {\n                top: box.top + scrollTop - clientTop,\n                left: box.left + scrollLeft - clientLeft\n              };\n            };\n            JQXLite.offset = {\n              bodyOffset: function (body) {\n                var top = body.offsetTop,\n                  left = body.offsetLeft;\n                if (JQXLite.support.doesNotIncludeMarginInBodyOffset) {\n                  top += parseFloat(JQXLite.css(body, \"marginTop\")) || 0;\n                  left += parseFloat(JQXLite.css(body, \"marginLeft\")) || 0;\n                }\n                return {\n                  top: top,\n                  left: left\n                };\n              },\n              setOffset: function (elem, options, i) {\n                var position = JQXLite.css(elem, \"position\");\n\n                // set position first, in-case top/left are set even on static elem\n                if (position === \"static\") {\n                  elem.style.position = \"relative\";\n                }\n                var curElem = JQXLite(elem),\n                  curOffset = curElem.offset(),\n                  curCSSTop = JQXLite.css(elem, \"top\"),\n                  curCSSLeft = JQXLite.css(elem, \"left\"),\n                  calculatePosition = (position === \"absolute\" || position === \"fixed\") && JQXLite.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1,\n                  props = {},\n                  curPosition = {},\n                  curTop,\n                  curLeft;\n\n                // need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n                if (calculatePosition) {\n                  curPosition = curElem.position();\n                  curTop = curPosition.top;\n                  curLeft = curPosition.left;\n                } else {\n                  curTop = parseFloat(curCSSTop) || 0;\n                  curLeft = parseFloat(curCSSLeft) || 0;\n                }\n                if (JQXLite.isFunction(options)) {\n                  options = options.call(elem, i, curOffset);\n                }\n                if (options.top != null) {\n                  props.top = options.top - curOffset.top + curTop;\n                }\n                if (options.left != null) {\n                  props.left = options.left - curOffset.left + curLeft;\n                }\n                if (\"using\" in options) {\n                  options.using.call(elem, props);\n                } else {\n                  curElem.css(props);\n                }\n              }\n            };\n            JQXLite.fn.extend({\n              isRendered: function () {\n                var that = this;\n                var element = this[0];\n                if (element.parentNode == null || element.offsetWidth === 0 || element.offsetHeight === 0) {\n                  return false;\n                }\n                return true;\n              },\n              getSizeFromStyle: function () {\n                var that = this;\n                var width = null;\n                var height = null;\n                var element = this[0];\n                var computedStyle;\n                if (element.style.width) {\n                  width = element.style.width;\n                }\n                if (element.style.height) {\n                  height = element.style.height;\n                }\n                if (window.getComputedStyle) {\n                  computedStyle = getComputedStyle(element, null);\n                } else {\n                  computedStyle = element.currentStyle;\n                }\n                if (computedStyle) {\n                  if (computedStyle.width) {\n                    width = computedStyle.width;\n                  }\n                  if (computedStyle.height) {\n                    height = computedStyle.height;\n                  }\n                }\n                if (width === '0px') width = 0;\n                if (height === '0px') height = 0;\n                if (width === null) width = 0;\n                if (height === null) height = 0;\n                return {\n                  width: width,\n                  height: height\n                };\n              },\n              initAnimate: function () {},\n              sizeStyleChanged: function (resizeFn) {\n                var that = this;\n                var watchedElementData;\n                var checkForChanges = function (mutations) {\n                  var data = watchedElementData;\n                  if (mutations && mutations[0] && mutations[0].attributeName === 'style' && mutations[0].type === 'attributes') {\n                    if (data.element.offsetWidth !== data.offsetWidth || data.element.offsetHeight !== data.offsetHeight) {\n                      data.offsetWidth = data.element.offsetWidth;\n                      data.offsetHeight = data.element.offsetHeight;\n                      if (that.isRendered()) {\n                        data.callback();\n                      }\n                    }\n                  }\n                };\n                watchedElementData = {\n                  element: that[0],\n                  offsetWidth: that[0].offsetWidth,\n                  offsetHeight: that[0].offsetHeight,\n                  callback: resizeFn\n                };\n                try {\n                  if (!that.elementStyleObserver) {\n                    that.elementStyleObserver = new MutationObserver(checkForChanges);\n                    that.elementStyleObserver.observe(that[0], {\n                      attributes: true,\n                      childList: false,\n                      characterData: false\n                    });\n                  }\n                } catch (error) {}\n              },\n              position: function () {\n                if (!this[0]) {\n                  return;\n                }\n                var elem = this[0],\n                  // Get *real* offsetParent\n                  offsetParent = this.offsetParent(),\n                  // Get correct offsets\n                  offset = this.offset(),\n                  parentOffset = rroot.test(offsetParent[0].nodeName) ? {\n                    top: 0,\n                    left: 0\n                  } : offsetParent.offset();\n\n                // Subtract element margins\n                // note: when an element has margin: auto the offsetLeft and marginLeft\n                // are the same in Safari causing offset.left to incorrectly be 0\n                offset.top -= parseFloat(JQXLite.css(elem, \"marginTop\")) || 0;\n                offset.left -= parseFloat(JQXLite.css(elem, \"marginLeft\")) || 0;\n\n                // Add offsetParent borders\n                parentOffset.top += parseFloat(JQXLite.css(offsetParent[0], \"borderTopWidth\")) || 0;\n                parentOffset.left += parseFloat(JQXLite.css(offsetParent[0], \"borderLeftWidth\")) || 0;\n\n                // Subtract the two offsets\n                return {\n                  top: offset.top - parentOffset.top,\n                  left: offset.left - parentOffset.left\n                };\n              },\n              offsetParent: function () {\n                return this.map(function () {\n                  var offsetParent = this.offsetParent || document.body;\n                  while (offsetParent && !rroot.test(offsetParent.nodeName) && JQXLite.css(offsetParent, \"position\") === \"static\") {\n                    offsetParent = offsetParent.offsetParent;\n                  }\n                  return offsetParent || document.body;\n                });\n              }\n            });\n            // Create scrollLeft and scrollTop methods\n            JQXLite.each({\n              scrollLeft: \"pageXOffset\",\n              scrollTop: \"pageYOffset\"\n            }, function (method, prop) {\n              var top = /Y/.test(prop);\n              JQXLite.fn[method] = function (val) {\n                return JQXLite.access(this, function (elem, method, val) {\n                  var win = getWindow(elem);\n                  if (val === undefined) {\n                    return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n                  }\n                  if (win) {\n                    win.scrollTo(!top ? val : JQXLite(win).scrollLeft(), top ? val : JQXLite(win).scrollTop());\n                  } else {\n                    elem[method] = val;\n                  }\n                }, method, val, arguments.length, null);\n              };\n            });\n            function getWindow(elem) {\n              return JQXLite.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n            }\n            // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n            JQXLite.each({\n              Height: \"height\",\n              Width: \"width\"\n            }, function (name, type) {\n              JQXLite.each({\n                padding: \"inner\" + name,\n                content: type,\n                \"\": \"outer\" + name\n              }, function (defaultExtra, funcName) {\n                // margin is only for outerHeight, outerWidth\n                JQXLite.fn[funcName] = function (margin, value) {\n                  var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n                    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n                  return JQXLite.access(this, function (elem, type, value) {\n                    var doc;\n                    if (JQXLite.isWindow(elem)) {\n                      // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n                      // isn't a whole lot we can do. See pull request at this URL for discussion:\n                      // https://github.com/jqx/jqx/pull/764\n                      return elem.document.documentElement[\"client\" + name];\n                    }\n\n                    // Get document width or height\n                    if (elem.nodeType === 9) {\n                      doc = elem.documentElement;\n\n                      // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n                      // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n                      return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n                    }\n                    return value === undefined ?\n                    // Get width or height on the element, requesting but not forcing parseFloat\n                    JQXLite.css(elem, type, value, extra) :\n                    // Set width or height on the element\n                    JQXLite.style(elem, type, value, extra);\n                  }, type, chainable ? margin : undefined, chainable, null);\n                };\n              });\n            });\n            // Expose JQXLite to the global object\n            window.JQXLite = window.jqxHelper = JQXLite;\n\n            // Expose JQXLite as an AMD module, but only for AMD loaders that\n            // understand the issues with loading multiple versions of JQXLite\n            // in a page that all might call define(). The loader will indicate\n            // they have special allowances for multiple JQXLite versions by\n            // specifying define.amd.JQXLite = true. Register as a named module,\n            // since JQXLite can be concatenated with other files that may use define,\n            // but not use a proper concatenation script that understands anonymous\n            // AMD modules. A named AMD is safest and most robust way to register.\n            // Lowercase jqx is used because AMD module names are derived from\n            // file names, and JQXLite is normally delivered in a lowercase file name.\n            // Do this after creating the global so that if an AMD module wants to call\n            // noConflict to hide this version of JQXLite, it will work.\n            if (true && __webpack_require__.amdO.JQXLite) {\n              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n                return JQXLite;\n              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            }\n          })(window);\n        }\n\n        // jqxHelper\n        (function (window) {\n          if (window.jqxCore) {\n            window.$$ = window.minQuery = window.JQXLite;\n            if (!window.$) {\n              window.$ = window.minQuery;\n            }\n            return;\n          }\n          if (window.jQuery) {\n            window.minQuery = window.JQXLite = window.jQuery;\n            return;\n          }\n          if (!window.$) {\n            window.$ = window.minQuery = window.JQXLite;\n          } else {\n            window.minQuery = window.JQXLite = window.$;\n          }\n        })(window);\n        // End of jqxHelper\n\n        JQXLite.generateID = function () {\n          var S4 = function () {\n            return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n          };\n          var id = \"\";\n          do {\n            id = \"jqx\" + S4() + S4() + S4();\n          } while ($('#' + id).length > 0);\n          return id;\n        };\n        var jqxBaseFramework = window.jqxBaseFramework = window.minQuery || window.jQuery;\n        (function ($) {\n          $.jqx = $.jqx || {};\n          window.jqx = $.jqx;\n          var jqwidgets = {\n            createInstance: function (selector, widgetName, params) {\n              if (widgetName == 'jqxDataAdapter') {\n                var source = params[0];\n                var settings = params[1] || {};\n                return new $.jqx.dataAdapter(source, settings);\n              }\n              $(selector)[widgetName](params || {});\n              return $(selector)[widgetName]('getInstance');\n            }\n          };\n          window.jqwidgets = jqwidgets;\n          $.jqx.define = function (namespace, classname, baseclass) {\n            namespace[classname] = function () {\n              if (this.baseType) {\n                this.base = new namespace[this.baseType]();\n                this.base.defineInstance();\n              }\n              this.defineInstance();\n              this.metaInfo();\n            };\n            namespace[classname].prototype.defineInstance = function () {};\n            namespace[classname].prototype.metaInfo = function () {};\n            namespace[classname].prototype.base = null;\n            namespace[classname].prototype.baseType = undefined;\n            if (baseclass && namespace[baseclass]) namespace[classname].prototype.baseType = baseclass;\n          };\n\n          // method call\n          $.jqx.invoke = function (object, args) {\n            if (args.length == 0) return;\n            var method = typeof args == Array || args.length > 0 ? args[0] : args;\n            var methodArg = typeof args == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : $({}).toArray();\n            while (object[method] == undefined && object.base != null) {\n              if (object[method] != undefined && $.isFunction(object[method])) return object[method].apply(object, methodArg);\n              if (typeof method == 'string') {\n                var methodLowerCase = method.toLowerCase();\n                if (object[methodLowerCase] != undefined && $.isFunction(object[methodLowerCase])) {\n                  return object[methodLowerCase].apply(object, methodArg);\n                }\n              }\n              object = object.base;\n            }\n            if (object[method] != undefined && $.isFunction(object[method])) return object[method].apply(object, methodArg);\n            if (typeof method == 'string') {\n              var methodLowerCase = method.toLowerCase();\n              if (object[methodLowerCase] != undefined && $.isFunction(object[methodLowerCase])) {\n                return object[methodLowerCase].apply(object, methodArg);\n              }\n            }\n            return;\n          };\n          $.jqx.getByPriority = function (arr) {\n            var value = undefined;\n            for (var i = 0; i < arr.length && value == undefined; i++) {\n              if (value == undefined && arr[i] != undefined) value = arr[i];\n            }\n            return value;\n          };\n          $.jqx.hasProperty = function (obj, property) {\n            if (typeof property == 'object') {\n              for (var prop in property) {\n                var o = obj;\n                while (o) {\n                  if (o.hasOwnProperty(prop)) return true;\n                  if (o.hasOwnProperty(prop.toLowerCase())) return true;\n                  o = o.base;\n                }\n                return false;\n              }\n            } else {\n              while (obj) {\n                if (obj.hasOwnProperty(property)) return true;\n                if (obj.hasOwnProperty(property.toLowerCase())) return true;\n                obj = obj.base;\n              }\n            }\n            return false;\n          };\n          $.jqx.hasFunction = function (object, args) {\n            if (args.length == 0) return false;\n            if (object == undefined) return false;\n            var method = typeof args == Array || args.length > 0 ? args[0] : args;\n            var methodArg = typeof args == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : {};\n            while (object[method] == undefined && object.base != null) {\n              if (object[method] && $.isFunction(object[method])) return true;\n              if (typeof method == 'string') {\n                var methodLowerCase = method.toLowerCase();\n                if (object[methodLowerCase] && $.isFunction(object[methodLowerCase])) return true;\n              }\n              object = object.base;\n            }\n            if (object[method] && $.isFunction(object[method])) return true;\n            if (typeof method == 'string') {\n              var methodLowerCase = method.toLowerCase();\n              if (object[methodLowerCase] && $.isFunction(object[methodLowerCase])) return true;\n            }\n            return false;\n          };\n          $.jqx.isPropertySetter = function (obj, args) {\n            if (args.length == 1 && typeof args[0] == 'object') return true;\n            if (args.length == 2 && typeof args[0] == 'string' && !$.jqx.hasFunction(obj, args)) {\n              return true;\n            }\n            return false;\n          };\n          $.jqx.validatePropertySetter = function (obj, args, suppressException) {\n            if (!$.jqx.propertySetterValidation) return true;\n            if (args.length == 1 && typeof args[0] == 'object') {\n              for (var i in args[0]) {\n                var o = obj;\n                while (!o.hasOwnProperty(i) && o.base) o = o.base;\n                if (!o || !o.hasOwnProperty(i)) {\n                  if (!suppressException) {\n                    var hasLowerCase = o.hasOwnProperty(i.toString().toLowerCase());\n                    if (!hasLowerCase) {\n                      throw 'Invalid property: ' + i;\n                    } else return true;\n                  }\n                  return false;\n                }\n              }\n              return true;\n            }\n            if (args.length != 2) {\n              if (!suppressException) throw 'Invalid property: ' + args.length >= 0 ? args[0] : '';\n              return false;\n            }\n            while (!obj.hasOwnProperty(args[0]) && obj.base) obj = obj.base;\n            if (!obj || !obj.hasOwnProperty(args[0])) {\n              if (!suppressException) throw 'Invalid property: ' + args[0];\n              return false;\n            }\n            return true;\n          };\n          if (!Object.keys) {\n            Object.keys = function () {\n              'use strict';\n\n              var hasOwnProperty = Object.prototype.hasOwnProperty,\n                hasDontEnumBug = !{\n                  toString: null\n                }.propertyIsEnumerable('toString'),\n                dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n                dontEnumsLength = dontEnums.length;\n              return function (obj) {\n                if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                  throw new TypeError('Object.keys called on non-object');\n                }\n                var result = [],\n                  prop,\n                  i;\n                for (prop in obj) {\n                  if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                  }\n                }\n                if (hasDontEnumBug) {\n                  for (i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                      result.push(dontEnums[i]);\n                    }\n                  }\n                }\n                return result;\n              };\n            }();\n          }\n          $.jqx.set = function (object, args) {\n            var newValuesLength = 0;\n            if (args.length == 1 && typeof args[0] == 'object') {\n              if (object.isInitialized && Object.keys && Object.keys(args[0]).length > 1) {\n                var element = !object.base ? object.element : object.base.element;\n                var initArgs = $.data(element, object.widgetName).initArgs;\n                if (initArgs && JSON && JSON.stringify && args[0] && initArgs[0]) {\n                  try {\n                    if (JSON.stringify(args[0]) == JSON.stringify(initArgs[0])) {\n                      var toReturn = true;\n                      $.each(args[0], function (key, value) {\n                        if (object[key] != value) {\n                          toReturn = false;\n                          return false;\n                        }\n                      });\n                      if (toReturn) {\n                        return;\n                      }\n                    }\n                  } catch (err) {}\n                }\n                object.batchUpdate = args[0];\n                var oldValues = {};\n                var newValues = {};\n                $.each(args[0], function (key, value) {\n                  var obj = object;\n                  while (!obj.hasOwnProperty(key) && obj.base != null) obj = obj.base;\n                  if (obj.hasOwnProperty(key)) {\n                    if (object[key] != value) {\n                      oldValues[key] = object[key];\n                      newValues[key] = value;\n                      newValuesLength++;\n                    }\n                  } else if (obj.hasOwnProperty(key.toLowerCase())) {\n                    if (object[key.toLowerCase()] != value) {\n                      oldValues[key.toLowerCase()] = object[key.toLowerCase()];\n                      newValues[key.toLowerCase()] = value;\n                      newValuesLength++;\n                    }\n                  }\n                });\n                if (newValuesLength < 2) {\n                  object.batchUpdate = null;\n                }\n              }\n              $.each(args[0], function (key, value) {\n                var obj = object;\n                while (!obj.hasOwnProperty(key) && obj.base != null) obj = obj.base;\n                if (obj.hasOwnProperty(key)) {\n                  $.jqx.setvalueraiseevent(obj, key, value);\n                } else if (obj.hasOwnProperty(key.toLowerCase())) {\n                  $.jqx.setvalueraiseevent(obj, key.toLowerCase(), value);\n                } else if ($.jqx.propertySetterValidation) throw \"jqxCore: invalid property '\" + key + \"'\";\n              });\n              if (object.batchUpdate != null) {\n                object.batchUpdate = null;\n                if (object.propertiesChangedHandler && newValuesLength > 1) {\n                  object.propertiesChangedHandler(object, oldValues, newValues);\n                }\n              }\n            } else if (args.length == 2) {\n              while (!object.hasOwnProperty(args[0]) && object.base) object = object.base;\n              if (object.hasOwnProperty(args[0])) {\n                $.jqx.setvalueraiseevent(object, args[0], args[1]);\n              } else if (object.hasOwnProperty(args[0].toLowerCase())) {\n                $.jqx.setvalueraiseevent(object, args[0].toLowerCase(), args[1]);\n              } else if ($.jqx.propertySetterValidation) throw \"jqxCore: invalid property '\" + args[0] + \"'\";\n            }\n          };\n          $.jqx.setvalueraiseevent = function (object, key, value) {\n            var oldVal = object[key];\n            object[key] = value;\n            if (!object.isInitialized) return;\n            if (object.propertyChangedHandler != undefined) object.propertyChangedHandler(object, key, oldVal, value);\n            if (object.propertyChangeMap != undefined && object.propertyChangeMap[key] != undefined) object.propertyChangeMap[key](object, key, oldVal, value);\n          };\n          $.jqx.get = function (object, args) {\n            if (args == undefined || args == null) return undefined;\n            if (object.propertyMap) {\n              var newVal = object.propertyMap(args);\n              if (newVal != null) return newVal;\n            }\n            if (object.hasOwnProperty(args)) return object[args];\n            if (object.hasOwnProperty(args.toLowerCase())) return object[args.toLowerCase()];\n            var arg = undefined;\n            if (typeof args == Array) {\n              if (args.length != 1) return undefined;\n              arg = args[0];\n            } else if (typeof args == 'string') arg = args;\n            while (!object.hasOwnProperty(arg) && object.base) object = object.base;\n            if (object) return object[arg];\n            return undefined;\n          };\n          $.jqx.serialize = function (obj) {\n            var txt = '';\n            if ($.isArray(obj)) {\n              txt = '[';\n              for (var i = 0; i < obj.length; i++) {\n                if (i > 0) txt += ', ';\n                txt += $.jqx.serialize(obj[i]);\n              }\n              txt += ']';\n            } else if (typeof obj == 'object') {\n              txt = '{';\n              var j = 0;\n              for (var i in obj) {\n                if (j++ > 0) txt += ', ';\n                txt += i + ': ' + $.jqx.serialize(obj[i]);\n              }\n              txt += '}';\n            } else txt = obj.toString();\n            return txt;\n          };\n          $.jqx.propertySetterValidation = true;\n          $.jqx.jqxWidgetProxy = function (controlName, element, args) {\n            var host = $(element);\n            var vars = $.data(element, controlName);\n            if (vars == undefined) {\n              return undefined;\n            }\n            var obj = vars.instance;\n            if ($.jqx.hasFunction(obj, args)) return $.jqx.invoke(obj, args);\n            if ($.jqx.isPropertySetter(obj, args)) {\n              if ($.jqx.validatePropertySetter(obj, args)) {\n                $.jqx.set(obj, args);\n                return undefined;\n              }\n            } else {\n              if (typeof args == 'object' && args.length == 0) return;else if (typeof args == 'object' && args.length == 1 && $.jqx.hasProperty(obj, args[0])) return $.jqx.get(obj, args[0]);else if (typeof args == 'string' && $.jqx.hasProperty(obj, args[0])) return $.jqx.get(obj, args);\n            }\n            throw \"jqxCore: Invalid parameter '\" + $.jqx.serialize(args) + \"' does not exist.\";\n            //      return undefined;\n          };\n          $.jqx.applyWidget = function (element, controlName, args, instance) {\n            var WinJS = false;\n            try {\n              WinJS = window.MSApp != undefined;\n            } catch (e) {}\n            var host = $(element);\n            if (!instance) {\n              instance = new $.jqx['_' + controlName]();\n            } else {\n              instance.host = host;\n              instance.element = element;\n            }\n            if (element.id == \"\") {\n              element.id = $.jqx.utilities.createId();\n            }\n            var vars = {\n              host: host,\n              element: element,\n              instance: instance,\n              initArgs: args\n            };\n            instance.widgetName = controlName;\n            $.data(element, controlName, vars);\n            $.data(element, 'jqxWidget', vars.instance);\n            var inits = new Array();\n            var instance = vars.instance;\n            while (instance) {\n              instance.isInitialized = false;\n              inits.push(instance);\n              instance = instance.base;\n            }\n            inits.reverse();\n            inits[0].theme = $.jqx.theme || '';\n            $.jqx.jqxWidgetProxy(controlName, element, args);\n            for (var i in inits) {\n              instance = inits[i];\n              if (i == 0) {\n                instance.host = host;\n                instance.element = element;\n                instance.WinJS = WinJS;\n              }\n              if (instance != undefined) {\n                if (instance.definedInstance) {\n                  instance.definedInstance();\n                }\n                if (instance.createInstance != null) {\n                  if (WinJS) {\n                    MSApp.execUnsafeLocalFunction(function () {\n                      instance.createInstance(args);\n                    });\n                  } else {\n                    instance.createInstance(args);\n                  }\n                }\n              }\n            }\n            for (var i in inits) {\n              if (inits[i] != undefined) {\n                inits[i].isInitialized = true;\n              }\n            }\n            if (WinJS) {\n              MSApp.execUnsafeLocalFunction(function () {\n                vars.instance.refresh(true);\n              });\n            } else {\n              vars.instance.refresh(true);\n            }\n          };\n          $.jqx.jqxWidget = function (name, base, params) {\n            var WinJS = false;\n            try {\n              var jqxArgs = Array.prototype.slice.call(params, 0);\n            } catch (e) {\n              var jqxArgs = '';\n            }\n            try {\n              WinJS = window.MSApp != undefined;\n            } catch (e) {}\n            var controlName = name;\n            var baseControl = '';\n            if (base) baseControl = '_' + base;\n            $.jqx.define($.jqx, '_' + controlName, baseControl);\n            var widgets = new Array();\n            if (!window[controlName]) {\n              var serializeObject = function (data) {\n                if (data == null) return \"\";\n                var dataType = $.type(data);\n                switch (dataType) {\n                  case \"string\":\n                  case \"number\":\n                  case \"date\":\n                  case \"boolean\":\n                  case \"bool\":\n                    if (data === null) return \"\";\n                    return data.toString();\n                }\n                var str = \"\";\n                $.each(data, function (index, value) {\n                  var val = value;\n                  if (index > 0) str += ', ';\n                  str += \"[\";\n                  var m = 0;\n                  if ($.type(val) == \"object\") {\n                    for (var obj in val) {\n                      if (m > 0) str += ', ';\n                      str += '{' + obj + \":\" + val[obj] + '}';\n                      m++;\n                    }\n                  } else {\n                    if (m > 0) str += ', ';\n                    str += '{' + index + \":\" + val + '}';\n                    m++;\n                  }\n                  str += \"]\";\n                });\n                return str;\n              };\n              jqwidgets[controlName] = window[controlName] = function (selector, params) {\n                var args = [];\n                if (!params) {\n                  params = {};\n                }\n                args.push(params);\n                var uid = selector;\n                if ($.type(uid) === \"object\" && selector[0]) {\n                  uid = selector[0].id;\n                  if (uid === \"\") {\n                    uid = selector[0].id = $.jqx.utilities.createId();\n                  }\n                } else if ($.type(selector) === \"object\" && selector && selector.nodeName) {\n                  uid = selector.id;\n                  if (uid === \"\") {\n                    uid = selector.id = $.jqx.utilities.createId();\n                  }\n                }\n                if (window.jqxWidgets && window.jqxWidgets[uid]) {\n                  if (params) {\n                    $.each(window.jqxWidgets[uid], function (index) {\n                      var data = $(this.element).data();\n                      if (data && data.jqxWidget) {\n                        $(this.element)[controlName](params);\n                      }\n                    });\n                  }\n                  if (window.jqxWidgets[uid].length == 1) {\n                    var data = $(window.jqxWidgets[uid][0].widgetInstance.element).data();\n                    if (data && data.jqxWidget) {\n                      return window.jqxWidgets[uid][0];\n                    }\n                  }\n                  var data = $(window.jqxWidgets[uid][0].widgetInstance.element).data();\n                  if (data && data.jqxWidget) {\n                    return window.jqxWidgets[uid];\n                  }\n                }\n                var elements = $(selector);\n                if (elements.length === 0) {\n                  elements = $(\"<div></div>\");\n                  if (controlName === \"jqxInput\" || controlName === \"jqxPasswordInput\" || controlName === \"jqxMaskedInput\") {\n                    elements = $(\"<input/>\");\n                  }\n                  if (controlName === \"jqxTextArea\") {\n                    elements = $(\"<textarea></textarea>\");\n                  }\n                  if (controlName === \"jqxButton\" || controlName === \"jqxRepeatButton\" || controlName === \"jqxToggleButton\") {\n                    elements = $(\"<button/>\");\n                  }\n                  if (controlName === \"jqxSplitter\") {\n                    elements = $(\"<div><div>Panel 1</div><div>Panel 2</div></div>\");\n                  }\n                  if (controlName === \"jqxTabs\") {\n                    elements = $(\"<div><ul><li>Tab 1</li><li>Tab 2</li></ul><div>Content 1</div><div>Content 2</div></div>\");\n                  }\n                  if (controlName === \"jqxRibbon\") {\n                    elements = $(\"<div><ul><li>Tab 1</li><li>Tab 2</li></ul><div><div>Content 1</div><div>Content 2</div></div></div>\");\n                  }\n                  if (controlName === \"jqxDocking\") {\n                    elements = $(\"<div><div><div><div>Title 1</div><div>Content 1</div></div></div></div>\");\n                  }\n                  if (controlName === \"jqxWindow\") {\n                    elements = $(\"<div><div>Title 1</div><div>Content 1</div></div>\");\n                  }\n                }\n                var instances = [];\n                $.each(elements, function (index) {\n                  var element = elements[index];\n                  $.jqx.applyWidget(element, controlName, args, undefined);\n                  if (!widgets[controlName]) {\n                    var instance = $.data(element, 'jqxWidget');\n                    var properties = $.jqx[\"_\" + controlName].prototype.defineInstance();\n                    var metaInfo = {};\n                    if ($.jqx[\"_\" + controlName].prototype.metaInfo) {\n                      metaInfo = $.jqx[\"_\" + controlName].prototype.metaInfo();\n                    }\n                    if (controlName == \"jqxDockingLayout\") {\n                      properties = $.extend(properties, $.jqx[\"_jqxLayout\"].prototype.defineInstance());\n                    }\n                    if (controlName == \"jqxToggleButton\" || controlName == \"jqxRepeatButton\") {\n                      properties = $.extend(properties, $.jqx[\"_jqxButton\"].prototype.defineInstance());\n                    }\n                    if (controlName == \"jqxTreeGrid\") {\n                      properties = $.extend(properties, $.jqx[\"_jqxDataTable\"].prototype.defineInstance());\n                    }\n                    var widgetConstructor = function (element) {\n                      var instance = $.data(element, 'jqxWidget');\n                      this.widgetInstance = instance;\n                      var widget = $.extend(this, instance);\n                      widget.on = widget.addEventListener = function (eventName, callback) {\n                        widget.addHandler(!widget.base ? widget.host : widget.base.host, eventName, callback);\n                      };\n                      widget.off = widget.removeEventListener = function (eventName) {\n                        widget.removeHandler(!widget.base ? widget.host : widget.base.host, eventName);\n                      };\n                      for (var obj in instance) {\n                        if ($.type(instance[obj]) == \"function\") {\n                          widget[obj] = $.proxy(instance[obj], instance);\n                        }\n                      }\n                      return widget;\n                    };\n                    widgets[controlName] = widgetConstructor;\n\n                    // widget properties\n                    $.each(properties, function (property, currentValue) {\n                      Object.defineProperty(widgetConstructor.prototype, property, {\n                        get: function () {\n                          if (this.widgetInstance) {\n                            return this.widgetInstance[property];\n                          }\n                          return currentValue;\n                        },\n                        set: function (newValue) {\n                          if (this.widgetInstance && (this.widgetInstance[property] != newValue || property === \"width\" || property === \"height\")) {\n                            var key1 = this.widgetInstance[property];\n                            var key2 = newValue;\n                            var dataType1 = $.type(key1);\n                            var dataType2 = $.type(key2);\n                            var differentTypes = false;\n                            if (dataType1 != dataType2 || property === \"source\" || property === \"width\" || property === \"height\") {\n                              differentTypes = true;\n                            }\n                            if (differentTypes || serializeObject(key1) != serializeObject(key2)) {\n                              var settings = {};\n                              settings[property] = newValue;\n                              if (this.widgetInstance.host) {\n                                this.widgetInstance.host[controlName](settings);\n                              } else {\n                                this.widgetInstance.base.host[controlName](settings);\n                              }\n                              this.widgetInstance[property] = newValue;\n                              if (this.widgetInstance.propertyUpdated) {\n                                this.widgetInstance.propertyUpdated(property, key1, newValue);\n                              }\n                            }\n                          }\n                        }\n                      });\n                    });\n                  }\n                  var instance = new widgets[controlName](element);\n                  instances.push(instance);\n                  if (!window.jqxWidgets) {\n                    window.jqxWidgets = new Array();\n                  }\n                  if (!window.jqxWidgets[uid]) {\n                    window.jqxWidgets[uid] = new Array();\n                  }\n                  window.jqxWidgets[uid].push(instance);\n                });\n                if (instances.length === 1) return instances[0];\n                return instances;\n              };\n            }\n            $.fn[controlName] = function () {\n              var args = Array.prototype.slice.call(arguments, 0);\n              if (args.length == 0 || args.length == 1 && typeof args[0] == 'object') {\n                if (this.length == 0) {\n                  if (this.selector) {\n                    throw new Error('Invalid Selector - ' + this.selector + '! Please, check whether the used ID or CSS Class name is correct.');\n                  } else {\n                    throw new Error('Invalid Selector! Please, check whether the used ID or CSS Class name is correct.');\n                  }\n                }\n                return this.each(function () {\n                  var host = $(this);\n                  var element = this; // element == this == host[0]\n                  var vars = $.data(element, controlName);\n                  if (vars == null) {\n                    $.jqx.applyWidget(element, controlName, args, undefined);\n                  } else {\n                    $.jqx.jqxWidgetProxy(controlName, this, args);\n                  }\n                }); // each\n              } else {\n                if (this.length == 0) {\n                  if (this.selector) {\n                    throw new Error('Invalid Selector - ' + this.selector + '! Please, check whether the used ID or CSS Class name is correct.');\n                  } else {\n                    throw new Error('Invalid Selector! Please, check whether the used ID or CSS Class name is correct.');\n                  }\n                }\n                var returnVal = null;\n                var cnt = 0;\n                this.each(function () {\n                  var result = $.jqx.jqxWidgetProxy(controlName, this, args);\n                  if (cnt == 0) {\n                    returnVal = result;\n                    cnt++;\n                  } else {\n                    if (cnt == 1) {\n                      var tmp = [];\n                      tmp.push(returnVal);\n                      returnVal = tmp;\n                    }\n                    returnVal.push(result);\n                  }\n                }); // each\n              }\n              return returnVal;\n            };\n            try {\n              $.extend($.jqx['_' + controlName].prototype, Array.prototype.slice.call(params, 0)[0]);\n            } catch (e) {}\n            $.extend($.jqx['_' + controlName].prototype, {\n              toThemeProperty: function (propertyName, override) {\n                return $.jqx.toThemeProperty(this, propertyName, override);\n              },\n              isMaterialized: function () {\n                if (!this.theme) {\n                  return false;\n                }\n                if (this.theme === \"fluent\") {\n                  return true;\n                }\n                if (this.theme === \"light\") {\n                  return true;\n                }\n                if (this.theme === \"dark\") {\n                  return true;\n                }\n                if (this.theme === \"deepblue\") {\n                  return true;\n                }\n                if (this.theme.indexOf(\"material\") >= 0) {\n                  return true;\n                }\n              },\n              isModern: function () {\n                if (!this.theme) {\n                  return false;\n                }\n                if (this.theme.indexOf(\"light\") >= 0) {\n                  return true;\n                }\n                if (this.theme === \"dark\") {\n                  return true;\n                }\n              },\n              _addBarAndLabel: function (host) {\n                var that = this;\n                var label = $(\"<label></label\");\n                label[0].innerHTML = this.placeHolder;\n                label.addClass(that.toThemeProperty('jqx-input-label'));\n                host.after(label);\n                that.label = label;\n                var bar = $(\"<span></span>\");\n                host.after(bar);\n                bar.addClass(that.toThemeProperty('jqx-input-bar'));\n                that.bar = bar;\n                that.bar.css('top', this.host.height());\n              }\n            });\n            $.jqx['_' + controlName].prototype.refresh = function () {\n              if (this.base) this.base.refresh(true);\n            };\n            $.jqx['_' + controlName].prototype.createInstance = function () {};\n            $.jqx.isPassiveSupported = function () {\n              var that = this;\n              if (that.supportsPassive !== undefined) {\n                return that.supportsPassive;\n              }\n              that.supportsPassive = false;\n              try {\n                var opts = Object.defineProperty({}, 'passive', {\n                  // eslint-disable-next-line getter-return\n                  get: function () {\n                    that.supportsPassive = true;\n                  }\n                });\n                window.addEventListener('testPassive', null, opts);\n                window.removeEventListener('testPassive', null, opts);\n              } catch (e) {\n                //\n              }\n              return that.supportsPassive;\n            };\n            $.jqx['_' + controlName].prototype.addEventHandler = function (event, fnHandler) {\n              if (this.base) {\n                this.base.host.on(event, fnHandler);\n              } else {\n                this.host.on(event, fnHandler);\n              }\n            };\n            $.jqx['_' + controlName].prototype.removeEventHandler = function (event, fnHandler) {\n              if (this.base) {\n                this.base.host.off(event);\n              } else {\n                this.host.off(event);\n              }\n            };\n            $.jqx['_' + controlName].prototype.applyTo = function (element, args) {\n              if (!(args instanceof Array)) {\n                var a = [];\n                a.push(args);\n                args = a;\n              }\n              $.jqx.applyWidget(element, controlName, args, this);\n            };\n            $.jqx['_' + controlName].prototype.getInstance = function () {\n              return this;\n            };\n            $.jqx['_' + controlName].prototype.propertyChangeMap = {};\n            $.jqx['_' + controlName].prototype.addHandler = function (source, events, func, data) {\n              $.jqx.addHandler($(source), events, func, data);\n            };\n            $.jqx['_' + controlName].prototype.removeHandler = function (source, events, func) {\n              $.jqx.removeHandler($(source), events, func);\n            };\n            $.jqx['_' + controlName].prototype.setOptions = function () {\n              if (!this.host || !this.host.length || this.host.length != 1) return;\n              return $.jqx.jqxWidgetProxy(controlName, this.host[0], arguments);\n            };\n          }; // jqxWidget\n\n          $.jqx.toThemeProperty = function (instance, propertyName, override) {\n            if (instance.theme == '') return propertyName;\n            var split = propertyName.split(' ');\n            var result = '';\n            for (var i = 0; i < split.length; i++) {\n              if (i > 0) result += ' ';\n              var key = split[i];\n              if (override != null && override) result += key + '-' + instance.theme;else result += key + ' ' + key + '-' + instance.theme;\n            }\n            return result;\n          };\n          $.jqx.addHandler = function (source, eventsList, func, data) {\n            var events = eventsList.split(' ');\n            for (var i = 0; i < events.length; i++) {\n              var event = events[i];\n              if (window.addEventListener && source[0]) {\n                switch (event) {\n                  case 'mousewheel':\n                    if ($.jqx.browser.mozilla) {\n                      source[0].addEventListener('DOMMouseScroll', func, $.jqx.isPassiveSupported() ? {\n                        passive: false\n                      } : false);\n                    } else {\n                      source[0].addEventListener('mousewheel', func, $.jqx.isPassiveSupported() ? {\n                        passive: false\n                      } : false);\n                    }\n                    continue;\n                  case 'mousemove':\n                    if (!data) {\n                      source[0].addEventListener('mousemove', func, false);\n                      continue;\n                    }\n                    break;\n                  case 'touchmove':\n                    if (!data) {\n                      source[0].addEventListener('touchmove', func, false);\n                      continue;\n                    } else if (data && data.passive) {\n                      source[0].addEventListener('touchmove', func, data);\n                      continue;\n                    }\n                    break;\n                }\n              }\n              if (data == undefined || data == null) {\n                if (source.on) source.on(event, func);else source.bind(event, func);\n              } else {\n                if (source.on) source.on(event, data, func);else source.bind(event, data, func);\n              }\n            } // for\n          };\n          $.jqx.removeHandler = function (source, eventsList, func) {\n            if (!eventsList) {\n              if (source.off) source.off();else source.unbind();\n              return;\n            }\n            var events = eventsList.split(' ');\n            for (var i = 0; i < events.length; i++) {\n              var event = events[i];\n              if (window.removeEventListener) {\n                switch (event) {\n                  case 'mousewheel':\n                    if ($.jqx.browser.mozilla) {\n                      source[0].removeEventListener('DOMMouseScroll', func, false);\n                    } else {\n                      source[0].removeEventListener('mousewheel', func, false);\n                    }\n                    continue;\n                  case 'mousemove':\n                    if (func) {\n                      source[0].removeEventListener('mousemove', func, false);\n                      continue;\n                    }\n                    break;\n                  case 'touchmove':\n                    if (func) {\n                      source[0].removeEventListener('touchmove', func, false);\n                      continue;\n                    }\n                    break;\n                }\n              }\n              if (event == undefined) {\n                if (source.off) source.off();else source.unbind();\n                continue;\n              }\n              if (func == undefined) {\n                if (source.off) source.off(event);else source.unbind(event);\n              } else {\n                if (source.off) source.off(event, func);else source.unbind(event, func);\n              }\n            }\n          };\n          $.jqx.credits = $.jqx.credits || \"\";\n          $.jqx.theme = $.jqx.theme || \"\";\n          $.jqx.scrollAnimation = $.jqx.scrollAnimation || false;\n          $.jqx.resizeDelay = $.jqx.resizeDelay || 10;\n          $.jqx.ready = function () {\n            $(window).trigger('jqxReady');\n          };\n          $.jqx.init = function () {\n            $.each(arguments[0], function (index, value) {\n              if (index == \"theme\") {\n                $.jqx.theme = value;\n              }\n              if (index == \"scrollBarSize\") {\n                $.jqx.utilities.scrollBarSize = value;\n              }\n              if (index == \"touchScrollBarSize\") {\n                $.jqx.utilities.touchScrollBarSize = value;\n              }\n              if (index == \"scrollBarButtonsVisibility\") {\n                $.jqx.utilities.scrollBarButtonsVisibility = value;\n              }\n            });\n          };\n\n          // Utilities\n          $.jqx.utilities = $.jqx.utilities || {};\n          $.extend($.jqx.utilities, {\n            scrollBarSize: 13,\n            touchScrollBarSize: 8,\n            scrollBarButtonsVisibility: \"visible\",\n            createId: function () {\n              var S4 = function () {\n                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n              };\n              return \"jqxWidget\" + S4() + S4() + S4();\n            },\n            setTheme: function (oldTheme, theme, element) {\n              if (typeof element === 'undefined') {\n                return;\n              }\n              if (!element[0].className.split) {\n                return;\n              }\n              if (oldTheme === undefined) {\n                oldTheme = '';\n              }\n              if (theme === undefined) {\n                theme = '';\n              }\n              var classNames = element[0].className.split(' '),\n                oldClasses = [],\n                newClasses = [],\n                children = element.children();\n              for (var i = 0; i < classNames.length; i += 1) {\n                if (classNames[i].indexOf(oldTheme) >= 0) {\n                  if (oldTheme.length > 0) {\n                    oldClasses.push(classNames[i]);\n                    newClasses.push(classNames[i].replace(oldTheme, theme));\n                  } else {\n                    newClasses.push(classNames[i].replace(\"-\" + theme, \"\") + '-' + theme);\n                  }\n                }\n              }\n              this._removeOldClasses(oldClasses, element);\n              this._addNewClasses(newClasses, element);\n              for (var i = 0; i < children.length; i += 1) {\n                this.setTheme(oldTheme, theme, $(children[i]));\n              }\n            },\n            _removeOldClasses: function (classes, element) {\n              for (var i = 0; i < classes.length; i += 1) {\n                element.removeClass(classes[i]);\n              }\n            },\n            _addNewClasses: function (classes, element) {\n              for (var i = 0; i < classes.length; i += 1) {\n                element.addClass(classes[i]);\n              }\n            },\n            getOffset: function (el) {\n              var left = $.jqx.mobile.getLeftPos(el[0]);\n              var top = $.jqx.mobile.getTopPos(el[0]);\n              return {\n                top: top,\n                left: left\n              };\n            },\n            resize: function (element, callback, destroy, checkForHidden) {\n              if (checkForHidden === undefined) {\n                checkForHidden = true;\n              }\n              var index = -1;\n              var that = this;\n              var getHiddenIndex = function (element) {\n                if (!that.hiddenWidgets) {\n                  return -1;\n                }\n                var hiddenIndex = -1;\n                for (var i = 0; i < that.hiddenWidgets.length; i++) {\n                  if (element.id) {\n                    if (that.hiddenWidgets[i].id == element.id) {\n                      hiddenIndex = i;\n                      break;\n                    }\n                  } else {\n                    if (that.hiddenWidgets[i].id == element[0].id) {\n                      hiddenIndex = i;\n                      break;\n                    }\n                  }\n                }\n                return hiddenIndex;\n              };\n              if (this.resizeHandlers) {\n                for (var i = 0; i < this.resizeHandlers.length; i++) {\n                  if (element.id) {\n                    if (this.resizeHandlers[i].id == element.id) {\n                      index = i;\n                      break;\n                    }\n                  } else {\n                    if (this.resizeHandlers[i].id == element[0].id) {\n                      index = i;\n                      break;\n                    }\n                  }\n                }\n                if (destroy === true) {\n                  if (index != -1) {\n                    this.resizeHandlers.splice(index, 1);\n                    if (this.watchedElementData && this.watchedElementData.length > 0) {\n                      this.watchedElementData.splice(index, 1);\n                    }\n                  }\n                  if (this.resizeHandlers.length == 0) {\n                    var w = $(window);\n                    if (w.off) {\n                      w.off('resize.jqx');\n                      w.off('orientationchange.jqx');\n                      w.off('orientationchanged.jqx');\n                    } else {\n                      w.unbind('resize.jqx');\n                      w.unbind('orientationchange.jqx');\n                      w.unbind('orientationchanged.jqx');\n                    }\n                    this.resizeHandlers = null;\n                  }\n                  var hiddenIndex = getHiddenIndex(element);\n                  if (hiddenIndex != -1 && this.hiddenWidgets) {\n                    this.hiddenWidgets.splice(hiddenIndex, 1);\n                  }\n                  return;\n                }\n              } else if (destroy === true) {\n                var hiddenIndex = getHiddenIndex(element);\n                if (hiddenIndex != -1 && this.hiddenWidgets) {\n                  this.hiddenWidgets.splice(hiddenIndex, 1);\n                }\n                return;\n              }\n              var that = this;\n              var doResize = function (isHidden, type) {\n                if (!that.resizeHandlers) return;\n                var getParentsCount = function (element) {\n                  var index = -1;\n                  var parent = element.parentNode;\n                  while (parent) {\n                    index++;\n                    parent = parent.parentNode;\n                  }\n                  return index;\n                };\n                var compare = function (value1, value2) {\n                  if (!value1.widget || !value2.widget) return 0;\n                  var parents1 = getParentsCount(value1.widget[0]);\n                  var parents2 = getParentsCount(value2.widget[0]);\n                  try {\n                    if (parents1 < parents2) {\n                      return -1;\n                    }\n                    if (parents1 > parents2) {\n                      return 1;\n                    }\n                  } catch (error) {\n                    var er = error;\n                  }\n                  return 0;\n                };\n                var handleHiddenWidgets = function (delay) {\n                  if (that.hiddenWidgets.length > 0) {\n                    that.hiddenWidgets.sort(compare);\n                    var updateHiddenWidgets = function () {\n                      var hasHiddenWidget = false;\n                      var currentHiddenWidgets = new Array();\n                      for (var p = 0; p < that.hiddenWidgets.length; p++) {\n                        var handler = that.hiddenWidgets[p];\n                        if ($.jqx.isHidden(handler.widget)) {\n                          hasHiddenWidget = true;\n                          currentHiddenWidgets.push(handler);\n                        } else {\n                          if (handler.callback) {\n                            handler.callback(type);\n                          }\n                        }\n                      }\n                      that.hiddenWidgets = currentHiddenWidgets;\n                      if (!hasHiddenWidget) {\n                        clearInterval(that.__resizeInterval);\n                      }\n                    };\n                    if (delay == false) {\n                      updateHiddenWidgets();\n                      if (that.__resizeInterval) clearInterval(that.__resizeInterval);\n                      return;\n                    }\n                    if (that.__resizeInterval) clearInterval(that.__resizeInterval);\n                    that.__resizeInterval = setInterval(function () {\n                      updateHiddenWidgets();\n                    }, 100);\n                  }\n                };\n                if (that.hiddenWidgets && that.hiddenWidgets.length > 0) {\n                  handleHiddenWidgets(false);\n                }\n                that.hiddenWidgets = new Array();\n                that.resizeHandlers.sort(compare);\n                for (var i = 0; i < that.resizeHandlers.length; i++) {\n                  var handler = that.resizeHandlers[i];\n                  var widget = handler.widget;\n                  var data = handler.data;\n                  if (!data) continue;\n                  if (!data.jqxWidget) continue;\n                  var width = data.jqxWidget.width;\n                  var height = data.jqxWidget.height;\n                  if (data.jqxWidget.base) {\n                    if (width == undefined) {\n                      width = data.jqxWidget.base.width;\n                    }\n                    if (height == undefined) {\n                      height = data.jqxWidget.base.height;\n                    }\n                  }\n                  if (width === undefined && height === undefined) {\n                    width = data.jqxWidget.element.style.width;\n                    height = data.jqxWidget.element.style.height;\n                  }\n                  var percentageSize = false;\n                  if (width != null && width.toString().indexOf(\"%\") != -1) {\n                    percentageSize = true;\n                  }\n                  if (height != null && height.toString().indexOf(\"%\") != -1) {\n                    percentageSize = true;\n                  }\n                  if ($.jqx.isHidden(widget)) {\n                    if (getHiddenIndex(widget) === -1) {\n                      if (percentageSize || isHidden === true) {\n                        if (handler.data.nestedWidget !== true) {\n                          that.hiddenWidgets.push(handler);\n                        }\n                      }\n                    }\n                  } else if (isHidden === undefined || isHidden !== true) {\n                    if (percentageSize) {\n                      handler.callback(type);\n                      if (that.watchedElementData) {\n                        for (var m = 0; m < that.watchedElementData.length; m++) {\n                          if (that.watchedElementData[m].element == data.jqxWidget.element) {\n                            that.watchedElementData[m].offsetWidth = data.jqxWidget.element.offsetWidth;\n                            that.watchedElementData[m].offsetHeight = data.jqxWidget.element.offsetHeight;\n                            break;\n                          }\n                        }\n                      }\n                      if (that.hiddenWidgets.indexOf(handler) >= 0) {\n                        that.hiddenWidgets.splice(that.hiddenWidgets.indexOf(handler), 1);\n                      }\n                    }\n                    if (data.jqxWidget.element) {\n                      var widgetClass = data.jqxWidget.element.className;\n                      if (widgetClass.indexOf('dropdownlist') >= 0 || widgetClass.indexOf('datetimeinput') >= 0 || widgetClass.indexOf('combobox') >= 0 || widgetClass.indexOf('menu') >= 0) {\n                        if (data.jqxWidget.isOpened) {\n                          var opened = data.jqxWidget.isOpened();\n                          if (opened) {\n                            if (type && type == \"resize\" && $.jqx.mobile.isTouchDevice()) continue;\n                            data.jqxWidget.close();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                ;\n                handleHiddenWidgets();\n              };\n              if (!this.resizeHandlers) {\n                this.resizeHandlers = new Array();\n                var w = $(window);\n                if (w.on) {\n                  this._resizeTimer = null;\n                  this._initResize = null;\n                  w.on('resize.jqx', function (event) {\n                    if (that._resizeTimer != undefined) {\n                      clearTimeout(that._resizeTimer);\n                    }\n                    if (!that._initResize) {\n                      that._initResize = true;\n                      doResize(null, 'resize');\n                    } else {\n                      that._resizeTimer = setTimeout(function () {\n                        doResize(null, 'resize');\n                      }, $.jqx.resizeDelay);\n                    }\n                  });\n                  w.on('orientationchange.jqx', function (event) {\n                    doResize(null, 'orientationchange');\n                  });\n                  w.on('orientationchanged.jqx', function (event) {\n                    doResize(null, 'orientationchange');\n                  });\n                } else {\n                  w.bind('resize.jqx', function (event) {\n                    doResize(null, 'orientationchange');\n                  });\n                  w.bind('orientationchange.jqx', function (event) {\n                    doResize(null, 'orientationchange');\n                  });\n                  w.bind('orientationchanged.jqx', function (event) {\n                    doResize(null, 'orientationchange');\n                  });\n                }\n              }\n              var elementData = element.data();\n              if (checkForHidden) {\n                if (index === -1) {\n                  this.resizeHandlers.push({\n                    id: element[0].id,\n                    widget: element,\n                    callback: callback,\n                    data: elementData\n                  });\n                }\n              }\n              try {\n                var width = elementData.jqxWidget.width;\n                var height = elementData.jqxWidget.height;\n                if (elementData.jqxWidget.base) {\n                  if (width == undefined) {\n                    width = elementData.jqxWidget.base.width;\n                  }\n                  if (height == undefined) {\n                    height = elementData.jqxWidget.base.height;\n                  }\n                }\n                if (width === undefined && height === undefined) {\n                  width = elementData.jqxWidget.element.style.width;\n                  height = elementData.jqxWidget.element.style.height;\n                }\n                var percentageSize = false;\n                if (width != null && width.toString().indexOf(\"%\") != -1) {\n                  percentageSize = true;\n                }\n                if (height != null && height.toString().indexOf(\"%\") != -1) {\n                  percentageSize = true;\n                }\n                if (percentageSize) {\n                  if (!this.watchedElementData) {\n                    this.watchedElementData = [];\n                  }\n                  var that = this;\n                  var checkForChanges = function (mutations) {\n                    if (that.watchedElementData.forEach) {\n                      that.watchedElementData.forEach(function (data) {\n                        if (data.element.offsetWidth !== data.offsetWidth || data.element.offsetHeight !== data.offsetHeight) {\n                          data.offsetWidth = data.element.offsetWidth;\n                          data.offsetHeight = data.element.offsetHeight;\n                          if (data.timer) {\n                            clearTimeout(data.timer);\n                          }\n                          data.timer = setTimeout(function () {\n                            if (!$.jqx.isHidden($(data.element))) {\n                              data.callback();\n                            } else {\n                              data.timer = setInterval(function () {\n                                if (!$.jqx.isHidden($(data.element))) {\n                                  clearInterval(data.timer);\n                                  data.callback();\n                                }\n                              }, 100);\n                            }\n                          });\n                        }\n                      });\n                    }\n                  };\n                  that.watchedElementData.push({\n                    element: element[0],\n                    offsetWidth: element[0].offsetWidth,\n                    offsetHeight: element[0].offsetHeight,\n                    callback: callback\n                  });\n                  if (!that.observer) {\n                    that.observer = new MutationObserver(checkForChanges);\n                    that.observer.observe(document.body, {\n                      attributes: true,\n                      childList: true,\n                      characterData: true\n                    });\n                  }\n                }\n              } catch (er) {}\n              if ($.jqx.isHidden(element) && checkForHidden === true) {\n                doResize(true);\n              }\n              $.jqx.resize = function () {\n                doResize(null, 'resize');\n              };\n            },\n            parseJSON: function (data) {\n              if (!data || typeof data !== \"string\") {\n                return null;\n              }\n              var rvalidchars = /^[\\],:{}\\s]*$/,\n                rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n                rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n                rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/g;\n\n              // Make sure leading/trailing whitespace is removed (IE can't handle it)\n              data = $.trim(data);\n\n              // Attempt to parse using the native JSON parser first\n              if (window.JSON && window.JSON.parse) {\n                return window.JSON.parse(data);\n              }\n\n              // Make sure the incoming data is actual JSON\n              // Logic borrowed from http://json.org/json2.js\n              if (rvalidchars.test(data.replace(rvalidescape, \"@\").replace(rvalidtokens, \"]\").replace(rvalidbraces, \"\"))) {\n                return new Function(\"return \" + data)();\n              }\n              throw new Error(\"Invalid JSON: \" + data);\n            },\n            html: function (element, value) {\n              if (!$(element).on || !$.access) {\n                return $(element).html(value);\n              }\n              try {\n                return $.access(element, function (value) {\n                  var elem = element[0] || {},\n                    i = 0,\n                    l = element.length;\n                  if (value === undefined) {\n                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n                  }\n                  var rnoInnerhtml = /<(?:script|style|link)/i,\n                    nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" + \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n                    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n                    rtagName = /<([\\w:]+)/,\n                    rnocache = /<(?:script|object|embed|option|style)/i,\n                    rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n                    rleadingWhitespace = /^\\s+/,\n                    wrapMap = {\n                      option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n                      legend: [1, \"<fieldset>\", \"</fieldset>\"],\n                      thead: [1, \"<table>\", \"</table>\"],\n                      tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n                      td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n                      col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n                      area: [1, \"<map>\", \"</map>\"],\n                      _default: [0, \"\", \"\"]\n                    };\n                  if (typeof value === \"string\" && !rnoInnerhtml.test(value) && ($.support.htmlSerialize || !rnoshimcache.test(value)) && ($.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n                    value = value.replace(rxhtmlTag, \"<$1></$2>\");\n                    try {\n                      for (; i < l; i++) {\n                        elem = this[i] || {};\n                        if (elem.nodeType === 1) {\n                          $.cleanData(elem.getElementsByTagName(\"*\"));\n                          elem.innerHTML = value;\n                        }\n                      }\n                      elem = 0;\n                    } catch (e) {}\n                  }\n                  if (elem) {\n                    element.empty().append(value);\n                  }\n                }, null, value, arguments.length);\n              } catch (error) {\n                return $(element).html(value);\n              }\n            },\n            hasTransform: function (el) {\n              var transform = \"\";\n              transform = el.css('transform');\n              if (transform == \"\" || transform == 'none') {\n                transform = el.parents().css('transform');\n                if (transform == \"\" || transform == 'none') {\n                  var browserInfo = $.jqx.utilities.getBrowser();\n                  if (browserInfo.browser == 'msie') {\n                    transform = el.css('-ms-transform');\n                    if (transform == \"\" || transform == 'none') {\n                      transform = el.parents().css('-ms-transform');\n                    }\n                  } else if (browserInfo.browser == 'chrome') {\n                    transform = el.css('-webkit-transform');\n                    if (transform == \"\" || transform == 'none') {\n                      transform = el.parents().css('-webkit-transform');\n                    }\n                  } else if (browserInfo.browser == 'opera') {\n                    transform = el.css('-o-transform');\n                    if (transform == \"\" || transform == 'none') {\n                      transform = el.parents().css('-o-transform');\n                    }\n                  } else if (browserInfo.browser == 'mozilla') {\n                    transform = el.css('-moz-transform');\n                    if (transform == \"\" || transform == 'none') {\n                      transform = el.parents().css('-moz-transform');\n                    }\n                  }\n                } else {\n                  return transform != \"\" && transform != 'none';\n                }\n              }\n              if (transform == \"\" || transform == 'none') {\n                transform = $(document.body).css('transform');\n              }\n              return transform != \"\" && transform != 'none' && transform != null;\n            },\n            getBrowser: function () {\n              var ua = navigator.userAgent.toLowerCase();\n              var match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n              var obj = {\n                browser: match[1] || \"\",\n                version: match[2] || \"0\"\n              };\n              if (ua.indexOf(\"rv:11.0\") >= 0 && ua.indexOf(\".net4.0c\") >= 0) {\n                obj.browser = \"msie\";\n                obj.version = \"11\";\n                match[1] = \"msie\";\n              }\n              if (ua.indexOf(\"edge\") >= 0) {\n                obj.browser = \"msie\";\n                obj.version = \"12\";\n                match[1] = \"msie\";\n              }\n              obj[match[1]] = match[1];\n              return obj;\n            }\n          });\n          $.jqx.browser = $.jqx.utilities.getBrowser();\n          $.jqx.isHidden = function (element) {\n            if (!element || !element[0]) return false;\n            var w = element[0].offsetWidth,\n              h = element[0].offsetHeight;\n            if (w === 0 || h === 0) return true;else {\n              return false;\n            }\n          };\n          $.jqx.ariaEnabled = true;\n          $.jqx.aria = function (that, property, value) {\n            if (!$.jqx.ariaEnabled) return;\n            if (property == undefined) {\n              $.each(that.aria, function (index, value) {\n                var attrValue = !that.base ? that.host.attr(index) : that.base.host.attr(index);\n                if (attrValue != undefined && !$.isFunction(attrValue)) {\n                  var newValue = attrValue;\n                  switch (value.type) {\n                    case \"number\":\n                      newValue = new Number(attrValue);\n                      if (isNaN(newValue)) newValue = attrValue;\n                      break;\n                    case \"boolean\":\n                      newValue = attrValue == \"true\" ? true : false;\n                      break;\n                    case \"date\":\n                      newValue = new Date(attrValue);\n                      if (newValue == \"Invalid Date\" || isNaN(newValue)) newValue = attrValue;\n                      break;\n                  }\n                  that[value.name] = newValue;\n                } else {\n                  var attrValue = that[value.name];\n                  if ($.isFunction(attrValue)) attrValue = that[value.name]();\n                  if (attrValue == undefined) attrValue = \"\";\n                  try {\n                    !that.base ? that.host.attr(index, attrValue.toString()) : that.base.host.attr(index, attrValue.toString());\n                  } catch (error) {}\n                }\n              });\n            } else {\n              try {\n                if (that.host) {\n                  if (!that.base) {\n                    if (that.host) {\n                      if (that.element.setAttribute) {\n                        that.element.setAttribute(property, value.toString());\n                      } else {\n                        that.host.attr(property, value.toString());\n                      }\n                    } else {\n                      that.attr(property, value.toString());\n                    }\n                  } else {\n                    if (that.base.host) {\n                      that.base.host.attr(property, value.toString());\n                    } else {\n                      that.attr(property, value.toString());\n                    }\n                  }\n                } else if (that.setAttribute) {\n                  that.setAttribute(property, value.toString());\n                }\n              } catch (error) {}\n            }\n          };\n          if (!Array.prototype.indexOf) {\n            Array.prototype.indexOf = function (elt /*, from*/) {\n              var len = this.length;\n              var from = Number(arguments[1]) || 0;\n              from = from < 0 ? Math.ceil(from) : Math.floor(from);\n              if (from < 0) from += len;\n              for (; from < len; from++) {\n                if (from in this && this[from] === elt) return from;\n              }\n              return -1;\n            };\n          }\n          $.jqx.mobile = $.jqx.mobile || {};\n          $.jqx.position = function (event) {\n            var left = parseInt(event.pageX);\n            var top = parseInt(event.pageY);\n            if ($.jqx.mobile.isTouchDevice()) {\n              var touches = $.jqx.mobile.getTouches(event);\n              var touch = touches[0];\n              left = parseInt(touch.pageX);\n              top = parseInt(touch.pageY);\n            }\n            return {\n              left: left,\n              top: top\n            };\n          };\n          $.extend($.jqx.mobile, {\n            _touchListener: function (e, me) {\n              var createTouchEvent = function (name, e) {\n                var event = document.createEvent('MouseEvents');\n                event.initMouseEvent(name, e.bubbles, e.cancelable, e.view, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n                event._pageX = e.pageX;\n                event._pageY = e.pageY;\n                return event;\n              };\n              var eventMap = {\n                'mousedown': 'touchstart',\n                'mouseup': 'touchend',\n                'mousemove': 'touchmove'\n              };\n              var event = createTouchEvent(eventMap[e.type], e);\n              e.target.dispatchEvent(event);\n              var fn = e.target['on' + eventMap[e.type]];\n              if (typeof fn === 'function') fn(e);\n            },\n            setMobileSimulator: function (element, value) {\n              if (this.isTouchDevice()) {\n                return;\n              }\n              this.simulatetouches = true;\n              if (value == false) {\n                this.simulatetouches = false;\n              }\n              var eventMap = {\n                'mousedown': 'touchstart',\n                'mouseup': 'touchend',\n                'mousemove': 'touchmove'\n              };\n              var self = this;\n              if (window.addEventListener) {\n                var subscribeToEvents = function () {\n                  for (var key in eventMap) {\n                    if (element.addEventListener) {\n                      element.removeEventListener(key, self._touchListener);\n                      element.addEventListener(key, self._touchListener, false);\n                    }\n\n                    //  document.removeEventListener(key, self._touchListener);\n                    //  document.addEventListener(key, self._touchListener, false);\n                  }\n                };\n                if ($.jqx.browser.msie) {\n                  subscribeToEvents();\n                } else {\n                  subscribeToEvents();\n                }\n              }\n            },\n            isTouchDevice: function () {\n              if (this.touchDevice != undefined) return this.touchDevice;\n              var txt = \"Browser CodeName: \" + navigator.appCodeName + \"\";\n              txt += \"Browser Name: \" + navigator.appName + \"\";\n              txt += \"Browser Version: \" + navigator.appVersion + \"\";\n              txt += \"Platform: \" + navigator.platform + \"\";\n              txt += \"User-agent header: \" + navigator.userAgent + \"\";\n              if (navigator.maxTouchPoints > 1) {\n                //return true;\n              }\n              if (txt.indexOf('Android') != -1) return true;\n              if (txt.indexOf('IEMobile') != -1) return true;\n              if (txt.indexOf('Windows Phone') != -1) return true;\n              if (txt.indexOf('WPDesktop') != -1) return true;\n              if (txt.indexOf('ZuneWP7') != -1) return true;\n              if (txt.indexOf('BlackBerry') != -1 && txt.indexOf('Mobile Safari') != -1) return true;\n              if (txt.indexOf('ipod') != -1) return true;\n              if (txt.indexOf('nokia') != -1 || txt.indexOf('Nokia') != -1) return true;\n              if (txt.indexOf('Chrome/17') != -1) return false;\n              if (txt.indexOf('CrOS') != -1) return false;\n              if (txt.indexOf('Opera') != -1 && txt.indexOf('Mobi') == -1 && txt.indexOf('Mini') == -1 && txt.indexOf('Platform: Win') != -1) {\n                return false;\n              }\n              if (txt.indexOf(\"HybridDeviceTouch\") != -1) {\n                return true;\n              }\n              if (txt.indexOf(\"HybridDeviceMouse\") != -1) {\n                return false;\n              }\n              if (txt.indexOf('Opera') != -1 && txt.indexOf('Mobi') != -1 && txt.indexOf('Opera Mobi') != -1) {\n                return true;\n              }\n              if (txt.indexOf('Mozilla/5.0 (X11; Linux x86_64)') != -1) {\n                return false;\n              }\n              var deviceTypes = {\n                ios: 'i(?:Pad|Phone|Pod)(?:.*)CPU(?: iPhone)? OS ',\n                android: '(Android |HTC_|Silk/)',\n                blackberry: 'BlackBerry(?:.*)Version\\/',\n                rimTablet: 'RIM Tablet OS ',\n                webos: '(?:webOS|hpwOS)\\/',\n                bada: 'Bada\\/'\n              };\n\n              // check for IPad, IPhone, IE and Chrome\n              try {\n                if (this.touchDevice != undefined) return this.touchDevice;\n                this.touchDevice = false;\n                for (var i in deviceTypes) {\n                  if (deviceTypes.hasOwnProperty(i)) {\n                    var prefix = deviceTypes[i];\n                    var match = txt.match(new RegExp('(?:' + prefix + ')([^\\\\s;]+)'));\n                    if (match) {\n                      if (i.toString() == \"blackberry\") {\n                        // handle touches through mouse pointer.\n                        this.touchDevice = false;\n                        return false;\n                      }\n                      this.touchDevice = true;\n                      return true;\n                    }\n                  }\n                }\n                var userAgent = navigator.userAgent;\n                if (navigator.platform.toLowerCase().indexOf('win') != -1) {\n                  if (userAgent.indexOf('Windows Phone') >= 0 || userAgent.indexOf('WPDesktop') >= 0 || userAgent.indexOf('IEMobile') >= 0 || userAgent.indexOf('ZuneWP7') >= 0) {\n                    this.touchDevice = true;\n                    return true;\n                  } else {\n                    if (userAgent.indexOf('Touch') >= 0) {\n                      var supported = 'MSPointerDown' in window || 'pointerdown' in window;\n                      if (supported) {\n                        this.touchDevice = true;\n                        return true;\n                      }\n                      if (userAgent.indexOf('ARM') >= 0) {\n                        this.touchDevice = true;\n                        return true;\n                      }\n                      this.touchDevice = false;\n                      return false;\n                    }\n                  }\n                }\n                if (navigator.platform.toLowerCase().indexOf('win') != -1) {\n                  this.touchDevice = false;\n                  return false;\n                }\n                if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n                  this.touchDevice = true;\n                }\n                return this.touchDevice;\n              } catch (e) {\n                this.touchDevice = false;\n                return false;\n              }\n            },\n            getLeftPos: function (inputObj) {\n              var returnValue = inputObj.offsetLeft;\n              while ((inputObj = inputObj.offsetParent) != null) {\n                if (inputObj.tagName != 'HTML') {\n                  returnValue += inputObj.offsetLeft;\n                  if (document.all) returnValue += inputObj.clientLeft;\n                }\n              }\n              return returnValue;\n            },\n            getTopPos: function (inputObj) {\n              var returnValue = inputObj.offsetTop;\n              var initialOffset = $(inputObj).coord();\n              while ((inputObj = inputObj.offsetParent) != null) {\n                if (inputObj.tagName != 'HTML') {\n                  returnValue += inputObj.offsetTop - inputObj.scrollTop;\n                  if (document.all) returnValue += inputObj.clientTop;\n                }\n              }\n              var agent = navigator.userAgent.toLowerCase();\n              var wp8 = (agent.indexOf('windows phone') != -1 || agent.indexOf('WPDesktop') != -1 || agent.indexOf('ZuneWP7') != -1 || agent.indexOf('msie 9') != -1 || agent.indexOf('msie 11') != -1 || agent.indexOf('msie 10') != -1) && agent.indexOf('touch') != -1;\n              if (wp8) {\n                return initialOffset.top;\n              }\n              if (this.isSafariMobileBrowser()) {\n                if (this.isSafari4MobileBrowser() && this.isIPadSafariMobileBrowser()) {\n                  return returnValue;\n                }\n                if (agent.indexOf('version/7') != -1) {\n                  return initialOffset.top;\n                }\n                if (agent.indexOf('version/6') != -1 || agent.indexOf('version/5') != -1) {\n                  returnValue = returnValue + $(window).scrollTop();\n                }\n                if (/(Android.*Chrome\\/[.0-9]* (!?Mobile))/.exec(navigator.userAgent)) {\n                  return returnValue;\n                  //       return returnValue + $(window).scrollTop();\n                }\n                if (/(Android.*Chrome\\/[.0-9]* Mobile)/.exec(navigator.userAgent)) {\n                  return returnValue;\n                  //        return returnValue + $(window).scrollTop();\n                }\n                return initialOffset.top;\n              }\n              return returnValue;\n            },\n            isChromeMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('android') != -1;\n              return result;\n            },\n            isOperaMiniMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('opera mini') != -1 || agent.indexOf('opera mobi') != -1;\n              return result;\n            },\n            isOperaMiniBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('opera mini') != -1;\n              return result;\n            },\n            isNewSafariMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;\n              result = result && agent.indexOf('version/5') != -1;\n              return result;\n            },\n            isSafari4MobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;\n              result = result && agent.indexOf('version/4') != -1;\n              return result;\n            },\n            isWindowsPhone: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('windows phone') != -1 || agent.indexOf('WPDesktop') != -1 || agent.indexOf('ZuneWP7') != -1 || agent.indexOf('msie 9') != -1 || agent.indexOf('msie 11') != -1 || agent.indexOf('msie 10') != -1 && agent.indexOf('touch') != -1;\n              return result;\n            },\n            isSafariMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              if (/(Android.*Chrome\\/[.0-9]* (!?Mobile))/.exec(navigator.userAgent)) {\n                return true;\n              }\n              if (/(Android.*Chrome\\/[.0-9]* Mobile)/.exec(navigator.userAgent)) {\n                return true;\n              }\n              var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1 || agent.indexOf('mobile safari') != -1;\n              return result;\n            },\n            isIPadSafariMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('ipad') != -1;\n              return result;\n            },\n            isMobileBrowser: function () {\n              var agent = navigator.userAgent.toLowerCase();\n              var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('android') != -1;\n              return result;\n            },\n            // Get the touch points from this event\n            getTouches: function (e) {\n              if (e.originalEvent) {\n                if (e.originalEvent.touches && e.originalEvent.touches.length) {\n                  return e.originalEvent.touches;\n                } else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {\n                  return e.originalEvent.changedTouches;\n                }\n              }\n              if (!e.touches) {\n                e.touches = new Array();\n                e.touches[0] = e.originalEvent != undefined ? e.originalEvent : e;\n                if (e.originalEvent != undefined && e.pageX) e.touches[0] = e;\n                if (e.type == 'mousemove') e.touches[0] = e;\n              }\n              return e.touches;\n            },\n            getTouchEventName: function (name) {\n              if (this.isWindowsPhone()) {\n                var agent = navigator.userAgent.toLowerCase();\n                if (agent.indexOf('windows phone 7') != -1) {\n                  if (name.toLowerCase().indexOf('start') != -1) return 'MSPointerDown';\n                  if (name.toLowerCase().indexOf('move') != -1) return 'MSPointerMove';\n                  if (name.toLowerCase().indexOf('end') != -1) return 'MSPointerUp';\n                }\n                if (name.toLowerCase().indexOf('start') != -1) return 'pointerdown';\n                if (name.toLowerCase().indexOf('move') != -1) return 'pointermove';\n                if (name.toLowerCase().indexOf('end') != -1) return 'pointerup';\n              } else {\n                return name;\n              }\n            },\n            // Dispatches a fake mouse event from a touch event\n            dispatchMouseEvent: function (name, touch, target) {\n              if (this.simulatetouches) return;\n              var e = document.createEvent('MouseEvent');\n              e.initMouseEvent(name, true, true, touch.view, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n              if (target != null) {\n                target.dispatchEvent(e);\n              }\n            },\n            // Find the root node of this target\n            getRootNode: function (target) {\n              while (target.nodeType !== 1) {\n                target = target.parentNode;\n              }\n              return target;\n            },\n            setTouchScroll: function (enable, key) {\n              if (!this.enableScrolling) this.enableScrolling = [];\n              this.enableScrolling[key] = enable;\n            },\n            touchScroll: function (element, scrollHeight, callback, key, horizontalScroll, verticalScroll) {\n              if (element == null) return;\n              var me = this;\n              var scrollY = 0;\n              var touchY = 0;\n              var movedY = 0;\n              var scrollX = 0;\n              var touchX = 0;\n              var movedX = 0;\n              if (!this.scrolling) this.scrolling = [];\n              this.scrolling[key] = false;\n              var moved = false;\n              var $element = $(element);\n              var touchTags = ['select', 'input', 'textarea'];\n              var touchStart = 0;\n              var touchEnd = 0;\n              if (!this.enableScrolling) this.enableScrolling = [];\n              this.enableScrolling[key] = true;\n              var key = key;\n              var touchStartName = this.getTouchEventName('touchstart') + \".touchScroll\";\n              var touchEndName = this.getTouchEventName('touchend') + \".touchScroll\";\n              var touchMoveName = this.getTouchEventName('touchmove') + \".touchScroll\";\n\n              //            horizontalScroll.fadeOut(0);\n              //            verticalScroll.fadeOut(0);\n\n              var view, indicator, relative, xframe, xdelta, xmax, min, max, offset, reference, pressed, xform, jqxAnimations, xjqxAnimations, frame, timestamp, ticker, amplitude, target, xtarget, xreference, timeConstant;\n              max = scrollHeight;\n              var min = 0;\n              var offset = 0;\n              var xoffset = 0;\n              var initialOffset = 0;\n              var initialXOffset = 0;\n              var xmax = horizontalScroll.jqxScrollBar('max');\n              var timeConstant = 325; // ms\n\n              function ypos(e) {\n                // touch event\n                if (e.targetTouches && e.targetTouches.length >= 1) {\n                  return e.targetTouches[0].clientY;\n                } else if (e.originalEvent && e.originalEvent.clientY !== undefined) {\n                  return e.originalEvent.clientY;\n                } else {\n                  var touches = me.getTouches(e);\n                  return touches[0].clientY;\n                }\n\n                // mouse event\n                //    return e.clientY;\n              }\n              function xpos(e) {\n                // touch event\n                if (e.targetTouches && e.targetTouches.length >= 1) {\n                  return e.targetTouches[0].clientX;\n                } else if (e.originalEvent && e.originalEvent.clientX !== undefined) {\n                  return e.originalEvent.clientX;\n                } else {\n                  var touches = me.getTouches(e);\n                  return touches[0].clientX;\n                }\n\n                // mouse event\n                //   return e.clientX;\n              }\n              var track = function () {\n                var now, elapsed, delta, v;\n                now = Date.now();\n                elapsed = now - timestamp;\n                timestamp = now;\n                delta = offset - frame;\n                var xdelta = xoffset - xframe;\n                frame = offset;\n                xframe = xoffset;\n                pressed = true;\n                v = 1000 * delta / (1 + elapsed);\n                var xv = 1000 * xdelta / (1 + elapsed);\n                jqxAnimations = 0.8 * v + 0.2 * jqxAnimations;\n                xjqxAnimations = 0.8 * xv + 0.2 * xjqxAnimations;\n              };\n              var tapped = false;\n              var touchStart = function (event) {\n                if (!me.enableScrolling[key]) return true;\n\n                // Allow certain HTML tags to receive touch events\n                if ($.inArray(event.target.tagName.toLowerCase(), touchTags) !== -1) {\n                  return;\n                }\n                offset = verticalScroll.jqxScrollBar('value');\n                xoffset = horizontalScroll.jqxScrollBar('value');\n                var touches = me.getTouches(event);\n                var touch = touches[0];\n                if (touches.length == 1) {\n                  me.dispatchMouseEvent('mousedown', touch, me.getRootNode(touch.target));\n                }\n                xmax = horizontalScroll.jqxScrollBar('max');\n                max = verticalScroll.jqxScrollBar('max');\n                function tap(e) {\n                  tapped = false;\n                  pressed = true;\n                  reference = ypos(e);\n                  xreference = xpos(e);\n                  jqxAnimations = amplitude = xjqxAnimations = 0;\n                  frame = offset;\n                  xframe = xoffset;\n                  timestamp = Date.now();\n                  clearInterval(ticker);\n                  ticker = setInterval(track, 100);\n                  initialOffset = offset;\n                  initialXOffset = xoffset;\n                  if (offset > 0 && offset < max && verticalScroll[0].style.visibility != \"hidden\") {\n                    //      e.preventDefault();\n                  }\n                  //    if (xoffset > 0 && xoffset < xmax && horizontalScroll[0].style.visibility != \"hidden\") {\n                  //        e.preventDefault();\n\n                  //      e.stopPropagation();\n                  //   e.stopPropagation();\n                  // return false;\n                }\n                tap(event);\n                moved = false;\n                touchY = touch.pageY;\n                touchX = touch.pageX;\n                if (me.simulatetouches) {\n                  if (touch._pageY != undefined) {\n                    touchY = touch._pageY;\n                    touchX = touch._pageX;\n                  }\n                }\n                me.scrolling[key] = true;\n                scrollY = 0;\n                scrollX = 0;\n                return true;\n              };\n              if ($element.on) {\n                $element.on(touchStartName, touchStart);\n              } else {\n                $element.bind(touchStartName, touchStart);\n              }\n              var scroll = function (top, event) {\n                offset = top > max ? max : top < min ? min : top;\n                callback(null, top, 0, 0, event);\n                return top > max ? \"max\" : top < min ? \"min\" : \"value\";\n              };\n              var hscroll = function (left, event) {\n                xoffset = left > xmax ? xmax : left < min ? min : left;\n                callback(left, null, 0, 0, event);\n                return left > xmax ? \"max\" : left < min ? \"min\" : \"value\";\n              };\n              function autoScroll() {\n                var elapsed, delta;\n                if (amplitude) {\n                  elapsed = Date.now() - timestamp;\n                  delta = -amplitude * Math.exp(-elapsed / timeConstant);\n                  if (delta > 0.5 || delta < -0.5) {\n                    scroll(target + delta);\n                    requestAnimationFrame(autoScroll);\n                  } else {\n                    scroll(target);\n                    //     verticalScroll.fadeOut('fast');\n                  }\n                }\n              }\n              function hAutoScroll() {\n                var elapsed, delta;\n                if (amplitude) {\n                  elapsed = Date.now() - timestamp;\n                  delta = -amplitude * Math.exp(-elapsed / timeConstant);\n                  if (delta > 0.5 || delta < -0.5) {\n                    hscroll(xtarget + delta);\n                    requestAnimationFrame(hAutoScroll);\n                  } else {\n                    hscroll(xtarget);\n                    //        horizontalScroll.fadeOut('fast');\n                  }\n                }\n              }\n              var touchMove = function (event) {\n                if (!me.enableScrolling[key]) return true;\n                if (!me.scrolling[key]) {\n                  return true;\n                }\n                if (tapped) {\n                  event.preventDefault();\n                  event.stopPropagation();\n                }\n                var touches = me.getTouches(event);\n                if (touches.length > 1) {\n                  return true;\n                }\n                var pageY = touches[0].pageY;\n                var pageX = touches[0].pageX;\n                if (me.simulatetouches) {\n                  if (touches[0]._pageY != undefined) {\n                    pageY = touches[0]._pageY;\n                    pageX = touches[0]._pageX;\n                  }\n                }\n                var dy = pageY - touchY;\n                var dx = pageX - touchX;\n                touchEnd = pageY;\n                var touchHorizontalEnd = pageX;\n                movedY = dy - scrollY;\n                movedX = dx - scrollX;\n                moved = true;\n                scrollY = dy;\n                scrollX = dx;\n                var hScrollVisible = horizontalScroll != null ? horizontalScroll[0].style.visibility != 'hidden' : true;\n                var vScrollVisible = verticalScroll != null ? verticalScroll[0].style.visibility != 'hidden' : true;\n                function drag(e) {\n                  var y, delta, x;\n                  if (pressed) {\n                    y = ypos(e);\n                    x = xpos(e);\n                    delta = reference - y;\n                    xdelta = xreference - x;\n                    var dragged = \"value\";\n                    if (delta > 2 || delta < -2) {\n                      reference = y;\n                      dragged = scroll(offset + delta, e);\n                      track();\n                      if (dragged == \"min\" && initialOffset === 0) {\n                        return true;\n                      }\n                      if (dragged == \"max\" && initialOffset === max) {\n                        return true;\n                      }\n                      if (!vScrollVisible) {\n                        return true;\n                      }\n                      e.preventDefault();\n                      e.stopPropagation();\n                      tapped = true;\n                      return false;\n                    } else {\n                      if (xdelta > 2 || xdelta < -2) {\n                        xreference = x;\n                        dragged = hscroll(xoffset + xdelta, e);\n                        track();\n                        if (dragged == \"min\" && initialXOffset === 0) {\n                          return true;\n                        }\n                        if (dragged == \"max\" && initialXOffset === xmax) {\n                          return true;\n                        }\n                        if (!hScrollVisible) {\n                          return true;\n                        }\n                        tapped = true;\n                        e.preventDefault();\n                        e.stopPropagation();\n                        return false;\n                      }\n                    }\n                    e.preventDefault();\n                  }\n                }\n                if (hScrollVisible || vScrollVisible) {\n                  if (hScrollVisible || vScrollVisible) {\n                    drag(event);\n\n                    //      callback(-movedX * 1, -movedY * 1, dx, dy, event);\n                    //event.preventDefault();\n                    //event.stopPropagation();\n                    //if (event.preventManipulation) {\n                    //    event.preventManipulation();\n                    //}\n                    //return false;\n                  }\n                }\n              };\n              if ($element.on) {\n                $element.on(touchMoveName, touchMove);\n              } else $element.bind(touchMoveName, touchMove);\n              var touchCancel = function (event) {\n                if (!me.enableScrolling[key]) return true;\n                var touch = me.getTouches(event)[0];\n                if (!me.scrolling[key]) {\n                  return true;\n                }\n                pressed = false;\n                clearInterval(ticker);\n                if (jqxAnimations > 10 || jqxAnimations < -10) {\n                  amplitude = 0.8 * jqxAnimations;\n                  target = Math.round(offset + amplitude);\n                  timestamp = Date.now();\n                  requestAnimationFrame(autoScroll);\n                  //             verticalScroll.fadeIn(100);\n                } else if (xjqxAnimations > 10 || xjqxAnimations < -10) {\n                  amplitude = 0.8 * xjqxAnimations;\n                  xtarget = Math.round(xoffset + amplitude);\n                  timestamp = Date.now();\n                  requestAnimationFrame(hAutoScroll);\n                  //          horizontalScroll.fadeIn(100);\n                } else {\n                  //        horizontalScroll.fadeOut(100);\n                  //        verticalScroll.fadeOut(100);\n                }\n                me.scrolling[key] = false;\n                if (moved) {\n                  me.dispatchMouseEvent('mouseup', touch, event.target);\n                } else {\n                  var touch = me.getTouches(event)[0],\n                    t = me.getRootNode(touch.target);\n\n                  //        event.preventDefault();\n                  //         event.stopPropagation();\n                  // Dispatch fake mouse up and click events if this touch event did not move\n                  me.dispatchMouseEvent('mouseup', touch, t);\n                  me.dispatchMouseEvent('click', touch, t);\n                  return true;\n                }\n              };\n              if (this.simulatetouches) {\n                var windowBindFunc = $(window).on != undefined || $(window).bind;\n                var windowMouseUp = function (event) {\n                  try {\n                    touchCancel(event);\n                  } catch (er) {}\n                  me.scrolling[key] = false;\n                };\n                $(window).on != undefined ? $(document).on('mouseup.touchScroll', windowMouseUp) : $(document).bind('mouseup.touchScroll', windowMouseUp);\n                if (window.frameElement) {\n                  if (window.top != null) {\n                    var eventHandle = function (event) {\n                      try {\n                        touchCancel(event);\n                      } catch (er) {}\n                      me.scrolling[key] = false;\n                    };\n                    if (window.top.document) {\n                      $(window.top.document).on ? $(window.top.document).on('mouseup', eventHandle) : $(window.top.document).bind('mouseup', eventHandle);\n                    }\n                  }\n                }\n                var docBindFunc = $(document).on != undefined || $(document).bind;\n                var touchEndFunc = function (event) {\n                  if (!me.scrolling[key]) {\n                    return true;\n                  }\n                  me.scrolling[key] = false;\n                  var touch = me.getTouches(event)[0],\n                    target = me.getRootNode(touch.target);\n\n                  // Dispatch fake mouse up and click events if this touch event did not move\n                  me.dispatchMouseEvent('mouseup', touch, target);\n                  me.dispatchMouseEvent('click', touch, target);\n                };\n                $(document).on != undefined ? $(document).on('touchend', touchEndFunc) : $(document).bind('touchend', touchEndFunc);\n              }\n              if ($element.on) {\n                $element.on('dragstart', function (event) {\n                  event.preventDefault();\n                });\n                $element.on('selectstart', function (event) {\n                  event.preventDefault();\n                });\n              }\n              $element.on ? $element.on(touchEndName + ' touchcancel.touchScroll', touchCancel) : $element.bind(touchEndName + ' touchcancel.touchScroll', touchCancel);\n            }\n          });\n          $.jqx.cookie = $.jqx.cookie || {};\n          $.extend($.jqx.cookie, {\n            cookie: function (key, value, options) {\n              // set cookie.\n              if (arguments.length > 1 && String(value) !== \"[object Object]\") {\n                options = $.extend({}, options);\n                if (value === null || value === undefined) {\n                  options.expires = -1;\n                }\n                if (typeof options.expires === 'number') {\n                  var days = options.expires,\n                    t = options.expires = new Date();\n                  t.setDate(t.getDate() + days);\n                }\n                value = String(value);\n                return document.cookie = [encodeURIComponent(key), '=', options.raw ? value : encodeURIComponent(value), options.expires ? '; expires=' + options.expires.toUTCString() : '',\n                // use expires attribute, max-age is not supported by IE\n                options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');\n              }\n              // get cookie...\n              options = value || {};\n              var result,\n                decode = options.raw ? function (s) {\n                  return s;\n                } : decodeURIComponent;\n              return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;\n            }\n          });\n\n          // stringutilities\n          $.jqx.string = $.jqx.string || {};\n          $.extend($.jqx.string, {\n            replace: function (text, stringToFind, stringToReplace) {\n              if (stringToFind === stringToReplace) return this;\n              var temp = text;\n              var index = temp.indexOf(stringToFind);\n              while (index != -1) {\n                temp = temp.replace(stringToFind, stringToReplace);\n                index = temp.indexOf(stringToFind);\n              }\n              return temp;\n            },\n            contains: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              return fullString.indexOf(value) != -1;\n            },\n            containsIgnoreCase: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              return fullString.toString().toUpperCase().indexOf(value.toString().toUpperCase()) != -1;\n            },\n            equals: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              fullString = this.normalize(fullString);\n              if (value.length == fullString.length) {\n                return fullString.slice(0, value.length) == value;\n              }\n              return false;\n            },\n            equalsIgnoreCase: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              fullString = this.normalize(fullString);\n              if (value.length == fullString.length) {\n                return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();\n              }\n              return false;\n            },\n            startsWith: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              return fullString.slice(0, value.length) == value;\n            },\n            startsWithIgnoreCase: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();\n            },\n            normalize: function (fullString) {\n              if (fullString.charCodeAt(fullString.length - 1) == 65279) {\n                fullString = fullString.substring(0, fullString.length - 1);\n              }\n              return fullString;\n            },\n            endsWith: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              fullString = this.normalize(fullString);\n              return fullString.slice(-value.length) == value;\n            },\n            endsWithIgnoreCase: function (fullString, value) {\n              if (fullString == null || value == null) return false;\n              fullString = this.normalize(fullString);\n              return fullString.toUpperCase().slice(-value.length) == value.toUpperCase();\n            }\n          });\n          $.extend($.easing, {\n            easeOutBack: function (x, t, b, c, d, s) {\n              if (s == undefined) s = 1.70158;\n              return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n            },\n            easeInQuad: function (x, t, b, c, d) {\n              return c * (t /= d) * t + b;\n            },\n            easeInOutCirc: function (x, t, b, c, d) {\n              if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n              return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n            },\n            easeInOutSine: function (x, t, b, c, d) {\n              return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n            },\n            easeInCubic: function (x, t, b, c, d) {\n              return c * (t /= d) * t * t + b;\n            },\n            easeOutCubic: function (x, t, b, c, d) {\n              return c * ((t = t / d - 1) * t * t + 1) + b;\n            },\n            easeInOutCubic: function (x, t, b, c, d) {\n              if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n              return c / 2 * ((t -= 2) * t * t + 2) + b;\n            },\n            easeInSine: function (x, t, b, c, d) {\n              return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n            },\n            easeOutSine: function (x, t, b, c, d) {\n              return c * Math.sin(t / d * (Math.PI / 2)) + b;\n            },\n            easeInOutSine: function (x, t, b, c, d) {\n              return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n            }\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          if ($.event && $.event.special) {\n            $.extend($.event.special, {\n              \"close\": {\n                noBubble: true\n              },\n              \"open\": {\n                noBubble: true\n              },\n              \"cellclick\": {\n                noBubble: true\n              },\n              \"rowclick\": {\n                noBubble: true\n              },\n              \"tabclick\": {\n                noBubble: true\n              },\n              \"selected\": {\n                noBubble: true\n              },\n              \"expanded\": {\n                noBubble: true\n              },\n              \"collapsed\": {\n                noBubble: true\n              },\n              \"valuechanged\": {\n                noBubble: true\n              },\n              \"expandedItem\": {\n                noBubble: true\n              },\n              \"collapsedItem\": {\n                noBubble: true\n              },\n              \"expandingItem\": {\n                noBubble: true\n              },\n              \"collapsingItem\": {\n                noBubble: true\n              }\n            });\n          }\n          if ($.fn.extend) {\n            $.fn.extend({\n              ischildof: function (filter_string) {\n                if (!$(this).parents) {\n                  var result = filter_string.element.contains(this.element);\n                  return result;\n                }\n                var parents = $(this).parents().get();\n                for (var j = 0; j < parents.length; j++) {\n                  if (typeof filter_string != \"string\") {\n                    var parent = parents[j];\n                    if (filter_string !== undefined) {\n                      if (parent == filter_string[0]) return true;\n                    }\n                  } else {\n                    if (filter_string !== undefined) {\n                      if ($(parents[j]).is(filter_string)) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n                return false;\n              }\n            });\n          }\n          $.fn.jqxProxy = function () {\n            var widget = $(this).data().jqxWidget;\n            var args = Array.prototype.slice.call(arguments, 0);\n            var element = widget.element;\n            if (!element) element = widget.base.element;\n            return $.jqx.jqxWidgetProxy(widget.widgetName, element, args);\n          };\n          var originalVal = $.originalVal = $.fn.val;\n          $.fn.val = function (value) {\n            if (typeof value == 'undefined') {\n              if ($(this).hasClass('jqx-widget') || $(this).hasClass('jqx-input-group')) {\n                var widget = $(this).data().jqxWidget;\n                if (widget && widget.val) {\n                  return widget.val();\n                }\n              }\n              if (this[0] && this[0].tagName.toLowerCase().indexOf('angular') >= 0) {\n                var widget = $(this).find('.jqx-widget').data().jqxWidget;\n                if (widget && widget.val) {\n                  return widget.val();\n                }\n              }\n              return originalVal.call(this);\n            } else {\n              if ($(this).hasClass('jqx-widget') || $(this).hasClass('jqx-input-group')) {\n                var widget = $(this).data().jqxWidget;\n                if (widget && widget.val) {\n                  if (arguments.length != 2) {\n                    return widget.val(value);\n                  } else {\n                    return widget.val(value, arguments[1]);\n                  }\n                }\n              }\n              if (this[0] && this[0].tagName.toLowerCase().indexOf('angular') >= 0) {\n                var widget = $(this).find('.jqx-widget').data().jqxWidget;\n                if (widget && widget.val) {\n                  if (arguments.length != 2) {\n                    return widget.val(value);\n                  } else {\n                    return widget.val(value, arguments[1]);\n                  }\n                }\n              }\n              return originalVal.call(this, value);\n            }\n          };\n          if ($.fn.modal && $.fn.modal.Constructor) {\n            $.fn.modal.Constructor.prototype.enforceFocus = function () {\n              $(document).off('focusin.bs.modal') // guard against infinite focus loop\n              .on('focusin.bs.modal', $.proxy(function (e) {\n                if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n                  if ($(e.target).parents().hasClass('jqx-popup')) return true;\n                  this.$element.trigger('focus');\n                }\n              }, this));\n            };\n          }\n          $.fn.coord = function (options) {\n            var docElem,\n              win,\n              box = {\n                top: 0,\n                left: 0\n              },\n              elem = this[0],\n              doc = elem && elem.ownerDocument;\n            if (!doc) {\n              return;\n            }\n            docElem = doc.documentElement;\n            if (!$.contains(docElem, elem)) {\n              return box;\n            }\n            if (typeof elem.getBoundingClientRect !== undefined) {\n              box = elem.getBoundingClientRect();\n            }\n            var getWindow = function (elem) {\n              return $.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n            };\n            win = getWindow(doc);\n            var additionalLeftOffset = 0;\n            var additionalTopOffset = 0;\n            var agent = navigator.userAgent.toLowerCase();\n            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1;\n            if (result) {\n              // fix for iphone/ipad left offsets.\n              additionalLeftOffset = 2;\n            }\n            if (true == options) {\n              if (document.body.style.position != 'static' && document.body.style.position != '') {\n                var coords = $(document.body).coord();\n                additionalLeftOffset = -coords.left;\n                additionalTopOffset = -coords.top;\n              }\n            }\n            return {\n              top: additionalTopOffset + box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n              left: additionalLeftOffset + box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n            };\n          };\n          $.jqx.ripplers = [];\n          $.jqx.ripple = function (element, hostElement, hostElementType) {\n            if (!hostElement) {\n              hostElement = element;\n            }\n            var rippler = $(element);\n            var mouseCaptured = false;\n            rippler.append(\"<span class='ink'></span>\");\n            var ink = rippler.find('.ink');\n            var hasRippler = false;\n            for (var i = 0; i < $.jqx.ripplers.length; i++) {\n              var ripplerItem = $.jqx.ripplers[i];\n              if (ripplerItem.element[0] === element[0]) {\n                hasRippler = true;\n                break;\n              }\n            }\n            if (!hasRippler) {\n              $.jqx.ripplers.push({\n                ink: ink,\n                element: element,\n                hostElement: hostElement,\n                hostElementType: hostElementType\n              });\n            }\n            if (hostElementType === \"checkbox\" || hostElementType === \"radiobutton\") {\n              // set .ink diametr\n              var d = Math.max(rippler.outerWidth(), rippler.outerHeight());\n              ink.css({\n                height: d,\n                width: d\n              });\n              var x = rippler.width() / 2 - ink.width() / 2;\n              var y = rippler.height() / 2 - ink.height() / 2;\n\n              // set .ink position and add class .animate\n              ink.css({\n                top: y + 'px',\n                left: x + 'px'\n              });\n            }\n\n            // Ripple-effect animation\n            if ($.jqx.ripplers.length === 1) {\n              $(document).on('mouseup', function (e) {\n                $.jqx.ripple.mouseCaptured = false;\n                for (var i = 0; i < $.jqx.ripplers.length; i++) {\n                  var rippler = $.jqx.ripplers[i];\n                  rippler.ink.removeClass('active');\n                  rippler.element.removeClass('active');\n                  if (hostElementType !== \"checkbox\" && hostElementType !== \"radiobutton\") {\n                    if (rippler.ink.hasClass('animate')) {\n                      rippler.ink.removeClass('animate');\n                    }\n                  }\n                }\n              });\n            }\n            hostElement.off('mousedown.ripple');\n            hostElement.on('mousedown.ripple', function (e) {\n              var rippler = $(element);\n              $.jqx.ripple.mouseCaptured = true;\n              setTimeout(function () {\n                // create .ink element if it doesn't exist\n\n                if (rippler.find('.ink').length == 0) {\n                  rippler.append(\"<span class='ink'></span>\");\n                }\n                var ink = rippler.find('.ink');\n\n                // prevent quick double clicks\n                ink.removeClass('animate');\n\n                // set .ink diametr\n                if (!ink.height() && !ink.width()) {\n                  var d = Math.max(rippler.outerWidth(), rippler.outerHeight());\n                  ink.css({\n                    height: d,\n                    width: d\n                  });\n                }\n                if (hostElementType === \"checkbox\" || hostElementType === \"radiobutton\") {\n                  if (hostElementType === \"checkbox\") {\n                    if (hostElement.jqxCheckBox('disabled')) {\n                      return;\n                    }\n                  }\n                  if (hostElementType === \"radiobutton\") {\n                    if (hostElement.jqxRadioButton('disabled')) {\n                      return;\n                    }\n                  }\n\n                  // get click coordinates\n                  var x = rippler.width() / 2 - ink.width() / 2;\n                  var y = rippler.height() / 2 - ink.height() / 2;\n\n                  // set .ink position and add class .animate\n                  ink.css({\n                    top: y + 'px',\n                    left: x + 'px'\n                  }).addClass('animate');\n                  ink.on('animationend', function () {\n                    if ($.jqx.ripple.mouseCaptured) {\n                      ink.removeClass('animate');\n                      ink.addClass('active');\n                      element.addClass('active');\n                    }\n                  });\n                  return;\n                }\n\n                // get click coordinates\n                var x = e.pageX - rippler.offset().left - ink.width() / 2;\n                var y = e.pageY - rippler.offset().top - ink.height() / 2;\n\n                // set .ink position and add class .animate\n                ink.css({\n                  top: y + 'px',\n                  left: x + 'px'\n                }).addClass('animate');\n              });\n            });\n          };\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/3907: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          var ArrayExporter = function () {\n            var exportModules = {},\n              data,\n              dataFields,\n              styles,\n              exporter,\n              stylesArray,\n              hierarchy,\n              exportFormat,\n              filename;\n            function exportData(exporter, data, dataFields, styles, hierarchy, exportFormat, filename) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              that.hierarchy = hierarchy;\n              that.exportFormat = exportFormat;\n              that.filename = filename;\n              exporter.beginFile(filename);\n              exportHeader(exporter);\n              exportContent(exporter);\n              exporter.endFile(filename);\n              return exporter.getFile();\n            }\n            function exportHeader(exporter) {\n              var exportHeaders = true;\n              $.each(dataFields, function () {\n                if (this.hidden) {\n                  exportHeaders = false;\n                  return false;\n                }\n              });\n              exporter.beginHeader(exportHeaders);\n              var index = 0;\n              for (var cellContent in dataFields) {\n                if (dataFields[cellContent].columnsDataFields) {\n                  cellContent = dataFields[cellContent].columnsDataFields[index].displayfield;\n                }\n                var style = getHeaderStyle(cellContent, dataFields[cellContent]);\n                exporter.appendHeaderCell(dataFields[cellContent], cellContent, style, exportHeaders, index);\n                index++;\n              }\n              exporter.endHeader(exportHeaders);\n            }\n            function exportContent(exporter) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              exporter.beginBody();\n              if (that.hierarchy) {\n                var exporHierarchy = function (data) {\n                  for (var i = 0; i < data.length; i += 1) {\n                    if (data[i] !== undefined) {\n                      exporter.hierarchy = true;\n                      exporter.beginRow(data[i].level);\n                      exportRow(exporter, data[i], i, true);\n                      if (data[i].records) {\n                        exporter.beginRows(data[i].level);\n                        exporHierarchy(data[i].records);\n                        exporter.endRows(data[i].level);\n                      }\n                      exporter.endRow(data[i].level);\n                    }\n                  }\n                };\n                exporHierarchy(data);\n                exporter.endBody();\n                return;\n              }\n              for (var i = 0; i < data.length; i += 1) {\n                if (data[i] !== undefined) {\n                  exportRow(exporter, data[i], i);\n                }\n              }\n              exporter.endBody();\n            }\n            function exportRow(exporter, data, rowId, hierarchy) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              var style;\n              if (hierarchy != true) {\n                exporter.beginRow();\n              }\n              var indx = 0;\n              for (var column in dataFields) {\n                if (dataFields[column].columnsDataFields) {\n                  column = dataFields[column].columnsDataFields[indx].displayfield;\n                }\n                style = getRowCellStyle(rowId, column);\n                if (style) {\n                  if (style.level != undefined) {\n                    if (style.index - 1 > data.level && style.index - 1 < style.maxLevel) {\n                      indx++;\n                      continue;\n                    }\n                  }\n                  if (style.maxLevel != undefined) {\n                    if (style.index - 1 == style.maxLevel) {\n                      style = $.extend({}, style);\n                      style.merge = style.maxLevel - data.level - 1;\n                    }\n                  }\n                }\n                if (data.level != undefined && data.label != undefined) {\n                  if (that.exportFormat === \"xml\" || that.exportFormat === \"json\") {\n                    var dataGroup = {};\n                    dataGroup['text'] = \"group\";\n                    exporter.appendBodyCell(data.label, dataGroup, style, data, indx, \"group\");\n                    break;\n                  }\n                }\n                if (data.hasOwnProperty(column)) {\n                  exporter.appendBodyCell(data[column], dataFields[column], style, data, indx);\n                } else {\n                  exporter.appendBodyCell(\"\", dataFields[column], style, data, indx);\n                }\n                indx++;\n              }\n              if (hierarchy != true) {\n                exporter.endRow();\n              }\n            }\n            function getHeaderStyle(columnName, dataField) {\n              if (dataField.style) {\n                return styles[dataField.style];\n              }\n              var rowStyles = getStylesArray();\n              if (rowStyles.length > 0) {\n                return rowStyles[0].style;\n              }\n              return null;\n            }\n            function getStylesArray() {\n              if (!stylesArray) {\n                stylesArray = new Array();\n                $.each(styles, function (index, value) {\n                  stylesArray[stylesArray.length] = {\n                    name: index,\n                    style: value\n                  };\n                });\n              }\n              return stylesArray;\n            }\n            function getRowCellStyle(rowId, column) {\n              var dataField = dataFields[column];\n              if (dataField) {\n                if (dataField.customCellStyles) {\n                  var customStyle = dataField.customCellStyles[rowId];\n                  if (customStyle) {\n                    return styles[customStyle];\n                  }\n                }\n                if (dataField.cellStyle) {\n                  if (dataField.cellAltStyle) {\n                    var styleId = rowId % 2;\n                    if (styleId == 0) return styles[dataField.cellStyle];\n                    return styles[dataField.cellAltStyle];\n                  }\n                  return styles[dataField.cellStyle];\n                } else {\n                  var rowStyles = getStylesArray();\n                  if (rowStyles.length > 0) {\n                    var styleId = rowId % (rowStyles.length - 1);\n                    var style = rowStyles[styleId + 1].style;\n                    return style;\n                  }\n                }\n              }\n              return null;\n            }\n            function createHiddenInput(value, name, form) {\n              var input = document.createElement('input');\n              input.name = name;\n              input.value = value;\n              input.type = 'hidden';\n              form.appendChild(input);\n              return input;\n            }\n            function createHiddenTextArea(value, name, form) {\n              var textArea = document.createElement('textarea');\n              textArea.name = name;\n              textArea.value = value;\n              //      textArea.type = 'hidden';\n              form.appendChild(textArea);\n              return textArea;\n            }\n            function createForm(filename, format, content, exportServer, charset) {\n              var form = document.createElement('form');\n              createHiddenInput(filename, 'filename', form);\n              createHiddenInput(format, 'format', form);\n              createHiddenTextArea(content, 'content', form);\n              if (exportServer == undefined || exportServer == '') {\n                if (window && window.location.toString().indexOf('jqwidgets.com') >= 0) {\n                  exportServer = 'https://jqwidgets.com/export_server/dataexport.php';\n                } else {\n                  exportServer = 'http://jquerygrid.net/export_server/dataexport.php';\n                }\n              }\n              form.action = exportServer;\n              form.method = 'post';\n              if (charset) {\n                form.acceptCharset = charset;\n              }\n              document.body.appendChild(form);\n              return form;\n            }\n            exporter = function (inputData, inputDataFields, inputStyles, exportServer, hierarchy, exportFormat) {\n              if (!(this instanceof ArrayExporter)) {\n                return new ArrayExporter(inputData, inputDataFields, inputStyles, hierarchy, exportFormat);\n              }\n              data = inputData;\n              dataFields = inputDataFields;\n              styles = inputStyles;\n              this.exportTo = function (format, hierarchy, exportFormat, filename) {\n                format = format.toString().toLowerCase();\n                var module = exportModules[format];\n                if (typeof module === 'undefined') {\n                  throw 'You can\\'t export to ' + format + ' format.';\n                }\n                if (format === \"pdf\" && filename == undefined) {\n                  var table = this.exportTo(format, hierarchy, format, \"pdf\");\n                  if (!$.jqx.pdfExport) {\n                    $.jqx.pdfExport = {\n                      orientation: \"portrait\",\n                      paperSize: \"a4\"\n                    };\n                  }\n                  var doc = new pdfDataExport($.jqx.pdfExport.orientation, 'pt', $.jqx.pdfExport.paperSize);\n                  doc.cellInitialize();\n                  var headerCells = $(table).find('th');\n                  var tableRows = $(table).find('tr');\n                  var rows = 0;\n                  doc.setFontSize(13 * 72 / 96);\n                  var totalWidth = 595;\n                  switch ($.jqx.pdfExport.paperSize) {\n                    case \"legal\":\n                      var totalWidth = 612;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 1008;\n                      }\n                      break;\n                    case \"letter\":\n                      var totalWidth = 612;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 792;\n                      }\n                      break;\n                    case \"a3\":\n                      var totalWidth = 841;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 1190;\n                      }\n                      break;\n                    case \"a4\":\n                      var totalWidth = 595;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 842;\n                      }\n                      break;\n                    case \"a5\":\n                      var totalWidth = 420;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 595;\n                      }\n                      break;\n                  }\n                  totalWidth -= 20;\n                  var totalColumnsWidth = 0;\n                  var columnWidths = [];\n                  $.each(headerCells, function (index) {\n                    var width = parseInt(this.style.width);\n                    if (isNaN(width)) {\n                      width = 25;\n                    }\n                    var widthPoints = width * 72 / 96;\n                    columnWidths[index] = widthPoints;\n                    totalColumnsWidth += widthPoints;\n                  });\n                  if (headerCells.length === 0) {\n                    $.each(tableRows[0].cells, function (index) {\n                      var width = parseInt(this.style.width);\n                      if (isNaN(width)) {\n                        width = totalWidth / tableRows[0].cells.length;\n                      }\n                      var widthPoints = width * 72 / 96;\n                      columnWidths[index] = widthPoints;\n                      totalColumnsWidth += widthPoints;\n                    });\n                  }\n                  if (totalColumnsWidth > totalWidth) {\n                    $.each(columnWidths, function (index) {\n                      columnWidths[index] = columnWidths[index] / totalColumnsWidth * 100;\n                      columnWidths[index] = columnWidths[index] * totalWidth / 100;\n                    });\n                  }\n                  $.each(headerCells, function (index) {\n                    var widthPoints = columnWidths[index];\n                    var heightPoints = 25 * 72 / 96;\n                    var textDimension = doc.getTextDimensions($(this).html());\n                    var cellText = $(this).html();\n                    if (textDimension.w + 3 > widthPoints) {\n                      var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                      var newText = splitText[0];\n                      if (newText.length > 3) {\n                        cellText = newText.substring(0, newText.length - 3) + \"...\";\n                      } else cellText = newText.substring(0, 1) + \"...\";\n                      var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                      var newText = splitText[0];\n                      if (newText != cellText) {\n                        cellText = newText;\n                      }\n                    }\n                    doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                  });\n                  rows++;\n                  $.each(tableRows, function (index) {\n                    if (index === 0) return true;\n                    var rowCells = $(this).children();\n                    var isTreeGrid = rowCells.length > headerCells.length && headerCells.length > 0;\n                    if (isTreeGrid) {\n                      var mergeLength = rowCells.length - headerCells.length;\n                      var cellText = \"\";\n                      var widthPoints = columnWidths[0];\n                      var heightPoints = 25 * 72 / 96;\n                      for (var i = 0; i <= mergeLength; i++) {\n                        var cellHTML = rowCells[i].innerHTML;\n                        if (cellHTML === \"+\" || cellHTML === \"-\") cellHTML = cellHTML + \" \";\n                        if (cellHTML === \"&nbsp;\") cellHTML = \"   \";\n                        cellText += cellHTML;\n                      }\n                      var textDimension = doc.getTextDimensions(cellText);\n                      if (textDimension.w + 3 > widthPoints) {\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText.length > 3) {\n                          cellText = newText.substring(0, newText.length - 3) + \"...\";\n                        } else cellText = newText.substring(0, 1) + \"...\";\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText != cellText) {\n                          cellText = newText;\n                        }\n                      }\n                      doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                      for (var i = mergeLength + 1; i < rowCells.length; i++) {\n                        var index = i - mergeLength;\n                        var widthPoints = columnWidths[index];\n                        var heightPoints = 25 * 72 / 96;\n                        var cellText = $(rowCells[i]).html();\n                        var textDimension = doc.getTextDimensions($(rowCells[i]).html());\n                        if (textDimension.w + 3 > widthPoints) {\n                          var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                          var newText = splitText[0];\n                          if (newText.length > 3) {\n                            cellText = newText.substring(0, newText.length - 3) + \"...\";\n                          } else cellText = newText.substring(0, 1) + \"...\";\n                          var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                          var newText = splitText[0];\n                          if (newText != cellText) {\n                            cellText = newText;\n                          }\n                        }\n                        doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                      }\n                      rows++;\n                      return true;\n                    }\n                    $.each(rowCells, function (index) {\n                      var widthPoints = columnWidths[index];\n                      var heightPoints = 25 * 72 / 96;\n                      var cellText = $(this).html();\n                      var textDimension = doc.getTextDimensions($(this).html());\n                      if (textDimension.w + 3 > widthPoints) {\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText.length > 3) {\n                          cellText = newText.substring(0, newText.length - 3) + \"...\";\n                        } else cellText = newText.substring(0, 1) + \"...\";\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText != cellText) {\n                          cellText = newText;\n                        }\n                      }\n                      doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                    });\n                    rows++;\n                  });\n                  if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                    throw new Error(\"PDF export requires a browser with HTML5 support\");\n                    return;\n                  }\n                  return doc;\n                }\n                return exportData(module, data, dataFields, styles, hierarchy, exportFormat, filename);\n              };\n              this.exportToFile = function (format, filename, exportServer, charset, hierarchy) {\n                if (format === \"pdf\") {\n                  var table = this.exportTo(format, hierarchy, format, filename);\n                  if (!$.jqx.pdfExport) {\n                    $.jqx.pdfExport = {\n                      orientation: \"portrait\",\n                      paperSize: \"a4\"\n                    };\n                  }\n                  var doc = new pdfDataExport($.jqx.pdfExport.orientation, 'pt', $.jqx.pdfExport.paperSize);\n                  if (charset == \"utf-8\" || charset == \"UTF-8\") {\n                    doc.setFont(\"courier\", \"normal\");\n                  }\n                  doc.cellInitialize();\n                  var headerCells = $(table).find('th');\n                  var tableRows = $(table).find('tr');\n                  var rows = 0;\n                  doc.setFontSize(13 * 72 / 96);\n                  var totalWidth = 595;\n                  switch ($.jqx.pdfExport.paperSize) {\n                    case \"legal\":\n                      var totalWidth = 612;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 1008;\n                      }\n                      break;\n                    case \"letter\":\n                      var totalWidth = 612;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 792;\n                      }\n                      break;\n                    case \"a3\":\n                      var totalWidth = 841;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 1190;\n                      }\n                      break;\n                    case \"a4\":\n                      var totalWidth = 595;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 842;\n                      }\n                      break;\n                    case \"a5\":\n                      var totalWidth = 420;\n                      if ($.jqx.pdfExport.orientation !== \"portrait\") {\n                        totalWidth = 595;\n                      }\n                      break;\n                  }\n                  totalWidth -= 20;\n                  var totalColumnsWidth = 0;\n                  var columnWidths = [];\n                  $.each(headerCells, function (index) {\n                    var width = parseInt(this.style.width);\n                    if (isNaN(width)) {\n                      width = 25;\n                    }\n                    var widthPoints = width * 72 / 96;\n                    columnWidths[index] = widthPoints;\n                    totalColumnsWidth += widthPoints;\n                  });\n                  if (headerCells.length === 0) {\n                    $.each(tableRows[0].cells, function (index) {\n                      var width = parseInt(this.style.width);\n                      if (isNaN(width)) {\n                        width = totalWidth / tableRows[0].cells.length;\n                      }\n                      var widthPoints = width * 72 / 96;\n                      columnWidths[index] = widthPoints;\n                      totalColumnsWidth += widthPoints;\n                    });\n                  }\n                  if (totalColumnsWidth > totalWidth) {\n                    $.each(columnWidths, function (index) {\n                      columnWidths[index] = columnWidths[index] / totalColumnsWidth * 100;\n                      columnWidths[index] = columnWidths[index] * totalWidth / 100;\n                    });\n                  }\n                  $.each(headerCells, function (index) {\n                    var widthPoints = columnWidths[index];\n                    var heightPoints = 25 * 72 / 96;\n                    var textDimension = doc.getTextDimensions($(this).html());\n                    var cellText = $(this).html();\n                    if (textDimension.w + 3 > widthPoints) {\n                      var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                      var newText = splitText[0];\n                      if (newText.length > 3) {\n                        cellText = newText.substring(0, newText.length - 3) + \"...\";\n                      } else cellText = newText.substring(0, 1) + \"...\";\n                      var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                      var newText = splitText[0];\n                      if (newText != cellText) {\n                        cellText = newText;\n                      }\n                    }\n                    doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                  });\n                  rows++;\n                  $.each(tableRows, function (index) {\n                    if (index === 0) return true;\n                    var rowCells = $(this).children();\n                    var isTreeGrid = rowCells.length > headerCells.length && headerCells.length > 0;\n                    if (isTreeGrid) {\n                      var mergeLength = rowCells.length - headerCells.length;\n                      var cellText = \"\";\n                      var widthPoints = columnWidths[0];\n                      var heightPoints = 25 * 72 / 96;\n                      for (var i = 0; i <= mergeLength; i++) {\n                        var cellHTML = rowCells[i].innerHTML;\n                        if (cellHTML === \"+\" || cellHTML === \"-\") cellHTML = cellHTML + \" \";\n                        if (cellHTML === \"&nbsp;\") cellHTML = \"   \";\n                        cellText += cellHTML;\n                      }\n                      var textDimension = doc.getTextDimensions(cellText);\n                      if (textDimension.w + 3 > widthPoints) {\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText.length > 3) {\n                          cellText = newText.substring(0, newText.length - 3) + \"...\";\n                        } else cellText = newText.substring(0, 1) + \"...\";\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText != cellText) {\n                          cellText = newText;\n                        }\n                      }\n                      doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                      for (var i = mergeLength + 1; i < rowCells.length; i++) {\n                        var index = i - mergeLength;\n                        var widthPoints = columnWidths[index];\n                        var heightPoints = 25 * 72 / 96;\n                        var cellText = $(rowCells[i]).html();\n                        if (cellText === \"&nbsp;\") cellText = \"   \";\n                        var textDimension = doc.getTextDimensions($(rowCells[i]).html());\n                        if (textDimension.w + 3 > widthPoints) {\n                          var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                          var newText = splitText[0];\n                          if (newText.length > 3) {\n                            cellText = newText.substring(0, newText.length - 3) + \"...\";\n                          } else cellText = newText.substring(0, 1) + \"...\";\n                          var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                          var newText = splitText[0];\n                          if (newText != cellText) {\n                            cellText = newText;\n                          }\n                        }\n                        doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                      }\n                      rows++;\n                      return true;\n                    }\n                    $.each(rowCells, function (index) {\n                      var widthPoints = columnWidths[index];\n                      var heightPoints = 25 * 72 / 96;\n                      var cellText = $(this).html();\n                      if (cellText === \"&nbsp;\") cellText = \"   \";\n                      var textDimension = doc.getTextDimensions($(this).html());\n                      if (textDimension.w + 3 > widthPoints) {\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText.length > 3) {\n                          cellText = newText.substring(0, newText.length - 3) + \"...\";\n                        } else cellText = newText.substring(0, 1) + \"...\";\n                        var splitText = doc.splitTextToSize(cellText, widthPoints - 3);\n                        var newText = splitText[0];\n                        if (newText != cellText) {\n                          cellText = newText;\n                        }\n                      }\n                      doc.cell(10, 10, widthPoints, heightPoints, cellText, rows);\n                    });\n                    rows++;\n                  });\n                  if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                    throw new Error(\"PDF export requires a browser with HTML5 support\");\n                    return;\n                  }\n                  doc.save(filename + \".pdf\");\n                  return;\n                }\n                var content = this.exportTo(format, hierarchy, format, filename),\n                  form = createForm(filename, format, content, exportServer, charset);\n                form.submit();\n                document.body.removeChild(form);\n              };\n              this.exportToLocalFile = function (format, filename, hierarchy, exportFormat) {\n                var content = this.exportTo(format, hierarchy, exportFormat);\n                document.location.href = 'data:application/octet-stream;filename=' + filename + ',' + encodeURIComponent(content);\n              };\n            };\n            exporter.extend = function (exportFormat, exporter) {\n              if (exporter instanceof $.jqx.dataAdapter.DataExportModuleBase) {\n                exportModules[exportFormat] = exporter;\n              } else {\n                throw 'The module ' + exportFormat + ' is not instance of DataExportModuleBase.';\n              }\n            };\n            return exporter;\n          }();\n          $.jqx.dataAdapter.ArrayExporter = ArrayExporter;\n        })(jqxBaseFramework);\n        (function ($) {\n          //Defines common interface for all modules used for exportation\n          var DataExportModuleBase = function () {\n            this.formatData = function (data, type, formatString, localization) {\n              if (type === 'date') {\n                var tmpdate = \"\";\n                if (typeof data === 'string') {\n                  tmpdate = $.jqx.dataFormat.tryparsedate(data);\n                  data = tmpdate;\n                }\n                if (data === \"\" || data === null) return \"\";\n                tmpdate = $.jqx.dataFormat.formatdate(data, formatString, localization);\n                if (tmpdate && tmpdate.toString() == \"NaN\" || tmpdate == null) return \"\";\n                data = tmpdate;\n              } else if (type === 'number' || type === 'float' || type === 'int' || type == 'integer') {\n                if (data === \"\" || data === null) return \"\";\n                if (!isNaN(new Number(data))) {\n                  var tmpdata = $.jqx.dataFormat.formatnumber(data, formatString, localization);\n                  if (tmpdata.toString() == \"NaN\") return \"\";else data = tmpdata;\n                }\n              } else {\n                data = data;\n              }\n              if (data === null) return \"\";\n              return data;\n            };\n            this.getFormat = function (dataOptions) {\n              var formatString = dataOptions ? dataOptions['formatString'] : \"\";\n              var localization = dataOptions ? dataOptions['localization'] : \"\";\n              var dataType = 'string';\n              dataType = dataOptions ? dataOptions['type'] : 'string';\n              if (dataType == 'number' || dataType == 'float') {\n                if (!formatString) formatString = 'f2';\n              }\n              if (dataType == 'int' || dataType == 'integer') {\n                if (!formatString) formatString = 'n0';\n              }\n              if (dataType == 'date') {\n                if (!formatString) formatString = 'd';\n              }\n              return {\n                type: dataType,\n                formatString: formatString,\n                localization: localization\n              };\n            };\n            this.beginFile = function () {\n              throw 'Not implemented!';\n            };\n            this.beginHeader = function () {\n              throw 'Not implemented!';\n            };\n            this.appendHeaderCell = function () {\n              throw 'Not implemented!';\n            };\n            this.endHeader = function () {\n              throw 'Not implemented!';\n            };\n            this.beginBody = function () {\n              throw 'Not implemented!';\n            };\n            this.beginRow = function () {\n              throw 'Not implemented!';\n            };\n            this.beginRows = function () {\n              throw 'Not implemented!';\n            };\n            this.endRows = function () {\n              throw 'Not implemented!';\n            };\n            this.appendBodyCell = function () {\n              throw 'Not implemented!';\n            };\n            this.endRow = function () {\n              throw 'Not implemented!';\n            };\n            this.endBody = function () {\n              throw 'Not implemented!';\n            };\n            this.endFile = function () {\n              throw 'Not implemented!';\n            };\n            this.getFile = function () {\n              throw 'Not implemented!';\n            };\n          };\n          $.jqx.dataAdapter.DataExportModuleBase = DataExportModuleBase;\n        })(jqxBaseFramework);\n\n        //Extending the exporter with TSV and CSV exporters\n        (function ($) {\n          //Value exporter. This object is common prototype for TSV and CVS.\n          var SvExporter = function (inValueSeparator) {\n            var file, valueSeparator, hasHeader;\n            var rowIndex = 0;\n            var me = this;\n            this.beginFile = function () {\n              file = '';\n            };\n            this.beginHeader = function () {};\n            this.appendHeaderCell = function (data, fieldName, style, exportHeader, index) {\n              if (style) {\n                if (style.level != undefined) {\n                  if (index < style.maxLevel) {\n                    return;\n                  } else if (index === style.maxLevel) {\n                    if (exportHeader) {\n                      appendCell(data.text);\n                    }\n                    for (var i = 0; i < style.maxLevel; i++) {\n                      appendCell(\"\");\n                    }\n                    return;\n                  }\n                }\n              }\n              hasHeader = exportHeader;\n              if (exportHeader) {\n                appendCell(data.text);\n              }\n            };\n            this.endHeader = function () {\n              this.endRow();\n            };\n            this.beginBody = function () {\n              rowIndex = 0;\n            };\n            this.beginRow = function () {\n              if (rowIndex > 0 || rowIndex == 0 && hasHeader) {\n                file += '\\n';\n              }\n              rowIndex++;\n            };\n            this.appendBodyCell = function (data, dataType, style, row, index) {\n              if (style) {\n                if (style.maxLevel != undefined) {\n                  if (index === style.maxLevel) {\n                    appendCell(data, dataType);\n                    for (var i = 0; i < style.maxLevel - row.level - 1; i++) {\n                      appendCell(\"\", dataType);\n                    }\n                    return;\n                  }\n                }\n              }\n              appendCell(data, dataType);\n            };\n            this.endRow = function () {\n              file = file.substring(0, file.length - 1);\n            };\n            this.endBody = function () {};\n            this.endFile = function () {};\n            this.getFile = function () {\n              return file;\n            };\n            function prepareData(data, dataOptions) {\n              if (dataOptions) {\n                var format = me.getFormat(dataOptions);\n                data = me.formatData(data, format.type, format.formatString, format.localization);\n              }\n              data = '\"' + data + '\"';\n              return data;\n            }\n            ;\n            function appendCell(data, dataOptions) {\n              data = prepareData(data, dataOptions);\n              file += data + inValueSeparator;\n            }\n            ;\n          };\n          SvExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();\n          var CsvExporter = function () {};\n          CsvExporter.prototype = new SvExporter(',');\n          var TsvExporter = function () {};\n          TsvExporter.prototype = new SvExporter('\\t');\n          $.jqx.dataAdapter.ArrayExporter.extend('csv', new CsvExporter());\n          $.jqx.dataAdapter.ArrayExporter.extend('tsv', new TsvExporter());\n        })(jqxBaseFramework);\n\n        //Extending the exporter with HTML exporter\n        (function ($) {\n          var HtmlExporter = function () {\n            var isPDF = false;\n            var file;\n            var hasHeader;\n            var rowIndex = 0;\n            this.setPDF = function () {\n              isPDF = true;\n            };\n            this.beginFile = function (filename) {\n              if (isPDF || filename == undefined) {\n                file = '<table style=\"empty-cells: show;\" cellspacing=\"0\" cellpadding=\"2\">';\n              } else {\n                file = '<html>\\n\\t<head>\\n\\t\\t<title></title>\\n' + '\\t\\t<meta http-equiv=Content-type content=\\\"text/html; charset=UTF-8\\\">\\n\\t</head>\\n\\t<body>\\n' + '\\t\\t<table style=\"empty-cells: show;\" cellspacing=\"0\" cellpadding=\"2\">';\n              }\n            };\n            this.beginHeader = function () {\n              if (isPDF) {\n                file += '\\n\\t<thead><tr>';\n              } else {\n                file += '\\n\\t\\t\\t<thead>';\n              }\n            };\n            this.appendHeaderCell = function (data, fieldName, style, exportHeader) {\n              hasHeader = exportHeader;\n              if (!exportHeader) return;\n              if (isPDF) {\n                file += '\\n\\t\\t\\t\\t<th style=\"' + buildStyle(style) + '\">' + data.text + '</th>';\n              } else {\n                if (style.disabled) return;\n                if (style.merge) {\n                  if (data.width) {\n                    file += '\\n\\t\\t\\t\\t<th colspan=' + (1 + style.merge) + ' style=\"width: ' + data.width + 'px; ' + buildStyle(style) + '\">' + data.text + '</th>';\n                  } else {\n                    file += '\\n\\t\\t\\t\\t<th colspan=' + (1 + style.merge) + ' style=\"' + buildStyle(style) + '\">' + data.text + '</th>';\n                  }\n                } else {\n                  if (data.width) {\n                    file += '\\n\\t\\t\\t\\t<th style=\"width: ' + data.width + 'px; ' + buildStyle(style) + '\">' + data.text + '</th>';\n                  } else {\n                    file += '\\n\\t\\t\\t\\t<th style=\"' + buildStyle(style) + '\">' + data.text + '</th>';\n                  }\n                }\n              }\n            };\n            this.endHeader = function () {\n              if (isPDF) {\n                file += '\\n\\t</tr></thead>';\n              } else {\n                file += '\\n\\t\\t\\t</thead>';\n              }\n            };\n            this.beginBody = function () {\n              if (isPDF) {\n                file += '\\n\\t<tbody>';\n              } else {\n                file += '\\n\\t\\t\\t<tbody>';\n              }\n              rowIndex = 0;\n            };\n            this.beginRow = function () {\n              if (isPDF) {\n                file += '\\n\\t<tr>';\n              } else {\n                file += '\\n\\t\\t\\t\\t<tr>';\n              }\n              rowIndex++;\n            };\n            this.appendBodyCell = function (data, dataOptions, style) {\n              var format = this.getFormat(dataOptions);\n              if (data === \"\") data = \"&nbsp;\";\n              if (isPDF) {\n                if (rowIndex == 1 && !hasHeader) {\n                  file += '\\n\\t\\t\\t\\t\\t<td style=\"' + buildStyle(style) + ' border-top-width: 1px;\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                } else {\n                  file += '\\n\\t\\t\\t\\t\\t<td style=\"' + buildStyle(style) + '\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                }\n              } else {\n                if (style.merge) {\n                  if (rowIndex == 1 && !hasHeader) {\n                    file += '\\n\\t\\t\\t\\t\\t<td colspan=' + (1 + style.merge) + ' style=\"' + buildStyle(style) + ' border-top-width: 1px;\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                  } else {\n                    file += '\\n\\t\\t\\t\\t\\t<td colspan=' + (1 + style.merge) + ' style=\"' + buildStyle(style) + '\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                  }\n                } else {\n                  if (rowIndex == 1 && !hasHeader) {\n                    file += '\\n\\t\\t\\t\\t\\t<td style=\"' + buildStyle(style) + ' border-top-width: 1px;\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                  } else {\n                    file += '\\n\\t\\t\\t\\t\\t<td style=\"' + buildStyle(style) + '\">' + this.formatData(data, format.type, format.formatString, format.localization) + '</td>';\n                  }\n                }\n              }\n            };\n            this.endRow = function () {\n              if (isPDF) {\n                file += '\\n\\t</tr>';\n              } else {\n                file += '\\n\\t\\t\\t\\t</tr>';\n              }\n            };\n            this.endBody = function () {\n              if (isPDF) {\n                file += '\\n\\t</tbody>';\n              } else {\n                file += '\\n\\t\\t\\t</tbody>';\n              }\n            };\n            this.endFile = function (filename) {\n              if (isPDF || filename == undefined) {\n                file += '\\n</table>';\n              } else {\n                file += '\\n\\t\\t</table>\\n\\t</body>\\n</html>\\n';\n              }\n            };\n            this.getFile = function () {\n              return file;\n            };\n            function buildStyle(styles) {\n              var result = '';\n              for (var style in styles) {\n                if (styles.hasOwnProperty(style)) {\n                  if (isPDF && style == 'font-size') {\n                    styles[style] = '100%';\n                  }\n                  result += style + ':' + styles[style] + ';';\n                }\n              }\n              return result;\n            }\n          };\n          HtmlExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();\n          var TableExporter = function () {};\n          TableExporter.prototype = new HtmlExporter();\n          var PDFExporter = function () {};\n          PDFExporter.prototype = new HtmlExporter();\n          var exporter = new PDFExporter();\n          $.jqx.dataAdapter.ArrayExporter.extend('html', new TableExporter());\n          $.jqx.dataAdapter.ArrayExporter.extend('pdf', exporter);\n        })(jqxBaseFramework);\n\n        //Exporting to XLS format (MS Office Excel 2003)\n        (function ($) {\n          var ExcelExporter = function () {\n            var header,\n              content,\n              headerFields,\n              headerStyles,\n              existingStyles,\n              styleCounter,\n              styleBuilder = {\n                style: '',\n                stylesMap: {\n                  'font': {\n                    'color': 'Color',\n                    'font-family': 'FontName',\n                    'font-style': 'Italic',\n                    'font-weight': 'Bold'\n                  },\n                  'interior': {\n                    'background-color': 'Color',\n                    'background': 'Color'\n                  },\n                  'alignment': {\n                    'left': 'Left',\n                    'center': 'Center',\n                    'right': 'Right'\n                  }\n                },\n                startStyle: function (styleName) {\n                  this.style += '\\n\\t\\t<Style ss:ID=\"' + styleName + '\" ss:Name=\"' + styleName + '\">';\n                },\n                buildAlignment: function (styles) {\n                  if (styles['text-align']) {\n                    var alignment = this.stylesMap['alignment'][styles['text-align']];\n                    if (!alignment) {\n                      alignment = \"Left\";\n                    }\n                    var style = '\\n\\t\\t\\t<Alignment ss:Vertical=\"Bottom\" ss:Horizontal=\"' + alignment + '\"/>';\n                    this.style += style;\n                  }\n                },\n                buildBorder: function (styles) {\n                  if (styles['border-color']) {\n                    var border = '\\n\\t\\t\\t<Borders>';\n                    var bottomBorder = '\\n\\t\\t\\t\\t<Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Color=\"' + styles['border-color'] + '\"/>';\n                    var leftBorder = '\\n\\t\\t\\t\\t<Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Color=\"' + styles['border-color'] + '\"/>';\n                    var rightBorder = '\\n\\t\\t\\t\\t<Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Color=\"' + styles['border-color'] + '\"/>';\n                    var topBorder = '\\n\\t\\t\\t\\t<Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Color=\"' + styles['border-color'] + '\"/>';\n                    border += bottomBorder;\n                    border += leftBorder;\n                    border += rightBorder;\n                    border += topBorder;\n                    border += '\\n\\t\\t\\t</Borders>';\n                    this.style += border;\n                  }\n                },\n                buildFont: function (styles) {\n                  var map = this.stylesMap['font'],\n                    font = '\\n\\t\\t\\t<Font ';\n                  for (var prop in map) {\n                    if (typeof styles[prop] !== 'undefined') {\n                      if (prop === 'font-style' && styles[prop].toString().toLowerCase() === 'italic') {\n                        font += 'ss:Italic=\"1\" ';\n                      } else if (prop === 'font-weight' && styles[prop].toString().toLowerCase() === 'bold') {\n                        font += 'ss:Bold=\"1\" ';\n                      } else if (prop === 'color') {\n                        font += 'ss:' + map[prop] + '=\"' + styles[prop] + '\" ';\n                      }\n                    }\n                  }\n                  font += '/>';\n                  this.style += font;\n                },\n                buildInterior: function (styles) {\n                  var map = this.stylesMap['interior'],\n                    interior = '\\n\\t\\t\\t<Interior ';\n                  var hasInterior = false;\n                  for (var prop in map) {\n                    if (typeof styles[prop] !== 'undefined') {\n                      interior += 'ss:' + map[prop] + '=\"' + styles[prop] + '\" ';\n                      hasInterior = true;\n                    }\n                  }\n                  if (hasInterior) interior += 'ss:Pattern=\"Solid\"';\n                  interior += '/>';\n                  this.style += interior;\n                },\n                buildFormat: function (styles) {\n                  if (styles['dataType'] == 'number' || styles['dataType'] == 'float' || styles['dataType'] == 'int' || styles['dataType'] == 'integer') {\n                    var formatString = styles['formatString'];\n                    if (formatString == \"\" || formatString.indexOf('n') != -1 || formatString.indexOf('N') != -1) {\n                      this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"0\"/>';\n                    } else if (formatString == \"f\" || formatString == \"F\" || formatString == \"D\" || formatString.indexOf('d') != -1) {\n                      this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"#,##0.00_);[Red]\\(#,##0.00\\)\"/>';\n                    } else if (formatString.indexOf('p') != -1 || formatString.indexOf('P') != -1) {\n                      this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"Percent\"/>';\n                    } else if (formatString.indexOf('c') != -1 || formatString.indexOf('C') != -1) {\n                      if (styles['currencysymbol'] && parseInt(styles['currencysymbol'].charCodeAt(0)) == 8364) {\n                        this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"Euro Currency\"/>';\n                      } else {\n                        this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"Currency\"/>';\n                      }\n                    }\n                  } else if (styles['dataType'] == 'date') {\n                    this.style += '\\n\\t\\t\\t<NumberFormat ss:Format=\"Short Date\"/>';\n                  }\n                },\n                closeStyle: function () {\n                  this.style += '\\n\\t\\t</Style>';\n                },\n                toString: function () {\n                  var temp = this.style;\n                  this.style = '';\n                  return temp;\n                }\n              };\n            this.beginFile = function () {\n              existingStyles = {};\n              styleCounter = 0;\n              header = '<?xml version=\"1.0\"?>' + '\\n\\t<?mso-application progid=\"Excel.Sheet\"?> ' + '\\n\\t<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" ' + '\\n\\txmlns:o=\"urn:schemas-microsoft-com:office:office\" ' + '\\n\\txmlns:x=\"urn:schemas-microsoft-com:office:excel\" ' + '\\n\\txmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" ' + '\\n\\txmlns:html=\"http://www.w3.org/TR/REC-html40\"> ' + '\\n\\t<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\"> ' + '\\n\\t<Version>12.00</Version> ' + '\\n\\t</DocumentProperties> ' + '\\n\\t<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\"> ' + '\\n\\t<WindowHeight>8130</WindowHeight> ' + '\\n\\t<WindowWidth>15135</WindowWidth> ' + '\\n\\t<WindowTopX>120</WindowTopX> ' + '\\n\\t<WindowTopY>45</WindowTopY> ' + '\\n\\t<ProtectStructure>False</ProtectStructure> ' + '\\n\\t<ProtectWindows>False</ProtectWindows> ' + '\\n\\t</ExcelWorkbook> ' + '\\n\\t<Styles>';\n            };\n            this.beginHeader = function () {\n              content = '\\n\\t<Worksheet ss:Name=\"Sheet1\">\\n\\t\\t<Table>';\n              headerFields = [];\n              headerStyles = [];\n            };\n            this.appendHeaderCell = function (data, fieldName, style) {\n              var width = data.width != undefined ? data.width : data.text.length * 10;\n              content += '\\n\\t\\t\\t<Column ss:Width=\"' + width + '\"/>';\n              headerFields.push(data);\n              headerStyles.push(style);\n            };\n            this.endHeader = function (exportHeader) {\n              if (exportHeader) {\n                this.beginRow();\n                for (var i = 0; i < headerFields.length; i += 1) {\n                  if (headerStyles[i].disabled) continue;\n                  appendCell.call(this, headerFields[i]['text'], null, headerStyles[i]);\n                }\n                this.endRow();\n              }\n            };\n            this.beginBody = function () {};\n            this.beginRow = function (level) {\n              if (level != undefined) {\n                content += '\\n\\t\\t\\t';\n                for (var i = 0; i < level; i++) {\n                  content += '\\t';\n                }\n                content += '<Row>';\n                return;\n              }\n              content += '\\n\\t\\t\\t<Row>';\n            };\n            this.beginRows = function (level) {\n              content += '\\n\\t\\t\\t\\t<Rows>';\n            };\n            this.appendBodyCell = function (data, dataType, style, row) {\n              appendCell.call(this, data, dataType, style, row);\n            };\n            this.endRow = function (level) {\n              if (level != undefined) {\n                content += '\\n\\t\\t\\t';\n                for (var i = 0; i < level; i++) {\n                  content += '\\t';\n                }\n                content += '</Row>';\n                return;\n              }\n              content += '\\n\\t\\t\\t</Row>';\n            };\n            this.endRows = function (level) {\n              if (level != undefined) {\n                content += '\\n\\t\\t\\t';\n                for (var i = 0; i < level; i++) {\n                  content += '\\t';\n                }\n                content += '</Rows>';\n                return;\n              }\n            };\n            this.endBody = function () {\n              content += '\\n\\t\\t</Table>';\n            };\n            this.endFile = function () {\n              content += '\\n\\t</Worksheet>\\n</Workbook>';\n              header += '\\n\\t</Styles>';\n            };\n            this.getFile = function () {\n              return header + content;\n            };\n            function appendCell(data, dataOptions, style, row) {\n              var columnType = \"String\";\n              var format = this.getFormat(dataOptions);\n              if (data != null && data.toString().substring(0, 3) == \"_AG\") {\n                data = data.toString().substring(3);\n                columnType = \"String\";\n              } else {\n                if (format.type == 'date') {\n                  var date = data;\n                  data = this.formatData(data, format.type, format.formatString, format.localization);\n                  if (data === null || data === \"\") {\n                    data = \"\";\n                    columnType = \"String\";\n                  } else {\n                    data = date.toISOString();\n                    columnType = \"DateTime\";\n                  }\n                }\n                if (format.type == 'string') {\n                  if (data === null || data === undefined) {\n                    data = \"\";\n                  } else {\n                    if (data.toString().indexOf('&') >= 0) {\n                      data = data.toString().replace(/&/g, '&amp;');\n                    }\n                    if (data.toString().indexOf('>') >= 0) {\n                      data = data.toString().replace(/>/g, '&gt;');\n                    }\n                    if (data.toString().indexOf('<') >= 0) {\n                      data = data.toString().replace(/</g, '&lt;');\n                    }\n                    if (data.toString().indexOf('\"') >= 0) {\n                      data = data.toString().replace(/\"/g, '&quot;');\n                    }\n                    if (data.toString().indexOf(\"'\") >= 0) {\n                      data = data.toString().replace(/'/g, '&apos;');\n                    }\n                  }\n                }\n                if (style.dataType == 'number' || style.dataType == 'float' || style.dataType == 'int' || style.dataType == 'integer') {\n                  columnType = \"Number\";\n                  data = parseFloat(data);\n                  if (data === null || isNaN(data) || data === \"\") {\n                    data = \"\";\n                    columnType = \"String\";\n                  }\n                  if (data && columnType != \"String\" && data != \"\") {\n                    if (dataOptions && dataOptions.formatString && dataOptions.formatString.indexOf('p') >= 0) {\n                      data = data / 100;\n                    }\n                  }\n                  style.currencysymbol = dataOptions.localization.currencysymbol;\n                }\n              }\n              var styleId = getStyleId(style);\n              if (style.merge) {\n                content += '\\n\\t\\t\\t\\t<Cell ss:MergeAcross=\"' + style.merge + '\" ss:StyleID=\"' + styleId + '\"><Data ss:Type=\"' + columnType + '\">' + data + '</Data></Cell>';\n              } else {\n                content += '\\n\\t\\t\\t\\t<Cell ss:StyleID=\"' + styleId + '\"><Data ss:Type=\"' + columnType + '\">' + data + '</Data></Cell>';\n              }\n            }\n            function generateStyleId() {\n              styleCounter += 1;\n              return 'xls-style-' + styleCounter;\n            }\n            function findStyle(style) {\n              for (var s in existingStyles) {\n                if (isSubset(style, existingStyles[s]) && isSubset(existingStyles[s], style)) {\n                  return s;\n                }\n              }\n              return undefined;\n            }\n            function isSubset(first, second) {\n              var subset = true;\n              for (var p in first) {\n                if (first[p] !== second[p]) {\n                  subset = false;\n                }\n              }\n              return subset;\n            }\n            function appendStyle(id, style) {\n              styleBuilder.startStyle(id);\n              styleBuilder.buildAlignment(style);\n              styleBuilder.buildBorder(style);\n              styleBuilder.buildFont(style);\n              styleBuilder.buildInterior(style);\n              styleBuilder.buildFormat(style);\n              styleBuilder.closeStyle();\n              header += styleBuilder.toString();\n            }\n            function getStyleId(style) {\n              if (!style) {\n                return '';\n              }\n              var id = findStyle(style);\n              if (typeof id === 'undefined') {\n                id = generateStyleId();\n                existingStyles[id] = style;\n                appendStyle(id, style);\n              }\n              return id;\n            }\n          };\n          ExcelExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();\n          $.jqx.dataAdapter.ArrayExporter.extend('xls', new ExcelExporter());\n        })(jqxBaseFramework);\n\n        //Exporting to XML\n        (function ($) {\n          var XmlExporter = function () {\n            var file, headerFields, index;\n            this.beginFile = function () {\n              file = '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>';\n              file += '\\n<table>';\n            };\n            this.beginHeader = function () {\n              headerFields = [];\n            };\n            this.appendHeaderCell = function (data, fieldName) {\n              headerFields.push(fieldName);\n            };\n            this.endHeader = function () {};\n            this.beginBody = function (data, dataType) {};\n            this.beginRow = function (level) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              if (level != undefined) {\n                if (that.hierarchy) {\n                  file += '\\n\\t';\n                  for (var i = 0; i < level; i++) {\n                    file += '\\t\\t';\n                  }\n                  file += '<row>';\n                  index = 0;\n                  return;\n                }\n              }\n              file += '\\n\\t<row>';\n              index = 0;\n            };\n            this.beginRows = function (level) {\n              if (level != undefined) {\n                file += '\\n\\t\\t';\n                for (var i = 0; i < level; i++) {\n                  file += '\\t\\t';\n                }\n                file += '<rows>';\n                index = 0;\n                return;\n              }\n              file += '\\n\\t\\t<rows>';\n            };\n            this.appendBodyCell = function (data, dataOptions, style, row, indx, group) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              var format = this.getFormat(dataOptions);\n              data = this.formatData(data, format.type, format.formatString, format.localization);\n              if (format.type == \"string\") {\n                if (data.toString().indexOf('&') >= 0) {\n                  data = data.toString().replace(/&/g, '&amp;');\n                }\n                if (data.toString().indexOf('>') >= 0) {\n                  data = data.toString().replace(/>/g, '&gt;');\n                }\n                if (data.toString().indexOf('<') >= 0) {\n                  data = data.toString().replace(/</g, '&lt;');\n                }\n                if (data.toString().indexOf('\"') >= 0) {\n                  data = data.toString().replace(/\"/g, '&quot;');\n                }\n                if (data.toString().indexOf(\"'\") >= 0) {\n                  data = data.toString().replace(/'/g, '&apos;');\n                }\n              }\n              if (row.level != undefined) {\n                if (that.hierarchy) {\n                  file += '\\n\\t\\t';\n                  for (var i = 0; i < row.level; i++) {\n                    file += '\\t\\t';\n                  }\n                  if (group === undefined) {\n                    file += '<' + headerFields[index] + '>' + data + '</' + headerFields[index] + '>';\n                  } else {\n                    file += '<' + group + '>' + data + '</' + group + '>';\n                  }\n                } else {\n                  if (group != undefined) {\n                    file += '\\n\\t\\t<' + group + '>' + data + '</' + group + '>';\n                  } else {\n                    file += '\\n\\t\\t<' + headerFields[index] + '>' + data + '</' + headerFields[index] + '>';\n                  }\n                }\n              } else {\n                file += '\\n\\t\\t<' + headerFields[index] + '>' + data + '</' + headerFields[index] + '>';\n              }\n              index++;\n            };\n            this.endRow = function (level) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              if (level != undefined) {\n                if (that.hierarchy) {\n                  file += '\\n\\t';\n                  for (var i = 0; i < level; i++) {\n                    file += '\\t\\t';\n                  }\n                  file += '</row>';\n                  index = 0;\n                  return;\n                }\n              }\n              file += '\\n\\t</row>';\n              index = 0;\n            };\n            this.endRows = function (level) {\n              if (level != undefined) {\n                file += '\\n\\t\\t';\n                for (var i = 0; i < level; i++) {\n                  file += '\\t\\t';\n                }\n                file += '</rows>';\n                index = 0;\n                return;\n              }\n              file += '\\n\\t\\t</rows>';\n            };\n            this.endBody = function () {};\n            this.endFile = function () {\n              file += '\\n</table>';\n            };\n            this.getFile = function () {\n              return file;\n            };\n          };\n          XmlExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();\n          $.jqx.dataAdapter.ArrayExporter.extend('xml', new XmlExporter());\n        })(jqxBaseFramework);\n\n        //Exporting to JSON\n        (function ($) {\n          var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n            meta = {\n              '\\b': '\\\\b',\n              '\\t': '\\\\t',\n              '\\n': '\\\\n',\n              '\\f': '\\\\f',\n              '\\r': '\\\\r',\n              '\"': '\\\\\"',\n              '\\\\': '\\\\\\\\'\n            };\n          function quote(string) {\n            return '\"' + string.replace(escapable, function (a) {\n              var c = meta[a];\n              return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + '\"';\n          }\n          function formatNumber(n) {\n            return n < 10 ? '0' + n : n;\n          }\n          function stringifyDate(value) {\n            var date;\n            if (isFinite(value.valueOf())) {\n              date = value.getUTCFullYear() + '-' + formatNumber(value.getUTCMonth() + 1) + '-' + formatNumber(value.getUTCDate()) + 'T' + formatNumber(value.getUTCHours()) + ':' + formatNumber(value.getUTCMinutes()) + ':' + formatNumber(value.getUTCSeconds()) + 'Z\"';\n            } else {\n              date = 'null';\n            }\n            return date;\n          }\n          function stringifyArray(value) {\n            var len = value.length,\n              partial = [],\n              i;\n            for (i = 0; i < len; i++) {\n              partial.push(str(i, value) || 'null');\n            }\n            return '[' + partial.join(',') + ']';\n          }\n          function stringifyObject(value) {\n            var partial = [],\n              i,\n              v;\n            for (i in value) {\n              if (Object.prototype.hasOwnProperty.call(value, i)) {\n                v = str(i, value);\n                if (v) {\n                  partial.push(quote(i) + ':' + v);\n                }\n              }\n            }\n            return '{' + partial.join(',') + '}';\n          }\n          function stringifyReference(value) {\n            switch (Object.prototype.toString.call(value)) {\n              case '[object Date]':\n                return stringifyDate(value);\n              case '[object Array]':\n                return stringifyArray(value);\n            }\n            return stringifyObject(value);\n          }\n          function stringifyPrimitive(value, type) {\n            switch (type) {\n              case 'string':\n                return quote(value);\n              case 'number':\n              case 'float':\n              case 'integer':\n              case 'int':\n                return isFinite(value) ? value : 'null';\n              case 'boolean':\n                return value;\n            }\n            return 'null';\n          }\n          function str(key, holder) {\n            var value = holder[key],\n              type = typeof value;\n            if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n              value = value.toJSON(key);\n              type = typeof value;\n            }\n            if (/(number|float|int|integer|string|boolean)/.test(type) || !value && type === 'object') {\n              return stringifyPrimitive(value, type);\n            } else {\n              return stringifyReference(value);\n            }\n          }\n          function stringify(value) {\n            if (window.JSON && typeof window.JSON.stringify === 'function') {\n              return window.JSON.stringify(value);\n            }\n            return str(\"\", {\n              \"\": value\n            });\n          }\n          var JsonExporter = function () {\n            var me = this;\n            this.prepareData = function (data, dataOptions) {\n              if (dataOptions) {\n                var format = me.getFormat(dataOptions);\n                data = me.formatData(data, format.type, format.formatString, format.localization);\n              }\n              return data;\n            };\n            var file,\n              content,\n              currentCell,\n              cellHierarchy = [],\n              level = 0;\n            this.beginFile = function () {\n              content = [];\n            };\n            this.beginHeader = function () {};\n            this.appendHeaderCell = function (data) {};\n            this.endHeader = function () {};\n            this.beginBody = function (data, dataType) {};\n            this.beginRow = function () {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              if (that.hierarchy || window.jqx.hierarchy) {\n                cellHierarchy[level] = {};\n              } else {\n                currentCell = {};\n              }\n            };\n            this.beginRows = function () {\n              cellHierarchy[level].rows = [];\n              level++;\n              cellHierarchy[level] = {};\n            };\n            this.endRows = function () {\n              level--;\n            };\n            this.appendBodyCell = function (data, dataType) {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              var text = this.prepareData(data, dataType);\n              if (that.hierarchy || window.jqx.hierarchy) {\n                cellHierarchy[level][dataType['text']] = text;\n              } else {\n                currentCell[dataType['text']] = text;\n              }\n            };\n            this.endRow = function () {\n              var that = this;\n              if (!that) {\n                that = window.jqx;\n              }\n              if (that.hierarchy || window.jqx.hierarchy) {\n                if (level == 0) {\n                  content.push(cellHierarchy[level]);\n                } else {\n                  cellHierarchy[level - 1].rows.push(cellHierarchy[level]);\n                }\n              } else {\n                content.push(currentCell);\n              }\n            };\n            this.endBody = function () {};\n            this.endFile = function () {\n              file = stringify(content);\n            };\n            this.getFile = function () {\n              return file;\n            };\n          };\n          JsonExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();\n          $.jqx.dataAdapter.ArrayExporter.extend('json', new JsonExporter());\n        })(jqxBaseFramework);\n        var pdfDataExport = window.jqxPdfDataExport = function () {\n          'use strict';\n\n          if (typeof btoa === 'undefined') {\n            window.btoa = function (data) {\n              var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n                b64a = b64.split(''),\n                o1,\n                o2,\n                o3,\n                h1,\n                h2,\n                h3,\n                h4,\n                bits,\n                i = 0,\n                ac = 0,\n                enc = \"\",\n                tmp_arr = [],\n                r;\n              do {\n                o1 = data.charCodeAt(i++);\n                o2 = data.charCodeAt(i++);\n                o3 = data.charCodeAt(i++);\n                bits = o1 << 16 | o2 << 8 | o3;\n                h1 = bits >> 18 & 0x3f;\n                h2 = bits >> 12 & 0x3f;\n                h3 = bits >> 6 & 0x3f;\n                h4 = bits & 0x3f;\n                tmp_arr[ac++] = b64a[h1] + b64a[h2] + b64a[h3] + b64a[h4];\n              } while (i < data.length);\n              enc = tmp_arr.join('');\n              r = data.length % 3;\n              return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n            };\n          }\n          if (typeof atob === 'undefined') {\n            window.atob = function (data) {\n              var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n                o1,\n                o2,\n                o3,\n                h1,\n                h2,\n                h3,\n                h4,\n                bits,\n                i = 0,\n                ac = 0,\n                dec = \"\",\n                tmp_arr = [];\n              if (!data) {\n                return data;\n              }\n              data += '';\n              do {\n                // unpack four hexets into three octets using index points in b64\n                h1 = b64.indexOf(data.charAt(i++));\n                h2 = b64.indexOf(data.charAt(i++));\n                h3 = b64.indexOf(data.charAt(i++));\n                h4 = b64.indexOf(data.charAt(i++));\n                bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n                o1 = bits >> 16 & 0xff;\n                o2 = bits >> 8 & 0xff;\n                o3 = bits & 0xff;\n                if (h3 === 64) {\n                  tmp_arr[ac++] = String.fromCharCode(o1);\n                } else if (h4 === 64) {\n                  tmp_arr[ac++] = String.fromCharCode(o1, o2);\n                } else {\n                  tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n                }\n              } while (i < data.length);\n              dec = tmp_arr.join('');\n              return dec;\n            };\n          }\n          var getObjectLength = typeof Object.keys === 'function' ? function (object) {\n              return Object.keys(object).length;\n            } : function (object) {\n              var i = 0,\n                e;\n              for (e in object) {\n                if (object.hasOwnProperty(e)) {\n                  i++;\n                }\n              }\n              return i;\n            },\n            /**\r\n            PubSub implementation\r\n            \r\n            @class\r\n            @name PubSub\r\n            */\n            PubSub = function (context) {\n              /*\r\n              @private\r\n              @fieldOf PubSub\r\n              */\n              this.topics = {};\n              /**\r\n              Stores what will be `this` within the callback functions.\r\n                @private\r\n              @fieldOf PubSub#\r\n              */\n              this.context = context;\n              /**\r\n              Allows caller to emit an event and pass arguments to event listeners.\r\n              @public\r\n              @function\r\n              @param topic {String} Name of the channel on which to voice this event\r\n              @param args Any number of arguments you want to pass to the listeners of this event.\r\n              @methodOf PubSub#\r\n              @name publish\r\n              */\n              this.publish = function (topic, args) {\n                if (this.topics[topic]) {\n                  var currentTopic = this.topics[topic],\n                    toremove = [],\n                    fn,\n                    i,\n                    l,\n                    pair,\n                    emptyFunc = function () {};\n                  args = Array.prototype.slice.call(arguments, 1);\n                  for (i = 0, l = currentTopic.length; i < l; i++) {\n                    pair = currentTopic[i]; // this is a [function, once_flag] array\n                    fn = pair[0];\n                    if (pair[1]) {\n                      /* 'run once' flag set */\n                      pair[0] = emptyFunc;\n                      toremove.push(i);\n                    }\n                    fn.apply(this.context, args);\n                  }\n                  for (i = 0, l = toremove.length; i < l; i++) {\n                    currentTopic.splice(toremove[i], 1);\n                  }\n                }\n              };\n              /**\r\n              Allows listener code to subscribe to channel and be called when data is available\r\n              @public\r\n              @function\r\n              @param topic {String} Name of the channel on which to voice this event\r\n              @param callback {Function} Executable (function pointer) that will be ran when event is voiced on this channel.\r\n              @param once {Boolean} (optional. False by default) Flag indicating if the function is to be triggered only once.\r\n              @returns {Object} A token object that cen be used for unsubscribing.\r\n              @methodOf PubSub#\r\n              @name subscribe\r\n              */\n              this.subscribe = function (topic, callback, once) {\n                if (!this.topics[topic]) {\n                  this.topics[topic] = [[callback, once]];\n                } else {\n                  this.topics[topic].push([callback, once]);\n                }\n                return {\n                  \"topic\": topic,\n                  \"callback\": callback\n                };\n              };\n              /**\r\n              Allows listener code to unsubscribe from a channel\r\n              @public\r\n              @function\r\n              @param token {Object} A token object that was returned by `subscribe` method\r\n              @methodOf PubSub#\r\n              @name unsubscribe\r\n              */\n              this.unsubscribe = function (token) {\n                if (this.topics[token.topic]) {\n                  var currentTopic = this.topics[token.topic],\n                    i,\n                    l;\n                  for (i = 0, l = currentTopic.length; i < l; i++) {\n                    if (currentTopic[i][0] === token.callback) {\n                      currentTopic.splice(i, 1);\n                    }\n                  }\n                }\n              };\n            };\n\n          /**\r\n          @constructor\r\n          @private\r\n          */\n          function pdfDataExport(orientation, unit, format, compressPdf) {\n            /** String orientation, String unit, String format, Boolean compressed */\n\n            // Default parameter values\n            if (typeof orientation === 'undefined') {\n              orientation = 'p';\n            } else {\n              orientation = orientation.toString().toLowerCase();\n            }\n            if (typeof unit === 'undefined') {\n              unit = 'mm';\n            }\n            if (typeof format === 'undefined') {\n              format = 'a4';\n            }\n            if (typeof compressPdf === 'undefined' && typeof zpipe === 'undefined') {\n              compressPdf = false;\n            }\n            var format_as_string = format.toString().toLowerCase(),\n              version = '0.9.0rc2',\n              content = [],\n              content_length = 0,\n              compress = compressPdf,\n              pdfVersion = '1.3',\n              // PDF Version\n              pageFormats = {\n                // Size in pt of various paper formats\n                'a3': [841.89, 1190.55],\n                'a4': [595.28, 841.89],\n                'a5': [420.94, 595.28],\n                'letter': [612, 792],\n                'legal': [612, 1008]\n              },\n              textColor = '0 g',\n              drawColor = '0 G',\n              page = 0,\n              pages = [],\n              objectNumber = 2,\n              // 'n' Current object number\n              outToPages = false,\n              // switches where out() prints. outToPages true = push to pages obj. outToPages false = doc builder content\n              offsets = [],\n              // List of offsets. Activated and reset by buildDocument(). Pupulated by various calls buildDocument makes.\n              fonts = {},\n              // collection of font objects, where key is fontKey - a dynamically created label for a given font.\n              fontmap = {},\n              // mapping structure fontName > fontStyle > font key - performance layer. See addFont()\n              activeFontSize = 16,\n              activeFontKey,\n              // will be string representing the KEY of the font as combination of fontName + fontStyle\n              lineWidth = 0.200025,\n              // 2mm\n              pageHeight,\n              pageWidth,\n              k,\n              // Scale factor\n              documentProperties = {\n                'title': '',\n                'subject': '',\n                'author': '',\n                'keywords': '',\n                'creator': ''\n              },\n              lineCapID = 0,\n              lineJoinID = 0,\n              API = {},\n              events = new PubSub(API),\n              tmp,\n              plugin,\n              /////////////////////\n              // Private functions\n              /////////////////////\n              // simplified (speedier) replacement for sprintf's %.2f conversion\n              f2 = function (number) {\n                return number.toFixed(2);\n              },\n              // simplified (speedier) replacement for sprintf's %.3f conversion\n              f3 = function (number) {\n                return number.toFixed(3);\n              },\n              // simplified (speedier) replacement for sprintf's %02d\n              padd2 = function (number) {\n                var n = number.toFixed(0);\n                if (number < 10) {\n                  return '0' + n;\n                } else {\n                  return n;\n                }\n              },\n              // simplified (speedier) replacement for sprintf's %02d\n              padd10 = function (number) {\n                var n = number.toFixed(0);\n                if (n.length < 10) {\n                  return new Array(11 - n.length).join('0') + n;\n                } else {\n                  return n;\n                }\n              },\n              out = function (string) {\n                if (outToPages) {\n                  /* set by beginPage */\n                  pages[page].push(string);\n                } else {\n                  content.push(string);\n                  content_length += string.length + 1; // +1 is for '\\n' that will be used to join contents of content\n                }\n              },\n              newObject = function () {\n                // Begin a new object\n                objectNumber++;\n                offsets[objectNumber] = content_length;\n                out(objectNumber + ' 0 obj');\n                return objectNumber;\n              },\n              putStream = function (str) {\n                out('stream');\n                out(str);\n                out('endstream');\n              },\n              wPt,\n              hPt,\n              kids,\n              i,\n              putPages = function () {\n                wPt = pageWidth * k;\n                hPt = pageHeight * k;\n\n                // outToPages = false as set in endDocument(). out() writes to content.\n\n                var n, p, arr, uint, i, deflater, adler32;\n                for (n = 1; n <= page; n++) {\n                  newObject();\n                  out('<</Type /Page');\n                  out('/Parent 1 0 R');\n                  out('/Resources 2 0 R');\n                  out('/Contents ' + (objectNumber + 1) + ' 0 R>>');\n                  out('endobj');\n\n                  // Page content\n                  p = pages[n].join('\\n');\n                  newObject();\n                  if (compress) {\n                    arr = [];\n                    for (i = 0; i < p.length; ++i) {\n                      arr[i] = p.charCodeAt(i);\n                    }\n                    adler32 = adler32cs.from(p);\n                    deflater = new Deflater(6);\n                    deflater.append(new Uint8Array(arr));\n                    p = deflater.flush();\n                    arr = [new Uint8Array([120, 156]), new Uint8Array(p), new Uint8Array([adler32 & 0xFF, adler32 >> 8 & 0xFF, adler32 >> 16 & 0xFF, adler32 >> 24 & 0xFF])];\n                    p = '';\n                    for (i in arr) {\n                      if (arr.hasOwnProperty(i)) {\n                        p += String.fromCharCode.apply(null, arr[i]);\n                      }\n                    }\n                    out('<</Length ' + p.length + ' /Filter [/FlateDecode]>>');\n                  } else {\n                    out('<</Length ' + p.length + '>>');\n                  }\n                  putStream(p);\n                  out('endobj');\n                }\n                offsets[1] = content_length;\n                out('1 0 obj');\n                out('<</Type /Pages');\n                kids = '/Kids [';\n                for (i = 0; i < page; i++) {\n                  kids += 3 + 2 * i + ' 0 R ';\n                }\n                out(kids + ']');\n                out('/Count ' + page);\n                out('/MediaBox [0 0 ' + f2(wPt) + ' ' + f2(hPt) + ']');\n                out('>>');\n                out('endobj');\n              },\n              putFont = function (font) {\n                font.objectNumber = newObject();\n                out('<</BaseFont/' + font.PostScriptName + '/Type/Font');\n                if (typeof font.encoding === 'string') {\n                  out('/Encoding/' + font.encoding);\n                }\n                out('/Subtype/Type1>>');\n                out('endobj');\n              },\n              putFonts = function () {\n                var fontKey;\n                for (fontKey in fonts) {\n                  if (fonts.hasOwnProperty(fontKey)) {\n                    putFont(fonts[fontKey]);\n                  }\n                }\n              },\n              putXobjectDict = function () {\n                // Loop through images, or other data objects\n                events.publish('putXobjectDict');\n              },\n              putResourceDictionary = function () {\n                out('/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]');\n                out('/Font <<');\n                // Do this for each font, the '1' bit is the index of the font\n                var fontKey;\n                for (fontKey in fonts) {\n                  if (fonts.hasOwnProperty(fontKey)) {\n                    out('/' + fontKey + ' ' + fonts[fontKey].objectNumber + ' 0 R');\n                  }\n                }\n                out('>>');\n                out('/XObject <<');\n                putXobjectDict();\n                out('>>');\n              },\n              putResources = function () {\n                putFonts();\n                events.publish('putResources');\n                // Resource dictionary\n                offsets[2] = content_length;\n                out('2 0 obj');\n                out('<<');\n                putResourceDictionary();\n                out('>>');\n                out('endobj');\n                events.publish('postPutResources');\n              },\n              addToFontDictionary = function (fontKey, fontName, fontStyle) {\n                // this is mapping structure for quick font key lookup.\n                // returns the KEY of the font (ex: \"F1\") for a given pair of font name and type (ex: \"Arial\". \"Italic\")\n                var undef;\n                if (fontmap[fontName] === undef) {\n                  fontmap[fontName] = {}; // fontStyle is a var interpreted and converted to appropriate string. don't wrap in quotes.\n                }\n                fontmap[fontName][fontStyle] = fontKey;\n              },\n              /**\r\n              FontObject describes a particular font as member of an instnace of pdfDataExport\r\n                It's a collection of properties like 'id' (to be used in PDF stream),\r\n              'fontName' (font's family name), 'fontStyle' (font's style variant label)\r\n                @class\r\n              @public\r\n              @property id {String} PDF-document-instance-specific label assinged to the font.\r\n              @property PostScriptName {String} PDF specification full name for the font\r\n              @property encoding {Object} Encoding_name-to-Font_metrics_object mapping.\r\n              @name FontObject\r\n              */\n              FontObject = {},\n              addFont = function (PostScriptName, fontName, fontStyle, encoding) {\n                var fontKey = 'F' + (getObjectLength(fonts) + 1).toString(10),\n                  // This is FontObject\n                  font = fonts[fontKey] = {\n                    'id': fontKey,\n                    // , 'objectNumber':   will be set by putFont()\n                    'PostScriptName': PostScriptName,\n                    'fontName': fontName,\n                    'fontStyle': fontStyle,\n                    'encoding': encoding,\n                    'metadata': {}\n                  };\n                addToFontDictionary(fontKey, fontName, fontStyle);\n                events.publish('addFont', font);\n                return fontKey;\n              },\n              addFonts = function () {\n                var HELVETICA = \"helvetica\",\n                  TIMES = \"times\",\n                  COURIER = \"courier\",\n                  NORMAL = \"normal\",\n                  BOLD = \"bold\",\n                  ITALIC = \"italic\",\n                  BOLD_ITALIC = \"bolditalic\",\n                  encoding = 'StandardEncoding',\n                  standardFonts = [['Helvetica', HELVETICA, NORMAL], ['Helvetica-Bold', HELVETICA, BOLD], ['Helvetica-Oblique', HELVETICA, ITALIC], ['Helvetica-BoldOblique', HELVETICA, BOLD_ITALIC], ['Courier', COURIER, NORMAL], ['Courier-Bold', COURIER, BOLD], ['Courier-Oblique', COURIER, ITALIC], ['Courier-BoldOblique', COURIER, BOLD_ITALIC], ['Times-Roman', TIMES, NORMAL], ['Times-Bold', TIMES, BOLD], ['Times-Italic', TIMES, ITALIC], ['Times-BoldItalic', TIMES, BOLD_ITALIC]],\n                  i,\n                  l,\n                  fontKey,\n                  parts;\n                for (i = 0, l = standardFonts.length; i < l; i++) {\n                  var en = encoding;\n                  fontKey = addFont(standardFonts[i][0], standardFonts[i][1], standardFonts[i][2], en);\n\n                  // adding aliases for standard fonts, this time matching the capitalization\n                  parts = standardFonts[i][0].split('-');\n                  addToFontDictionary(fontKey, parts[0], parts[1] || '');\n                }\n                events.publish('addFonts', {\n                  'fonts': fonts,\n                  'dictionary': fontmap\n                });\n              },\n              /**\r\n                @public\r\n              @function\r\n              @param text {String}\r\n              @param flags {Object} Encoding flags.\r\n              @returns {String} Encoded string\r\n              */\n              to8bitStream = function (text, flags) {\n                var i, l, undef, sourceEncoding, encodingBlock, outputEncoding, newtext, isUnicode, ch, bch;\n                if (flags === undef) {\n                  flags = {};\n                }\n                sourceEncoding = flags.sourceEncoding ? sourceEncoding : 'Unicode';\n                outputEncoding = flags.outputEncoding;\n\n                // This 'encoding' section relies on font metrics format\n                // attached to font objects by, among others,\n                // \"Willow Systems' standard_font_metrics plugin\"\n                // see pdfDataExport.plugin.standard_font_metrics.js for format\n                // of the font.metadata.encoding Object.\n                // It should be something like\n                //   .encoding = {'codePages':['WinANSI....'], 'WinANSI...':{code:code, ...}}\n                //   .widths = {0:width, code:width, ..., 'fof':divisor}\n                //   .kerning = {code:{previous_char_code:shift, ..., 'fof':-divisor},...}\n                if ((flags.autoencode || outputEncoding) && fonts[activeFontKey].metadata && fonts[activeFontKey].metadata[sourceEncoding] && fonts[activeFontKey].metadata[sourceEncoding].encoding) {\n                  encodingBlock = fonts[activeFontKey].metadata[sourceEncoding].encoding;\n\n                  // each font has default encoding. Some have it clearly defined.\n                  if (!outputEncoding && fonts[activeFontKey].encoding) {\n                    outputEncoding = fonts[activeFontKey].encoding;\n                  }\n\n                  // Hmmm, the above did not work? var's try again, in different place.\n                  if (!outputEncoding && encodingBlock.codePages) {\n                    outputEncoding = encodingBlock.codePages[0]; // var's say, first one is the default\n                  }\n                  if (typeof outputEncoding === 'string') {\n                    outputEncoding = encodingBlock[outputEncoding];\n                  }\n                  // we want output encoding to be a JS Object, where\n                  // key = sourceEncoding's character code and\n                  // value = outputEncoding's character code.\n                  if (outputEncoding) {\n                    isUnicode = false;\n                    newtext = [];\n                    for (i = 0, l = text.length; i < l; i++) {\n                      ch = outputEncoding[text.charCodeAt(i)];\n                      if (ch) {\n                        newtext.push(String.fromCharCode(ch));\n                      } else {\n                        newtext.push(text[i]);\n                      }\n\n                      // since we are looping over chars anyway, might as well\n                      // check for residual unicodeness\n                      if (newtext[i].charCodeAt(0) >> 8) {\n                        /* more than 255 */\n                        isUnicode = true;\n                      }\n                    }\n                    text = newtext.join('');\n                  }\n                }\n                i = text.length;\n                // isUnicode may be set to false above. Hence the triple-equal to undefined\n                while (isUnicode === undef && i !== 0) {\n                  if (text.charCodeAt(i - 1) >> 8) {\n                    /* more than 255 */\n                    isUnicode = true;\n                  }\n                  i--;\n                }\n                if (!isUnicode) {\n                  return text;\n                } else {\n                  newtext = flags.noBOM ? [] : [254, 255];\n                  for (i = 0, l = text.length; i < l; i++) {\n                    ch = text.charCodeAt(i);\n                    bch = ch >> 8; // divide by 256\n                    if (bch >> 8) {\n                      /* something left after dividing by 256 second time */\n                      throw new Error(\"Character at position \" + i.toString(10) + \" of string '\" + text + \"' exceeds 16bits. Cannot be encoded into UCS-2 BE\");\n                    }\n                    newtext.push(bch);\n                    newtext.push(ch - (bch << 8));\n                  }\n                  return String.fromCharCode.apply(undef, newtext);\n                }\n              },\n              // Replace '/', '(', and ')' with pdf-safe versions\n              pdfEscape = function (text, flags) {\n                // doing to8bitStream does NOT make this PDF display unicode text. For that\n                // we also need to reference a unicode font and embed it - royal pain in the rear.\n\n                // There is still a benefit to to8bitStream - PDF simply cannot handle 16bit chars,\n                // which JavaScript Strings are happy to provide. So, while we still cannot display\n                // 2-byte characters property, at least CONDITIONALLY converting (entire string containing)\n                // 16bit chars to (USC-2-BE) 2-bytes per char + BOM streams we ensure that entire PDF\n                // is still parseable.\n                // This will allow immediate support for unicode in document properties strings.\n                return to8bitStream(text, flags).replace(/\\\\/g, '\\\\\\\\').replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)');\n              },\n              putInfo = function () {\n                out('/Producer (pdfDataExport ' + version + ')');\n                if (documentProperties.title) {\n                  out('/Title (' + pdfEscape(documentProperties.title) + ')');\n                }\n                if (documentProperties.subject) {\n                  out('/Subject (' + pdfEscape(documentProperties.subject) + ')');\n                }\n                if (documentProperties.author) {\n                  out('/Author (' + pdfEscape(documentProperties.author) + ')');\n                }\n                if (documentProperties.keywords) {\n                  out('/Keywords (' + pdfEscape(documentProperties.keywords) + ')');\n                }\n                if (documentProperties.creator) {\n                  out('/Creator (' + pdfEscape(documentProperties.creator) + ')');\n                }\n                var created = new Date();\n                out('/CreationDate (D:' + [created.getFullYear(), padd2(created.getMonth() + 1), padd2(created.getDate()), padd2(created.getHours()), padd2(created.getMinutes()), padd2(created.getSeconds())].join('') + ')');\n              },\n              putCatalog = function () {\n                out('/Type /Catalog');\n                out('/Pages 1 0 R');\n                // @TODO: Add zoom and layout modes\n                out('/OpenAction [3 0 R /FitH null]');\n                out('/PageLayout /OneColumn');\n                events.publish('putCatalog');\n              },\n              putTrailer = function () {\n                out('/Size ' + (objectNumber + 1));\n                out('/Root ' + objectNumber + ' 0 R');\n                out('/Info ' + (objectNumber - 1) + ' 0 R');\n              },\n              beginPage = function () {\n                page++;\n                // Do dimension stuff\n                outToPages = true;\n                pages[page] = [];\n              },\n              _addPage = function () {\n                beginPage();\n                // Set line width\n                out(f2(lineWidth * k) + ' w');\n                // Set draw color\n                out(drawColor);\n                // resurrecting non-default line caps, joins\n                if (lineCapID !== 0) {\n                  out(lineCapID.toString(10) + ' J');\n                }\n                if (lineJoinID !== 0) {\n                  out(lineJoinID.toString(10) + ' j');\n                }\n                events.publish('addPage', {\n                  'pageNumber': page\n                });\n              },\n              /**\r\n              Returns a document-specific font key - a label assigned to a\r\n              font name + font type combination at the time the font was added\r\n              to the font inventory.\r\n                Font key is used as label for the desired font for a block of text\r\n              to be added to the PDF document stream.\r\n              @private\r\n              @function\r\n              @param fontName {String} can be undefined on \"falthy\" to indicate \"use current\"\r\n              @param fontStyle {String} can be undefined on \"falthy\" to indicate \"use current\"\r\n              @returns {String} Font key.\r\n              */\n              getFont = function (fontName, fontStyle) {\n                var key, undef;\n                if (fontName === undef) {\n                  fontName = fonts[activeFontKey].fontName;\n                }\n                if (fontStyle === undef) {\n                  fontStyle = fonts[activeFontKey].fontStyle;\n                }\n                try {\n                  key = fontmap[fontName][fontStyle]; // returns a string like 'F3' - the KEY corresponding tot he font + type combination.\n                } catch (e) {\n                  key = undef;\n                }\n                if (!key) {\n                  throw new Error(\"Unable to look up font label for font '\" + fontName + \"', '\" + fontStyle + \"'. Refer to getFontList() for available fonts.\");\n                }\n                return key;\n              },\n              buildDocument = function () {\n                outToPages = false; // switches out() to content\n                content = [];\n                offsets = [];\n\n                // putHeader()\n                out('%PDF-' + pdfVersion);\n                putPages();\n                putResources();\n\n                // Info\n                newObject();\n                out('<<');\n                putInfo();\n                out('>>');\n                out('endobj');\n\n                // Catalog\n                newObject();\n                out('<<');\n                putCatalog();\n                out('>>');\n                out('endobj');\n\n                // Cross-ref\n                var o = content_length,\n                  i;\n                out('xref');\n                out('0 ' + (objectNumber + 1));\n                out('0000000000 65535 f ');\n                for (i = 1; i <= objectNumber; i++) {\n                  out(padd10(offsets[i]) + ' 00000 n ');\n                }\n                // Trailer\n                out('trailer');\n                out('<<');\n                putTrailer();\n                out('>>');\n                out('startxref');\n                out(o);\n                out('%%EOF');\n                outToPages = true;\n                return content.join('\\n');\n              },\n              getStyle = function (style) {\n                // see Path-Painting Operators of PDF spec\n                var op = 'S'; // stroke\n                if (style === 'F') {\n                  op = 'f'; // fill\n                } else if (style === 'FD' || style === 'DF') {\n                  op = 'B'; // both\n                }\n                return op;\n              },\n              /**\r\n              Generates the PDF document.\r\n              Possible values:\r\n                  datauristring (alias dataurlstring) - Data-Url-formatted data returned as string.\r\n                  datauri (alias datauri) - Data-Url-formatted data pushed into current window's location (effectively reloading the window with contents of the PDF).\r\n                If `type` argument is undefined, output is raw body of resulting PDF returned as a string.\r\n                @param {String} type A string identifying one of the possible output types.\r\n              @param {Object} options An object providing some additional signalling to PDF generator.\r\n              @function\r\n              @returns {pdfDataExport}\r\n              @methodOf pdfDataExport#\r\n              @name output\r\n              */\n              output = function (type, options) {\n                var undef, data, length, array, i, blob;\n                switch (type) {\n                  case undef:\n                    return buildDocument();\n                  case 'save':\n                    if (navigator.getUserMedia) {\n                      if (window.URL === undefined) {\n                        return API.output('dataurlnewwindow');\n                      } else if (window.URL.createObjectURL === undefined) {\n                        return API.output('dataurlnewwindow');\n                      }\n                    }\n                    data = buildDocument();\n\n                    // Need to add the file to BlobBuilder as a Uint8Array\n                    length = data.length;\n                    array = new Uint8Array(new ArrayBuffer(length));\n                    for (i = 0; i < length; i++) {\n                      array[i] = data.charCodeAt(i);\n                    }\n                    blob = new Blob([array], {\n                      type: \"application/pdf\"\n                    });\n                    saveAs(blob, options);\n                    break;\n                  case 'datauristring':\n                  case 'dataurlstring':\n                    return 'data:application/pdf;base64,' + btoa(buildDocument());\n                  case 'datauri':\n                  case 'dataurl':\n                    document.location.href = 'data:application/pdf;base64,' + btoa(buildDocument());\n                    break;\n                  case 'dataurlnewwindow':\n                    window.open('data:application/pdf;base64,' + btoa(buildDocument()));\n                    break;\n                  default:\n                    throw new Error('Output type \"' + type + '\" is not supported.');\n                }\n                // @TODO: Add different output options\n              };\n            if (unit === 'pt') {\n              k = 1;\n            } else if (unit === 'mm') {\n              k = 72 / 25.4;\n            } else if (unit === 'cm') {\n              k = 72 / 2.54;\n            } else if (unit === 'in') {\n              k = 72;\n            } else {\n              throw 'Invalid unit: ' + unit;\n            }\n\n            // Dimensions are stored as user units and converted to points on output\n            if (pageFormats.hasOwnProperty(format_as_string)) {\n              pageHeight = pageFormats[format_as_string][1] / k;\n              pageWidth = pageFormats[format_as_string][0] / k;\n            } else {\n              try {\n                pageHeight = format[1];\n                pageWidth = format[0];\n              } catch (err) {\n                throw 'Invalid format: ' + format;\n              }\n            }\n            if (orientation === 'p' || orientation === 'portrait') {\n              orientation = 'p';\n              if (pageWidth > pageHeight) {\n                tmp = pageWidth;\n                pageWidth = pageHeight;\n                pageHeight = tmp;\n              }\n            } else if (orientation === 'l' || orientation === 'landscape') {\n              orientation = 'l';\n              if (pageHeight > pageWidth) {\n                tmp = pageWidth;\n                pageWidth = pageHeight;\n                pageHeight = tmp;\n              }\n            } else {\n              throw 'Invalid orientation: ' + orientation;\n            }\n\n            //---------------------------------------\n            // Public API\n\n            /*\r\n            Object exposing internal API to plugins\r\n            @public\r\n            */\n            API.internal = {\n              'pdfEscape': pdfEscape,\n              'getStyle': getStyle,\n              /**\r\n              Returns {FontObject} describing a particular font.\r\n              @public\r\n              @function\r\n              @param fontName {String} (Optional) Font's family name\r\n              @param fontStyle {String} (Optional) Font's style variation name (Example:\"Italic\")\r\n              @returns {FontObject}\r\n              */\n              'getFont': function () {\n                return fonts[getFont.apply(API, arguments)];\n              },\n              'getFontSize': function () {\n                return activeFontSize;\n              },\n              'btoa': btoa,\n              'write': function (string1, string2, string3, etc) {\n                out(arguments.length === 1 ? string1 : Array.prototype.join.call(arguments, ' '));\n              },\n              'getCoordinateString': function (value) {\n                return f2(value * k);\n              },\n              'getVerticalCoordinateString': function (value) {\n                return f2((pageHeight - value) * k);\n              },\n              'collections': {},\n              'newObject': newObject,\n              'putStream': putStream,\n              'events': events,\n              // ratio that you use in multiplication of a given \"size\" number to arrive to 'point'\n              // units of measurement.\n              // scaleFactor is set at initialization of the document and calculated against the stated\n              // default measurement units for the document.\n              // If default is \"mm\", k is the number that will turn number in 'mm' into 'points' number.\n              // through multiplication.\n              'scaleFactor': k,\n              'pageSize': {\n                'width': pageWidth,\n                'height': pageHeight\n              },\n              'output': function (type, options) {\n                return output(type, options);\n              }\n            };\n\n            /**\r\n            Adds (and transfers the focus to) new page to the PDF document.\r\n            @function\r\n            @returns {pdfDataExport}\r\n              @methodOf pdfDataExport#\r\n            @name addPage\r\n             */\n            API.addPage = function () {\n              _addPage();\n              return this;\n            };\n            var padz = [\"\", \"0\", \"00\", \"000\", \"0000\"];\n            var pdfEscape16 = function (text, flags) {\n              var ar = [\"FEFF\"];\n              for (var i = 0, l = text.length, t; i < l; ++i) {\n                t = text.charCodeAt(i).toString(16).toUpperCase();\n                ar.push(padz[4 - t.length], t);\n              }\n              return ar.join(\"\");\n            };\n            API.text16 = function (text, x, y, flags) {\n              /**\r\n              * Inserts something like this into PDF\r\n              BT\r\n              /F1 16 Tf % Font name + size\r\n              16 TL % How many units down for next line in multiline text\r\n              0 g % color\r\n              28.35 813.54 Td % position\r\n              (line one) Tj\r\n              T* (line two) Tj\r\n              T* (line three) Tj\r\n              ET\r\n              */\n\n              var undef, _first, _second, _third, newtext, str, i;\n              // Pre-August-2012 the order of arguments was function(x, y, text, flags)\n              // in effort to make all calls have similar signature like\n              // function(data, coordinates... , miscellaneous)\n              // this method had its args flipped.\n              // code below allows backward compatibility with old arg order.\n              if (typeof text === 'number') {\n                _first = y;\n                _second = text;\n                _third = x;\n                text = _first;\n                x = _second;\n                y = _third;\n              }\n\n              // If there are any newlines in text, we assume\n              // the user wanted to print multiple lines, so break the\n              // text up into an array. If the text is already an array,\n              // we assume the user knows what they are doing.\n              if (typeof text === 'string' && text.match(/[\\n\\r]/)) {\n                text = text.split(/\\r\\n|\\r|\\n/g);\n              }\n              if (typeof flags === 'undefined') {\n                flags = {\n                  'noBOM': true,\n                  'autoencode': true\n                };\n              } else {\n                if (flags.noBOM === undef) {\n                  flags.noBOM = true;\n                }\n                if (flags.autoencode === undef) {\n                  flags.autoencode = true;\n                }\n              }\n              flags.autoencode = false;\n              if (typeof text === 'string') {\n                str = pdfEscape16(text, flags);\n              } else if (text instanceof Array) {\n                /* Array */\n                // we don't want to destroy original text array, so cloning it\n                newtext = text.concat();\n                // we do array.join('text that must not be PDFescaped\")\n                // thus, pdfEscape each component separately\n                for (i = newtext.length - 1; i !== -1; i--) {\n                  newtext[i] = pdfEscape16(newtext[i], flags);\n                }\n                str = newtext.join(\"> Tj\\nT* <\");\n              } else {\n                throw new Error('Type of text must be string or Array. \"' + text + '\" is not recognized.');\n              }\n              // Using \"'\" (\"go next line and render text\" mark) would save space but would complicate our rendering code, templates\n\n              // BT .. ET does NOT have default settings for Tf. You must state that explicitely every time for BT .. ET\n              // if you want text transformation matrix (+ multiline) to work reliably (which reads sizes of things from font declarations)\n              // Thus, there is NO useful, *reliable* concept of \"default\" font for a page.\n              // The fact that \"default\" (reuse font used before) font worked before in basic cases is an accident\n              // - readers dealing smartly with brokenness of jsPDF's markup.\n              out('BT\\n/' + activeFontKey + ' ' + activeFontSize + ' Tf\\n' +\n              // font face, style, size\n              activeFontSize + ' TL\\n' +\n              // line spacing\n              textColor + '\\n' + f2(x * k) + ' ' + f2((pageHeight - y) * k) + ' Td\\n<' + str + '> Tj\\nET');\n              return this;\n            };\n            /**\r\n            Adds text to page. Supports adding multiline text when 'text' argument is an Array of Strings.\r\n            @function\r\n            @param {String|Array} text String or array of strings to be added to the page. Each line is shifted one line down per font, spacing settings declared before this call.\r\n            @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Object} flags Collection of settings signalling how the text must be encoded. Defaults are sane. If you think you want to pass some flags, you likely can read the source.\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name text\r\n             */\n            API.text = function (text, x, y, flags) {\n              /**\r\n               * Inserts something like this into PDF\r\n                  BT\r\n                  /F1 16 Tf  % Font name + size\r\n                  16 TL % How many units down for next line in multiline text\r\n                  0 g % color\r\n                  28.35 813.54 Td % position\r\n                  (line one) Tj\r\n                  T* (line two) Tj\r\n                  T* (line three) Tj\r\n                  ET\r\n              */\n\n              var undef, _first, _second, _third, newtext, str, i;\n              if (typeof text === 'number') {\n                _first = y;\n                _second = text;\n                _third = x;\n                text = _first;\n                x = _second;\n                y = _third;\n              }\n              if (typeof text === 'string' && text.match(/[\\n\\r]/)) {\n                text = text.split(/\\r\\n|\\r|\\n/g);\n              }\n              if (typeof flags === 'undefined') {\n                flags = {\n                  'noBOM': true,\n                  'autoencode': true\n                };\n              } else {\n                if (flags.noBOM === undef) {\n                  flags.noBOM = true;\n                }\n                if (flags.autoencode === undef) {\n                  flags.autoencode = true;\n                }\n              }\n              if (typeof text === 'string') {\n                str = pdfEscape(text, flags);\n              } else if (text instanceof Array) {\n                /* Array */\n                // we don't want to destroy  original text array, so cloning it\n                newtext = text.concat();\n                // we do array.join('text that must not be PDFescaped\")\n                // thus, pdfEscape each component separately\n                for (i = newtext.length - 1; i !== -1; i--) {\n                  newtext[i] = pdfEscape(newtext[i], flags);\n                }\n                str = newtext.join(\") Tj\\nT* (\");\n              } else {\n                throw new Error('Type of text must be string or Array. \"' + text + '\" is not recognized.');\n              }\n              out('BT\\n/' + activeFontKey + ' ' + activeFontSize + ' Tf\\n' +\n              // font face, style, size\n              activeFontSize + ' TL\\n' +\n              // line spacing\n              textColor + '\\n' + f2(x * k) + ' ' + f2((pageHeight - y) * k) + ' Td\\n(' + str + ') Tj\\nET');\n              return this;\n            };\n            API.line = function (x1, y1, x2, y2) {\n              out(f2(x1 * k) + ' ' + f2((pageHeight - y1) * k) + ' m ' + f2(x2 * k) + ' ' + f2((pageHeight - y2) * k) + ' l S');\n              return this;\n            };\n\n            /**\r\n            Adds series of curves (straight lines or cubic bezier curves) to canvas, starting at `x`, `y` coordinates.\r\n            All data points in `lines` are relative to last line origin.\r\n            `x`, `y` become x1,y1 for first line / curve in the set.\r\n            For lines you only need to specify [x2, y2] - (ending point) vector against x1, y1 starting point.\r\n            For bezier curves you need to specify [x2,y2,x3,y3,x4,y4] - vectors to control points 1, 2, ending point. All vectors are against the start of the curve - x1,y1.\r\n              @example .lines([[2,2],[-2,2],[1,1,2,2,3,3],[2,1]], 212,110, 10) // line, line, bezier curve, line\r\n            @param {Array} lines Array of *vector* shifts as pairs (lines) or sextets (cubic bezier curves).\r\n            @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} scale (Defaults to [1.0,1.0]) x,y Scaling factor for all vectors. Elements can be any floating number Sub-one makes drawing smaller. Over-one grows the drawing. Negative flips the direction.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name lines\r\n             */\n            API.lines = function (lines, x, y, scale, style) {\n              var undef, _first, _second, _third, scalex, scaley, i, l, leg, x2, y2, x3, y3, x4, y4;\n\n              // Pre-August-2012 the order of arguments was function(x, y, lines, scale, style)\n              // in effort to make all calls have similar signature like\n              //   function(content, coordinateX, coordinateY , miscellaneous)\n              // this method had its args flipped.\n              // code below allows backward compatibility with old arg order.\n              if (typeof lines === 'number') {\n                _first = y;\n                _second = lines;\n                _third = x;\n                lines = _first;\n                x = _second;\n                y = _third;\n              }\n              style = getStyle(style);\n              scale = scale === undef ? [1, 1] : scale;\n\n              // starting point\n              out(f3(x * k) + ' ' + f3((pageHeight - y) * k) + ' m ');\n              scalex = scale[0];\n              scaley = scale[1];\n              l = lines.length;\n              //, x2, y2 // bezier only. In page default measurement \"units\", *after* scaling\n              //, x3, y3 // bezier only. In page default measurement \"units\", *after* scaling\n              // ending point for all, lines and bezier. . In page default measurement \"units\", *after* scaling\n              x4 = x; // last / ending point = starting point for first item.\n              y4 = y; // last / ending point = starting point for first item.\n\n              for (i = 0; i < l; i++) {\n                leg = lines[i];\n                if (leg.length === 2) {\n                  // simple line\n                  x4 = leg[0] * scalex + x4; // here last x4 was prior ending point\n                  y4 = leg[1] * scaley + y4; // here last y4 was prior ending point\n                  out(f3(x4 * k) + ' ' + f3((pageHeight - y4) * k) + ' l');\n                } else {\n                  // bezier curve\n                  x2 = leg[0] * scalex + x4; // here last x4 is prior ending point\n                  y2 = leg[1] * scaley + y4; // here last y4 is prior ending point\n                  x3 = leg[2] * scalex + x4; // here last x4 is prior ending point\n                  y3 = leg[3] * scaley + y4; // here last y4 is prior ending point\n                  x4 = leg[4] * scalex + x4; // here last x4 was prior ending point\n                  y4 = leg[5] * scaley + y4; // here last y4 was prior ending point\n                  out(f3(x2 * k) + ' ' + f3((pageHeight - y2) * k) + ' ' + f3(x3 * k) + ' ' + f3((pageHeight - y3) * k) + ' ' + f3(x4 * k) + ' ' + f3((pageHeight - y4) * k) + ' c');\n                }\n              }\n              // stroking / filling / both the path\n              out(style);\n              return this;\n            };\n\n            /**\r\n            Adds a rectangle to PDF\r\n              @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} w Width (in units declared at inception of PDF document)\r\n            @param {Number} h Height (in units declared at inception of PDF document)\r\n            @param {String} style (Defaults to active fill/stroke style) A string signalling if stroke, fill or both are to be applied.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name rect\r\n             */\n            API.rect = function (x, y, w, h, style) {\n              var op = getStyle(style);\n              out([f2(x * k), f2((pageHeight - y) * k), f2(w * k), f2(-h * k), 're', op].join(' '));\n              return this;\n            };\n\n            /**\r\n            Adds a triangle to PDF\r\n              @param {Number} x1 Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y1 Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} x2 Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y2 Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} x3 Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y3 Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {String} style (Defaults to active fill/stroke style) A string signalling if stroke, fill or both are to be applied.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name triangle\r\n             */\n            API.triangle = function (x1, y1, x2, y2, x3, y3, style) {\n              this.lines([[x2 - x1, y2 - y1],\n              // vector to point 2\n              [x3 - x2, y3 - y2],\n              // vector to point 3\n              [x1 - x3, y1 - y3] // closing vector back to point 1\n              ], x1, y1,\n              // start of path\n              [1, 1], style);\n              return this;\n            };\n\n            /**\r\n            Adds a rectangle with rounded corners to PDF\r\n              @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} w Width (in units declared at inception of PDF document)\r\n            @param {Number} h Height (in units declared at inception of PDF document)\r\n            @param {Number} rx Radius along x axis (in units declared at inception of PDF document)\r\n            @param {Number} rx Radius along y axis (in units declared at inception of PDF document)\r\n            @param {String} style (Defaults to active fill/stroke style) A string signalling if stroke, fill or both are to be applied.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name roundedRect\r\n            */\n            API.roundedRect = function (x, y, w, h, rx, ry, style) {\n              var MyArc = 4 / 3 * (Math.SQRT2 - 1);\n              this.lines([[w - 2 * rx, 0], [rx * MyArc, 0, rx, ry - ry * MyArc, rx, ry], [0, h - 2 * ry], [0, ry * MyArc, -(rx * MyArc), ry, -rx, ry], [-w + 2 * rx, 0], [-(rx * MyArc), 0, -rx, -(ry * MyArc), -rx, -ry], [0, -h + 2 * ry], [0, -(ry * MyArc), rx * MyArc, -ry, rx, -ry]], x + rx, y,\n              // start of path\n              [1, 1], style);\n              return this;\n            };\n\n            /**\r\n            Adds an ellipse to PDF\r\n              @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} rx Radius along x axis (in units declared at inception of PDF document)\r\n            @param {Number} rx Radius along y axis (in units declared at inception of PDF document)\r\n            @param {String} style (Defaults to active fill/stroke style) A string signalling if stroke, fill or both are to be applied.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name ellipse\r\n             */\n            API.ellipse = function (x, y, rx, ry, style) {\n              var op = getStyle(style),\n                lx = 4 / 3 * (Math.SQRT2 - 1) * rx,\n                ly = 4 / 3 * (Math.SQRT2 - 1) * ry;\n              out([f2((x + rx) * k), f2((pageHeight - y) * k), 'm', f2((x + rx) * k), f2((pageHeight - (y - ly)) * k), f2((x + lx) * k), f2((pageHeight - (y - ry)) * k), f2(x * k), f2((pageHeight - (y - ry)) * k), 'c'].join(' '));\n              out([f2((x - lx) * k), f2((pageHeight - (y - ry)) * k), f2((x - rx) * k), f2((pageHeight - (y - ly)) * k), f2((x - rx) * k), f2((pageHeight - y) * k), 'c'].join(' '));\n              out([f2((x - rx) * k), f2((pageHeight - (y + ly)) * k), f2((x - lx) * k), f2((pageHeight - (y + ry)) * k), f2(x * k), f2((pageHeight - (y + ry)) * k), 'c'].join(' '));\n              out([f2((x + lx) * k), f2((pageHeight - (y + ry)) * k), f2((x + rx) * k), f2((pageHeight - (y + ly)) * k), f2((x + rx) * k), f2((pageHeight - y) * k), 'c', op].join(' '));\n              return this;\n            };\n\n            /**\r\n            Adds an circle to PDF\r\n              @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\r\n            @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\r\n            @param {Number} r Radius (in units declared at inception of PDF document)\r\n            @param {String} style (Defaults to active fill/stroke style) A string signalling if stroke, fill or both are to be applied.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name circle\r\n             */\n            API.circle = function (x, y, r, style) {\n              return this.ellipse(x, y, r, r, style);\n            };\n\n            /**\r\n            Adds a properties to the PDF document\r\n              @param {Object} A property_name-to-property_value object structure.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setProperties\r\n             */\n            API.setProperties = function (properties) {\n              // copying only those properties we can render.\n              var property;\n              for (property in documentProperties) {\n                if (documentProperties.hasOwnProperty(property) && properties[property]) {\n                  documentProperties[property] = properties[property];\n                }\n              }\n              return this;\n            };\n\n            /**\r\n            Sets font size for upcoming text elements.\r\n              @param {Number} size Font size in points.\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setFontSize\r\n             */\n            API.setFontSize = function (size) {\n              activeFontSize = size;\n              return this;\n            };\n\n            /**\r\n            Sets text font face, variant for upcoming text elements.\r\n            See output of pdfDataExport.getFontList() for possible font names, styles.\r\n              @param {String} fontName Font name or family. Example: \"times\"\r\n            @param {String} fontStyle Font style or variant. Example: \"italic\"\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setFont\r\n             */\n            API.setFont = function (fontName, fontStyle) {\n              activeFontKey = getFont(fontName, fontStyle);\n              // if font is not found, the above line blows up and we never go further\n              return this;\n            };\n\n            /**\r\n            Switches font style or variant for upcoming text elements,\r\n            while keeping the font face or family same.\r\n            See output of pdfDataExport.getFontList() for possible font names, styles.\r\n              @param {String} style Font style or variant. Example: \"italic\"\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setFontStyle\r\n             */\n            API.setFontStyle = API.setFontType = function (style) {\n              var undef;\n              activeFontKey = getFont(undef, style);\n              // if font is not found, the above line blows up and we never go further\n              return this;\n            };\n\n            /**\r\n            Returns an object - a tree of fontName to fontStyle relationships available to\r\n            active PDF document.\r\n              @public\r\n            @function\r\n            @returns {Object} Like {'times':['normal', 'italic', ... ], 'arial':['normal', 'bold', ... ], ... }\r\n            @methodOf pdfDataExport#\r\n            @name getFontList\r\n            */\n            API.getFontList = function () {\n              // TODO: iterate over fonts array or return copy of fontmap instead in case more are ever added.\n              var list = {},\n                fontName,\n                fontStyle,\n                tmp;\n              for (fontName in fontmap) {\n                if (fontmap.hasOwnProperty(fontName)) {\n                  list[fontName] = tmp = [];\n                  for (fontStyle in fontmap[fontName]) {\n                    if (fontmap[fontName].hasOwnProperty(fontStyle)) {\n                      tmp.push(fontStyle);\n                    }\n                  }\n                }\n              }\n              return list;\n            };\n\n            /**\r\n            Sets line width for upcoming lines.\r\n              @param {Number} width Line width (in units declared at inception of PDF document)\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setLineWidth\r\n             */\n            API.setLineWidth = function (width) {\n              out((width * k).toFixed(2) + ' w');\n              return this;\n            };\n\n            /**\r\n            Sets the stroke color for upcoming elements.\r\n              Depending on the number of arguments given, Gray, RGB, or CMYK\r\n            color space is implied.\r\n              When only ch1 is given, \"Gray\" color space is implied and it\r\n            must be a value in the range from 0.00 (solid black) to to 1.00 (white)\r\n            if values are communicated as String types, or in range from 0 (black)\r\n            to 255 (white) if communicated as Number type.\r\n            The RGB-like 0-255 range is provided for backward compatibility.\r\n              When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each\r\n            value must be in the range from 0.00 (minimum intensity) to to 1.00\r\n            (max intensity) if values are communicated as String types, or\r\n            from 0 (min intensity) to to 255 (max intensity) if values are communicated\r\n            as Number types.\r\n            The RGB-like 0-255 range is provided for backward compatibility.\r\n              When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each\r\n            value must be a in the range from 0.00 (0% concentration) to to\r\n            1.00 (100% concentration)\r\n              Because JavaScript treats fixed point numbers badly (rounds to\r\n            floating point nearest to binary representation) it is highly advised to\r\n            communicate the fractional numbers as String types, not JavaScript Number type.\r\n              @param {Number|String} ch1 Color channel value\r\n            @param {Number|String} ch2 Color channel value\r\n            @param {Number|String} ch3 Color channel value\r\n            @param {Number|String} ch4 Color channel value\r\n              @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setDrawColor\r\n             */\n            API.setDrawColor = function (ch1, ch2, ch3, ch4) {\n              var color;\n              if (ch2 === undefined || ch4 === undefined && ch1 === ch2 === ch3) {\n                // Gray color space.\n                if (typeof ch1 === 'string') {\n                  color = ch1 + ' G';\n                } else {\n                  color = f2(ch1 / 255) + ' G';\n                }\n              } else if (ch4 === undefined) {\n                // RGB\n                if (typeof ch1 === 'string') {\n                  color = [ch1, ch2, ch3, 'RG'].join(' ');\n                } else {\n                  color = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), 'RG'].join(' ');\n                }\n              } else {\n                // CMYK\n                if (typeof ch1 === 'string') {\n                  color = [ch1, ch2, ch3, ch4, 'K'].join(' ');\n                } else {\n                  color = [f2(ch1), f2(ch2), f2(ch3), f2(ch4), 'K'].join(' ');\n                }\n              }\n              out(color);\n              return this;\n            };\n\n            /**\r\n            Sets the fill color for upcoming elements.\r\n              Depending on the number of arguments given, Gray, RGB, or CMYK\r\n            color space is implied.\r\n              When only ch1 is given, \"Gray\" color space is implied and it\r\n            must be a value in the range from 0.00 (solid black) to to 1.00 (white)\r\n            if values are communicated as String types, or in range from 0 (black)\r\n            to 255 (white) if communicated as Number type.\r\n            The RGB-like 0-255 range is provided for backward compatibility.\r\n              When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each\r\n            value must be in the range from 0.00 (minimum intensity) to to 1.00\r\n            (max intensity) if values are communicated as String types, or\r\n            from 0 (min intensity) to to 255 (max intensity) if values are communicated\r\n            as Number types.\r\n            The RGB-like 0-255 range is provided for backward compatibility.\r\n              When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each\r\n            value must be a in the range from 0.00 (0% concentration) to to\r\n            1.00 (100% concentration)\r\n              Because JavaScript treats fixed point numbers badly (rounds to\r\n            floating point nearest to binary representation) it is highly advised to\r\n            communicate the fractional numbers as String types, not JavaScript Number type.\r\n              @param {Number|String} ch1 Color channel value\r\n            @param {Number|String} ch2 Color channel value\r\n            @param {Number|String} ch3 Color channel value\r\n            @param {Number|String} ch4 Color channel value\r\n              @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setFillColor\r\n             */\n            API.setFillColor = function (ch1, ch2, ch3, ch4) {\n              var color;\n              if (ch2 === undefined || ch4 === undefined && ch1 === ch2 === ch3) {\n                // Gray color space.\n                if (typeof ch1 === 'string') {\n                  color = ch1 + ' g';\n                } else {\n                  color = f2(ch1 / 255) + ' g';\n                }\n              } else if (ch4 === undefined) {\n                // RGB\n                if (typeof ch1 === 'string') {\n                  color = [ch1, ch2, ch3, 'rg'].join(' ');\n                } else {\n                  color = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), 'rg'].join(' ');\n                }\n              } else {\n                // CMYK\n                if (typeof ch1 === 'string') {\n                  color = [ch1, ch2, ch3, ch4, 'k'].join(' ');\n                } else {\n                  color = [f2(ch1), f2(ch2), f2(ch3), f2(ch4), 'k'].join(' ');\n                }\n              }\n              out(color);\n              return this;\n            };\n\n            /**\r\n            Sets the text color for upcoming elements.\r\n            If only one, first argument is given,\r\n            treats the value as gray-scale color value.\r\n              @param {Number} r Red channel color value in range 0-255\r\n            @param {Number} g Green channel color value in range 0-255\r\n            @param {Number} b Blue channel color value in range 0-255\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setTextColor\r\n            */\n            API.setTextColor = function (r, g, b) {\n              if (r === 0 && g === 0 && b === 0 || typeof g === 'undefined') {\n                textColor = f3(r / 255) + ' g';\n              } else {\n                textColor = [f3(r / 255), f3(g / 255), f3(b / 255), 'rg'].join(' ');\n              }\n              return this;\n            };\n\n            /**\r\n            Is an Object providing a mapping from human-readable to\r\n            integer flag values designating the varieties of line cap\r\n            and join styles.\r\n              @returns {Object}\r\n            @fieldOf pdfDataExport#\r\n            @name CapJoinStyles\r\n            */\n            API.CapJoinStyles = {\n              0: 0,\n              'butt': 0,\n              'but': 0,\n              'bevel': 0,\n              1: 1,\n              'round': 1,\n              'rounded': 1,\n              'circle': 1,\n              2: 2,\n              'projecting': 2,\n              'project': 2,\n              'square': 2,\n              'milter': 2\n            };\n\n            /**\r\n            Sets the line cap styles\r\n            See {pdfDataExport.CapJoinStyles} for variants\r\n              @param {String|Number} style A string or number identifying the type of line cap\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setLineCap\r\n            */\n            API.setLineCap = function (style) {\n              var id = this.CapJoinStyles[style];\n              if (id === undefined) {\n                throw new Error(\"Line cap style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n              }\n              lineCapID = id;\n              out(id.toString(10) + ' J');\n              return this;\n            };\n\n            /**\r\n            Sets the line join styles\r\n            See {pdfDataExport.CapJoinStyles} for variants\r\n              @param {String|Number} style A string or number identifying the type of line join\r\n            @function\r\n            @returns {pdfDataExport}\r\n            @methodOf pdfDataExport#\r\n            @name setLineJoin\r\n            */\n            API.setLineJoin = function (style) {\n              var id = this.CapJoinStyles[style];\n              if (id === undefined) {\n                throw new Error(\"Line join style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n              }\n              lineJoinID = id;\n              out(id.toString(10) + ' j');\n              return this;\n            };\n\n            // Output is both an internal (for plugins) and external function\n            API.output = output;\n\n            /**\r\n             * Saves as PDF document. An alias of pdfDataExport.output('save', 'filename.pdf')\r\n             * @param  {String} filename The filename including extension.\r\n             *\r\n             * @function\r\n             * @returns {pdfDataExport}\r\n             * @methodOf pdfDataExport#\r\n             * @name save\r\n             */\n            API.save = function (filename) {\n              API.output('save', filename);\n            };\n\n            // applying plugins (more methods) ON TOP of built-in API.\n            // this is intentional as we allow plugins to override\n            // built-ins\n            for (plugin in pdfDataExport.API) {\n              if (pdfDataExport.API.hasOwnProperty(plugin)) {\n                if (plugin === 'events' && pdfDataExport.API.events.length) {\n                  (function (events, newEvents) {\n                    // pdfDataExport.API.events is a JS Array of Arrays\n                    // where each Array is a pair of event name, handler\n                    // Events were added by plugins to the pdfDataExport instantiator.\n                    // These are always added to the new instance and some ran\n                    // during instantiation.\n\n                    var eventname, handler_and_args, i;\n                    for (i = newEvents.length - 1; i !== -1; i--) {\n                      // subscribe takes 3 args: 'topic', function, runonce_flag\n                      // if undefined, runonce is false.\n                      // users can attach callback directly,\n                      // or they can attach an array with [callback, runonce_flag]\n                      // that's what the \"apply\" magic is for below.\n                      eventname = newEvents[i][0];\n                      handler_and_args = newEvents[i][1];\n                      events.subscribe.apply(events, [eventname].concat(typeof handler_and_args === 'function' ? [handler_and_args] : handler_and_args));\n                    }\n                  })(events, pdfDataExport.API.events);\n                } else {\n                  API[plugin] = pdfDataExport.API[plugin];\n                }\n              }\n            }\n\n            /////////////////////////////////////////\n            // continuing initilisation of pdfDataExport Document object\n            /////////////////////////////////////////\n\n            // Add the first page automatically\n            addFonts();\n            activeFontKey = 'F1';\n            _addPage();\n            events.publish('initialized');\n            return API;\n          }\n\n          /**\r\n          pdfDataExport.API is a STATIC property of pdfDataExport class.\r\n          pdfDataExport.API is an object you can add methods and properties to.\r\n          The methods / properties you add will show up in new pdfDataExport objects.\r\n          \r\n          One property is prepopulated. It is the 'events' Object. Plugin authors can add topics, callbacks to this object. These will be reassigned to all new instances of pdfDataExport.\r\n          Examples:\r\n              pdfDataExport.API.events['initialized'] = function(){ 'this' is API object }\r\n              pdfDataExport.API.events['addFont'] = function(added_font_object){ 'this' is API object }\r\n          \r\n          @static\r\n          @public\r\n          @memberOf pdfDataExport\r\n          @name API\r\n          \r\n          @example\r\n              pdfDataExport.API.mymethod = function(){\r\n                  // 'this' will be ref to internal API object. see pdfDataExport source\r\n                  // , so you can refer to built-in methods like so:\r\n                  //     this.line(....)\r\n                  //     this.text(....)\r\n              }\r\n              var pdfdoc = new pdfDataExport()\r\n              pdfdoc.mymethod() // <- !!!!!!\r\n          */\n          pdfDataExport.API = {\n            'events': []\n          };\n          return pdfDataExport;\n        }();\n        (function (pdfDataExportAPI) {\n          'use strict';\n\n          /*jslint browser:true */\n          /*global document: false, pdfDataExport */\n          var maxLn = 0,\n            lnP = 0,\n            fontName,\n            fontSize,\n            fontStyle,\n            lastCellPos = {\n              x: undefined,\n              y: undefined,\n              w: undefined,\n              h: undefined,\n              ln: undefined\n            },\n            pages = 1,\n            newPage = false,\n            setLastCellPosition = function (x, y, w, h, ln) {\n              lastCellPos = {\n                x: x,\n                y: y,\n                w: w,\n                h: h,\n                ln: ln\n              };\n            },\n            getLastCellPosition = function () {\n              return lastCellPos;\n            },\n            setMaxLn = function (x) {\n              maxLn = x;\n            },\n            getMaxLn = function () {\n              return maxLn;\n            },\n            setLnP = function (x) {\n              lnP = x;\n            },\n            getLnP = function (x) {\n              return lnP;\n            };\n          pdfDataExportAPI.getTextDimensions = function (txt) {\n            fontName = this.internal.getFont().fontName;\n            fontSize = this.internal.getFontSize();\n            fontStyle = this.internal.getFont().fontStyle;\n\n            // 1 pixel = 0.264583 mm and 1 mm = 72/25.4 point\n            var px2pt = 0.264583 * 72 / 25.4,\n              dimensions,\n              text;\n            text = document.createElement('font');\n            text.id = \"pdfDataExportCell\";\n            text.style.fontStyle = fontStyle;\n            text.style.fontName = fontName;\n            text.style.fontSize = fontSize + 'pt';\n            text.innerHTML = txt;\n            document.body.appendChild(text);\n            dimensions = {\n              w: (text.offsetWidth + 1) * px2pt,\n              h: (text.offsetHeight + 1) * px2pt\n            };\n            document.body.removeChild(text);\n            return dimensions;\n          };\n          pdfDataExportAPI.cellAddPage = function () {\n            this.addPage();\n            setLastCellPosition(undefined, undefined, undefined, undefined, undefined);\n            newPage = true;\n            pages += 1;\n            setLnP(1);\n          };\n          pdfDataExportAPI.cellInitialize = function () {\n            maxLn = 0;\n            lastCellPos = {\n              x: undefined,\n              y: undefined,\n              w: undefined,\n              h: undefined,\n              ln: undefined\n            };\n            pages = 1;\n            newPage = false;\n            setLnP(0);\n          };\n          pdfDataExportAPI.cell = function (x, y, w, h, txt, ln) {\n            this.lnMod = this.lnMod === undefined ? 0 : this.lnMod;\n            if (this.printingHeaderRow !== true && this.lnMod !== 0) {\n              ln = ln + this.lnMod;\n            }\n            if ((ln * h + y + h * 2) / pages >= this.internal.pageSize.height && pages === 1 && !newPage) {\n              this.cellAddPage();\n              if (this.printHeaders && this.tableHeaderRow) {\n                this.printHeaderRow(ln);\n                this.lnMod += 1;\n                ln += 1;\n              }\n              if (getMaxLn() === 0) {\n                setMaxLn(Math.round((this.internal.pageSize.height - h * 2) / h));\n              }\n            } else if (newPage && getLastCellPosition().ln !== ln && getLnP() === getMaxLn()) {\n              this.cellAddPage();\n              if (this.printHeaders && this.tableHeaderRow) {\n                this.printHeaderRow(ln);\n                this.lnMod += 1;\n                ln += 1;\n              }\n            }\n            var curCell = getLastCellPosition(),\n              dim = this.getTextDimensions(txt),\n              isNewLn = 1;\n            if (curCell.x !== undefined && curCell.ln === ln) {\n              x = curCell.x + curCell.w;\n            }\n            if (curCell.y !== undefined && curCell.y === y) {\n              y = curCell.y;\n            }\n            if (curCell.h !== undefined && curCell.h === h) {\n              h = curCell.h;\n            }\n            if (curCell.ln !== undefined && curCell.ln === ln) {\n              ln = curCell.ln;\n              isNewLn = 0;\n            }\n            if (newPage) {\n              y = h * (getLnP() + isNewLn);\n            } else {\n              y = y + h * Math.abs(getMaxLn() * pages - ln - getMaxLn());\n            }\n            this.rect(x, y, w, h);\n            var match = /[а-яА-ЯЁё]/.test(txt);\n            if (match) {\n              this.text16(txt, x + 3, y + h - 3);\n            } else {\n              this.text(txt, x + 3, y + h - 3);\n            }\n            setLnP(getLnP() + isNewLn);\n            setLastCellPosition(x, y, w, h, ln);\n            return this;\n          };\n\n          /**\r\n           * Return an array containing all of the owned keys of an Object\r\n           * @type {Function}\r\n           * @return {String[]} of Object keys\r\n           */\n          pdfDataExportAPI.getKeys = typeof Object.keys === 'function' ? function (object) {\n            if (!object) {\n              return [];\n            }\n            return Object.keys(object);\n          } : function (object) {\n            var keys = [],\n              property;\n            for (property in object) {\n              if (object.hasOwnProperty(property)) {\n                keys.push(property);\n              }\n            }\n            return keys;\n          };\n\n          /**\r\n           * Return the maximum value from an array\r\n           * @param array\r\n           * @param comparisonFn\r\n           * @returns {*}\r\n           */\n          pdfDataExportAPI.arrayMax = function (array, comparisonFn) {\n            var max = array[0],\n              i,\n              ln,\n              item;\n            for (i = 0, ln = array.length; i < ln; i += 1) {\n              item = array[i];\n              if (comparisonFn) {\n                if (comparisonFn(max, item) === -1) {\n                  max = item;\n                }\n              } else {\n                if (item > max) {\n                  max = item;\n                }\n              }\n            }\n            return max;\n          };\n\n          /**\r\n           * Create a table from a set of data.\r\n           * @param {Object[]} data As array of objects containing key-value pairs\r\n           * @param {String[]} [headers] Omit or null to auto-generate headers at a performance cost\r\n           * @param {Object} [config.printHeaders] True to print column headers at the top of every page\r\n           * @param {Object} [config.autoSize] True to dynamically set the column widths to match the widest cell value\r\n           * @param {Object} [config.autoStretch] True to force the table to fit the width of the page\r\n           */\n          pdfDataExportAPI.table = function (data, headers, config) {\n            var headerNames = [],\n              headerPrompts = [],\n              header,\n              autoSize,\n              printHeaders,\n              autoStretch,\n              i,\n              ln,\n              columnMatrix = {},\n              columnWidths = {},\n              columnData,\n              column,\n              columnMinWidths = [],\n              j,\n              tableHeaderConfigs = [],\n              model,\n              jln,\n              func;\n\n            /**\r\n             * @property {Number} lnMod\r\n             * Keep track of the current line number modifier used when creating cells\r\n             */\n            this.lnMod = 0;\n            if (config) {\n              autoSize = config.autoSize || false;\n              printHeaders = this.printHeaders = config.printHeaders || true;\n              autoStretch = config.autoStretch || true;\n            }\n            if (!data) {\n              throw 'No data for PDF table';\n            }\n\n            // Set headers\n            if (headers === undefined || headers === null) {\n              // No headers defined so we derive from data\n              headerNames = this.getKeys(data[0]);\n            } else if (headers[0] && typeof headers[0] !== 'string') {\n              // Split header configs into names and prompts\n              for (i = 0, ln = headers.length; i < ln; i += 1) {\n                header = headers[i];\n                headerNames.push(header.name);\n                headerPrompts.push(header.prompt);\n              }\n            } else {\n              headerNames = headers;\n            }\n            if (config.autoSize) {\n              // Create Columns Matrix\n\n              func = function (rec) {\n                return rec[header];\n              };\n              for (i = 0, ln = headerNames.length; i < ln; i += 1) {\n                header = headerNames[i];\n                columnMatrix[header] = data.map(func);\n\n                // get header width\n                columnMinWidths.push(this.getTextDimensions(headerPrompts[i] || header).w);\n                column = columnMatrix[header];\n\n                // get cell widths\n                for (j = 0, ln = column.length; j < ln; j += 1) {\n                  columnData = column[j];\n                  columnMinWidths.push(this.getTextDimensions(columnData).w);\n                }\n\n                // get final column width\n                columnWidths[header] = pdfDataExportAPI.arrayMax(columnMinWidths);\n              }\n            }\n\n            // -- Construct the table\n\n            if (config.printHeaders) {\n              // Construct the header row\n              for (i = 0, ln = headerNames.length; i < ln; i += 1) {\n                header = headerNames[i];\n                tableHeaderConfigs.push([10, 10, columnWidths[header], 25, String(headerPrompts.length ? headerPrompts[i] : header)]);\n              }\n\n              // Store the table header config\n              this.setTableHeaderRow(tableHeaderConfigs);\n\n              // Print the header for the start of the table\n              this.printHeaderRow(1);\n            }\n\n            // Construct the data rows\n            for (i = 0, ln = data.length; i < ln; i += 1) {\n              model = data[i];\n              for (j = 0, jln = headerNames.length; j < jln; j += 1) {\n                header = headerNames[j];\n                this.cell(10, 10, columnWidths[header], 25, String(model[header]), i + 2);\n              }\n            }\n            return this;\n          };\n\n          /**\r\n           * Store the config for outputting a table header\r\n           * @param {Object[]} config\r\n           * An array of cell configs that would define a header row: Each config matches the config used by pdfDataExportAPI.cell\r\n           * except the ln parameter is excluded\r\n           */\n          pdfDataExportAPI.setTableHeaderRow = function (config) {\n            this.tableHeaderRow = config;\n          };\n\n          /**\r\n           * Output the store header row\r\n           * @param lineNumber The line number to output the header at\r\n           */\n          pdfDataExportAPI.printHeaderRow = function (lineNumber) {\n            if (!this.tableHeaderRow) {\n              throw 'Property tableHeaderRow does not exist.';\n            }\n            var tableHeaderCell, tmpArray, i, ln;\n            this.printingHeaderRow = true;\n            for (i = 0, ln = this.tableHeaderRow.length; i < ln; i += 1) {\n              tableHeaderCell = this.tableHeaderRow[i];\n              tmpArray = [].concat(tableHeaderCell);\n              this.cell.apply(this, tmpArray.concat(lineNumber));\n            }\n            this.printingHeaderRow = false;\n          };\n        })(pdfDataExport.API);\n        ;\n        (function (API) {\n          'use strict';\n\n          /**\r\n          Returns an array of length matching length of the 'word' string, with each\r\n          cell ocupied by the width of the char in that position.\r\n          \r\n          @function\r\n          @param word {String}\r\n          @param widths {Object}\r\n          @param kerning {Object}\r\n          @returns {Array}\r\n          */\n          var getCharWidthsArray = API.getCharWidthsArray = function (text, options) {\n            if (!options) {\n              options = {};\n            }\n            var widths = options.widths ? options.widths : this.internal.getFont().metadata.Unicode.widths,\n              widthsFractionOf = widths.fof ? widths.fof : 1,\n              kerning = options.kerning ? options.kerning : this.internal.getFont().metadata.Unicode.kerning,\n              kerningFractionOf = kerning.fof ? kerning.fof : 1;\n\n            // console.log(\"widths, kergnings\", widths, kerning)\n\n            var i,\n              l,\n              char_code,\n              char_width,\n              prior_char_code = 0 // for kerning\n              ,\n              default_char_width = widths[0] || widthsFractionOf,\n              output = [];\n            for (i = 0, l = text.length; i < l; i++) {\n              char_code = text.charCodeAt(i);\n              output.push((widths[char_code] || default_char_width) / widthsFractionOf + (kerning[char_code] && kerning[char_code][prior_char_code] || 0) / kerningFractionOf);\n              prior_char_code = char_code;\n            }\n            return output;\n          };\n          var getArraySum = function (array) {\n            var i = array.length,\n              output = 0;\n            while (i) {\n              ;\n              i--;\n              output += array[i];\n            }\n            return output;\n          };\n          /**\r\n          Returns a widths of string in a given font, if the font size is set as 1 point.\r\n          \r\n          In other words, this is \"proportional\" value. For 1 unit of font size, the length\r\n          of the string will be that much.\r\n          \r\n          Multiply by font size to get actual width in *points*\r\n          Then divide by 72 to get inches or divide by (72/25.6) to get 'mm' etc.\r\n          \r\n          @public\r\n          @function\r\n          @param\r\n          @returns {Type}\r\n          */\n          var getStringUnitWidth = API.getStringUnitWidth = function (text, options) {\n            return getArraySum(getCharWidthsArray.call(this, text, options));\n          };\n\n          /** \r\n          returns array of lines\r\n          */\n          var splitLongWord = function (word, widths_array, firstLineMaxLen, maxLen) {\n            var answer = [];\n\n            // 1st, chop off the piece that can fit on the hanging line.\n            var i = 0,\n              l = word.length,\n              workingLen = 0;\n            while (i !== l && workingLen + widths_array[i] < firstLineMaxLen) {\n              workingLen += widths_array[i];\n              i++;\n            }\n            // this is first line.\n            answer.push(word.slice(0, i));\n\n            // 2nd. Split the rest into maxLen pieces.\n            var startOfLine = i;\n            workingLen = 0;\n            while (i !== l) {\n              if (workingLen + widths_array[i] > maxLen) {\n                answer.push(word.slice(startOfLine, i));\n                workingLen = 0;\n                startOfLine = i;\n              }\n              workingLen += widths_array[i];\n              i++;\n            }\n            if (startOfLine !== i) {\n              answer.push(word.slice(startOfLine, i));\n            }\n            return answer;\n          };\n\n          // Note, all sizing inputs for this function must be in \"font measurement units\"\n          // By default, for PDF, it's \"point\".\n          var splitParagraphIntoLines = function (text, maxlen, options) {\n            // at this time works only on Western scripts, ones with space char\n            // separating the words. Feel free to expand.\n\n            if (!options) {\n              options = {};\n            }\n            var spaceCharWidth = getCharWidthsArray(' ', options)[0];\n            var words = text.split(' ');\n            var line = [],\n              lines = [line],\n              line_length = options.textIndent || 0,\n              separator_length = 0,\n              current_word_length = 0,\n              word,\n              widths_array;\n            var i, l, tmp;\n            for (i = 0, l = words.length; i < l; i++) {\n              word = words[i];\n              widths_array = getCharWidthsArray(word, options);\n              current_word_length = getArraySum(widths_array);\n              if (line_length + separator_length + current_word_length > maxlen) {\n                if (current_word_length > maxlen) {\n                  // this happens when you have space-less long URLs for example.\n                  // we just chop these to size. We do NOT insert hiphens\n                  tmp = splitLongWord(word, widths_array, maxlen - (line_length + separator_length), maxlen);\n                  // first line we add to existing line object\n                  line.push(tmp.shift()); // it's ok to have extra space indicator there\n                  // last line we make into new line object\n                  line = [tmp.pop()];\n                  // lines in the middle we apped to lines object as whole lines\n                  while (tmp.length) {\n                    lines.push([tmp.shift()]); // single fragment occupies whole line\n                  }\n                  current_word_length = getArraySum(widths_array.slice(word.length - line[0].length));\n                } else {\n                  // just put it on a new line\n                  line = [word];\n                }\n\n                // now we attach new line to lines\n                lines.push(line);\n                line_length = current_word_length;\n                separator_length = spaceCharWidth;\n              } else {\n                line.push(word);\n                line_length += separator_length + current_word_length;\n                separator_length = spaceCharWidth;\n              }\n            }\n            var output = [];\n            for (i = 0, l = lines.length; i < l; i++) {\n              output.push(lines[i].join(' '));\n            }\n            return output;\n          };\n\n          /**\r\n          Splits a given string into an array of strings. Uses 'size' value\r\n          (in measurement units declared as default for the pdfDataExport instance)\r\n          and the font's \"widths\" and \"Kerning\" tables, where availabe, to\r\n          determine display length of a given string for a given font.\r\n          \r\n          We use character's 100% of unit size (height) as width when Width\r\n          table or other default width is not available.\r\n          \r\n          @public\r\n          @function\r\n          @param text {String} Unencoded, regular JavaScript (Unicode, UTF-16 / UCS-2) string.\r\n          @param size {Number} Nominal number, measured in units default to this instance of pdfDataExport.\r\n          @param options {Object} Optional flags needed for chopper to do the right thing.\r\n          @returns {Array} with strings chopped to size.\r\n          */\n          API.splitTextToSize = function (text, maxlen, options) {\n            'use strict';\n\n            if (!options) {\n              options = {};\n            }\n            var fsize = options.fontSize || this.internal.getFontSize(),\n              newOptions = function (options) {\n                var widths = {\n                    0: 1\n                  },\n                  kerning = {};\n                if (!options.widths || !options.kerning) {\n                  var f = this.internal.getFont(options.fontName, options.fontStyle),\n                    encoding = 'Unicode';\n                  // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE\n                  // Actual JavaScript-native String's 16bit char codes used.\n                  // no multi-byte logic here\n\n                  if (f.metadata[encoding]) {\n                    return {\n                      widths: f.metadata[encoding].widths || widths,\n                      kerning: f.metadata[encoding].kerning || kerning\n                    };\n                  }\n                } else {\n                  return {\n                    widths: options.widths,\n                    kerning: options.kerning\n                  };\n                }\n\n                // then use default values\n                return {\n                  widths: widths,\n                  kerning: kerning\n                };\n              }.call(this, options);\n\n            // first we split on end-of-line chars\n            var paragraphs;\n            if (text.match(/[\\n\\r]/)) {\n              paragraphs = text.split(/\\r\\n|\\r|\\n/g);\n            } else {\n              paragraphs = [text];\n            }\n\n            // now we convert size (max length of line) into \"font size units\"\n            // at present time, the \"font size unit\" is always 'point'\n            // 'proportional' means, \"in proportion to font size\"\n            var fontUnit_maxLen = 1.0 * this.internal.scaleFactor * maxlen / fsize;\n            // at this time, fsize is always in \"points\" regardless of the default measurement unit of the doc.\n            // this may change in the future?\n            // until then, proportional_maxlen is likely to be in 'points'\n\n            // If first line is to be indented (shorter or longer) than maxLen \n            // we indicate that by using CSS-style \"text-indent\" option.\n            // here it's in font units too (which is likely 'points')\n            // it can be negative (which makes the first line longer than maxLen)\n            newOptions.textIndent = options.textIndent ? options.textIndent * 1.0 * this.internal.scaleFactor / fsize : 0;\n            var i,\n              l,\n              output = [];\n            for (i = 0, l = paragraphs.length; i < l; i++) {\n              output = output.concat(splitParagraphIntoLines(paragraphs[i], fontUnit_maxLen, newOptions));\n            }\n            return output;\n          };\n        })(pdfDataExport.API);\n        ;\n        (function (pdfDataExportAPI) {\n          'use strict';\n\n          var namespace = 'addImage_';\n          var getJpegSize = function (imgData) {\n              'use strict';\n\n              var width, height;\n              // Verify we have a valid jpeg header 0xff,0xd8,0xff,0xe0,?,?,'J','F','I','F',0x00\n              if (!imgData.charCodeAt(0) === 0xff || !imgData.charCodeAt(1) === 0xd8 || !imgData.charCodeAt(2) === 0xff || !imgData.charCodeAt(3) === 0xe0 || !imgData.charCodeAt(6) === 'J'.charCodeAt(0) || !imgData.charCodeAt(7) === 'F'.charCodeAt(0) || !imgData.charCodeAt(8) === 'I'.charCodeAt(0) || !imgData.charCodeAt(9) === 'F'.charCodeAt(0) || !imgData.charCodeAt(10) === 0x00) {\n                throw new Error('getJpegSize requires a binary jpeg file');\n              }\n              var blockLength = imgData.charCodeAt(4) * 256 + imgData.charCodeAt(5);\n              var i = 4,\n                len = imgData.length;\n              while (i < len) {\n                i += blockLength;\n                if (imgData.charCodeAt(i) !== 0xff) {\n                  throw new Error('getJpegSize could not find the size of the image');\n                }\n                if (imgData.charCodeAt(i + 1) === 0xc0) {\n                  height = imgData.charCodeAt(i + 5) * 256 + imgData.charCodeAt(i + 6);\n                  width = imgData.charCodeAt(i + 7) * 256 + imgData.charCodeAt(i + 8);\n                  return [width, height];\n                } else {\n                  i += 2;\n                  blockLength = imgData.charCodeAt(i) * 256 + imgData.charCodeAt(i + 1);\n                }\n              }\n            }\n            // Image functionality ported from pdf.js\n            ,\n            putImage = function (img) {\n              var objectNumber = this.internal.newObject(),\n                out = this.internal.write,\n                putStream = this.internal.putStream;\n              img['n'] = objectNumber;\n              out('<</Type /XObject');\n              out('/Subtype /Image');\n              out('/Width ' + img['w']);\n              out('/Height ' + img['h']);\n              if (img['cs'] === 'Indexed') {\n                out('/ColorSpace [/Indexed /DeviceRGB ' + (img['pal'].length / 3 - 1) + ' ' + (objectNumber + 1) + ' 0 R]');\n              } else {\n                out('/ColorSpace /' + img['cs']);\n                if (img['cs'] === 'DeviceCMYK') {\n                  out('/Decode [1 0 1 0 1 0 1 0]');\n                }\n              }\n              out('/BitsPerComponent ' + img['bpc']);\n              if ('f' in img) {\n                out('/Filter /' + img['f']);\n              }\n              if ('dp' in img) {\n                out('/DecodeParms <<' + img['dp'] + '>>');\n              }\n              if ('trns' in img && img['trns'].constructor == Array) {\n                var trns = '';\n                for (var i = 0; i < img['trns'].length; i++) {\n                  trns += img[trns][i] + ' ' + img['trns'][i] + ' ';\n                  out('/Mask [' + trns + ']');\n                }\n              }\n              if ('smask' in img) {\n                out('/SMask ' + (objectNumber + 1) + ' 0 R');\n              }\n              out('/Length ' + img['data'].length + '>>');\n              putStream(img['data']);\n              out('endobj');\n            },\n            putResourcesCallback = function () {\n              var images = this.internal.collections[namespace + 'images'];\n              for (var i in images) {\n                putImage.call(this, images[i]);\n              }\n            },\n            putXObjectsDictCallback = function () {\n              var images = this.internal.collections[namespace + 'images'],\n                out = this.internal.write,\n                image;\n              for (var i in images) {\n                image = images[i];\n                out('/I' + image['i'], image['n'], '0', 'R');\n              }\n            };\n          pdfDataExportAPI.addImage = function (imageData, format, x, y, w, h) {\n            'use strict';\n\n            if (typeof imageData === 'object' && imageData.nodeType === 1) {\n              var canvas = document.createElement('canvas');\n              canvas.width = imageData.clientWidth;\n              canvas.height = imageData.clientHeight;\n              var ctx = canvas.getContext('2d');\n              if (!ctx) {\n                throw 'addImage requires canvas to be supported by browser.';\n              }\n              ctx.drawImage(imageData, 0, 0, canvas.width, canvas.height);\n              imageData = canvas.toDataURL('image/jpeg');\n              format = \"JPEG\";\n            }\n            if (format.toUpperCase() !== 'JPEG') {\n              throw new Error('addImage currently only supports format \\'JPEG\\', not \\'' + format + '\\'');\n            }\n            var imageIndex,\n              images = this.internal.collections[namespace + 'images'],\n              coord = this.internal.getCoordinateString,\n              vcoord = this.internal.getVerticalCoordinateString;\n\n            // Detect if the imageData is raw binary or Data URL\n            if (imageData.substring(0, 23) === 'data:image/jpeg;base64,') {\n              imageData = atob(imageData.replace('data:image/jpeg;base64,', ''));\n            }\n            if (images) {\n              // this is NOT the first time this method is ran on this instance of pdfDataExport object.\n              imageIndex = Object.keys ? Object.keys(images).length : function (o) {\n                var i = 0;\n                for (var e in o) {\n                  if (o.hasOwnProperty(e)) {\n                    i++;\n                  }\n                }\n                return i;\n              }(images);\n            } else {\n              // this is the first time this method is ran on this instance of pdfDataExport object.\n              imageIndex = 0;\n              this.internal.collections[namespace + 'images'] = images = {};\n              this.internal.events.subscribe('putResources', putResourcesCallback);\n              this.internal.events.subscribe('putXobjectDict', putXObjectsDictCallback);\n            }\n            var dims = getJpegSize(imageData);\n            var info = {\n              w: dims[0],\n              h: dims[1],\n              cs: 'DeviceRGB',\n              bpc: 8,\n              f: 'DCTDecode',\n              i: imageIndex,\n              data: imageData\n              // n: objectNumber will be added by putImage code\n            };\n            images[imageIndex] = info;\n            if (!w && !h) {\n              w = -96;\n              h = -96;\n            }\n            if (w < 0) {\n              w = -1 * info['w'] * 72 / w / this.internal.scaleFactor;\n            }\n            if (h < 0) {\n              h = -1 * info['h'] * 72 / h / this.internal.scaleFactor;\n            }\n            if (w === 0) {\n              w = h * info['w'] / info['h'];\n            }\n            if (h === 0) {\n              h = w * info['h'] / info['w'];\n            }\n            this.internal.write('q', coord(w), '0 0', coord(h) // TODO: check if this should be shifted by vcoord\n            , coord(x), vcoord(y + h), 'cm /I' + info['i'], 'Do Q');\n            return this;\n          };\n        })(pdfDataExport.API);\n        (function (API) {\n          'use strict';\n\n          /**\r\n          Uncompresses data compressed into custom, base16-like format. \r\n          @public\r\n          @function\r\n          @param\r\n          @returns {Type}\r\n          */\n          var uncompress = function (data) {\n            var decoded = '0123456789abcdef',\n              encoded = 'klmnopqrstuvwxyz',\n              mapping = {};\n            for (var i = 0; i < encoded.length; i++) {\n              mapping[encoded[i]] = decoded[i];\n            }\n            var undef,\n              output = {},\n              sign = 1,\n              stringparts // undef. will be [] in string mode\n              ,\n              activeobject = output,\n              parentchain = [],\n              parent_key_pair,\n              keyparts = '',\n              valueparts = '',\n              key // undef. will be Truthy when Key is resolved.\n              ,\n              datalen = data.length - 1 // stripping ending }\n              ,\n              ch;\n            i = 1; // stripping starting {\n\n            while (i != datalen) {\n              // - { } ' are special.\n\n              ch = data[i];\n              i += 1;\n              if (ch == \"'\") {\n                if (stringparts) {\n                  // end of string mode\n                  key = stringparts.join('');\n                  stringparts = undef;\n                } else {\n                  // start of string mode\n                  stringparts = [];\n                }\n              } else if (stringparts) {\n                stringparts.push(ch);\n              } else if (ch == '{') {\n                // start of object\n                parentchain.push([activeobject, key]);\n                activeobject = {};\n                key = undef;\n              } else if (ch == '}') {\n                // end of object\n                parent_key_pair = parentchain.pop();\n                parent_key_pair[0][parent_key_pair[1]] = activeobject;\n                key = undef;\n                activeobject = parent_key_pair[0];\n              } else if (ch == '-') {\n                sign = -1;\n              } else {\n                // must be number\n                if (key === undef) {\n                  if (mapping.hasOwnProperty(ch)) {\n                    keyparts += mapping[ch];\n                    key = parseInt(keyparts, 16) * sign;\n                    sign = +1;\n                    keyparts = '';\n                  } else {\n                    keyparts += ch;\n                  }\n                } else {\n                  if (mapping.hasOwnProperty(ch)) {\n                    valueparts += mapping[ch];\n                    activeobject[key] = parseInt(valueparts, 16) * sign;\n                    sign = +1;\n                    key = undef;\n                    valueparts = '';\n                  } else {\n                    valueparts += ch;\n                  }\n                }\n              }\n            } // end while\n\n            return output;\n          };\n\n          // encoding = 'Unicode' \n          // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE. NO clever BOM behavior\n          // Actual 16bit char codes used.\n          // no multi-byte logic here\n\n          // Unicode characters to WinAnsiEncoding:\n          // {402: 131, 8211: 150, 8212: 151, 8216: 145, 8217: 146, 8218: 130, 8220: 147, 8221: 148, 8222: 132, 8224: 134, 8225: 135, 8226: 149, 8230: 133, 8364: 128, 8240:137, 8249: 139, 8250: 155, 710: 136, 8482: 153, 338: 140, 339: 156, 732: 152, 352: 138, 353: 154, 376: 159, 381: 142, 382: 158}\n          // as you can see, all Unicode chars are outside of 0-255 range. No char code conflicts.\n          // this means that you can give Win cp1252 encoded strings to pdfDataExport for rendering directly\n          // as well as give strings with some (supported by these fonts) Unicode characters and \n          // these will be mapped to win cp1252 \n          // for example, you can send char code (cp1252) 0x80 or (unicode) 0x20AC, getting \"Euro\" glyph displayed in both cases.\n\n          var encodingBlock = {\n              'codePages': ['WinAnsiEncoding'],\n              'WinAnsiEncoding': uncompress(\"{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}\")\n            },\n            encodings = {\n              'Unicode': {\n                'Courier': encodingBlock,\n                'Courier-Bold': encodingBlock,\n                'Courier-BoldOblique': encodingBlock,\n                'Courier-Oblique': encodingBlock,\n                'Helvetica': encodingBlock,\n                'Helvetica-Bold': encodingBlock,\n                'Helvetica-BoldOblique': encodingBlock,\n                'Helvetica-Oblique': encodingBlock,\n                'Times-Roman': encodingBlock,\n                'Times-Bold': encodingBlock,\n                'Times-BoldItalic': encodingBlock,\n                'Times-Italic': encodingBlock\n                //\t, 'Symbol'\n                //\t, 'ZapfDingbats'\n              }\n            },\n            fontMetrics = {\n              'Unicode': {\n                // all sizing numbers are n/fontMetricsFractionOf = one font size unit\n                // this means that if fontMetricsFractionOf = 1000, and letter A's width is 476, it's\n                // width is 476/1000 or 47.6% of its height (regardless of font size)\n                // At this time this value applies to \"widths\" and \"kerning\" numbers.\n\n                // char code 0 represents \"default\" (average) width - use it for chars missing in this table.\n                // key 'fof' represents the \"fontMetricsFractionOf\" value\n\n                'Courier-Oblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n                'Times-BoldItalic': uncompress(\"{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}\"),\n                'Helvetica-Bold': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),\n                'Courier': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n                'Courier-BoldOblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n                'Times-Bold': uncompress(\"{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}\")\n                //, 'Symbol': uncompress(\"{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}\")\n                ,\n                'Helvetica': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\"),\n                'Helvetica-BoldOblique': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\")\n                //, 'ZapfDingbats': uncompress(\"{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}\")\n                ,\n                'Courier-Bold': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n                'Times-Italic': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}\"),\n                'Times-Roman': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}\"),\n                'Helvetica-Oblique': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")\n              }\n            };\n\n          /*\r\n          This event handler is fired when a new pdfDataExport object is initialized\r\n          This event handler appends metrics data to standard fonts within\r\n          that pdfDataExport instance. The metrics are mapped over Unicode character\r\n          codes, NOT CIDs or other codes matching the StandardEncoding table of the\r\n          standard PDF fonts.\r\n          Future:\r\n          Also included is the encoding maping table, converting Unicode (UCS-2, UTF-16)\r\n          char codes to StandardEncoding character codes. The encoding table is to be used\r\n          somewhere around \"pdfEscape\" call.\r\n          */\n\n          API.events.push(['addFonts', function (fontManagementObjects) {\n            // fontManagementObjects is {\n            //\t'fonts':font_ID-keyed hash of font objects\n            //\t, 'dictionary': lookup object, linking [\"FontFamily\"]['Style'] to font ID\n            //}\n            var font,\n              fontID,\n              metrics,\n              unicode_section,\n              encoding = 'Unicode',\n              encodingBlock;\n            for (fontID in fontManagementObjects.fonts) {\n              if (fontManagementObjects.fonts.hasOwnProperty(fontID)) {\n                font = fontManagementObjects.fonts[fontID];\n\n                // // we only ship 'Unicode' mappings and metrics. No need for loop.\n                // // still, leaving this for the future.\n\n                // for (encoding in fontMetrics){\n                // \tif (fontMetrics.hasOwnProperty(encoding)) {\n\n                metrics = fontMetrics[encoding][font.PostScriptName];\n                if (metrics) {\n                  if (font.metadata[encoding]) {\n                    unicode_section = font.metadata[encoding];\n                  } else {\n                    unicode_section = font.metadata[encoding] = {};\n                  }\n                  unicode_section.widths = metrics.widths;\n                  unicode_section.kerning = metrics.kerning;\n                }\n                // \t}\n                // }\n                // for (encoding in encodings){\n                // \tif (encodings.hasOwnProperty(encoding)) {\n                encodingBlock = encodings[encoding][font.PostScriptName];\n                if (encodingBlock) {\n                  if (font.metadata[encoding]) {\n                    unicode_section = font.metadata[encoding];\n                  } else {\n                    unicode_section = font.metadata[encoding] = {};\n                  }\n                  unicode_section.encoding = encodingBlock;\n                  if (encodingBlock.codePages && encodingBlock.codePages.length) {\n                    font.encoding = encodingBlock.codePages[0];\n                  }\n                }\n                // \t}\n                // }\n              }\n            }\n          }]); // end of adding event handler\n        })(pdfDataExport.API);\n\n        /*global self */\n        /*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\r\n          plusplus: true */\n\n        var saveAs = window.jqxSaveAs = saveAs || navigator.msSaveBlob && navigator.msSaveBlob.bind(navigator) || function (view) {\n          \"use strict\";\n\n          var doc = view.document\n            // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet\n            ,\n            get_URL = function () {\n              return view.URL || view.webkitURL || view;\n            },\n            URL = view.URL || view.webkitURL || view,\n            save_link = $(\"<a></a>\")[0]\n            //   , save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n            ,\n            can_use_save_link = (\"download\" in save_link),\n            click = function (node) {\n              var event = doc.createEvent(\"MouseEvents\");\n              event.initMouseEvent(\"click\", true, false, view, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n              return node.dispatchEvent(event); // false if event was cancelled\n            },\n            webkit_req_fs = view.webkitRequestFileSystem,\n            req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem,\n            throw_outside = function (ex) {\n              (view.setImmediate || view.setTimeout)(function () {\n                throw ex;\n              }, 0);\n            },\n            force_saveable_type = \"application/octet-stream\",\n            fs_min_size = 0,\n            deletion_queue = [],\n            process_deletion_queue = function () {\n              var i = deletion_queue.length;\n              while (i--) {\n                var file = deletion_queue[i];\n                if (typeof file === \"string\") {\n                  // file is an object URL\n                  URL.revokeObjectURL(file);\n                } else {\n                  // file is a File\n                  file.remove();\n                }\n              }\n              deletion_queue.length = 0; // clear queue\n            },\n            dispatch = function (filesaver, event_types, event) {\n              event_types = [].concat(event_types);\n              var i = event_types.length;\n              while (i--) {\n                var listener = filesaver[\"on\" + event_types[i]];\n                if (typeof listener === \"function\") {\n                  try {\n                    listener.call(filesaver, event || filesaver);\n                  } catch (ex) {\n                    throw_outside(ex);\n                  }\n                }\n              }\n            },\n            FileSaver = function (blob, name) {\n              // First try a.download, then web filesystem, then object URLs\n              var filesaver = this,\n                type = blob.type,\n                blob_changed = false,\n                object_url,\n                target_view,\n                get_object_url = function () {\n                  var object_url = get_URL().createObjectURL(blob);\n                  deletion_queue.push(object_url);\n                  return object_url;\n                },\n                dispatch_all = function () {\n                  dispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n                }\n                // on any filesys errors revert to saving with object URLs\n                ,\n                fs_error = function () {\n                  // don't create more object URLs than needed\n                  if (blob_changed || !object_url) {\n                    object_url = get_object_url(blob);\n                  }\n                  if (target_view) {\n                    target_view.location.href = object_url;\n                  }\n                  filesaver.readyState = filesaver.DONE;\n                  dispatch_all();\n                },\n                abortable = function (func) {\n                  return function () {\n                    if (filesaver.readyState !== filesaver.DONE) {\n                      return func.apply(this, arguments);\n                    }\n                  };\n                },\n                create_if_not_found = {\n                  create: true,\n                  exclusive: false\n                },\n                slice;\n              filesaver.readyState = filesaver.INIT;\n              if (!name) {\n                name = \"download\";\n              }\n              if (can_use_save_link) {\n                object_url = get_object_url(blob);\n                save_link.href = object_url;\n                save_link.download = name;\n                if (click(save_link)) {\n                  filesaver.readyState = filesaver.DONE;\n                  dispatch_all();\n                  return;\n                }\n              }\n              // Object and web filesystem URLs have a problem saving in Google Chrome when\n              // viewed in a tab, so I force save with application/octet-stream\n              // http://code.google.com/p/chromium/issues/detail?id=91158\n              if (view.chrome && type && type !== force_saveable_type) {\n                slice = blob.slice || blob.webkitSlice;\n                blob = slice.call(blob, 0, blob.size, force_saveable_type);\n                blob_changed = true;\n              }\n              // Since I can't be sure that the guessed media type will trigger a download\n              // in WebKit, I append .download to the filename.\n              // https://bugs.webkit.org/show_bug.cgi?id=65440\n              if (webkit_req_fs && name !== \"download\") {\n                name += \".download\";\n              }\n              if (type === force_saveable_type || webkit_req_fs) {\n                target_view = view;\n              } else {\n                target_view = view.open();\n              }\n              if (!req_fs) {\n                fs_error();\n                return;\n              }\n              fs_min_size += blob.size;\n              req_fs(view.TEMPORARY, fs_min_size, abortable(function (fs) {\n                fs.root.getDirectory(\"saved\", create_if_not_found, abortable(function (dir) {\n                  var save = function () {\n                    dir.getFile(name, create_if_not_found, abortable(function (file) {\n                      file.createWriter(abortable(function (writer) {\n                        writer.onwriteend = function (event) {\n                          target_view.location.href = file.toURL();\n                          deletion_queue.push(file);\n                          filesaver.readyState = filesaver.DONE;\n                          dispatch(filesaver, \"writeend\", event);\n                        };\n                        writer.onerror = function () {\n                          var error = writer.error;\n                          if (error.code !== error.ABORT_ERR) {\n                            fs_error();\n                          }\n                        };\n                        \"writestart progress write abort\".split(\" \").forEach(function (event) {\n                          writer[\"on\" + event] = filesaver[\"on\" + event];\n                        });\n                        writer.write(blob);\n                        filesaver.abort = function () {\n                          writer.abort();\n                          filesaver.readyState = filesaver.DONE;\n                        };\n                        filesaver.readyState = filesaver.WRITING;\n                      }), fs_error);\n                    }), fs_error);\n                  };\n                  dir.getFile(name, {\n                    create: false\n                  }, abortable(function (file) {\n                    // delete file if it already exists\n                    file.remove();\n                    save();\n                  }), abortable(function (ex) {\n                    if (ex.code === ex.NOT_FOUND_ERR) {\n                      save();\n                    } else {\n                      fs_error();\n                    }\n                  }));\n                }), fs_error);\n              }), fs_error);\n            },\n            FS_proto = FileSaver.prototype,\n            saveAs = function (blob, name) {\n              return new FileSaver(blob, name);\n            };\n          FS_proto.abort = function () {\n            var filesaver = this;\n            filesaver.readyState = filesaver.DONE;\n            dispatch(filesaver, \"abort\");\n          };\n          FS_proto.readyState = FS_proto.INIT = 0;\n          FS_proto.WRITING = 1;\n          FS_proto.DONE = 2;\n          FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n          if (view.addEventListener) {\n            view.addEventListener(\"unload\", process_deletion_queue, false);\n          }\n          return saveAs;\n        }(self);\n        ;\n        (function (API) {\n          'use strict';\n\n          var name = 'pdfDataExport IE Below 9 Shim plugin';\n          // Shim in IE6-9 support\n          API.output = function (type, options) {\n            // If not IE then return early\n            return this.internal.output(type, options);\n            var filename = 'Output.pdf';\n            switch (type) {\n              case 'datauristring':\n              case 'dataurlstring':\n              case 'datauri':\n              case 'dataurl':\n              case 'dataurlnewwindow':\n                if (console) console.log(name + ': Data URIs are not supported on IE6-9.');\n                break;\n              case 'save':\n                filename = options;\n                break;\n            }\n\n            // @TODO: IE shim \n          };\n        })(pdfDataExport.API);\n      })();\n\n      /***/\n    }),\n    /***/4198: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          if (!Array.prototype.find) {\n            Object.defineProperty(Array.prototype, 'find', {\n              value: function (predicate) {\n                // 1. Let O be ? ToObject(this value).\n                if (this == null) {\n                  throw TypeError('\"this\" is null or not defined');\n                }\n                var o = Object(this);\n\n                // 2. Let len be ? ToLength(? Get(O, \"length\")).\n                var len = o.length >>> 0;\n\n                // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n                if (typeof predicate !== 'function') {\n                  throw TypeError('predicate must be a function');\n                }\n\n                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                var thisArg = arguments[1];\n\n                // 5. Let k be 0.\n                var k = 0;\n\n                // 6. Repeat, while k < len\n                while (k < len) {\n                  // a. Let Pk be ! ToString(k).\n                  // b. Let kValue be ? Get(O, Pk).\n                  // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                  // d. If testResult is true, return kValue.\n                  var kValue = o[k];\n                  if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                  }\n                  // e. Increase k by 1.\n                  k++;\n                }\n\n                // 7. Return undefined.\n                return undefined;\n              },\n              configurable: true,\n              writable: true\n            });\n          }\n          $.jqx.observableArray = function (items, observeFunction) {\n            if (typeof items == 'string') {\n              items = $.parseJSON(items);\n            }\n            if (!Object.defineProperty || !function () {\n              try {\n                Object.defineProperty({}, 'x', {});\n                return true;\n              } catch (e) {\n                return false;\n              }\n            }()) {\n              var orig = Object.defineProperty;\n              Object.defineProperty = function (o, prop, desc) {\n                // In IE8 try built-in implementation for defining properties on DOM prototypes.\n                if (orig) {\n                  try {\n                    return orig(o, prop, desc);\n                  } catch (e) {}\n                }\n                if (o !== Object(o)) {\n                  throw TypeError(\"Object.defineProperty called on non-object\");\n                }\n                if (Object.prototype.__defineGetter__ && 'get' in desc) {\n                  Object.prototype.__defineGetter__.call(o, prop, desc.get);\n                }\n                if (Object.prototype.__defineSetter__ && 'set' in desc) {\n                  Object.prototype.__defineSetter__.call(o, prop, desc.set);\n                }\n                if ('value' in desc) {\n                  o[prop] = desc.value;\n                } else if (!o[prop]) {\n                  o[prop] = desc;\n                }\n                return o;\n              };\n            }\n            if (!Array.prototype.forEach) {\n              Array.prototype.forEach = function (fun /*, thisp */) {\n                if (this === void 0 || this === null) {\n                  throw TypeError();\n                }\n                var t = Object(this);\n                var len = t.length >>> 0;\n                if (typeof fun !== \"function\") {\n                  throw TypeError();\n                }\n                var thisp = arguments[1],\n                  i;\n                for (i = 0; i < len; i++) {\n                  if (i in t) {\n                    fun.call(thisp, t[i], i, t);\n                  }\n                }\n              };\n            }\n            if (typeof Object.getOwnPropertyNames !== \"function\") {\n              Object.getOwnPropertyNames = function (o) {\n                if (o !== Object(o)) {\n                  throw TypeError(\"Object.getOwnPropertyNames called on non-object\");\n                }\n                var props = [],\n                  p;\n                for (p in o) {\n                  if (Object.prototype.hasOwnProperty.call(o, p)) {\n                    props.push(p);\n                  }\n                }\n                return props;\n              };\n            }\n            var that = this,\n              notifier,\n              array = [];\n            that.notifier = null;\n            that.name = \"observableArray\";\n            that.observing = true;\n            that.changes = new Array();\n            var observeFunction = observeFunction;\n            that.observe = function () {\n              that.observing = true;\n              if (arguments.length == 1) {\n                observeFunction = arguments[0];\n              }\n            };\n            that.unobserve = function () {\n              that.observing = false;\n            };\n            that.toArray = function () {\n              return array.slice(0);\n            };\n            that.toJSON = function (keys, subArray) {\n              var value = array;\n              if (subArray) {\n                value = subArray;\n              }\n              var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n                meta = {\n                  '\\b': '\\\\b',\n                  '\\t': '\\\\t',\n                  '\\n': '\\\\n',\n                  '\\f': '\\\\f',\n                  '\\r': '\\\\r',\n                  '\"': '\\\\\"',\n                  '\\\\': '\\\\\\\\'\n                };\n              function quote(string) {\n                return '\"' + string.replace(escapable, function (a) {\n                  var c = meta[a];\n                  return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n                }) + '\"';\n              }\n              function formatNumber(n) {\n                return n < 10 ? '0' + n : n;\n              }\n              function stringifyDate(value) {\n                var date;\n                if (isFinite(value.valueOf())) {\n                  date = value.getUTCFullYear() + '-' + formatNumber(value.getUTCMonth() + 1) + '-' + formatNumber(value.getUTCDate()) + 'T' + formatNumber(value.getUTCHours()) + ':' + formatNumber(value.getUTCMinutes()) + ':' + formatNumber(value.getUTCSeconds()) + 'Z\"';\n                } else {\n                  date = 'null';\n                }\n                return date;\n              }\n              function stringifyArray(value) {\n                var len = value.length,\n                  partial = [],\n                  i;\n                for (i = 0; i < len; i++) {\n                  partial.push(str(i, value) || 'null');\n                }\n                return '[' + partial.join(',') + ']';\n              }\n              function stringifyObject(value) {\n                var partial = [],\n                  i,\n                  v;\n                for (i in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, i)) {\n                    if (i != \"\" && keys && keys.indexOf(i) === -1) {\n                      continue;\n                    }\n                    v = str(i, value);\n                    if (v) {\n                      partial.push(quote(i) + ':' + v);\n                    }\n                  }\n                }\n                return '{' + partial.join(',') + '}';\n              }\n              function stringifyReference(value) {\n                switch (Object.prototype.toString.call(value)) {\n                  case '[object Date]':\n                    return stringifyDate(value);\n                  case '[object Array]':\n                    return stringifyArray(value);\n                }\n                return stringifyObject(value);\n              }\n              function stringifyPrimitive(value, type) {\n                switch (type) {\n                  case 'string':\n                    return quote(value);\n                  case 'number':\n                  case 'float':\n                  case 'integer':\n                  case 'int':\n                    return isFinite(value) ? value : 'null';\n                  case 'boolean':\n                    return value;\n                }\n                return 'null';\n              }\n              function str(key, holder) {\n                var value = holder[key],\n                  type = typeof value;\n                if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n                  value = value.toJSON(key);\n                  type = typeof value;\n                }\n                if (/(number|float|int|integer|string|boolean)/.test(type) || !value && type === 'object') {\n                  return stringifyPrimitive(value, type);\n                } else {\n                  return stringifyReference(value);\n                }\n              }\n              if (!keys && window.JSON && typeof window.JSON.stringify === 'function') {\n                return window.JSON.stringify(value);\n              }\n              return str(\"\", {\n                \"\": value\n              });\n            };\n            that.defineIndexProperty = function (index) {\n              if (!(index in that)) {\n                var defineProperty = function (obj, property, path, context) {\n                  var newValue = obj[property];\n                  var oldValue = newValue;\n                  var getter = function () {\n                    return oldValue;\n                  };\n                  var setter = function (val) {\n                    newValue = val;\n                    if (oldValue !== newValue) {\n                      var oldValueArg = oldValue;\n                      oldValue = newValue;\n                      if (typeof notifier === \"function\") {\n                        var index = array.indexOf(context);\n                        var propertyPath = \"\";\n                        var getPath = function (obj, path) {\n                          Object.getOwnPropertyNames(obj).forEach(function (name) {\n                            var type = $.type(obj[name]);\n                            if (type == \"array\" || type == \"object\") {\n                              getPath(obj[name], path + \".\" + name);\n                            } else if (property === name) {\n                              propertyPath = path + \".\" + name;\n                            }\n                          });\n                        };\n                        getPath(context, index);\n                        notifier({\n                          object: that,\n                          type: 'update',\n                          path: propertyPath,\n                          index: index,\n                          name: property,\n                          newValue: newValue,\n                          oldValue: oldValueArg\n                        });\n                      }\n                    }\n                    oldValue = newValue;\n                    return newValue;\n                  };\n                  if (obj[property] != undefined && property != \"length\") {\n                    if (Object.defineProperty) Object.defineProperty(obj, property, {\n                      get: getter,\n                      set: setter\n                    });else if (Object.prototype.__defineGetter__ && Object.prototype.__defineSetter__) {\n                      Object.prototype.__defineGetter__.call(obj, property, getter);\n                      Object.prototype.__defineSetter__.call(obj, property, setter);\n                    }\n                  }\n                };\n                var defineProperties = function (obj, path, context) {\n                  var type = $.type(obj);\n                  if (/(number|float|int|integer|string|boolean)/.test(type)) {\n                    return;\n                  }\n                  if (obj === undefined) {\n                    return;\n                  }\n                  Object.getOwnPropertyNames(obj).forEach(function (name) {\n                    var type = $.type(obj[name]);\n                    if (type == \"array\" || type == \"object\") {\n                      defineProperty(obj, name, path + \".\" + name, context);\n                      defineProperties(obj[name], path + \".\" + name, context);\n                    } else {\n                      defineProperty(obj, name, path + \".\" + name, context);\n                    }\n                  });\n                };\n                Object.defineProperty(that, index, {\n                  configurable: true,\n                  enumerable: true,\n                  get: function () {\n                    return array[index];\n                  },\n                  set: function (newValue) {\n                    var oldValue = array[index];\n                    if (that.toJSON(null, oldValue) != that.toJSON(null, newValue)) {\n                      array[index] = newValue;\n                      if (typeof notifier === \"function\") {\n                        notifier({\n                          object: that,\n                          type: 'update',\n                          path: index.toString(),\n                          index: index,\n                          name: \"index\",\n                          newValue: newValue,\n                          oldValue: oldValue\n                        });\n                      }\n                      defineProperties(newValue, index, newValue);\n                    }\n                  }\n                });\n                defineProperties(that[index], index, that[index]);\n              }\n            };\n            that.push = function () {\n              var index;\n              for (var i = 0, ln = arguments.length; i < ln; i++) {\n                index = array.length;\n                array.push(arguments[i]);\n                that.defineIndexProperty(index);\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'add',\n                    name: \"length\",\n                    index: index,\n                    newValue: array.length,\n                    oldValue: index\n                  });\n                }\n              }\n              return array.length;\n            };\n            that.pop = function () {\n              if (~array.length) {\n                var index = array.length - 1,\n                  item = array.pop();\n                delete that[index];\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'delete',\n                    name: \"length\",\n                    index: index,\n                    newValue: array.length,\n                    oldValue: index\n                  });\n                }\n                return item;\n              }\n            };\n            that.unshift = function () {\n              var index = array.length;\n              for (var i = 0, ln = arguments.length; i < ln; i++) {\n                array.splice(i, 0, arguments[i]);\n                that.defineIndexProperty(array.length - 1);\n              }\n              if (typeof notifier === \"function\") {\n                notifier({\n                  object: that,\n                  type: 'add',\n                  index: 0,\n                  name: \"length\",\n                  newValue: array.length,\n                  oldValue: index\n                });\n              }\n              return array.length;\n            };\n            that.shift = function () {\n              var index = array.length;\n              if (~array.length) {\n                var item = array.shift();\n                array.length === 0 && delete that[index];\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'delete',\n                    index: index,\n                    name: \"length\",\n                    newValue: array.length,\n                    oldValue: index\n                  });\n                }\n                return item;\n              }\n            };\n            that.slice = function (start, end, observeFunction) {\n              var newArray = array.slice(start, end);\n              var observableArray = new $.jqx.observableArray(newArray, observeFunction);\n              return observableArray;\n            };\n            that.splice = function (index, howMany, observeFunction) {\n              var removed = [],\n                item,\n                pos;\n              index = !~index ? array.length - index : index;\n              howMany = (howMany == null ? array.length - index : howMany) || 0;\n              while (howMany--) {\n                item = array.splice(index, 1)[0];\n                removed.push(item);\n                delete that[array.length];\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'delete',\n                    index: index,\n                    name: \"length\",\n                    newValue: -1,\n                    oldValue: index\n                  });\n                }\n              }\n              for (var i = 2, ln = arguments.length; i < ln; i++) {\n                array.splice(index, 0, arguments[i]);\n                this.defineIndexProperty(array.length - 1);\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'add',\n                    index: index,\n                    name: \"length\",\n                    newValue: array.length - 1,\n                    oldValue: index\n                  });\n                }\n                index++;\n              }\n              var observableArray = new $.jqx.observableArray(removed, observeFunction);\n              return observableArray;\n            };\n            Object.defineProperty(that, \"length\", {\n              configurable: false,\n              enumerable: true,\n              get: function () {\n                return array.length;\n              },\n              set: function (value) {\n                var n = Number(value);\n                if (n % 1 === 0 && n >= 0) {\n                  if (n < array.length) {\n                    that.splice(n);\n                  } else if (n > array.length) {\n                    that.push.apply(that, new Array(n - array.length));\n                  }\n                } else {\n                  throw new RangeError(\"Invalid array length\");\n                }\n                return value;\n              }\n            });\n            $.jqx.observableArray.prototype.fromArray = function (array, observeFunction) {\n              var observableArray = new $.jqx.observableArray(array, observeFunction);\n              return observableArray;\n            };\n            $.jqx.observableArray.prototype.clone = function () {\n              var observableArray = new $.jqx.observableArray(array, observeFunction);\n              observableArray.observing = that.observing;\n              observableArray.changes = that.changes;\n              observableArray.notifier = that.notifier;\n              return observableArray;\n            };\n            that.remove = function (index) {\n              if (index < 0 || index >= that.length) {\n                throw new Error('Invalid index : ' + index);\n              }\n              if (that.hasOwnProperty(index)) {\n                var oldValue = that[index];\n                that[index] = undefined;\n                array[index] = undefined;\n                if (typeof notifier === \"function\") {\n                  notifier({\n                    object: that,\n                    type: 'delete',\n                    index: index,\n                    name: \"index\",\n                    newValue: undefined,\n                    oldValue: oldValue\n                  });\n                }\n                return true;\n              }\n              return false;\n            };\n            that.concat = function (args, observeFunction) {\n              var newArray = array.concat(args);\n              var observableArray = new $.jqx.observableArray(newArray, observeFunction);\n              return observableArray;\n            };\n            Object.getOwnPropertyNames(Array.prototype).forEach(function (name) {\n              if (!(name in that)) {\n                var fn = function () {\n                  var tmp = that.observing;\n                  that.observing = false;\n                  var arrayFn = array[name];\n                  var result = arrayFn.apply(array, arguments);\n                  that.observing = tmp;\n                  return result;\n                };\n                Object.defineProperty(that, name, {\n                  configurable: false,\n                  enumerable: true,\n                  writeable: false,\n                  value: fn\n                });\n              }\n            });\n            that.set = function (index, value) {\n              if ($.type(index) == \"string\" && index.split(\".\").length > 1) {\n                var items = index.split(\".\");\n                var obj = that;\n                for (var i = 0; i < items.length; i++) {\n                  if (i === 0) {\n                    if (items[i] >= that.length) {\n                      throw new Error(\"Invalid Index: \" + index);\n                    }\n                  }\n                  if (i < items.length - 1) {\n                    obj = obj[items[i]];\n                  } else {\n                    obj[items[i]] = value;\n                  }\n                }\n                return true;\n              }\n              if (index >= that.length) {\n                that.push(value);\n              } else {\n                that[index] = value;\n              }\n              return true;\n            };\n            that.get = function (index) {\n              return that[index];\n            };\n            if (items instanceof Array) {\n              that.push.apply(that, items);\n            }\n            notifier = function () {\n              if (!that.observing) {\n                return;\n              }\n              if (arguments && arguments[0]) {\n                that.changes.push(arguments[0]);\n              }\n              if (observeFunction) {\n                observeFunction.apply(that, arguments);\n              }\n              if (that.notifier) {\n                that.notifier.apply(that, arguments);\n              }\n            };\n            return that;\n          };\n          $.jqx.formatDate = function (value, format, calendar) {\n            var result = $.jqx.dataFormat.formatdate(value, format, calendar);\n            return result;\n          };\n          $.jqx.formatNumber = function (value, format, calendar) {\n            var result = $.jqx.dataFormat.formatnumber(value, format, calendar);\n            return result;\n          };\n          $.jqx.dataAdapter = function (source, options) {\n            if (source != undefined) {\n              if (source.dataFields !== undefined) {\n                source.datafields = source.dataFields;\n              }\n              if (source.dataType !== undefined) {\n                source.datatype = source.dataType;\n              }\n              if (source.localData !== undefined) {\n                source.localdata = source.localData;\n              }\n              if (source.sortColumn !== undefined) {\n                source.sortcolumn = source.sortColumn;\n              }\n              if (source.sortDirection !== undefined) {\n                source.sortdirection = source.sortDirection;\n              }\n              if (source.sortColumns !== undefined) {\n                source.sortcolumns = source.sortColumns;\n              }\n              if (source.sortDirections !== undefined) {\n                source.sortdirections = source.sortDirections;\n              }\n              if (source.sortOrder !== undefined) {\n                source.sortdirection = source.sortOrder;\n              }\n              if (source.formatData !== undefined) {\n                source.formatdata = source.formatData;\n              }\n              if (source.processData !== undefined) {\n                source.processdata = source.processData;\n              }\n              if (source.pageSize !== undefined) {\n                source.pagesize = source.pageSize;\n              }\n              if (source.pageNum !== undefined) {\n                source.pagenum = source.pageNum;\n              }\n              if (source.updateRow !== undefined) {\n                source.updaterow = source.updateRow;\n              }\n              if (source.addRow !== undefined) {\n                source.addrow = source.addRow;\n              }\n              if (source.deleteRow !== undefined) {\n                source.deleterow = source.deleteRow;\n              }\n              if (source.contentType !== undefined) {\n                source.contenttype = source.contentType;\n              }\n              if (source.totalRecords != undefined) {\n                source.totalrecords = source.totalRecords;\n              }\n              if (source.loadError != undefined) {\n                source.loadError = source.loadError;\n              }\n              if (source.sortComparer != undefined) {\n                source.sortcomparer = source.sortComparer;\n              }\n            }\n            this._source = source;\n            this._options = options || {};\n            if (source.beforeLoadComplete != undefined) {\n              this._options.beforeLoadComplete = this._source.beforeLoadComplete;\n            }\n            if (source.downloadComplete != undefined) {\n              this._options.downloadComplete = this._source.downloadComplete;\n            }\n            if (source.loadComplete != undefined) {\n              this._options.loadComplete = this._source.loadComplete;\n            }\n            if (source.autoBind != undefined) {\n              this._options.downloadComplete = this._source.autoBind;\n            }\n            if (source.formatData != undefined) {\n              this._options.formatData = this._source.formatData;\n            }\n            if (source.loadError != undefined) {\n              this._options.loadError = this._source.loadError;\n            }\n            if (source.beforeSend != undefined) {\n              this._options.beforeSend = this._source.beforeSend;\n            }\n            if (source.contentType != undefined) {\n              this._options.contentType = this._source.contentType;\n            }\n            if (source.async != undefined) {\n              this._options.async = this._source.async;\n            }\n            if (source.loadServerData != undefined) {\n              this._options.loadServerData = this._source.loadServerData;\n            }\n            if (source.uniqueDataFields != undefined) {\n              this._options.uniqueDataFields = this._source.uniqueDataFields;\n            }\n            this.records = new Array();\n            this._downloadComplete = new Array();\n            this._bindingUpdate = new Array();\n            if (source != undefined && source.localdata != null && typeof source.localdata == \"function\") {\n              var localData = source.localdata();\n              if (localData != null) {\n                source._localdata = source.localdata;\n                var me = this;\n                if (source._localdata.subscribe) {\n                  me._oldlocaldata = [];\n                  source._localdata.subscribe(function (value) {\n                    var deepClone = function (objThing) {\n                      if ($.isArray(objThing)) {\n                        return $.makeArray(deepClone($(objThing)));\n                      }\n                      return $.extend(true, {}, objThing);\n                    };\n                    if (me.suspendKO == false || me.suspendKO == undefined || me._oldlocaldata.length == 0) {\n                      me._oldlocaldata = deepClone(value);\n                    }\n                  }, source._localdata, 'beforeChange');\n                  source._localdata.subscribe(function (value) {\n                    if (me.suspendKO == false || me.suspendKO == undefined) {\n                      var changeType = \"\";\n                      me._oldrecords = me.records;\n                      if (me._oldlocaldata.length == 0) {\n                        source.localdata = source._localdata();\n                      }\n                      if (me._oldlocaldata.length == 0) {\n                        changeType = 'change';\n                      } else {\n                        if (value) {\n                          if (me._oldlocaldata.length == value.length) {\n                            changeType = 'update';\n                          }\n                          if (me._oldlocaldata.length > value.length) {\n                            changeType = 'remove';\n                          }\n                          if (me._oldlocaldata.length < value.length) {\n                            changeType = 'add';\n                          }\n                        }\n                      }\n                      me.dataBind(null, changeType);\n                    }\n                  }, source._localdata, 'change');\n                  me._knockoutdatasource = true;\n                }\n                source.localdata = localData;\n              }\n            }\n            if (this._options.autoBind == true) {\n              this.dataBind();\n            }\n          };\n          $.jqx.dataAdapter.prototype = {\n            getrecords: function () {\n              return this.records;\n            },\n            beginUpdate: function () {\n              this.isUpdating = true;\n            },\n            endUpdate: function (refresh) {\n              this.isUpdating = false;\n              if (refresh != false) {\n                if (this._changedrecords && this._changedrecords.length > 0) {\n                  this.callBindingUpdate(\"update\");\n                  this._changedrecords = [];\n                } else {\n                  this.dataBind(null, \"\");\n                }\n              }\n            },\n            formatDate: function (value, format, calendar) {\n              var result = $.jqx.dataFormat.formatdate(value, format, calendar);\n              return result;\n            },\n            formatNumber: function (value, format, calendar) {\n              var result = $.jqx.dataFormat.formatnumber(value, format, calendar);\n              return result;\n            },\n            dataBind: function (objectuniqueId, collectionChanged) {\n              if (this.isUpdating == true) return;\n              var source = this._source;\n              if (!source) return;\n              if (source.generatedfields) {\n                source.datafields = null;\n                source.generatedfields = null;\n              }\n              $.jqx.dataFormat.datescache = new Array();\n              if (source.dataFields != null) {\n                source.datafields = source.dataFields;\n              }\n              if (source.recordstartindex == undefined) {\n                source.recordstartindex = 0;\n              }\n              if (source.recordendindex == undefined) {\n                source.recordendindex = 0;\n              }\n              if (source.loadallrecords == undefined) {\n                source.loadallrecords = true;\n              }\n              if (source.root == undefined) source.root = '';\n              if (source.record == undefined) source.record = '';\n              if (source.sort != undefined) {\n                this.sort = source.sort;\n              }\n              if (source.filter != undefined) {\n                this.filter = source.filter;\n              } else this.filter = null;\n              if (source.sortcolumn != undefined) {\n                this.sortcolumn = source.sortcolumn;\n              }\n              if (source.sortdirection != undefined) {\n                this.sortdirection = source.sortdirection;\n              }\n              if (source.sortcolumns != undefined) {\n                this.sortcolumns = source.sortcolumns;\n              }\n              if (source.sortdirections != undefined) {\n                this.sortdirections = source.sortdirections;\n              }\n              if (source.sortcomparer != undefined) {\n                this.sortcomparer = source.sortcomparer;\n              }\n              this.records = new Array();\n              var options = this._options || {};\n              this.virtualmode = options.virtualmode != undefined ? options.virtualmode : false;\n              this.totalrecords = options.totalrecords != undefined ? options.totalrecords : 0;\n              this.pageable = options.pageable != undefined ? options.pageable : false;\n              this.pagesize = options.pagesize != undefined ? options.pagesize : 0;\n              this.pagenum = options.pagenum != undefined ? options.pagenum : 0;\n              this.cachedrecords = options.cachedrecords != undefined ? options.cachedrecords : new Array();\n              this.originaldata = new Array();\n              this.recordids = new Array();\n              this.updaterow = options.updaterow != undefined ? options.updaterow : null;\n              this.addrow = options.addrow != undefined ? options.addrow : null;\n              this.deleterow = options.deleterow != undefined ? options.deleterow : null;\n              this.cache = options.cache != undefined ? options.cache : false;\n              this.unboundmode = false;\n              if (source.formatdata != undefined) {\n                options.formatData = source.formatdata;\n              }\n              if (source.data != undefined) {\n                if (options.data == undefined) {\n                  options.data = {};\n                }\n                $.extend(options.data, source.data);\n              }\n              if (source.mapChar != undefined) {\n                source.mapchar = source.mapChar;\n              }\n              if (source.mapchar != undefined) {\n                this.mapChar = source.mapchar ? source.mapchar : '>';\n              } else {\n                this.mapChar = options.mapChar ? options.mapChar : '>';\n              }\n              if (options.unboundmode || source.unboundmode) {\n                this.unboundmode = options.unboundmode || source.unboundmode;\n              }\n              if (source.cache != undefined) {\n                this.cache = source.cache;\n              }\n              if (this.koSubscriptions) {\n                for (var subscription = 0; subscription < this.koSubscriptions.length; subscription++) {\n                  this.koSubscriptions[subscription].dispose();\n                }\n              }\n              this.koSubscriptions = new Array();\n              if (this.pagenum < 0) {\n                this.pagenum = 0;\n              }\n              var me = this;\n              var datatype = source.datatype;\n              if (source.datatype === 'csv' || source.datatype === 'tab' || source.datatype === 'tsv' || source.datatype == 'text') datatype = 'text';\n              var async = options.async != undefined ? options.async : true;\n              if (source.async != undefined) {\n                async = source.async;\n              }\n              if (datatype === \"xlsx\" && source.url) {\n                source.localdata = [];\n                datatype = \"array\";\n                if (window.jqxDataSource) {\n                  var data = new window.jqxDataSource({\n                    dataSource: source.url,\n                    async: false,\n                    dataFields: source.datafields\n                  });\n                  data.notify(function () {\n                    source.url = null;\n                    source.localdata = data.boundSource;\n                    source.datatype = \"array\";\n                    me.dataBind();\n                  });\n                }\n              }\n              switch (datatype) {\n                case \"local\":\n                case \"array\":\n                case \"observablearray\":\n                case \"observableArray\":\n                default:\n                  if (source.localdata == undefined && source.length) {\n                    source.localdata = new Array();\n                    for (var i = 0; i < source.length; i++) {\n                      source.localdata[source.localdata.length] = source[i];\n                      source[i].uid = i;\n                    }\n                  }\n                  if (source.beforeprocessing && $.isFunction(source.beforeprocessing)) {\n                    source.beforeprocessing(source.localdata);\n                  }\n                  var length = source.localdata.length;\n                  this.totalrecords = this.virtualmode ? source.totalrecords || length : length;\n                  if (this.unboundmode) {\n                    this.totalrecords = this.unboundmode ? source.totalrecords || length : length;\n                    var datafieldslength = source.datafields ? source.datafields.length : 0;\n                    if (datafieldslength > 0) {\n                      for (var i = 0; i < this.totalrecords; i++) {\n                        var record = {};\n                        for (var j = 0; j < datafieldslength; j++) {\n                          record[source.datafields[j].name] = \"\";\n                        }\n                        record.uid = i;\n                        source.localdata[source.localdata.length] = record;\n                      }\n                    }\n                  }\n                  if (this.totalrecords == undefined) {\n                    this.totalrecords = 0;\n                  }\n                  var datafieldslength = source.datafields ? source.datafields.length : 0;\n                  var getrecord = function (record, datafieldslength) {\n                    var datarow = {};\n                    for (var j = 0; j < datafieldslength; j++) {\n                      var datafield = source.datafields ? source.datafields[j] : {};\n                      var value = '';\n                      if (undefined == datafield || datafield == null) {\n                        continue;\n                      }\n                      if (datafield.map) {\n                        if ($.isFunction(datafield.map)) {\n                          value = datafield.map(record);\n                        } else {\n                          var splitMap = datafield.map.split(me.mapChar);\n                          if (splitMap.length > 0) {\n                            var datarecord = record;\n                            for (var p = 0; p < splitMap.length; p++) {\n                              if (!datarecord) continue;\n                              datarecord = datarecord[splitMap[p]];\n                            }\n                            value = datarecord;\n                          } else {\n                            value = record[datafield.map];\n                          }\n                        }\n                        if (value != undefined && value != null) {\n                          value = value.toString();\n                        } else {\n                          if (value == undefined && value != null) {\n                            value = '';\n                          }\n                        }\n                      }\n                      var isEmptyString = false;\n                      // searches by both selectors when necessary.\n                      if (value == '') {\n                        isEmptyString = true;\n                        value = record[datafield.name];\n                        if (value != undefined && value != null) {\n                          if (source._localdata && value.subscribe) {\n                            value = value();\n                          } else {\n                            if (datafield.type != \"array\") {\n                              if (datafield.type === 'date') {\n                                if (value && value instanceof Date) {\n                                  value = value;\n                                }\n                              } else {\n                                value = value.toString();\n                              }\n                            }\n                          }\n                        }\n                      }\n                      if (value == \"[object Object]\" && datafield.map && isEmptyString) {\n                        value = '';\n                      }\n                      value = me.getvaluebytype(value, datafield);\n                      if (datafield.displayname != undefined) {\n                        datarow[datafield.displayname] = value;\n                      } else {\n                        datarow[datafield.name] = value;\n                      }\n                    }\n                    return datarow;\n                  };\n                  if (source._localdata) {\n                    this._changedrecords = [];\n                    this.records = new Array();\n                    var localdata = source._localdata();\n                    $.each(localdata, function (i, value) {\n                      if (typeof value === 'string') {\n                        me.records.push(value);\n                      } else {\n                        var record = {};\n                        var _koindex = 0;\n                        var dataObject = this;\n                        $.each(this, function (obj, objvalue) {\n                          var map = null;\n                          var type = 'string';\n                          var dataFieldName = obj;\n                          if (datafieldslength > 0) {\n                            var hasField = false;\n                            var hasMap = false;\n                            for (var j = 0; j < datafieldslength; j++) {\n                              var datafield = source.datafields[j];\n                              if (datafield != undefined && datafield.name == obj) {\n                                hasField = true;\n                                map = datafield.map;\n                                type = datafield.type;\n                                dataFieldName = datafield.name;\n                                break;\n                              } else if (datafield != undefined && datafield.map && datafield.map.indexOf(obj) >= 0) {\n                                hasField = true;\n                                map = datafield.map;\n                                type = datafield.type;\n                                dataFieldName = datafield.name;\n                                hasMap = true;\n                                var value = dataObject[obj];\n                                if (map != null) {\n                                  var splitMap = map.split(me.mapChar);\n                                  if (splitMap.length > 0) {\n                                    var datarecord = dataObject;\n                                    for (var p = 0; p < splitMap.length; p++) {\n                                      datarecord = datarecord[splitMap[p]];\n                                    }\n                                    value = datarecord;\n                                  } else {\n                                    value = dataObject[map];\n                                  }\n                                }\n                                if (type != 'string') {\n                                  value = me.getvaluebytype(value, {\n                                    type: type\n                                  });\n                                }\n                                record[dataFieldName] = value;\n                                if (record[dataFieldName] != undefined) {\n                                  _koindex += record[dataFieldName].toString().length + record[dataFieldName].toString().substr(0, 1);\n                                }\n                              }\n                            }\n                            if (!hasField) return true;\n                            if (hasMap) return true;\n                          }\n                          var isFunction = $.isFunction(dataObject[obj]);\n                          if (isFunction) {\n                            var value = dataObject[obj]();\n                            if (type != 'string') {\n                              value = me.getvaluebytype(value, {\n                                type: type\n                              });\n                            }\n                            record[obj] = value;\n                            if (dataObject[obj].subscribe) {\n                              var recordindex = i;\n                              me.koSubscriptions[me.koSubscriptions.length] = dataObject[obj].subscribe(function (value) {\n                                var _changeindex = recordindex;\n                                record[obj] = value;\n                                var changedRecord = {\n                                  index: _changeindex,\n                                  oldrecord: record,\n                                  record: record\n                                };\n                                me._changedrecords.push(changedRecord);\n                                if (me.isUpdating) return;\n                                me.callBindingUpdate(\"update\");\n                                me._changedrecords = [];\n                                return false;\n                              });\n                            }\n                          } else {\n                            var value = dataObject[obj];\n                            if (map != null) {\n                              var splitMap = map.split(me.mapChar);\n                              if (splitMap.length > 0) {\n                                var datarecord = dataObject;\n                                for (var p = 0; p < splitMap.length; p++) {\n                                  datarecord = datarecord[splitMap[p]];\n                                }\n                                value = datarecord;\n                              } else {\n                                value = dataObject[map];\n                              }\n                            }\n                            if (type != 'string') {\n                              value = me.getvaluebytype(value, {\n                                type: type\n                              });\n                            }\n                            record[dataFieldName] = value;\n                            if (record[dataFieldName] != undefined) {\n                              _koindex += record[dataFieldName].toString().length + record[dataFieldName].toString().substr(0, 1);\n                            }\n                          }\n                        });\n                        var recordid = me.getid(source.id, dataObject, i);\n                        record.uid = recordid;\n                        me.records.push(record);\n                        record._koindex = _koindex;\n                        if (me._oldrecords) {\n                          var _changeindex = me.records.length - 1;\n                          if (collectionChanged == 'update') {\n                            if (me._oldrecords[_changeindex]._koindex != _koindex) {\n                              var changedRecord = {\n                                index: _changeindex,\n                                oldrecord: me._oldrecords[_changeindex],\n                                record: record\n                              };\n                              me._changedrecords.push(changedRecord);\n                            }\n                          }\n                        }\n                      }\n                    });\n                    if (collectionChanged == 'add') {\n                      var length = me.records.length;\n                      for (var i = 0; i < length; i++) {\n                        var record = me.records[i];\n                        var hasOldRecord = false;\n                        for (var p = 0; p < me._oldrecords.length; p++) {\n                          if (me._oldrecords[p]._koindex === record._koindex) {\n                            hasOldRecord = true;\n                            break;\n                          }\n                        }\n                        if (!hasOldRecord) {\n                          me._changedrecords.push({\n                            index: i,\n                            oldrecord: null,\n                            record: record,\n                            position: i != 0 ? \"last\" : \"first\"\n                          });\n                        }\n                      }\n                    } else if (collectionChanged == 'remove') {\n                      var length = me._oldrecords.length;\n                      for (var i = 0; i < length; i++) {\n                        var oldrecord = me._oldrecords[i];\n                        if (!me.records[i]) {\n                          me._changedrecords.push({\n                            index: i,\n                            oldrecord: oldrecord,\n                            record: null\n                          });\n                        } else {\n                          if (me.records[i]._koindex != oldrecord._koindex) {\n                            me._changedrecords.push({\n                              index: i,\n                              oldrecord: oldrecord,\n                              record: null\n                            });\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (!$.isArray(source.localdata)) {\n                      this.records = new Array();\n                      var fields = 0;\n                      var generatedfields = new Array();\n                      $.each(source.localdata, function (i) {\n                        var recordid = me.getid(source.id, this, i);\n                        if (datafieldslength == 0) {\n                          if (!(typeof this === \"string\" || this instanceof String)) {\n                            for (var obj in this) {\n                              fields++;\n                              var valueType = $.type(this[obj]);\n                              generatedfields.push({\n                                name: obj,\n                                type: valueType\n                              });\n                            }\n                            datafieldslength = fields;\n                            source.datafields = generatedfields;\n                            source.generatedfields = generatedfields;\n                          }\n                        }\n                        if (datafieldslength > 0) {\n                          var record = this;\n                          var datarow = getrecord(record, datafieldslength);\n                          datarow.uid = recordid;\n                          me.records[me.records.length] = datarow;\n                        } else {\n                          this.uid = recordid;\n                          me.records[me.records.length] = this;\n                        }\n                      });\n                    } else {\n                      if (datafieldslength == 0) {\n                        var fields = 0;\n                        var generatedfields = new Array();\n                        $.each(source.localdata, function (i, value) {\n                          //      var record = $.extend({}, this);\n                          var record = new Object(this);\n                          if (typeof value === \"string\") {\n                            me.records = source.localdata;\n                            return false;\n                          } else {\n                            var recordid = me.getid(source.id, record, i);\n                            if (typeof recordid === \"object\") {\n                              recordid = i;\n                            }\n                            record.uid = recordid;\n                            if (i == 0) {\n                              for (var obj in this) {\n                                fields++;\n                                var valueType = $.type(this[obj]);\n                                generatedfields.push({\n                                  name: obj,\n                                  type: valueType\n                                });\n                              }\n                              datafieldslength = fields;\n                              source.datafields = generatedfields;\n                              source.generatedfields = generatedfields;\n                            }\n                            if (datafieldslength > 0) {\n                              var datarow = getrecord(record, datafieldslength);\n                              datarow.uid = recordid;\n                              me.records[me.records.length] = datarow;\n                            } else {\n                              me.records[me.records.length] = record;\n                            }\n                          }\n                        });\n                      } else {\n                        $.each(source.localdata, function (i) {\n                          var record = this;\n                          var datarow = getrecord(record, datafieldslength);\n                          var recordid = me.getid(source.id, datarow, i);\n                          if (typeof recordid === \"object\") {\n                            recordid = i;\n                          }\n                          //      var record = $.extend({}, datarow);\n                          var record = new Object(datarow);\n                          record.uid = recordid;\n                          me.records[me.records.length] = record;\n                        });\n                      }\n                    }\n                  }\n                  this.originaldata = source.localdata;\n                  this.cachedrecords = this.records;\n                  this.addForeignValues(source);\n                  if (options.uniqueDataFields) {\n                    var uniquerecords = this.getUniqueRecords(this.records, options.uniqueDataFields);\n                    this.records = uniquerecords;\n                    this.cachedrecords = uniquerecords;\n                  }\n                  if (options.beforeLoadComplete) {\n                    var newRecords = options.beforeLoadComplete(me.records, this.originaldata);\n                    if (newRecords != undefined) {\n                      me.records = newRecords;\n                      me.cachedrecords = newRecords;\n                    }\n                  }\n                  if (options.autoSort && options.autoSortField) {\n                    var tmpToString = Object.prototype.toString;\n                    Object.prototype.toString = typeof field == \"function\" ? field : function () {\n                      return this[options.autoSortField];\n                    };\n                    me.records.sort(function (value1, value2) {\n                      if (value1 === undefined) {\n                        value1 = null;\n                      }\n                      if (value2 === undefined) {\n                        value2 = null;\n                      }\n                      if (value1 === null && value2 === null) {\n                        return 0;\n                      }\n                      if (value1 === null && value2 !== null) {\n                        return 1;\n                      }\n                      if (value1 !== null && value2 === null) {\n                        return -1;\n                      }\n                      value1 = value1.toString();\n                      value2 = value2.toString();\n                      if (value1 === null && value2 === null) {\n                        return 0;\n                      }\n                      if (value1 === null && value2 !== null) {\n                        return 1;\n                      }\n                      if (value1 !== null && value2 === null) {\n                        return -1;\n                      }\n                      if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {\n                        if (value1 < value2) {\n                          return -1;\n                        }\n                        if (value1 > value2) {\n                          return 1;\n                        }\n                        return 0;\n                      } else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {\n                        if (value1 < value2) {\n                          return -1;\n                        }\n                        if (value1 > value2) {\n                          return 1;\n                        }\n                        return 0;\n                      } else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {\n                        value1 = String(value1).toLowerCase();\n                        value2 = String(value2).toLowerCase();\n                      }\n                      try {\n                        if (value1 < value2) {\n                          return -1;\n                        }\n                        if (value1 > value2) {\n                          return 1;\n                        }\n                      } catch (error) {\n                        var er = error;\n                      }\n                      return 0;\n                    });\n                    Object.prototype.toString = tmpToString;\n                  }\n                  me.loadedData = source.localdata;\n                  me.buildHierarchy();\n                  if ($.isFunction(options.loadComplete)) {\n                    options.loadComplete(source.localdata, me.records);\n                  }\n                  break;\n                case \"json\":\n                case \"jsonp\":\n                case \"xml\":\n                case \"xhtml\":\n                case \"script\":\n                case \"text\":\n                case \"ics\":\n                  {\n                    if (source.localdata != null && !source.url) {\n                      if ($.isFunction(source.beforeprocessing)) {\n                        source.beforeprocessing(source.localdata);\n                      }\n                      if (source.datatype === \"xml\") {\n                        me.loadxml(source.localdata, source.localdata, source);\n                      } else if (datatype === \"text\") {\n                        me.loadtext(source.localdata, source);\n                      } else if (datatype === \"ics\") {\n                        me.loadics(source.localdata, source);\n                      } else {\n                        me.loadjson(source.localdata, source.localdata, source);\n                      }\n                      me.addForeignValues(source);\n                      if (options.uniqueDataFields) {\n                        var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);\n                        me.records = uniquerecords;\n                        me.cachedrecords = uniquerecords;\n                      }\n                      if (options.beforeLoadComplete) {\n                        var newRecords = options.beforeLoadComplete(me.records, this.originaldata);\n                        if (newRecords != undefined) {\n                          me.records = newRecords;\n                          me.cachedrecords = newRecords;\n                        }\n                      }\n                      me.loadedData = source.localdata;\n                      me.buildHierarchy.call(me);\n                      if ($.isFunction(options.loadComplete)) {\n                        options.loadComplete(source.localdata, me.records);\n                      }\n                      me.callBindingUpdate(collectionChanged);\n                      return;\n                    }\n                    var postdata = options.data != undefined ? options.data : {};\n                    // call the source object's processdata function.\n                    if (source.processdata) {\n                      source.processdata(postdata);\n                    }\n                    // call the adapter's process data function.\n                    if ($.isFunction(options.processData)) {\n                      options.processData(postdata);\n                    }\n\n                    // call the adapter's format data function.\n                    if ($.isFunction(options.formatData)) {\n                      var newpostdata = options.formatData(postdata);\n                      if (newpostdata != undefined) {\n                        postdata = newpostdata;\n                      }\n                    }\n                    var contentType = 'application/x-www-form-urlencoded';\n                    if (options.contentType) {\n                      contentType = options.contentType;\n                    }\n                    var type = \"GET\";\n                    if (source.type) {\n                      type = source.type;\n                    }\n                    if (options.type) {\n                      type = options.type;\n                    }\n                    var dataType = datatype;\n                    if (datatype == \"ics\") dataType = \"text\";\n                    if (source.url && source.url.length > 0) {\n                      if ($.isFunction(options.loadServerData)) {\n                        me._requestData(postdata, source, options);\n                      } else {\n                        this.xhr = $.jqx.data.ajax({\n                          dataType: dataType,\n                          cache: this.cache,\n                          type: type,\n                          url: source.url,\n                          async: async,\n                          timeout: source.timeout,\n                          contentType: contentType,\n                          data: postdata,\n                          success: function (data, status, xhr) {\n                            if ($.isFunction(source.beforeprocessing)) {\n                              var tmpdata = source.beforeprocessing(data, status, xhr);\n                              if (tmpdata != undefined) {\n                                data = tmpdata;\n                              }\n                            }\n                            if ($.isFunction(options.downloadComplete)) {\n                              var tmpdata = options.downloadComplete(data, status, xhr);\n                              if (tmpdata != undefined) {\n                                data = tmpdata;\n                              }\n                            }\n                            if (data == null) {\n                              me.records = new Array();\n                              me.cachedrecords = new Array();\n                              me.originaldata = new Array();\n                              me.callDownloadComplete();\n                              if ($.isFunction(options.loadComplete)) {\n                                options.loadComplete(new Array());\n                              }\n                              return;\n                            }\n                            var records = data;\n                            if (data.records) {\n                              records = data.records;\n                            }\n                            if (data.totalrecords != undefined) {\n                              source.totalrecords = data.totalrecords;\n                            } else if (data.totalRecords != undefined) {\n                              source.totalrecords = data.totalRecords;\n                            }\n                            if (source.datatype === \"xml\") {\n                              me.loadxml(null, records, source);\n                            } else if (datatype === \"text\") {\n                              me.loadtext(records, source);\n                            } else if (datatype === \"ics\") {\n                              me.loadics(records, source);\n                            } else {\n                              me.loadjson(null, records, source);\n                            }\n\n                            // add foreign values.\n                            me.addForeignValues(source);\n                            if (options.uniqueDataFields) {\n                              var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);\n                              me.records = uniquerecords;\n                              me.cachedrecords = uniquerecords;\n                            }\n                            if (options.beforeLoadComplete) {\n                              var newRecords = options.beforeLoadComplete(me.records, data);\n                              if (newRecords != undefined) {\n                                me.records = newRecords;\n                                me.cachedrecords = newRecords;\n                              }\n                            }\n                            me.loadedData = data;\n                            me.buildHierarchy.call(me);\n                            me.callDownloadComplete();\n                            if ($.isFunction(options.loadComplete)) {\n                              options.loadComplete(data, status, xhr, me.records);\n                            }\n                          },\n                          error: function (xhr, status, error) {\n                            if ($.isFunction(source.loaderror)) {\n                              source.loaderror(xhr, status, error);\n                            }\n                            if ($.isFunction(options.loadError)) {\n                              options.loadError(xhr, status, error);\n                            }\n                            xhr = null;\n                            me.callDownloadComplete();\n                          },\n                          beforeSend: function (xhr, settings) {\n                            if ($.isFunction(options.beforeSend)) {\n                              options.beforeSend(xhr, settings);\n                            }\n                            if ($.isFunction(source.beforesend)) {\n                              source.beforesend(xhr, settings);\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      me.buildHierarchy(new Array());\n                      me.callDownloadComplete();\n                      if ($.isFunction(options.loadComplete)) {\n                        if (!data) {\n                          var data = {};\n                        }\n                        options.loadComplete(data);\n                      }\n                    }\n                  }\n                  break;\n              }\n              this.callBindingUpdate(collectionChanged);\n            },\n            buildHierarchy: function (dataRecords) {\n              var source = this._source;\n              var hierarchy = new Array();\n              if (!source.datafields) {\n                return;\n              }\n              if (source.hierarchy && !source.hierarchy.reservedNames) {\n                source.hierarchy.reservedNames = {\n                  leaf: \"leaf\",\n                  parent: \"parent\",\n                  expanded: \"expanded\",\n                  checked: \"checked\",\n                  selected: \"selected\",\n                  level: \"level\",\n                  icon: \"icon\",\n                  data: \"data\"\n                };\n              } else {\n                if (source.hierarchy) {\n                  var names = source.hierarchy.reservedNames;\n                  if (!names.leaf) names.leaf = \"leaf\";\n                  if (!names.parent) names.parent = \"parent\";\n                  if (!names.expanded) names.expanded = \"expanded\";\n                  if (!names.checked) names.checked = \"checked\";\n                  if (!names.selected) names.selected = \"selected\";\n                  if (!names.level) names.level = \"level\";\n                  if (!names.data) names.data = \"data\";\n                }\n              }\n              if (!source.hierarchy) {\n                return;\n              }\n              var that = this;\n              var names = source.hierarchy.reservedNames;\n              if (source.hierarchy.root) {\n                if (source.dataType == \"xml\") {\n                  var hierarchy = this.getRecordsHierarchy('uid', 'parentuid', 'records', null, dataRecords);\n                  this.hierarchy = hierarchy;\n                  return hierarchy;\n                } else {\n                  this.hierarchy = this.records;\n                  var root = source.hierarchy.root;\n                  for (var i = 0; i < this.records.length; i++) {\n                    var record = this.records[i];\n                    if (!record) {\n                      continue;\n                    }\n                    var addRecords = function (record) {\n                      if (source.hierarchy.record) {\n                        record.records = record[root][source.hierarchy.record];\n                      } else {\n                        var splitMap = root.split(that.mapChar);\n                        var records = null;\n                        if (splitMap.length > 1) {\n                          var d = record;\n                          for (var p = 0; p < splitMap.length; p++) {\n                            if (d != undefined) {\n                              d = d[splitMap[p]];\n                            }\n                          }\n                          records = d;\n                        } else records = record[root];\n                        record.records = records;\n                      }\n                      if (record.records == null || record.records && record.records.length == 0) {\n                        record[names.leaf] = true;\n                      }\n                    };\n                    addRecords(record);\n                    record[names.level] = 0;\n                    var recordid = this.getid(source.id, record, i);\n                    record.uid = recordid;\n                    record[names.parent] = null;\n                    record[names.data] = record;\n                    if (record[names.expanded] === undefined) {\n                      record[names.expanded] = false;\n                    }\n                    var drillThrough = function (parent, records) {\n                      if (!records) {\n                        parent.records = new Array();\n                        return;\n                      }\n                      for (var i = 0; i < records.length; i++) {\n                        var record = records[i];\n                        if (!record) {\n                          continue;\n                        }\n                        addRecords(record);\n                        record[names.level] = parent[names.level] + 1;\n                        record[names.parent] = parent;\n                        record[names.data] = record;\n                        var recordid = that.getid(source.id, record, i);\n                        if (recordid == i && source.id == null) {\n                          record.uid = parent.uid + \"_\" + recordid;\n                        } else {\n                          record.uid = recordid;\n                        }\n                        if (record[names.expanded] === undefined) {\n                          record[names.expanded] = false;\n                        }\n                        drillThrough(record, record.records);\n                      }\n                    };\n                    drillThrough(record, record.records);\n                  }\n                }\n                return this.hierarchy;\n              }\n              if (source.hierarchy.keyDataField && source.hierarchy.parentDataField) {\n                var hierarchy = this.getRecordsHierarchy(source.hierarchy.keyDataField.name, source.hierarchy.parentDataField.name, 'records', null, dataRecords);\n                this.hierarchy = hierarchy;\n                return hierarchy;\n              }\n              if (source.hierarchy.groupingDataFields) {\n                var groups = new Array();\n                for (var i = 0; i < source.hierarchy.groupingDataFields.length; i++) {\n                  groups.push(source.hierarchy.groupingDataFields[i].name);\n                }\n                var hierarchy = this.getGroupedRecords(groups, 'records', 'label', null, 'data', null, 'parent', dataRecords);\n                this.hierarchy = hierarchy;\n                return hierarchy;\n              }\n            },\n            addRecord: function (record, position, parentID, virtualMode) {\n              var that = this;\n              var reservedNames = function () {\n                return {\n                  leaf: \"leaf\",\n                  parent: \"parent\",\n                  expanded: \"expanded\",\n                  checked: \"checked\",\n                  selected: \"selected\",\n                  level: \"level\",\n                  icon: \"icon\",\n                  data: \"data\"\n                };\n              };\n              if (record != undefined) {\n                if (parentID != undefined) {\n                  if (this.hierarchy.length > 0) {\n                    var traverse = function (records) {\n                      if (records) {\n                        for (var i = 0; i < records.length; i++) {\n                          var r = records[i];\n                          if (r.uid == parentID) {\n                            var names = that._source && that._source.hierarchy ? that._source.hierarchy.reservedNames : null;\n                            if (names == null) names = reservedNames();\n                            record[names.parent] = r;\n                            record[names.level] = r[names.level] + 1;\n                            if (!r.records) {\n                              r.records = new Array();\n                              r[names.leaf] = false;\n                            } else {\n                              r[names.leaf] = false;\n                            }\n                            if (position == 'last') {\n                              r.records.push(record);\n                            } else if (typeof position === 'number' && isFinite(position)) {\n                              r.records.splice(position, 0, record);\n                            } else {\n                              r.records.splice(0, 0, record);\n                            }\n                            return true;\n                          }\n                          if (r.records) {\n                            traverse(r.records);\n                          }\n                        }\n                      }\n                    };\n                    traverse(this.hierarchy);\n                  }\n                } else {\n                  if (this.hierarchy && this.hierarchy.length >= 0 && (this._source.hierarchy || virtualMode)) {\n                    var names = that._source && that._source.hierarchy ? that._source.hierarchy.reservedNames : null;\n                    if (names == null) names = reservedNames();\n                    record[names.level] = 0;\n                    if (position == 'last') {\n                      this.hierarchy.push(record);\n                    } else if (typeof position === 'number' && isFinite(position)) {\n                      this.hierarchy.splice(position, 0, record);\n                    } else {\n                      this.hierarchy.splice(0, 0, record);\n                    }\n                  } else {\n                    if (position == 'last') {\n                      this.records.push(record);\n                    } else if (typeof position === 'number' && isFinite(position)) {\n                      this.records.splice(position, 0, record);\n                    } else {\n                      this.records.splice(0, 0, record);\n                    }\n                  }\n                  return true;\n                }\n              }\n              return false;\n            },\n            deleteRecord: function (uid) {\n              var that = this;\n              if (this.hierarchy.length > 0) {\n                var traverse = function (records) {\n                  if (records) {\n                    for (var i = 0; i < records.length; i++) {\n                      var r = records[i];\n                      if (r.uid == uid) {\n                        records.splice(i, 1);\n                        if (that.recordids[uid]) {\n                          delete that.recordids[uid];\n                        }\n                        var removeChildren = function (children) {\n                          for (var x = 0; x < children.length; x++) {\n                            var uid = children[x].uid;\n                            for (var j = 0; j < that.records.length; j++) {\n                              var r = that.records[j];\n                              if (r.uid == uid) {\n                                that.records.splice(j, 1);\n                                break;\n                              }\n                            }\n                            if (children[x].records) {\n                              removeChildren(children[x].records);\n                            }\n                          }\n                        };\n                        if (r.records) {\n                          removeChildren(r.records);\n                        }\n                        for (var j = 0; j < that.records.length; j++) {\n                          var r = that.records[j];\n                          if (r.uid == uid) {\n                            that.records.splice(j, 1);\n                            break;\n                          }\n                        }\n                        return true;\n                      }\n                      if (r.records) {\n                        traverse(r.records);\n                      }\n                    }\n                  }\n                };\n                traverse(this.hierarchy);\n              } else {\n                for (var i = 0; i < this.records.length; i++) {\n                  var r = this.records[i];\n                  if (r.uid == uid) {\n                    this.records.splice(i, 1);\n                    return true;\n                  }\n                }\n              }\n              return false;\n            },\n            addForeignValues: function (source) {\n              var me = this;\n              var datafieldslength = source.datafields ? source.datafields.length : 0;\n              for (var j = 0; j < datafieldslength; j++) {\n                var datafield = source.datafields[j];\n                if (datafield != undefined) {\n                  if (datafield.values != undefined) {\n                    if (datafield.value == undefined) datafield.value = datafield.name;\n                    if (datafield.values['value'] == undefined) {\n                      datafield.values['value'] = datafield.value;\n                    }\n                    var matchedIDs = new Array();\n                    var start, end;\n                    if (me.pageable && me.virtualmode) {\n                      start = me.pagenum * me.pagesize;\n                      end = start + me.pagesize;\n                      if (end > me.totalrecords) {\n                        end = me.totalrecords;\n                      }\n                    } else if (me.virtualmode) {\n                      start = source.recordstartindex;\n                      end = source.recordendindex;\n                      if (end > me.totalrecords) {\n                        end = me.totalrecords;\n                      }\n                    } else {\n                      start = 0;\n                      end = me.records.length;\n                    }\n                    for (var i = start; i < end; i++) {\n                      var record = me.records[i];\n                      var name = datafield.name;\n                      var value = record[datafield.value];\n                      if (matchedIDs[value] != undefined) {\n                        record[name] = matchedIDs[value];\n                      } else {\n                        for (var p = 0; p < datafield['values'].source.length; p++) {\n                          var sourcerecord = datafield.values.source[p];\n                          var sourcevalue = sourcerecord[datafield.values['value']];\n                          if (sourcevalue == undefined) {\n                            sourcevalue = sourcerecord.uid;\n                          }\n                          if (sourcevalue == value) {\n                            var label = sourcerecord[datafield.values['name']];\n                            record[name] = label;\n                            matchedIDs[value] = label;\n                            break;\n                          }\n                        }\n                      }\n                    }\n                  } else if (datafield.value != undefined) {\n                    for (var i = 0; i < me.records.length; i++) {\n                      var record = me.records[i];\n                      record[datafield.name] = record[datafield.value];\n                    }\n                  }\n                }\n              }\n            },\n            abort: function () {\n              if (this.xhr && this.xhr.readyState != 4) {\n                this.xhr.abort();\n                this.callDownloadComplete();\n              }\n            },\n            _requestData: function (postdata, source, options) {\n              var me = this;\n              var success = function (requestedData) {\n                if (requestedData.totalrecords) {\n                  source.totalrecords = requestedData.totalrecords;\n                  me.totalrecords = requestedData.totalrecords;\n                }\n                if (requestedData.records) {\n                  me.records = requestedData.records;\n                  me.cachedrecords = requestedData.records;\n                }\n                // add foreign values.\n                me.addForeignValues(source);\n                if (options.uniqueDataFields) {\n                  var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);\n                  me.records = uniquerecords;\n                  me.cachedrecords = uniquerecords;\n                }\n                if (options.beforeLoadComplete) {\n                  var newRecords = options.beforeLoadComplete(me.records, requestedData);\n                  if (newRecords != undefined) {\n                    me.records = newRecords;\n                    me.cachedrecords = newRecords;\n                  }\n                }\n                for (var i = 0; i < me.records.length; i++) {\n                  var record = me.records[i];\n                  if (undefined == record) {\n                    continue;\n                  }\n                  if (undefined == record.uid) {\n                    record.uid = me.getid(source.id, record, i);\n                  }\n                }\n                me.buildHierarchy.call(me);\n                if ($.isFunction(options.loadComplete)) {\n                  options.loadComplete(requestedData);\n                }\n                me.callDownloadComplete();\n              };\n              options.loadServerData(postdata, source, success);\n            },\n            getUniqueRecords: function (records, dataFields) {\n              if (records && dataFields) {\n                var length = records.length;\n                var datafieldslength = dataFields.length;\n                var uniqueRecords = new Array();\n                var lookupkeys = new Array();\n                // loop through all records.\n                for (var urec = 0; urec < length; urec++) {\n                  var datarow = records[urec];\n                  var lookupkey = \"\";\n                  if (datarow == undefined) continue;\n                  // build lookup key from the datafield values.\n                  for (var datafieldindex = 0; datafieldindex < datafieldslength; datafieldindex++) {\n                    var datafield = dataFields[datafieldindex];\n                    if (datarow[datafield] !== undefined) {\n                      lookupkey += datarow[datafield] + \"_\";\n                    }\n                  }\n                  // add the unique record.\n                  if (!lookupkeys[lookupkey] && lookupkey) {\n                    uniqueRecords[uniqueRecords.length] = datarow;\n                  }\n                  // add the lookup key.\n                  lookupkeys[lookupkey] = true;\n                }\n              }\n              return uniqueRecords;\n            },\n            getAggregatedData: function (aggregates, calendar, records, level) {\n              var dataRecords = records;\n              if (!dataRecords) {\n                dataRecords = this.records;\n              }\n              var data = {};\n              var dataValuesByAggregate = new Array();\n              var length = dataRecords.length;\n              if (length == 0) return;\n              if (length == undefined) return;\n              for (var i = 0; i < length; i++) {\n                var record = dataRecords[i];\n                for (var j = 0; j < aggregates.length; j++) {\n                  var aggregate = aggregates[j];\n                  var value = record[aggregate.name];\n                  //            if (value === null) continue;\n                  if (aggregate.aggregates) {\n                    data[aggregate.name] = data[aggregate.name] || {};\n                    dataValuesByAggregate[aggregate.name] = dataValuesByAggregate[aggregate.name] || 0;\n                    dataValuesByAggregate[aggregate.name]++;\n                    var _customCalcFunc = function (aggObject) {\n                      for (var obj in aggObject) {\n                        var oldValue = data[aggregate.name][obj];\n                        if (oldValue == null) {\n                          data[aggregate.name][obj] = 0;\n                          oldValue = 0;\n                        }\n                        if ($.isFunction(aggObject[obj])) {\n                          oldValue = aggObject[obj](oldValue, value, aggregate.name, record, level);\n                        }\n                        data[aggregate.name][obj] = oldValue;\n                      }\n                    };\n                    var canParse = parseFloat(value);\n                    if (isNaN(canParse)) canParse = false;else canParse = true;\n                    if (canParse) value = parseFloat(value);\n                    if (typeof value === 'number' && isFinite(value)) {\n                      $.each(aggregate.aggregates, function () {\n                        var oldValue = data[aggregate.name][this];\n                        if (oldValue == null) {\n                          oldValue = 0;\n                          if (this == 'min') oldValue = 9999999999999;\n                          if (this == 'max') oldValue = -9999999999999;\n                        }\n                        if (this == 'sum' || this == 'avg' || this == 'stdev' || this == 'stdevp' || this == 'var' || this == 'varp') {\n                          oldValue += parseFloat(value);\n                        } else if (this == 'product') {\n                          if (i == 0) oldValue = parseFloat(value);else oldValue *= parseFloat(value);\n                        } else if (this == 'min') {\n                          oldValue = Math.min(oldValue, parseFloat(value));\n                        } else if (this == 'max') {\n                          oldValue = Math.max(oldValue, parseFloat(value));\n                        } else if (this == 'count') {\n                          oldValue++;\n                        } else if (typeof this == 'object') {\n                          _customCalcFunc(this);\n                          return;\n                        }\n                        data[aggregate.name][this] = oldValue;\n                      });\n                    } else {\n                      $.each(aggregate.aggregates, function () {\n                        if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum' || this == 'avg' || this == 'stdev' || this == 'stdevp' || this == 'var' || this == 'varp') {\n                          if (value === null) return true;\n                          var oldValue = data[aggregate.name][this];\n                          if (oldValue == null) {\n                            oldValue = 0;\n                          }\n                          data[aggregate.name][this] = oldValue;\n                          return true;\n                        }\n                        if (typeof this == 'object') {\n                          _customCalcFunc(this);\n                        }\n                      });\n                    }\n                  }\n                }\n              }\n              for (var j = 0; j < aggregates.length; j++) {\n                var aggregate = aggregates[j];\n                if (!data[aggregate.name]) {\n                  data[aggregate.name] = {};\n                  $.each(aggregate.aggregates, function (index) {\n                    data[aggregate.name][this] = 0;\n                  });\n                }\n                if (data[aggregate.name]['avg'] != undefined) {\n                  var value = data[aggregate.name]['avg'];\n                  var dataValues = dataValuesByAggregate[aggregate.name];\n                  if (dataValues === 0 || dataValues == undefined) {\n                    data[aggregate.name]['avg'] = 0;\n                  } else {\n                    data[aggregate.name]['avg'] = value / dataValues;\n                  }\n                } else if (data[aggregate.name]['count'] != undefined) {\n                  data[aggregate.name]['count'] = length;\n                }\n\n                // stdev, stdevp, var, varp.\n                // stdev - Standard deviation on a sample.\n                // varp - Variance on an entire population.\n                // var - Variance on a sample.\n                if (data[aggregate.name]['stdev'] || data[aggregate.name]['stdevp'] || data[aggregate.name]['var'] || data[aggregate.name]['varp']) {\n                  $.each(aggregate.aggregates, function (index) {\n                    if (this == 'stdev' || this == 'var' || this == 'varp' || this == 'stdevp') {\n                      var value = data[aggregate.name][this];\n                      var count = length;\n                      var average = value / length;\n                      var sumSq = 0.0;\n                      for (var i = 0; i < length; i++) {\n                        var record = dataRecords[i];\n                        var recordvalue = record[aggregate.name];\n                        sumSq += (recordvalue - average) * (recordvalue - average);\n                      }\n                      var denominator = this == 'stdevp' || this == 'varp' ? count : count - 1;\n                      if (denominator == 0) denominator = 1;\n                      if (this == 'var' || this == 'varp') {\n                        data[aggregate.name][this] = sumSq / denominator;\n                      } else if (this == 'stdevp' || this == 'stdev') {\n                        data[aggregate.name][this] = Math.sqrt(sumSq / denominator);\n                      }\n                    }\n                  });\n                }\n                if (aggregate.formatStrings) {\n                  $.each(aggregate.aggregates, function (index) {\n                    var formatString = aggregate.formatStrings[index];\n                    if (formatString) {\n                      if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum' || this == 'avg' || this == 'stdev' || this == 'stdevp' || this == 'var' || this == 'varp') {\n                        var value = data[aggregate.name][this];\n                        data[aggregate.name][this] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);\n                      } else if (typeof this == 'object') {\n                        for (var obj in this) {\n                          var value = data[aggregate.name][obj];\n                          data[aggregate.name][obj] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);\n                        }\n                      }\n                    }\n                  });\n                }\n              }\n              return data;\n            },\n            bindDownloadComplete: function (id, func) {\n              this._downloadComplete[this._downloadComplete.length] = {\n                id: id,\n                func: func\n              };\n            },\n            unbindDownloadComplete: function (id) {\n              for (var i = 0; i < this._downloadComplete.length; i++) {\n                if (this._downloadComplete[i].id == id) {\n                  this._downloadComplete[i].func = null;\n                  this._downloadComplete.splice(i, 1);\n                  break;\n                }\n              }\n            },\n            callDownloadComplete: function () {\n              for (var complete = 0; complete < this._downloadComplete.length; complete++) {\n                var downloadComplete = this._downloadComplete[complete];\n                if (downloadComplete.func != null) {\n                  downloadComplete.func();\n                }\n              }\n            },\n            setSource: function (source) {\n              this._source = source;\n            },\n            generatekey: function () {\n              var S4 = function () {\n                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n              };\n              return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n            },\n            getGroupedRecords: function (groups, collectionName, groupName, mappingFields, recordName, valueName, parentName, data, startIndex) {\n              var visualRows = 0;\n              var self = this;\n              if (!startIndex) startIndex = 0;\n              var groupHashCodes = new Array();\n              for (var iGroupColumn = 0; iGroupColumn < groups.length; iGroupColumn++) {\n                groupHashCodes[iGroupColumn] = self.generatekey();\n              }\n              if (!collectionName) {\n                collectionName = 'items';\n              }\n              if (!groupName) {\n                groupName = 'group';\n              }\n              if (!recordName) {\n                recordName = 'record';\n              }\n              if (!parentName) {\n                parentName = 'parentItem';\n              }\n              if (undefined === valueName) {\n                valueName = 'value';\n              }\n              var grouprecords = new Array();\n              var grouprecordsindex = 0;\n              var hashRowGroups = new Array();\n              var groupslength = groups.length;\n              var groupsHierarchy = new Array();\n              if (!data) {\n                var data = this.records;\n              }\n              var dataLength = data.length;\n              var itemByRecord = function (record) {\n                var itemObj = record;\n                if (mappingFields) {\n                  $.each(mappingFields, function () {\n                    if (this.name && this.map) {\n                      itemObj[this.map] = itemObj[this.name];\n                    }\n                  });\n                }\n                return itemObj;\n              };\n              for (var obj = 0; obj < dataLength; obj++) {\n                var item = itemByRecord(data[obj]);\n                var id = item[self.uniqueId];\n                var itemKeysHierarchy = new Array();\n                var keys = 0;\n                for (iGroupColumn = 0; iGroupColumn < groupslength; iGroupColumn++) {\n                  var group = groups[iGroupColumn];\n                  var value = item[group];\n                  if (null == value) continue;\n                  itemKeysHierarchy[keys++] = {\n                    value: value,\n                    hash: groupHashCodes[iGroupColumn]\n                  };\n                }\n                if (itemKeysHierarchy.length != groupslength) break;\n                var parentItem = null;\n                var lookupKey = \"\";\n                var iLevel = -1;\n                for (var q = 0; q < itemKeysHierarchy.length; q++) {\n                  iLevel++;\n                  var itemKey = itemKeysHierarchy[q].value;\n                  var columnHash = itemKeysHierarchy[q].hash;\n                  lookupKey = lookupKey + \"_\" + columnHash + \"_\" + itemKey;\n                  if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {\n                    parentItem = hashRowGroups[lookupKey];\n                    continue;\n                  }\n                  if (parentItem == null) {\n                    parentItem = {\n                      level: 0\n                    };\n                    parentItem[parentName] = null;\n                    parentItem[groupName] = itemKey;\n                    parentItem[recordName] = item;\n                    if (item.expanded !== undefined) {\n                      parentItem.expanded = item.expanded;\n                    } else {\n                      parentItem.expanded = false;\n                    }\n                    if (valueName) {\n                      parentItem[valueName] = item[valueName];\n                    }\n                    parentItem[collectionName] = new Array();\n                    var uid = grouprecords.length + startIndex;\n                    if (!this._source.id || typeof item.uid === \"number\" || isFinite(item.uid)) {\n                      uid = \"Row\" + uid;\n                    }\n                    parentItem.uid = uid;\n                    grouprecords[grouprecordsindex++] = parentItem;\n                  } else {\n                    var subItem = {\n                      level: parentItem.level + 1\n                    };\n                    subItem[parentName] = parentItem;\n                    subItem[groupName] = itemKey;\n                    subItem[collectionName] = new Array();\n                    subItem[recordName] = item;\n                    if (item.expanded !== undefined) {\n                      subItem.expanded = item.expanded;\n                    } else {\n                      subItem.expanded = false;\n                    }\n                    if (valueName) {\n                      subItem[valueName] = item[valueName];\n                    }\n                    subItem.uid = parentItem.uid + \"_\" + parentItem[collectionName].length;\n                    parentItem[collectionName][parentItem[collectionName].length] = subItem;\n                    parentItem = subItem;\n                  }\n                  hashRowGroups[lookupKey] = parentItem;\n                }\n                if (item) {\n                  item.leaf = true;\n                }\n                if (parentItem != null) {\n                  if (this._source.id == null) {\n                    if (undefined == item.uid) {\n                      item.uid = parentItem.uid + \"_\" + parentItem[collectionName].length;\n                    } else {\n                      if (item.uid.toString().indexOf(parentItem.uid) == -1) {\n                        item.uid = parentItem.uid + \"_\" + item.uid;\n                      }\n                    }\n                  }\n                  item[parentName] = parentItem;\n                  item.level = parentItem.level + 1;\n                  parentItem[collectionName][parentItem[collectionName].length] = item;\n                } else {\n                  if (undefined == item.uid) {\n                    item.uid = this.generatekey();\n                  }\n                }\n              }\n              return grouprecords;\n            },\n            getRecordsHierarchy: function (fieldName, parentFieldName, collectionName, mappingFields, dataRecords) {\n              var recordsHierarchy = new Array();\n              var flatData = this.records;\n              if (dataRecords) {\n                flatData = dataRecords;\n              }\n              if (this.records.length == 0) return null;\n              var subItemsName = collectionName != null ? collectionName : \"items\";\n              var items = [];\n              var data = flatData;\n              var dataLength = data.length;\n              var names = this._source && this._source.hierarchy ? this._source.hierarchy.reservedNames : null;\n              var itemByRecord = function (record) {\n                var itemObj = record;\n                if (mappingFields) {\n                  $.each(mappingFields, function () {\n                    if (this.name && this.map) {\n                      itemObj[this.map] = itemObj[this.name];\n                    }\n                  });\n                }\n                return itemObj;\n              };\n\n              // build hierarchical source.\n              for (var i = 0; i < dataLength; i++) {\n                var item = $.extend({}, data[i]);\n                var parentid = item[parentFieldName];\n                var id = item[fieldName];\n                items[id] = {\n                  parentid: parentid,\n                  item: item\n                };\n              }\n              for (var i = 0; i < dataLength; i++) {\n                var item = $.extend({}, data[i]);\n                var parentid = item[parentFieldName];\n                var id = item[fieldName];\n                if (items[parentid] != undefined) {\n                  var item = {\n                    parentid: parentid,\n                    item: items[id].item\n                  };\n                  var parentItem = items[parentid].item;\n                  if (!parentItem[subItemsName]) {\n                    parentItem[subItemsName] = [];\n                  }\n                  var length = parentItem[subItemsName].length;\n                  var record = item.item;\n                  if (!names) {\n                    if (record.parent == undefined) {\n                      record.parent = parentItem;\n                    }\n                  } else {\n                    if (record[names.parent] == undefined) {\n                      record[names.parent] = parentItem;\n                    }\n                  }\n                  var itemObj = itemByRecord(record);\n                  parentItem[subItemsName][length] = itemObj;\n                  items[parentid].item = parentItem;\n                  items[id] = item;\n                } else {\n                  var record = items[id].item;\n                  if (!names) {\n                    if (record.parent == undefined) {\n                      record.parent = null;\n                    }\n                  } else {\n                    if (record[names.parent] == undefined) {\n                      record[names.parent] = null;\n                    }\n                  }\n                  var itemObj = itemByRecord(record);\n                  if (!names) {\n                    itemObj.level = 0;\n                  } else {\n                    itemObj[names.level] = 0;\n                  }\n                  recordsHierarchy[recordsHierarchy.length] = itemObj;\n                }\n              }\n              if (recordsHierarchy.length != 0) {\n                var updateLevels = function (level, records) {\n                  for (var i = 0; i < records.length; i++) {\n                    if (!names) {\n                      records[i].level = level;\n                    } else {\n                      records[i][names.level] = level;\n                    }\n                    var subRecords = records[i][subItemsName];\n                    if (subRecords) {\n                      if (subRecords.length > 0) {\n                        updateLevels(level + 1, subRecords);\n                      } else {\n                        if (!names) {\n                          records[i].leaf = true;\n                        } else {\n                          records[i][names.leaf] = true;\n                        }\n                      }\n                    } else {\n                      if (!names) {\n                        records[i].leaf = true;\n                      } else {\n                        records[i][names.leaf] = true;\n                      }\n                    }\n                  }\n                };\n                updateLevels(0, recordsHierarchy);\n              }\n              return recordsHierarchy;\n            },\n            bindBindingUpdate: function (id, func) {\n              this._bindingUpdate[this._bindingUpdate.length] = {\n                id: id,\n                func: func\n              };\n            },\n            unbindBindingUpdate: function (id) {\n              for (var i = 0; i < this._bindingUpdate.length; i++) {\n                if (this._bindingUpdate[i].id == id) {\n                  this._bindingUpdate[i].func = null;\n                  this._bindingUpdate.splice(i, 1);\n                  break;\n                }\n              }\n            },\n            callBindingUpdate: function (collectionChanged) {\n              for (var update = 0; update < this._bindingUpdate.length; update++) {\n                var bindingUpdate = this._bindingUpdate[update];\n                if (bindingUpdate.func != null) {\n                  bindingUpdate.func(collectionChanged);\n                }\n              }\n            },\n            getid: function (id, record, index) {\n              if (id != null && id.name != undefined) {\n                if (id.name) {\n                  var result = $(record).attr(id.name);\n                  if (result != null && result.toString().length > 0) {\n                    return result;\n                  } else if (id.map) {\n                    try {\n                      var result = $(record).attr(id.map);\n                      if (result != null && result.toString().length > 0) {\n                        return result;\n                      } else if ($(id.map, record).length > 0) {\n                        return $(id.map, record).text();\n                      } else if ($(id.name, record).length > 0) {\n                        return $(id.name, record).text();\n                      }\n                    } catch (error) {\n                      return index;\n                    }\n                  }\n                  return;\n                }\n              }\n              if ($(id, record).length > 0) {\n                return $(id, record).text();\n              }\n              if (id) {\n                if (id.toString().length > 0) {\n                  var result = $(record).attr(id);\n                  if (result != null && result.toString().length > 0) {\n                    return $.trim(result).split(\" \").join(\"\").replace(/([ #;?%&,.+*~\\':\"!^$[\\]()=>|\\/\\\\@])/g, '');\n                  } else {\n                    var splitMap = id.split(this.mapChar);\n                    if (splitMap.length > 1) {\n                      var d = record;\n                      for (var p = 0; p < splitMap.length; p++) {\n                        if (d != undefined) {\n                          d = d[splitMap[p]];\n                        }\n                      }\n                      if (d != undefined) {\n                        return d;\n                      }\n                    } else {\n                      if (record[id] != undefined) {\n                        return record[id];\n                      }\n                    }\n                  }\n                }\n              }\n              return index;\n            },\n            loadjson: function (jsondata, data, source) {\n              if (typeof jsondata == 'string') {\n                jsondata = $.parseJSON(jsondata);\n              }\n              if (source.root == undefined) source.root = '';\n              if (source.record == undefined) source.record = '';\n              var jsondata = jsondata || data;\n              if (!jsondata) {\n                jsondata = [];\n              }\n              var me = this;\n              if (source.root != '') {\n                var splitMap = source.root.split(me.mapChar);\n                if (splitMap.length > 1) {\n                  var d = jsondata;\n                  for (var p = 0; p < splitMap.length; p++) {\n                    if (d != undefined) {\n                      d = d[splitMap[p]];\n                    }\n                  }\n                  jsondata = d;\n                } else {\n                  if (jsondata[source.root] !== undefined) {\n                    jsondata = jsondata[source.root];\n                  } else if (jsondata[0] && jsondata[0][source.root] !== undefined) {\n                    jsondata = jsondata[0][source.root];\n                  } else {\n                    $.each(jsondata, function (i) {\n                      var root = this;\n                      if (this == source.root) {\n                        jsondata = this;\n                        return false;\n                      } else if (this[source.root] != undefined) {\n                        jsondata = this[source.root];\n                      }\n                    });\n                  }\n                  if (!jsondata) {\n                    var splitMap = source.root.split(me.mapChar);\n                    if (splitMap.length > 0) {\n                      var d = jsondata;\n                      for (var p = 0; p < splitMap.length; p++) {\n                        if (d != undefined) {\n                          d = d[splitMap[p]];\n                        }\n                      }\n                      jsondata = d;\n                    }\n                  }\n                }\n              } else {\n                if (!jsondata.length) {\n                  for (var obj in jsondata) {\n                    if ($.isArray(jsondata[obj])) {\n                      jsondata = jsondata[obj];\n                      break;\n                    }\n                  }\n                }\n              }\n              if (jsondata != null && jsondata.length == undefined) {\n                jsondata = $.makeArray(jsondata);\n              }\n              if (jsondata == null || jsondata == undefined || jsondata == \"undefined\" || jsondata.length == undefined) {\n                throw new Error('jqxDataAdapter: JSON Parse error! Invalid JSON. Please, check your JSON or your jqxDataAdapter initialization!');\n                return;\n              }\n              if (jsondata.length == 0) {\n                this.totalrecords = 0;\n                return;\n              }\n              var length = jsondata.length;\n              this.totalrecords = this.virtualmode ? source.totalrecords || length : length;\n              this.records = new Array();\n              this.originaldata = new Array();\n              var records = this.records;\n              var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n              this.recordids = new Array();\n              if (source.loadallrecords) {\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var dataoffset = 0;\n              if (this.virtualmode) {\n                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n                dataoffset = recordsstartindex;\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var datafieldslength = source.datafields ? source.datafields.length : 0;\n              // auto-generate data columns\n              if (datafieldslength == 0) {\n                var firstrecord = jsondata[0];\n                var datafields = new Array();\n                for (var obj in firstrecord) {\n                  var field = obj;\n                  datafields[datafields.length] = {\n                    name: field\n                  };\n                }\n                source.datafields = datafields;\n                source.generatedfields = source.datafields;\n                datafieldslength = datafields.length;\n              }\n              var index = recordsstartindex;\n              for (var i = recordsstartindex; i < length; i++) {\n                var record = jsondata[i];\n                if (record == undefined) break;\n                if (source.record && source.record != '') {\n                  record = record[source.record];\n                  if (record == undefined) continue;\n                }\n                var recordid = this.getid(source.id, record, i);\n                if (typeof recordid === \"object\") {\n                  recordid = i;\n                }\n                if (!this.recordids[recordid]) {\n                  this.recordids[recordid] = record;\n                  var datarow = {};\n                  for (var j = 0; j < datafieldslength; j++) {\n                    var datafield = source.datafields[j];\n                    var value = '';\n                    if (undefined == datafield || datafield == null) {\n                      continue;\n                    }\n                    if (datafield.map) {\n                      if ($.isFunction(datafield.map)) {\n                        value = datafield.map(record);\n                      } else {\n                        var splitMap = datafield.map.split(me.mapChar);\n                        if (splitMap.length > 0) {\n                          var datarecord = record;\n                          for (var p = 0; p < splitMap.length; p++) {\n                            if (datarecord != undefined) {\n                              datarecord = datarecord[splitMap[p]];\n                            }\n                          }\n                          value = datarecord;\n                        } else {\n                          value = record[datafield.map];\n                        }\n                      }\n                      if (value != undefined && value != null) {\n                        value = this.getvaluebytype(value, datafield);\n                      } else if (value == undefined && value != null) {\n                        value = '';\n                      }\n                    }\n\n                    // searches by both selectors when necessary.\n                    if (value == '' && !datafield.map) {\n                      value = record[datafield.name];\n                      if (value == undefined && value != null) {\n                        value = '';\n                      }\n                      // the datafield.value allows you to load values like: \"Nombre\":{\"#text\":\"FASE 1\"}, where the datafield is Nombre, the value is object.\n                      // If the datafield.value is \"#text\", the value that will be loaded will be \"FASE 1\".\n                      if (datafield.value != undefined) {\n                        if (value != undefined) {\n                          var tmpvalue = value[datafield.value];\n                          if (tmpvalue != undefined) {\n                            value = tmpvalue;\n                          }\n                        }\n                      }\n                    }\n                    value = this.getvaluebytype(value, datafield);\n                    if (datafield.displayname != undefined) {\n                      datarow[datafield.displayname] = value;\n                    } else {\n                      datarow[datafield.name] = value;\n                    }\n                    if (datafield.type === \"array\") {\n                      var updateValues = function (records) {\n                        if (!records) return;\n                        for (var t = 0; t < records.length; t++) {\n                          var record = records[t];\n                          if (!record) {\n                            continue;\n                          }\n                          for (var c = 0; c < datafieldslength; c++) {\n                            var datafield = source.datafields[c];\n                            var value = '';\n                            if (undefined == datafield || datafield == null) {\n                              continue;\n                            }\n                            if (datafield.map) {\n                              if ($.isFunction(datafield.map)) {\n                                value = datafield.map(record);\n                              } else {\n                                var splitMap = datafield.map.split(me.mapChar);\n                                if (splitMap.length > 0) {\n                                  var datarecord = record;\n                                  for (var p = 0; p < splitMap.length; p++) {\n                                    if (datarecord != undefined) {\n                                      datarecord = datarecord[splitMap[p]];\n                                    }\n                                  }\n                                  value = datarecord;\n                                } else {\n                                  value = record[datafield.map];\n                                }\n                              }\n                              if (value != undefined && value != null) {\n                                value = this.getvaluebytype(value, datafield);\n                              } else if (value == undefined && value != null) {\n                                value = '';\n                              }\n                            }\n\n                            // searches by both selectors when necessary.\n                            if (value == '' && !datafield.map) {\n                              value = record[datafield.name];\n                              if (value == undefined && value != null) {\n                                value = '';\n                              }\n                              // the datafield.value allows you to load values like: \"Nombre\":{\"#text\":\"FASE 1\"}, where the datafield is Nombre, the value is object.\n                              // If the datafield.value is \"#text\", the value that will be loaded will be \"FASE 1\".\n                              if (datafield.value != undefined) {\n                                if (value != undefined) {\n                                  var tmpvalue = value[datafield.value];\n                                  if (tmpvalue != undefined) {\n                                    value = tmpvalue;\n                                  }\n                                }\n                              }\n                            }\n                            value = this.getvaluebytype(value, datafield);\n                            if (datafield.displayname != undefined) {\n                              record[datafield.displayname] = value;\n                            } else {\n                              record[datafield.name] = value;\n                            }\n                            if (datafield.type === \"array\") {\n                              updateValues.call(this, value);\n                            }\n                          }\n                        }\n                      };\n                      updateValues.call(this, value);\n                    }\n                  }\n                  if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {\n                    //      records[dataoffset + index] = $.extend({}, datarow);\n                    records[dataoffset + index] = new Object(datarow);\n                    records[dataoffset + index].uid = recordid;\n                    this.originaldata[dataoffset + index] = new Object(records[i]);\n\n                    //     this.originaldata[dataoffset + index] = $.extend({}, records[i]);\n                    index++;\n                  }\n                }\n              }\n              this.records = records;\n              this.cachedrecords = this.records;\n            },\n            loadxml: function (xmldata, data, source) {\n              if (typeof xmldata == 'string') {\n                xmldata = data = $($.parseXML(xmldata));\n                xmldata = null;\n              }\n              if (source.root == undefined) source.root = '';\n              if (source.record == undefined) source.record = '';\n              var xmldata;\n              if ($.jqx.browser.msie && data) {\n                if (data.xml != undefined) {\n                  xmldata = $(source.root + \" \" + source.record, $.parseXML(data.xml));\n                } else {\n                  xmldata = xmldata || $(source.root + \" \" + source.record, data);\n                }\n              } else xmldata = xmldata || $(source.root + \" \" + source.record, data);\n              if (!xmldata) {\n                xmldata = [];\n              }\n              var length = xmldata.length;\n              if (xmldata.length == 0) {\n                return;\n              }\n              this.totalrecords = this.virtualmode ? source.totalrecords || length : length;\n              this.records = new Array();\n              this.originaldata = new Array();\n              var records = this.records;\n              var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n              this.recordids = new Array();\n              if (source.loadallrecords) {\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var dataoffset = 0;\n              if (this.virtualmode) {\n                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n                dataoffset = recordsstartindex;\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var datafieldslength = source.datafields ? source.datafields.length : 0;\n              // auto-generate data columns\n              if (datafieldslength == 0) {\n                var firstrecord = xmldata[0];\n                var datafields = new Array();\n                for (var obj in firstrecord) {\n                  var field = obj;\n                  datafields[datafields.length] = {\n                    name: field\n                  };\n                }\n                source.datafields = datafields;\n                source.generatedfields = source.datafields;\n                datafieldslength = datafields.length;\n              }\n              var p = recordsstartindex;\n              var hasArray = false;\n              for (var i = recordsstartindex; i < length; i++) {\n                var record = xmldata[i];\n                if (record == undefined) break;\n                var recordid = this.getid(source.id, record, i);\n                if (!this.recordids[recordid]) {\n                  this.recordids[recordid] = record;\n                  var datarow = {};\n                  var multiLevel = false;\n                  if (source.hierarchy && source.hierarchy.root) {\n                    multiLevel = true;\n                  }\n                  for (var j = 0; j < datafieldslength; j++) {\n                    var datafield = source.datafields[j];\n                    var value = '';\n                    if (undefined == datafield || datafield == null) {\n                      continue;\n                    }\n                    if (datafield.map) {\n                      if ($.isFunction(datafield.map)) {\n                        value = datafield.map(record);\n                      } else {\n                        var attributeStartIndex = datafield.map.indexOf('[');\n                        if (attributeStartIndex < 0) {\n                          value = $(datafield.map, record);\n                          if (value.length == 1) value = value.text();else {\n                            hasArray = true;\n                            var subArray = new Array();\n                            for (var f = 0; f < value.length; f++) {\n                              subArray.push($(value[f]).text());\n                            }\n                            value = subArray;\n                            if (multiLevel && subArray.length > 0) {\n                              value = subArray[0];\n                            }\n                          }\n                        } else {\n                          var submap = datafield.map.substring(0, attributeStartIndex - 1);\n                          var attributeEndIndex = datafield.map.indexOf(']');\n                          var attribute = datafield.map.substring(attributeStartIndex + 1, attributeEndIndex);\n                          value = $(submap, record).attr(attribute);\n                          if (value == undefined) {\n                            value = $(record).attr(attribute);\n                          }\n                          if (value == undefined) value = '';\n                        }\n                        if (value == '') {\n                          value = $(record).attr(datafield.map);\n                          if (value == undefined) value = '';\n                        }\n                      }\n                    }\n                    // searches by both selectors when necessary.\n                    if (value == '') {\n                      value = $(datafield.name, record);\n                      if (value.length == 1) value = value.text();else {\n                        var subArray = new Array();\n                        for (var f = 0; f < value.length; f++) {\n                          subArray.push($(value[f]).text());\n                        }\n                        value = subArray;\n                        if (multiLevel && subArray.length > 0) {\n                          value = subArray[0];\n                        }\n                      }\n                      if (value == '') {\n                        value = $(record).attr(datafield.name);\n                        if (value == undefined) value = '';\n                      }\n                      if (value == '') {\n                        if (record.nodeName && record.nodeName == datafield.name && record.firstChild) {\n                          value = $(record.firstChild).text();\n                        }\n                      }\n                    }\n                    var originalvalue = value;\n                    value = this.getvaluebytype(value, datafield);\n                    if (datafield.displayname != undefined) {\n                      datarow[datafield.displayname] = value;\n                    } else {\n                      datarow[datafield.name] = value;\n                    }\n                  }\n                  if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {\n                    records[dataoffset + p] = $.extend({}, datarow);\n                    records[dataoffset + p].uid = recordid;\n                    this.originaldata[dataoffset + p] = $.extend({}, records[i]);\n                    p++;\n                  }\n                }\n              }\n              if (source.hierarchy && source.hierarchy.root) {\n                for (var i = recordsstartindex; i < length; i++) {\n                  var record = xmldata[i];\n                  var dataRecord = records[i];\n                  if ($(record).parent().length > 0) {\n                    var recordid = this.getid(source.id, $(record).parents(source.hierarchy.record + \":first\"));\n                    dataRecord.parentuid = recordid;\n                  } else {\n                    dataRecord.parentuid = null;\n                  }\n                }\n              }\n              this.records = records;\n              this.cachedrecords = this.records;\n            },\n            loadics: function (data, source) {\n              if (data == null) {\n                return;\n              }\n              var rowDelimiter = source.rowDelimiter || this.rowDelimiter || '\\n';\n              var rows = data.split(rowDelimiter);\n              var length = rows.length;\n              var rowsWithNewRowDelimiter = data.split('\\r');\n              if (length == 1 && rowsWithNewRowDelimiter.length > 1) {\n                rows = rowsWithNewRowDelimiter;\n                length = rows.length;\n              }\n              this.records = new Array();\n              this.originaldata = new Array();\n              var records = this.records;\n              this.recordids = new Array();\n              var dataoffset = 0;\n              var stringToDate = function (until) {\n                var re = /^(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2})Z)?$/;\n                var bits = re.exec(until);\n                if (!bits) {\n                  throw new Error('Invalid UNTIL value: ' + until);\n                }\n                return new Date(Date.UTC(bits[1], bits[2] - 1, bits[3], bits[5] || 0, bits[6] || 0, bits[7] || 0));\n              };\n              for (var i = 0; i < length; i++) {\n                var record = rows[i];\n                if (record == \"BEGIN:VEVENT\") {\n                  var appointment = {};\n                  continue;\n                }\n                if (record.indexOf(\"SUMMARY\") >= 0) {\n                  appointment.SUMMARY = record.substring(record.indexOf(\"SUMMARY\") + 8);\n                  continue;\n                }\n                if (record.indexOf(\"LOCATION\") >= 0) {\n                  appointment.LOCATION = record.substring(record.indexOf(\"LOCATION\") + 9);\n                  continue;\n                }\n                if (record.indexOf(\"DESCRIPTION\") >= 0) {\n                  appointment.DESCRIPTION = record.substring(record.indexOf(\"DESCRIPTION\") + 12);\n                  continue;\n                }\n                if (record.indexOf(\"RRULE\") >= 0) {\n                  appointment.RRULE = record.substring(record.indexOf(\"RRULE\") + 6);\n                  continue;\n                }\n                if (record.indexOf(\"EXDATE\") >= 0) {\n                  var exDate = record.substring(record.indexOf(\"EXDATE\") + 7);\n                  appointment.EXDATE = exDate;\n                  continue;\n                }\n                if (record.indexOf(\"DTEND\") >= 0) {\n                  appointment.DTEND = stringToDate(record.substring(record.indexOf(\"DTEND\") + 6));\n                  continue;\n                }\n                if (record.indexOf(\"DTSTART\") >= 0) {\n                  appointment.DTSTART = stringToDate(record.substring(record.indexOf(\"DTSTART\") + 8));\n                  continue;\n                }\n                if (record.indexOf(\"UID\") >= 0) {\n                  appointment.uid = appointment.UID = record.substring(record.indexOf(\"UID\") + 4);\n                  continue;\n                }\n                if (record.indexOf(\"STATUS\") >= 0) {\n                  appointment.STATUS = record.substring(record.indexOf(\"STATUS\") + 7);\n                  continue;\n                }\n                if (record == \"END:VEVENT\") {\n                  records.push(appointment);\n                  continue;\n                }\n              }\n              this.records = records;\n              this.cachedrecords = this.records;\n            },\n            loadtext: function (data, source) {\n              if (data == null) {\n                return;\n              }\n              var rowDelimiter = source.rowDelimiter || this.rowDelimiter || '\\n';\n              var rows = data.split(rowDelimiter);\n              var length = rows.length;\n              var rowsWithNewRowDelimiter = data.split('\\r');\n              if (length == 1 && rowsWithNewRowDelimiter.length > 1) {\n                rows = rowsWithNewRowDelimiter;\n                length = rows.length;\n              }\n              this.totalrecords = this.virtualmode ? source.totalrecords || length : length;\n              this.records = new Array();\n              this.originaldata = new Array();\n              var records = this.records;\n              var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n              this.recordids = new Array();\n              if (source.loadallrecords) {\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var dataoffset = 0;\n              if (this.virtualmode) {\n                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;\n                dataoffset = recordsstartindex;\n                recordsstartindex = 0;\n                length = this.totalrecords;\n              }\n              var datafieldslength = source.datafields.length;\n              var columnDelimiter = source.columnDelimiter || this.columnDelimiter;\n              if (!columnDelimiter) columnDelimiter = source.datatype === 'tab' || source.datatype === 'tsv' ? '\\t' : ',';\n              for (var i = recordsstartindex; i < length; i++) {\n                var record = rows[i];\n                var recordid = null;\n                if (!this.recordids[recordid]) {\n                  if (source.id == null) {\n                    recordid = i;\n                    this.recordids[recordid] = record;\n                  }\n                  var datarow = {};\n                  var columns = rows[i].split(columnDelimiter);\n                  for (var j = 0; j < datafieldslength; j++) {\n                    if (j >= columns.length) continue;\n                    var datafield = source.datafields[j];\n                    var value = columns[j];\n                    if (datafield.map && $.isFunction(datafield.map)) {\n                      value = datafield.map(record);\n                    }\n                    if (datafield.type) {\n                      value = this.getvaluebytype(value, datafield);\n                    }\n                    var key = datafield.map || datafield.name || j.toString();\n                    datarow[key] = value;\n                    if (source.id != null) {\n                      if (source.id === datafield.name) {\n                        recordid = value;\n                        this.recordids[recordid] = record;\n                      }\n                    }\n                  }\n                  if (recordid == null) {\n                    recordid = i;\n                  }\n                  records[dataoffset + i] = $.extend({}, datarow);\n                  records[dataoffset + i].uid = recordid;\n                  this.originaldata[dataoffset + i] = $.extend({}, records[i]);\n                }\n              }\n              this.records = records;\n              this.cachedrecords = this.records;\n            },\n            getvaluebytype: function (value, datafield) {\n              var originalvalue = value;\n              if (value == null) return value;\n              if ($.isArray(value) && datafield.type != \"array\") {\n                for (var t = 0; t < value.length; t++) {\n                  value[t] = this.getvaluebytype(value[t], datafield);\n                }\n                return value;\n              }\n              if (datafield.type == 'date') {\n                if (value == \"NaN\") {\n                  value = \"\";\n                } else {\n                  if (value && value instanceof Date) {\n                    return value;\n                  }\n                  var tmpvalue = new Date(value);\n                  if (typeof value == 'string') {\n                    if (datafield.format) {\n                      var newtmpvalue = $.jqx.dataFormat.parsedate(value, datafield.format);\n                      if (newtmpvalue != null) {\n                        tmpvalue = newtmpvalue;\n                      }\n                    }\n                  }\n                  if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == \"Invalid Date\") {\n                    if ($.jqx.dataFormat) {\n                      value = $.jqx.dataFormat.tryparsedate(value);\n                    } else value = tmpvalue;\n                  } else {\n                    value = tmpvalue;\n                  }\n                  if (value == null) {\n                    value = originalvalue;\n                  }\n                }\n              } else if (datafield.type == 'float' || datafield.type == 'number' || datafield.type == 'decimal') {\n                if (value == \"NaN\") value = \"\";else {\n                  var value = parseFloat(value);\n                  if (isNaN(value)) {\n                    value = originalvalue;\n                  }\n                }\n              } else if (datafield.type == 'int' || datafield.type == 'integer') {\n                var value = parseInt(value);\n                if (isNaN(value)) {\n                  value = originalvalue;\n                }\n              } else if (datafield.type == 'bool' || datafield.type == 'boolean') {\n                if (value != null) {\n                  if (value.toLowerCase != undefined) {\n                    if (value.toLowerCase() == 'false') {\n                      value = false;\n                    } else if (value.toLowerCase() == 'true') {\n                      value = true;\n                    }\n                  }\n                }\n                if (value == 1) {\n                  value = true;\n                } else if (value == 0 && value !== \"\") {\n                  value = false;\n                } else value = '';\n              }\n              return value;\n            }\n          };\n          $.jqx.dataFormat = {};\n          $.extend($.jqx.dataFormat, {\n            regexTrim: /^\\s+|\\s+$/g,\n            regexInfinity: /^[+-]?infinity$/i,\n            regexHex: /^0x[a-f0-9]+$/i,\n            regexParseFloat: /^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/,\n            toString: Object.prototype.toString,\n            isBoolean: function (value) {\n              return typeof value === 'boolean';\n            },\n            isObject: function (value) {\n              return value && (typeof value === 'object' || $.isFunction(value)) || false;\n            },\n            isDate: function (value) {\n              return value instanceof Date;\n            },\n            arrayIndexOf: function (array, item) {\n              if (array.indexOf) {\n                return array.indexOf(item);\n              }\n              for (var i = 0, length = array.length; i < length; i++) {\n                if (array[i] === item) {\n                  return i;\n                }\n              }\n              return -1;\n            },\n            isString: function (value) {\n              return typeof value === 'string';\n            },\n            isNumber: function (value) {\n              return typeof value === 'number' && isFinite(value);\n            },\n            isNull: function (value) {\n              return value === null;\n            },\n            isUndefined: function (value) {\n              return typeof value === 'undefined';\n            },\n            isValue: function (value) {\n              return this.isObject(value) || this.isString(value) || this.isNumber(value) || this.isBoolean(value);\n            },\n            isEmpty: function (value) {\n              if (!this.isString(value) && this.isValue(value)) {\n                return false;\n              } else if (!this.isValue(value)) {\n                return true;\n              }\n              value = $.trim(value).replace(/\\&nbsp\\;/ig, '').replace(/\\&#160\\;/ig, '');\n              return value === \"\";\n            },\n            startsWith: function (value, pattern) {\n              return value.indexOf(pattern) === 0;\n            },\n            endsWith: function (value, pattern) {\n              return value.substr(value.length - pattern.length) === pattern;\n            },\n            trim: function (value) {\n              return (value + \"\").replace(this.regexTrim, \"\");\n            },\n            isArray: function (obj) {\n              return this.toString.call(obj) === \"[object Array]\";\n            },\n            defaultcalendar: function () {\n              var calendar = {\n                // separator of parts of a date (e.g. '/' in 11/05/1955)\n                '/': \"/\",\n                // separator of parts of a time (e.g. ':' in 05:44 PM)\n                ':': \":\",\n                // the first day of the week (0 = Sunday, 1 = Monday, etc)\n                firstDay: 0,\n                days: {\n                  // full day names\n                  names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                  // abbreviated day names\n                  namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                  // shortest day names\n                  namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n                },\n                months: {\n                  // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                  names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                  // abbreviated month names\n                  namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n                },\n                // AM and PM designators in one of these forms:\n                // The usual view, and the upper and lower case versions\n                //      [standard,lowercase,uppercase]\n                // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n                //      null\n                AM: [\"AM\", \"am\", \"AM\"],\n                PM: [\"PM\", \"pm\", \"PM\"],\n                eras: [\n                // eras in reverse chronological order.\n                // name: the name of the era in this culture (e.g. A.D., C.E.)\n                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                // offset: offset in years from gregorian calendar\n                {\n                  \"name\": \"A.D.\",\n                  \"start\": null,\n                  \"offset\": 0\n                }],\n                twoDigitYearMax: 2029,\n                patterns: {\n                  // short date pattern\n                  d: \"M/d/yyyy\",\n                  // long date pattern\n                  D: \"dddd, MMMM dd, yyyy\",\n                  // short time pattern\n                  t: \"h:mm tt\",\n                  // long time pattern\n                  T: \"h:mm:ss tt\",\n                  // long date, short time pattern\n                  f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                  // long date, long time pattern\n                  F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                  // month/day pattern\n                  M: \"MMMM dd\",\n                  // month/year pattern\n                  Y: \"yyyy MMMM\",\n                  // S is a sortable format that does not vary by culture\n                  S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                  // formatting of dates in MySQL DataBases\n                  ISO: \"yyyy-MM-dd hh:mm:ss\",\n                  ISO2: \"yyyy-MM-dd HH:mm:ss\",\n                  d1: \"dd.MM.yyyy\",\n                  d2: \"dd-MM-yyyy\",\n                  d3: \"MM-dd-yyyy\",\n                  zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n                  zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n                  custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n                  custom2: \"yyyy-MM-dd HH:mm:ss.fff\"\n                },\n                percentsymbol: \"%\",\n                currencysymbol: \"$\",\n                currencysymbolposition: \"before\",\n                decimalseparator: '.',\n                thousandsseparator: ','\n              };\n              return calendar;\n            },\n            expandFormat: function (calendar, format) {\n              // expands unspecified or single character date formats into the full pattern.\n              format = format || \"F\";\n              var pattern,\n                patterns = calendar.patterns,\n                len = format.length;\n              if (len === 1) {\n                pattern = patterns[format];\n                if (!pattern) {\n                  throw \"Invalid date format string '\" + format + \"'.\";\n                }\n                format = pattern;\n              } else if (len === 2 && format.charAt(0) === \"%\") {\n                // %X escape format -- intended as a custom format string that is only one character, not a built-in format.\n                format = format.charAt(1);\n              }\n              return format;\n            },\n            getEra: function (date, eras) {\n              if (!eras) return 0;\n              if (typeof date === 'string') {\n                return 0;\n              }\n              var start,\n                ticks = date.getTime();\n              for (var i = 0, l = eras.length; i < l; i++) {\n                start = eras[i].start;\n                if (start === null || ticks >= start) {\n                  return i;\n                }\n              }\n              return 0;\n            },\n            toUpper: function (value) {\n              // 'he-IL' has non-breaking space in weekday names.\n              return value.split(\"\\u00A0\").join(' ').toUpperCase();\n            },\n            toUpperArray: function (arr) {\n              var results = [];\n              for (var i = 0, l = arr.length; i < l; i++) {\n                results[i] = this.toUpper(arr[i]);\n              }\n              return results;\n            },\n            getEraYear: function (date, cal, era, sortable) {\n              var year = date.getFullYear();\n              if (!sortable && cal.eras) {\n                // convert normal gregorian year to era-shifted gregorian\n                // year by subtracting the era offset\n                year -= cal.eras[era].offset;\n              }\n              return year;\n            },\n            toUpper: function (value) {\n              if (value) {\n                return value.toUpperCase();\n              }\n              return \"\";\n            },\n            getDayIndex: function (cal, value, abbr) {\n              var ret,\n                days = cal.days,\n                upperDays = cal._upperDays;\n              if (!upperDays) {\n                cal._upperDays = upperDays = [this.toUpperArray(days.names), this.toUpperArray(days.namesAbbr), this.toUpperArray(days.namesShort)];\n              }\n              value = value.toUpperCase();\n              if (abbr) {\n                ret = this.arrayIndexOf(upperDays[1], value);\n                if (ret === -1) {\n                  ret = this.arrayIndexOf(upperDays[2], value);\n                }\n              } else {\n                ret = this.arrayIndexOf(upperDays[0], value);\n              }\n              return ret;\n            },\n            getMonthIndex: function (cal, value, abbr) {\n              var months = cal.months,\n                monthsGen = cal.monthsGenitive || cal.months,\n                upperMonths = cal._upperMonths,\n                upperMonthsGen = cal._upperMonthsGen;\n              if (!upperMonths) {\n                cal._upperMonths = upperMonths = [this.toUpperArray(months.names), this.toUpperArray(months.namesAbbr)];\n                cal._upperMonthsGen = upperMonthsGen = [this.toUpperArray(monthsGen.names), this.toUpperArray(monthsGen.namesAbbr)];\n              }\n              value = this.toUpper(value);\n              var i = this.arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);\n              if (i < 0) {\n                i = this.arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);\n              }\n              return i;\n            },\n            appendPreOrPostMatch: function (preMatch, strings) {\n              // appends pre- and post- token match strings while removing escaped characters.\n              // Returns a single quote count which is used to determine if the token occurs\n              // in a string literal.\n              var quoteCount = 0,\n                escaped = false;\n              for (var i = 0, il = preMatch.length; i < il; i++) {\n                var c = preMatch.charAt(i);\n                switch (c) {\n                  case '\\'':\n                    if (escaped) {\n                      strings.push(\"'\");\n                    } else {\n                      quoteCount++;\n                    }\n                    escaped = false;\n                    break;\n                  case '\\\\':\n                    if (escaped) {\n                      strings.push(\"\\\\\");\n                    }\n                    escaped = !escaped;\n                    break;\n                  default:\n                    strings.push(c);\n                    escaped = false;\n                    break;\n                }\n              }\n              return quoteCount;\n            },\n            getTokenRegExp: function () {\n              // regular expression for matching date and time tokens in format strings.\n              return /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;\n            },\n            formatlink: function (value, format) {\n              var target = '';\n              if (format && format.target) {\n                target = 'target=' + format.target;\n              }\n              if (target != '') {\n                return \"<a \" + target + \" href=\\\"\" + value + \"\\\">\" + value + \"</a>\";\n              }\n              return \"<a href=\\\"\" + value + \"\\\">\" + value + \"</a>\";\n            },\n            formatemail: function (value) {\n              return \"<a href=\\\"mailto:\" + value + \"\\\">\" + value + \"</a>\";\n            },\n            formatNumber: function (value, format, calendar) {\n              return this.formatnumber(value, format, calendar);\n            },\n            formatnumber: function (value, format, calendar) {\n              if (calendar == undefined || calendar == null || calendar == \"\") {\n                calendar = this.defaultcalendar();\n              }\n              if (format === \"\" || format === null) {\n                return value;\n              }\n              if (!this.isNumber(value)) {\n                value *= 1;\n              }\n              var precision;\n              if (format.length > 1) precision = parseInt(format.slice(1), 10);\n              var options = {};\n              var current = format.charAt(0).toUpperCase();\n              options.thousandsSeparator = calendar.thousandsseparator;\n              options.decimalSeparator = calendar.decimalseparator;\n              switch (current) {\n                case \"D\":\n                case \"d\":\n                case \"F\":\n                case \"f\":\n                  options.decimalPlaces = precision;\n                  break;\n                case \"N\":\n                case \"n\":\n                  options.decimalPlaces = 0;\n                  break;\n                case \"C\":\n                case \"c\":\n                  options.decimalPlaces = precision;\n                  if (calendar.currencysymbolposition == \"before\") {\n                    options.prefix = calendar.currencysymbol;\n                  } else {\n                    options.suffix = calendar.currencysymbol;\n                  }\n                  break;\n                case \"P\":\n                case \"p\":\n                  options.suffix = calendar.percentsymbol;\n                  options.decimalPlaces = precision;\n                  break;\n                default:\n                  throw \"Bad number format specifier: \" + current;\n              }\n              if (this.isNumber(value)) {\n                var negative = value < 0;\n                var output = value + \"\";\n                var decimalseparator = options.decimalSeparator ? options.decimalSeparator : \".\";\n                var decimalindex;\n                if (this.isNumber(options.decimalPlaces)) {\n                  // Round to the correct decimal place\n                  var decimalplaces = options.decimalPlaces;\n                  var decimal = Math.pow(10, decimalplaces);\n                  output = (value * decimal).toFixed(0) / decimal + \"\";\n                  decimalindex = output.lastIndexOf(\".\");\n                  if (decimalplaces > 0) {\n                    // Add the decimal separator\n                    if (decimalindex < 0) {\n                      output += decimalseparator;\n                      decimalindex = output.length - 1;\n                    }\n                    // Replace the \".\"\n                    else if (decimalseparator !== \".\") {\n                      output = output.replace(\".\", decimalseparator);\n                    }\n                    // Add missing zeros\n                    while (output.length - 1 - decimalindex < decimalplaces) {\n                      output += \"0\";\n                    }\n                  }\n                } else {\n                  var output = value + \"\";\n                  decimalindex = output.lastIndexOf(\".\");\n                  if (decimalindex > 0 && decimalplaces == undefined) {\n                    // Replace the \".\"\n                    if (decimalseparator !== \".\") {\n                      output = output.replace(\".\", decimalseparator);\n                    }\n                  }\n                }\n                if (options.thousandsSeparator) {\n                  var groupseparator = options.thousandsSeparator;\n                  decimalindex = output.lastIndexOf(decimalseparator);\n                  decimalindex = decimalindex > -1 ? decimalindex : output.length;\n                  var newoutput = output.substring(decimalindex);\n                  var nCount = -1;\n                  for (var i = decimalindex; i > 0; i--) {\n                    nCount++;\n                    if (nCount % 3 === 0 && i !== decimalindex && (!negative || i > 1)) {\n                      newoutput = groupseparator + newoutput;\n                    }\n                    newoutput = output.charAt(i - 1) + newoutput;\n                  }\n                  output = newoutput;\n                }\n                // Prepend prefix\n                output = options.prefix ? options.prefix + output : output;\n                // Append suffix\n                output = options.suffix ? output + options.suffix : output;\n                return output;\n              } else {\n                return value;\n              }\n            },\n            tryparsedate: function (value, calendar) {\n              if (calendar == undefined || calendar == null) {\n                calendar = this.defaultcalendar();\n              }\n              var me = this;\n              if (value == \"\") return null;\n              if (value != null && !value.substring) {\n                value = value.toString();\n              }\n              if (value != null && value.substring(0, 6) == \"/Date(\") {\n                var jsonDateRE = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\n                var date = new Date(+value.replace(/\\/Date\\((\\d+)\\)\\//, '$1'));\n                if (date == \"Invalid Date\") {\n                  var m = value.match(/^\\/Date\\((\\d+)([-+]\\d\\d)(\\d\\d)\\)\\/$/);\n                  var date = null;\n                  if (m) date = new Date(1 * m[1] + 3600000 * m[2] + 60000 * m[3]);\n                }\n                if (date == null || date == \"Invalid Date\" || isNaN(date)) {\n                  var arr = jsonDateRE.exec(value);\n                  if (arr) {\n                    // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes\n                    var result = new Date(parseInt(arr[1]));\n                    if (arr[2]) {\n                      var mins = parseInt(arr[3]);\n                      if (arr[2] === \"-\") {\n                        mins = -mins;\n                      }\n                      var current = result.getUTCMinutes();\n                      result.setUTCMinutes(current - mins);\n                    }\n                    if (!isNaN(result.valueOf())) {\n                      return result;\n                    }\n                  }\n                }\n                return date;\n              }\n              var patterns = calendar.patterns;\n              for (var prop in patterns) {\n                date = me.parsedate(value, patterns[prop], calendar);\n                if (date) {\n                  if (prop == \"ISO\") {\n                    var tmpDate = me.parsedate(value, patterns[\"ISO2\"], calendar);\n                    if (tmpDate) return tmpDate;\n                  }\n                  return date;\n                }\n              }\n              if (value != null) {\n                var tmpDate = null;\n                var dateParts = [':', '/', '-'];\n                var canParse = true;\n                for (var part = 0; part < dateParts.length; part++) {\n                  if (value.indexOf(dateParts[part]) != -1) {\n                    canParse = false;\n                  }\n                }\n                if (canParse) {\n                  var number = new Number(value);\n                  if (!isNaN(number)) {\n                    return new Date(number);\n                  }\n                }\n              }\n              if ($.type(value) === \"string\") {\n                var that = me;\n                value = that.trim(value);\n                var splitParts = [':', '/', '-', ' ', ','];\n                var replaceAll = function (find, replace, str) {\n                  return str.replace(new RegExp(find, 'g'), replace);\n                };\n                value = replaceAll(', ', ',', value);\n                var timePart = \"\";\n                var datePart = value;\n                if (value.indexOf(\":\") >= 0) {\n                  timePart = value.substring(value.indexOf(\":\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.indexOf(\":\") - 2);\n                } else if (value.toUpperCase().indexOf(\"AM\") >= 0) {\n                  timePart = value.substring(value.toUpperCase().indexOf(\"AM\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.toUpperCase().indexOf(\"AM\") - 2);\n                } else if (value.toUpperCase().indexOf(\"PM\") >= 0) {\n                  timePart = value.substring(value.toUpperCase().indexOf(\"PM\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.toUpperCase().indexOf(\"PM\") - 2);\n                }\n                var parseDate = new Date();\n                var parsed = false;\n                if (datePart) {\n                  for (var i = 0; i < splitParts.length; i++) {\n                    if (datePart.indexOf(splitParts[i]) >= 0) {\n                      dateParts = datePart.split(splitParts[i]);\n                      break;\n                    }\n                  }\n                  var days = new Array();\n                  var months = new Array();\n                  var years = new Array();\n                  var dayPart = null;\n                  var monthPart = null;\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isDay = that.parsedate(part, \"d\", calendar) || that.parsedate(part, \"dd\", calendar) || that.parsedate(part, \"ddd\", calendar) || that.parsedate(part, \"dddd\", calendar);\n                    if (isDay) {\n                      if (part.length <= 2) {\n                        dayPart = i;\n                        days.push(isDay.getDate());\n                        break;\n                      }\n                    }\n                  }\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isMonth = that.parsedate(part, \"M\", calendar) || that.parsedate(part, \"MM\", calendar) || that.parsedate(part, \"MMM\", calendar) || that.parsedate(part, \"MMMM\", calendar);\n                    if (isMonth) {\n                      if (dayPart != undefined && dayPart == i) continue;\n                      months.push(isMonth.getMonth());\n                      if (part.length > 2) {\n                        monthPart = i;\n                        break;\n                      }\n                    }\n                  }\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isYear = that.parsedate(part, \"yyyy\", calendar);\n                    if (isYear) {\n                      if (dayPart != undefined && dayPart == i) continue;\n                      if (monthPart != undefined && monthPart == i) continue;\n                      years.push(isYear.getFullYear());\n                    }\n                  }\n                  var dates = new Array();\n                  for (var d = 0; d < days.length; d++) {\n                    for (var m = 0; m < months.length; m++) {\n                      for (var y = 0; y < years.length; y++) {\n                        var result = new Date(years[y], months[m], days[d]);\n                        if (years[y] < 1970) result.setFullYear(years[y]);\n                        if (result.getTime() != NaN) {\n                          dates.push(result);\n                        }\n                      }\n                    }\n                  }\n                  if (dates.length > 0) {\n                    parseDate = dates[0];\n                    parsed = true;\n                  }\n                }\n                if (timePart) {\n                  var timeParts = timePart.indexOf(\":\") >= 0 ? timePart.split(':') : timePart;\n                  var parsedTime = that.parsedate(timePart, \"h:mm tt\", calendar) || that.parsedate(timePart, \"h:mm:ss tt\", calendar) || that.parsedate(timePart, \"HH:mm:ss.fff\", calendar) || that.parsedate(timePart, \"HH:mm:ss.ff\", calendar) || that.parsedate(timePart, \"HH:mm:ss.tttt\", calendar) || that.parsedate(timePart, \"HH:mm:ss\", calendar) || that.parsedate(timePart, \"HH:mm\", calendar) || that.parsedate(timePart, \"HH\", calendar);\n                  var hour = 0,\n                    minute = 0,\n                    second = 0,\n                    milisecond = 0;\n                  if (parsedTime && parsedTime.getTime() != NaN) {\n                    hour = parsedTime.getHours();\n                    minute = parsedTime.getMinutes();\n                    second = parsedTime.getSeconds();\n                    milisecond = parsedTime.getMilliseconds();\n                  } else {\n                    if (timeParts.length == 1) {\n                      hour = parseInt(timeParts[0]);\n                    }\n                    if (timeParts.length == 2) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                    }\n                    if (timeParts.length == 3) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                      if (timeParts[2].indexOf(\".\") >= 0) {\n                        second = parseInt(timeParts[2].toString().split(\".\")[0]);\n                        milisecond = parseInt(timeParts[2].toString().split(\".\")[1]);\n                      } else {\n                        second = parseInt(timeParts[2]);\n                      }\n                    }\n                    if (timeParts.length == 4) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                      second = parseInt(timeParts[2]);\n                      milisecond = parseInt(timeParts[3]);\n                    }\n                  }\n                  if (parseDate && !isNaN(hour) && !isNaN(minute) && !isNaN(second) && !isNaN(milisecond)) {\n                    parseDate.setHours(hour, minute, second, milisecond);\n                    parsed = true;\n                  }\n                }\n                if (parsed) {\n                  return parseDate;\n                }\n              }\n              return null;\n            },\n            getparseregexp: function (cal, format) {\n              // converts a format string into a regular expression with groups that\n              // can be used to extract date fields from a date string.\n              // check for a cached parse regex.\n              var re = cal._parseRegExp;\n              if (!re) {\n                cal._parseRegExp = re = {};\n              } else {\n                var reFormat = re[format];\n                if (reFormat) {\n                  return reFormat;\n                }\n              }\n\n              // expand single digit formats, then escape regular expression characters.\n              var expFormat = this.expandFormat(cal, format).replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"),\n                regexp = [\"^\"],\n                groups = [],\n                index = 0,\n                quoteCount = 0,\n                tokenRegExp = this.getTokenRegExp(),\n                match;\n\n              // iterate through each date token found.\n              while ((match = tokenRegExp.exec(expFormat)) !== null) {\n                var preMatch = expFormat.slice(index, match.index);\n                index = tokenRegExp.lastIndex;\n\n                // don't replace any matches that occur inside a string literal.\n                quoteCount += this.appendPreOrPostMatch(preMatch, regexp);\n                if (quoteCount % 2) {\n                  regexp.push(match[0]);\n                  continue;\n                }\n\n                // add a regex group for the token.\n                var m = match[0],\n                  len = m.length,\n                  add;\n                switch (m) {\n                  case 'dddd':\n                  case 'ddd':\n                  case 'MMMM':\n                  case 'MMM':\n                  case 'gg':\n                  case 'g':\n                    add = \"(\\\\D+)\";\n                    break;\n                  case 'tt':\n                  case 't':\n                    add = \"(\\\\D*)\";\n                    break;\n                  case 'yyyy':\n                  case 'fff':\n                  case 'ff':\n                  case 'f':\n                    add = \"(\\\\d{\" + len + \"})\";\n                    break;\n                  case 'dd':\n                  case 'd':\n                  case 'MM':\n                  case 'M':\n                  case 'yy':\n                  case 'y':\n                  case 'HH':\n                  case 'H':\n                  case 'hh':\n                  case 'h':\n                  case 'mm':\n                  case 'm':\n                  case 'ss':\n                  case 's':\n                    add = \"(\\\\d\\\\d?)\";\n                    break;\n                  case 'zzz':\n                    add = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n                    break;\n                  case 'zz':\n                  case 'z':\n                    add = \"([+-]?\\\\d\\\\d?)\";\n                    break;\n                  case '/':\n                    add = \"(\\\\\" + cal[\"/\"] + \")\";\n                    break;\n                  default:\n                    throw \"Invalid date format pattern '\" + m + \"'.\";\n                    break;\n                }\n                if (add) {\n                  regexp.push(add);\n                }\n                groups.push(match[0]);\n              }\n              this.appendPreOrPostMatch(expFormat.slice(index), regexp);\n              regexp.push(\"$\");\n\n              // allow whitespace to differ when matching formats.\n              var regexpStr = regexp.join('').replace(/\\s+/g, \"\\\\s+\"),\n                parseRegExp = {\n                  'regExp': regexpStr,\n                  'groups': groups\n                };\n\n              // cache the regex for this format.\n              return re[format] = parseRegExp;\n            },\n            outOfRange: function (value, low, high) {\n              return value < low || value > high;\n            },\n            expandYear: function (cal, year) {\n              // expands 2-digit year into 4 digits.\n              var now = new Date(),\n                era = this.getEra(now);\n              if (year < 100) {\n                var twoDigitYearMax = cal.twoDigitYearMax;\n                twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;\n                var curr = this.getEraYear(now, cal, era);\n                year += curr - curr % 100;\n                if (year > twoDigitYearMax) {\n                  year -= 100;\n                }\n              }\n              return year;\n            },\n            parsedate: function (value, format, calendar) {\n              if (calendar == undefined || calendar == null) {\n                calendar = this.defaultcalendar();\n              }\n              // try to parse the date string by matching against the format string\n              // while using the specified culture for date field names.\n              value = this.trim(value);\n              var cal = calendar,\n                // convert date formats into regular expressions with groupings.\n                // use the regexp to determine the input format and extract the date fields.\n                parseInfo = this.getparseregexp(cal, format),\n                match = new RegExp(parseInfo.regExp).exec(value);\n              if (match === null) {\n                return null;\n              }\n              // found a date format that matches the input.\n              var groups = parseInfo.groups,\n                era = null,\n                year = null,\n                month = null,\n                date = null,\n                weekDay = null,\n                hour = 0,\n                hourOffset,\n                min = 0,\n                sec = 0,\n                msec = 0,\n                tzMinOffset = null,\n                pmHour = false;\n              // iterate the format groups to extract and set the date fields.\n              for (var j = 0, jl = groups.length; j < jl; j++) {\n                var matchGroup = match[j + 1];\n                if (matchGroup) {\n                  var current = groups[j],\n                    clength = current.length,\n                    matchInt = parseInt(matchGroup, 10);\n                  switch (current) {\n                    case 'dd':\n                    case 'd':\n                      // Day of month.\n                      date = matchInt;\n                      // check that date is generally in valid range, also checking overflow below.\n                      if (this.outOfRange(date, 1, 31)) return null;\n                      break;\n                    case 'MMM':\n                    case 'MMMM':\n                      month = this.getMonthIndex(cal, matchGroup, clength === 3);\n                      if (this.outOfRange(month, 0, 11)) return null;\n                      break;\n                    case 'M':\n                    case 'MM':\n                      // Month.\n                      month = matchInt - 1;\n                      if (this.outOfRange(month, 0, 11)) return null;\n                      break;\n                    case 'y':\n                    case 'yy':\n                    case 'yyyy':\n                      year = clength < 4 ? this.expandYear(cal, matchInt) : matchInt;\n                      if (this.outOfRange(year, 0, 9999)) return null;\n                      break;\n                    case 'h':\n                    case 'hh':\n                      // Hours (12-hour clock).\n                      hour = matchInt;\n                      if (hour === 12) hour = 0;\n                      if (this.outOfRange(hour, 0, 11)) return null;\n                      break;\n                    case 'H':\n                    case 'HH':\n                      // Hours (24-hour clock).\n                      hour = matchInt;\n                      if (this.outOfRange(hour, 0, 23)) return null;\n                      break;\n                    case 'm':\n                    case 'mm':\n                      // Minutes.\n                      min = matchInt;\n                      if (this.outOfRange(min, 0, 59)) return null;\n                      break;\n                    case 's':\n                    case 'ss':\n                      // Seconds.\n                      sec = matchInt;\n                      if (this.outOfRange(sec, 0, 59)) return null;\n                      break;\n                    case 'tt':\n                    case 't':\n                      // AM/PM designator.\n                      // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of\n                      // the AM tokens. If not, fail the parse for this format.\n                      pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);\n                      if (!pmHour && (!cal.AM || matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])) return null;\n                      break;\n                    case 'f':\n                    // Deciseconds.\n                    case 'ff':\n                    // Centiseconds.\n                    case 'fff':\n                      // Milliseconds.\n                      msec = matchInt * Math.pow(10, 3 - clength);\n                      if (this.outOfRange(msec, 0, 999)) return null;\n                      break;\n                    case 'ddd':\n                    // Day of week.\n                    case 'dddd':\n                      // Day of week.\n                      weekDay = this.getDayIndex(cal, matchGroup, clength === 3);\n                      if (this.outOfRange(weekDay, 0, 6)) return null;\n                      break;\n                    case 'zzz':\n                      // Time zone offset in +/- hours:min.\n                      var offsets = matchGroup.split(/:/);\n                      if (offsets.length !== 2) return null;\n                      hourOffset = parseInt(offsets[0], 10);\n                      if (this.outOfRange(hourOffset, -12, 13)) return null;\n                      var minOffset = parseInt(offsets[1], 10);\n                      if (this.outOfRange(minOffset, 0, 59)) return null;\n                      tzMinOffset = hourOffset * 60 + (this.startsWith(matchGroup, '-') ? -minOffset : minOffset);\n                      break;\n                    case 'z':\n                    case 'zz':\n                      // Time zone offset in +/- hours.\n                      hourOffset = matchInt;\n                      if (this.outOfRange(hourOffset, -12, 13)) return null;\n                      tzMinOffset = hourOffset * 60;\n                      break;\n                    case 'g':\n                    case 'gg':\n                      var eraName = matchGroup;\n                      if (!eraName || !cal.eras) return null;\n                      eraName = this.trim(eraName.toLowerCase());\n                      for (var i = 0, l = cal.eras.length; i < l; i++) {\n                        if (eraName === cal.eras[i].name.toLowerCase()) {\n                          era = i;\n                          break;\n                        }\n                      }\n                      // could not find an era with that name\n                      if (era === null) return null;\n                      break;\n                  }\n                }\n              }\n              var result = new Date(),\n                defaultYear,\n                convert = cal.convert;\n              defaultYear = result.getFullYear();\n              if (year === null) {\n                year = defaultYear;\n              } else if (cal.eras) {\n                // year must be shifted to normal gregorian year\n                // but not if year was not specified, its already normal gregorian\n                // per the main if clause above.\n                year += cal.eras[era || 0].offset;\n              }\n              // set default day and month to 1 and January, so if unspecified, these are the defaults\n              // instead of the current day/month.\n              if (month === null) {\n                month = 0;\n              }\n              if (date === null) {\n                date = 1;\n              }\n              // now have year, month, and date, but in the culture's calendar.\n              // convert to gregorian if necessary\n              if (convert) {\n                result = convert.toGregorian(year, month, date);\n                // conversion failed, must be an invalid match\n                if (result === null) return null;\n              } else {\n                // have to set year, month and date together to avoid overflow based on current date.\n                result.setFullYear(year, month, date);\n                // check to see if date overflowed for specified month (only checked 1-31 above).\n                if (result.getDate() !== date) return null;\n                // invalid day of week.\n                if (weekDay !== null && result.getDay() !== weekDay) {\n                  return null;\n                }\n              }\n              // if pm designator token was found make sure the hours fit the 24-hour clock.\n              if (pmHour && hour < 12) {\n                hour += 12;\n              }\n              result.setHours(hour, min, sec, msec);\n              if (tzMinOffset !== null) {\n                // adjust timezone to utc before applying local offset.\n                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());\n                // Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours\n                // to ensure both these fields will not exceed this range.  adjustedMin will range\n                // somewhere between -1440 and 1500, so we only need to split this into hours.\n                result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);\n              }\n              return result;\n            },\n            cleardatescache: function () {\n              this.datescache = new Array();\n            },\n            formatDate: function (value, format, calendar) {\n              return this.formatdate(value, format, calendar);\n            },\n            formatdate: function (value, format, calendar) {\n              if (calendar == undefined || calendar == null) {\n                calendar = this.defaultcalendar();\n              }\n              if (typeof value === 'string') {\n                return value;\n              }\n              var lookupkey = value.toString() + \"_\" + format;\n              if (this.datescache && this.datescache[lookupkey]) {\n                if (format.indexOf('f') == -1) {\n                  return this.datescache[lookupkey];\n                }\n              }\n              if (!format || !format.length || format === 'i') {\n                var ret;\n                ret = this.formatDate(value, calendar.patterns.F, calendar);\n                return ret;\n              }\n              var eras = calendar.eras,\n                sortable = format === \"s\";\n              format = this.expandFormat(calendar, format);\n\n              // Start with an empty string\n              ret = [];\n              var hour,\n                zeros = ['0', '00', '000'],\n                foundDay,\n                checkedDay,\n                dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,\n                quoteCount = 0,\n                tokenRegExp = this.getTokenRegExp(),\n                converted;\n              function padZeros(num, c) {\n                var r,\n                  s = num + '';\n                if (c > 1 && s.length < c) {\n                  r = zeros[c - 2] + s;\n                  return r.substr(r.length - c, c);\n                } else {\n                  r = s;\n                }\n                return r;\n              }\n              function hasDay() {\n                if (foundDay || checkedDay) {\n                  return foundDay;\n                }\n                foundDay = dayPartRegExp.test(format);\n                checkedDay = true;\n                return foundDay;\n              }\n              function getPart(date, part) {\n                if (converted) {\n                  return converted[part];\n                }\n                if (date.getMonth != undefined) {\n                  switch (part) {\n                    case 0:\n                      return date.getFullYear();\n                    case 1:\n                      return date.getMonth();\n                    case 2:\n                      return date.getDate();\n                  }\n                }\n              }\n              for (;;) {\n                // Save the current index\n                var index = tokenRegExp.lastIndex,\n                  // Look for the next pattern\n                  ar = tokenRegExp.exec(format);\n\n                // Append the text before the pattern (or the end of the string if not found)\n                var preMatch = format.slice(index, ar ? ar.index : format.length);\n                quoteCount += this.appendPreOrPostMatch(preMatch, ret);\n                if (!ar) {\n                  break;\n                }\n\n                // do not replace any matches that occur inside a string literal.\n                if (quoteCount % 2) {\n                  ret.push(ar[0]);\n                  continue;\n                }\n                var current = ar[0],\n                  clength = current.length;\n                switch (current) {\n                  case \"ddd\":\n                  //Day of the week, as a three-letter abbreviation\n                  case \"dddd\":\n                    // Day of the week, using the full name\n                    var names = clength === 3 ? calendar.days.namesAbbr : calendar.days.names;\n                    ret.push(names[value.getDay()]);\n                    break;\n                  case \"d\":\n                  // Day of month, without leading zero for single-digit days\n                  case \"dd\":\n                    // Day of month, with leading zero for single-digit days\n                    foundDay = true;\n                    ret.push(padZeros(getPart(value, 2), clength));\n                    break;\n                  case \"MMM\":\n                  // Month, as a three-letter abbreviation\n                  case \"MMMM\":\n                    // Month, using the full name\n                    var part = getPart(value, 1);\n                    ret.push(calendar.months[clength === 3 ? \"namesAbbr\" : \"names\"][part]);\n                    break;\n                  case \"M\":\n                  // Month, as digits, with no leading zero for single-digit months\n                  case \"MM\":\n                    // Month, as digits, with leading zero for single-digit months\n                    ret.push(padZeros(getPart(value, 1) + 1, clength));\n                    break;\n                  case \"y\":\n                  // Year, as two digits, but with no leading zero for years less than 10\n                  case \"yy\":\n                  // Year, as two digits, with leading zero for years less than 10\n                  case \"yyyy\":\n                    // Year represented by four full digits\n                    part = this.getEraYear(value, calendar, this.getEra(value, eras), sortable);\n                    if (clength < 4) {\n                      part = part % 100;\n                    }\n                    ret.push(padZeros(part, clength));\n                    break;\n                  case \"h\":\n                  // Hours with no leading zero for single-digit hours, using 12-hour clock\n                  case \"hh\":\n                    // Hours with leading zero for single-digit hours, using 12-hour clock\n                    hour = value.getHours() % 12;\n                    if (hour === 0) hour = 12;\n                    ret.push(padZeros(hour, clength));\n                    break;\n                  case \"H\":\n                  // Hours with no leading zero for single-digit hours, using 24-hour clock\n                  case \"HH\":\n                    // Hours with leading zero for single-digit hours, using 24-hour clock\n                    ret.push(padZeros(value.getHours(), clength));\n                    break;\n                  case \"m\":\n                  // Minutes with no leading zero  for single-digit minutes\n                  case \"mm\":\n                    // Minutes with leading zero  for single-digit minutes\n                    ret.push(padZeros(value.getMinutes(), clength));\n                    break;\n                  case \"s\":\n                  // Seconds with no leading zero for single-digit seconds\n                  case \"ss\":\n                    // Seconds with leading zero for single-digit seconds\n                    ret.push(padZeros(value.getSeconds(), clength));\n                    break;\n                  case \"t\":\n                  // One character am/pm indicator (\"a\" or \"p\")\n                  case \"tt\":\n                    // Multicharacter am/pm indicator\n                    part = value.getHours() < 12 ? calendar.AM ? calendar.AM[0] : \" \" : calendar.PM ? calendar.PM[0] : \" \";\n                    ret.push(clength === 1 ? part.charAt(0) : part);\n                    break;\n                  case \"f\":\n                  // Deciseconds\n                  case \"ff\":\n                  // Centiseconds\n                  case \"fff\":\n                    // Milliseconds\n                    ret.push(padZeros(value.getMilliseconds(), 3).substr(0, clength));\n                    break;\n                  case \"z\":\n                  // Time zone offset, no leading zero\n                  case \"zz\":\n                    // Time zone offset with leading zero\n                    hour = value.getTimezoneOffset() / 60;\n                    ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), clength));\n                    break;\n                  case \"zzz\":\n                    // Time zone offset with leading zero\n                    hour = value.getTimezoneOffset() / 60;\n                    ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), 2) +\n                    // Hard coded \":\" separator, rather than using calendar.TimeSeparator\n                    // Repeated here for consistency, plus \":\" was already assumed in date parsing.\n                    \":\" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));\n                    break;\n                  case \"g\":\n                  case \"gg\":\n                    if (calendar.eras) {\n                      ret.push(calendar.eras[this.getEra(value, eras)].name);\n                    }\n                    break;\n                  case \"/\":\n                    ret.push(calendar[\"/\"]);\n                    break;\n                  default:\n                    throw \"Invalid date format pattern '\" + current + \"'.\";\n                    break;\n                }\n              }\n              var result = ret.join('');\n              if (!this.datescache) {\n                this.datescache = new Array();\n              }\n              this.datescache[lookupkey] = result;\n              return result;\n            }\n          });\n\n          // AJAX\n          $.jqx.data = {};\n          var ajaxLocParts,\n            ajaxLocation,\n            rhash = /#.*$/,\n            rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n            rlocalProtocol = /^(?:about|app|app\\-storage|.+\\-extension|file|res|widget):$/,\n            rnoContent = /^(?:GET|HEAD)$/,\n            rprotocol = /^\\/\\//,\n            rquery = /\\?/,\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n            rts = /([?&])_=[^&]*/,\n            rurl = /^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n            core_rspace = /\\s+/,\n            _load = $.fn.load,\n            prefilters = {},\n            transports = {},\n            allTypes = [\"*/\"] + [\"*\"];\n          try {\n            ajaxLocation = location.href;\n          } catch (e) {\n            ajaxLocation = document.createElement(\"a\");\n            ajaxLocation.href = \"\";\n            ajaxLocation = ajaxLocation.href;\n          }\n          ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n          function addToPrefiltersOrTransports(structure) {\n            return function (dataTypeExpression, func) {\n              if (typeof dataTypeExpression !== \"string\") {\n                func = dataTypeExpression;\n                dataTypeExpression = \"*\";\n              }\n              var dataType,\n                list,\n                placeBefore,\n                dataTypes = dataTypeExpression.toLowerCase().split(core_rspace),\n                i = 0,\n                length = dataTypes.length;\n              if ($.isFunction(func)) {\n                for (; i < length; i++) {\n                  dataType = dataTypes[i];\n                  placeBefore = /^\\+/.test(dataType);\n                  if (placeBefore) {\n                    dataType = dataType.substr(1) || \"*\";\n                  }\n                  list = structure[dataType] = structure[dataType] || [];\n                  list[placeBefore ? \"unshift\" : \"push\"](func);\n                }\n              }\n            };\n          }\n          function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType /* internal */, inspected /* internal */) {\n            dataType = dataType || options.dataTypes[0];\n            inspected = inspected || {};\n            inspected[dataType] = true;\n            var selection,\n              list = structure[dataType],\n              i = 0,\n              length = list ? list.length : 0,\n              executeOnly = structure === prefilters;\n            for (; i < length && (executeOnly || !selection); i++) {\n              selection = list[i](options, originalOptions, jqXHR);\n              if (typeof selection === \"string\") {\n                if (!executeOnly || inspected[selection]) {\n                  selection = undefined;\n                } else {\n                  options.dataTypes.unshift(selection);\n                  selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected);\n                }\n              }\n            }\n            if ((executeOnly || !selection) && !inspected[\"*\"]) {\n              selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, \"*\", inspected);\n            }\n            return selection;\n          }\n          function ajaxExtend(target, src) {\n            var key,\n              deep,\n              flatOptions = $.jqx.data.ajaxSettings.flatOptions || {};\n            for (key in src) {\n              if (src[key] !== undefined) {\n                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n              }\n            }\n            if (deep) {\n              $.extend(true, target, deep);\n            }\n          }\n          $.extend($.jqx.data, {\n            ajaxSetup: function (target, settings) {\n              if (settings) {\n                ajaxExtend(target, $.jqx.data.ajaxSettings);\n              } else {\n                settings = target;\n                target = $.jqx.data.ajaxSettings;\n              }\n              ajaxExtend(target, settings);\n              return target;\n            },\n            ajaxSettings: {\n              url: ajaxLocation,\n              isLocal: rlocalProtocol.test(ajaxLocParts[1]),\n              global: true,\n              type: \"GET\",\n              contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n              processData: true,\n              async: true,\n              accepts: {\n                xml: \"application/xml, text/xml\",\n                html: \"text/html\",\n                text: \"text/plain\",\n                json: \"application/json, text/javascript\",\n                \"*\": allTypes\n              },\n              contents: {\n                xml: /xml/,\n                html: /html/,\n                json: /json/\n              },\n              responseFields: {\n                xml: \"responseXML\",\n                text: \"responseText\"\n              },\n              converters: {\n                \"* text\": window.String,\n                \"text html\": true,\n                \"text json\": $.parseJSON,\n                \"text xml\": $.parseXML\n              },\n              flatOptions: {\n                context: true,\n                url: true\n              }\n            },\n            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n            ajaxTransport: addToPrefiltersOrTransports(transports),\n            ajax: function (url, options) {\n              if (typeof url === \"object\") {\n                options = url;\n                url = undefined;\n              }\n              options = options || {};\n              var ifModifiedKey,\n                responseHeadersString,\n                responseHeaders,\n                transport,\n                timeoutTimer,\n                parts,\n                fireGlobals,\n                i,\n                s = $.jqx.data.ajaxSetup({}, options),\n                callbackContext = s.context || s,\n                globalEventContext = callbackContext !== s && (callbackContext.nodeType || callbackContext instanceof $) ? $(callbackContext) : $.event,\n                deferred = $.Deferred(),\n                completeDeferred = $.Callbacks(\"once memory\"),\n                statusCode = s.statusCode || {},\n                requestHeaders = {},\n                requestHeadersNames = {},\n                state = 0,\n                strAbort = \"canceled\",\n                jqXHR = {\n                  readyState: 0,\n                  setRequestHeader: function (name, value) {\n                    if (!state) {\n                      var lname = name.toLowerCase();\n                      name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n                      requestHeaders[name] = value;\n                    }\n                    return this;\n                  },\n                  getAllResponseHeaders: function () {\n                    return state === 2 ? responseHeadersString : null;\n                  },\n                  getResponseHeader: function (key) {\n                    var match;\n                    if (state === 2) {\n                      if (!responseHeaders) {\n                        responseHeaders = {};\n                        while (match = rheaders.exec(responseHeadersString)) {\n                          responseHeaders[match[1].toLowerCase()] = match[2];\n                        }\n                      }\n                      match = responseHeaders[key.toLowerCase()];\n                    }\n                    return match === undefined ? null : match;\n                  },\n                  overrideMimeType: function (type) {\n                    if (!state) {\n                      s.mimeType = type;\n                    }\n                    return this;\n                  },\n                  abort: function (statusText) {\n                    statusText = statusText || strAbort;\n                    if (transport) {\n                      transport.abort(statusText);\n                    }\n                    done(0, statusText);\n                    return this;\n                  }\n                };\n              function done(status, nativeStatusText, responses, headers) {\n                var isSuccess,\n                  success,\n                  error,\n                  response,\n                  modified,\n                  statusText = nativeStatusText;\n                if (state === 2) {\n                  return;\n                }\n                state = 2;\n                if (timeoutTimer) {\n                  clearTimeout(timeoutTimer);\n                }\n                transport = undefined;\n                responseHeadersString = headers || \"\";\n                jqXHR.readyState = status > 0 ? 4 : 0;\n                if (responses) {\n                  response = ajaxHandleResponses(s, jqXHR, responses);\n                }\n                if (status >= 200 && status < 300 || status === 304) {\n                  if (s.ifModified) {\n                    modified = jqXHR.getResponseHeader(\"Last-Modified\");\n                    if (modified) {\n                      $.lastModified[ifModifiedKey] = modified;\n                    }\n                    modified = jqXHR.getResponseHeader(\"Etag\");\n                    if (modified) {\n                      $.etag[ifModifiedKey] = modified;\n                    }\n                  }\n                  if (status === 304) {\n                    statusText = \"notmodified\";\n                    isSuccess = true;\n                  } else {\n                    isSuccess = ajaxConvert(s, response);\n                    statusText = isSuccess.state;\n                    success = isSuccess.data;\n                    error = isSuccess.error;\n                    isSuccess = !error;\n                  }\n                } else {\n                  error = statusText;\n                  if (!statusText || status) {\n                    statusText = \"error\";\n                    if (status < 0) {\n                      status = 0;\n                    }\n                  }\n                }\n                jqXHR.status = status;\n                jqXHR.statusText = (nativeStatusText || statusText) + \"\";\n                if (isSuccess) {\n                  deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n                } else {\n                  deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n                }\n                jqXHR.statusCode(statusCode);\n                statusCode = undefined;\n                if (fireGlobals) {\n                  globalEventContext.trigger(\"ajax\" + (isSuccess ? \"Success\" : \"Error\"), [jqXHR, s, isSuccess ? success : error]);\n                }\n                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n                if (fireGlobals) {\n                  globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n                  if (! --$.active) {\n                    $.event.trigger(\"ajaxStop\");\n                  }\n                }\n              }\n              deferred.promise(jqXHR);\n              jqXHR.success = jqXHR.done;\n              jqXHR.error = jqXHR.fail;\n              jqXHR.complete = completeDeferred.add;\n              jqXHR.statusCode = function (map) {\n                if (map) {\n                  var tmp;\n                  if (state < 2) {\n                    for (tmp in map) {\n                      statusCode[tmp] = [statusCode[tmp], map[tmp]];\n                    }\n                  } else {\n                    tmp = map[jqXHR.status];\n                    jqXHR.always(tmp);\n                  }\n                }\n                return this;\n              };\n              s.url = ((url || s.url) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\n              s.dataTypes = $.trim(s.dataType || \"*\").toLowerCase().split(core_rspace);\n              if (s.crossDomain == null) {\n                parts = rurl.exec(s.url.toLowerCase());\n                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? 80 : 443))));\n              }\n              if (s.data && s.processData && typeof s.data !== \"string\") {\n                s.data = $.param(s.data, s.traditional);\n              }\n              inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n              if (state === 2) {\n                return jqXHR;\n              }\n              fireGlobals = s.global;\n              s.type = s.type.toUpperCase();\n              s.hasContent = !rnoContent.test(s.type);\n              if (fireGlobals && $.active++ === 0) {\n                $.event.trigger(\"ajaxStart\");\n              }\n              if (!s.hasContent) {\n                if (s.data) {\n                  s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.data;\n                  delete s.data;\n                }\n                ifModifiedKey = s.url;\n                if (s.cache === false) {\n                  var ts = new Date().getTime(),\n                    ret = s.url.replace(rts, \"$1_=\" + ts);\n                  s.url = ret + (ret === s.url ? (rquery.test(s.url) ? \"&\" : \"?\") + \"_=\" + ts : \"\");\n                }\n              }\n              if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n                jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n              }\n              if (s.ifModified) {\n                ifModifiedKey = ifModifiedKey || s.url;\n                if ($.lastModified[ifModifiedKey]) {\n                  jqXHR.setRequestHeader(\"If-Modified-Since\", $.lastModified[ifModifiedKey]);\n                }\n                if ($.etag[ifModifiedKey]) {\n                  jqXHR.setRequestHeader(\"If-None-Match\", $.etag[ifModifiedKey]);\n                }\n              }\n              jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n              for (i in s.headers) {\n                jqXHR.setRequestHeader(i, s.headers[i]);\n              }\n              if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n                return jqXHR.abort();\n              }\n              strAbort = \"abort\";\n              for (i in {\n                success: 1,\n                error: 1,\n                complete: 1\n              }) {\n                jqXHR[i](s[i]);\n              }\n              transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n              if (!transport) {\n                done(-1, \"No Transport\");\n              } else {\n                jqXHR.readyState = 1;\n                if (fireGlobals) {\n                  globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n                }\n                if (s.async && s.timeout > 0) {\n                  timeoutTimer = setTimeout(function () {\n                    jqXHR.abort(\"timeout\");\n                  }, s.timeout);\n                }\n                try {\n                  state = 1;\n                  transport.send(requestHeaders, done);\n                } catch (e) {\n                  if (state < 2) {\n                    done(-1, e);\n                  } else {\n                    throw e;\n                  }\n                }\n              }\n              return jqXHR;\n            },\n            active: 0,\n            lastModified: {},\n            etag: {}\n          });\n          function ajaxHandleResponses(s, jqXHR, responses) {\n            var ct,\n              type,\n              finalDataType,\n              firstDataType,\n              contents = s.contents,\n              dataTypes = s.dataTypes,\n              responseFields = s.responseFields;\n            for (type in responseFields) {\n              if (type in responses) {\n                jqXHR[responseFields[type]] = responses[type];\n              }\n            }\n            while (dataTypes[0] === \"*\") {\n              dataTypes.shift();\n              if (ct === undefined) {\n                ct = s.mimeType || jqXHR.getResponseHeader(\"content-type\");\n              }\n            }\n            if (ct) {\n              for (type in contents) {\n                if (contents[type] && contents[type].test(ct)) {\n                  dataTypes.unshift(type);\n                  break;\n                }\n              }\n            }\n            if (dataTypes[0] in responses) {\n              finalDataType = dataTypes[0];\n            } else {\n              for (type in responses) {\n                if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n                  finalDataType = type;\n                  break;\n                }\n                if (!firstDataType) {\n                  firstDataType = type;\n                }\n              }\n              finalDataType = finalDataType || firstDataType;\n            }\n            if (finalDataType) {\n              if (finalDataType !== dataTypes[0]) {\n                dataTypes.unshift(finalDataType);\n              }\n              return responses[finalDataType];\n            }\n          }\n          function ajaxConvert(s, response) {\n            var conv,\n              conv2,\n              current,\n              tmp,\n              dataTypes = s.dataTypes.slice(),\n              prev = dataTypes[0],\n              converters = {},\n              i = 0;\n            if (s.dataFilter) {\n              response = s.dataFilter(response, s.dataType);\n            }\n            if (dataTypes[1]) {\n              for (conv in s.converters) {\n                converters[conv.toLowerCase()] = s.converters[conv];\n              }\n            }\n            for (; current = dataTypes[++i];) {\n              if (current !== \"*\") {\n                if (prev !== \"*\" && prev !== current) {\n                  conv = converters[prev + \" \" + current] || converters[\"* \" + current];\n                  if (!conv) {\n                    for (conv2 in converters) {\n                      tmp = conv2.split(\" \");\n                      if (tmp[1] === current) {\n                        conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n                        if (conv) {\n                          if (conv === true) {\n                            conv = converters[conv2];\n                          } else if (converters[conv2] !== true) {\n                            current = tmp[0];\n                            dataTypes.splice(i--, 0, current);\n                          }\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  if (conv !== true) {\n                    if (conv && s[\"throws\"]) {\n                      response = conv(response);\n                    } else {\n                      try {\n                        response = conv(response);\n                      } catch (e) {\n                        return {\n                          state: \"parsererror\",\n                          error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                        };\n                      }\n                    }\n                  }\n                }\n                prev = current;\n              }\n            }\n            return {\n              state: \"success\",\n              data: response\n            };\n          }\n          var oldCallbacks = [],\n            rquestion = /\\?/,\n            rjsonp = /(=)\\?(?=&|$)|\\?\\?/,\n            nonce = new Date().getTime();\n          $.jqx.data.ajaxSetup({\n            jsonp: \"callback\",\n            jsonpCallback: function () {\n              var callback = oldCallbacks.pop() || $.expando + \"_\" + nonce++;\n              this[callback] = true;\n              return callback;\n            }\n          });\n          $.jqx.data.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n            var callbackName,\n              overwritten,\n              responseContainer,\n              data = s.data,\n              url = s.url,\n              hasCallback = s.jsonp !== false,\n              replaceInUrl = hasCallback && rjsonp.test(url),\n              replaceInData = hasCallback && !replaceInUrl && typeof data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(data);\n            if (s.dataTypes[0] === \"jsonp\" || replaceInUrl || replaceInData) {\n              callbackName = s.jsonpCallback = $.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n              overwritten = window[callbackName];\n              if (replaceInUrl) {\n                s.url = url.replace(rjsonp, \"$1\" + callbackName);\n              } else if (replaceInData) {\n                s.data = data.replace(rjsonp, \"$1\" + callbackName);\n              } else if (hasCallback) {\n                s.url += (rquestion.test(url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n              }\n              s.converters[\"script json\"] = function () {\n                if (!responseContainer) {\n                  $.error(callbackName + \" was not called\");\n                }\n                return responseContainer[0];\n              };\n              s.dataTypes[0] = \"json\";\n              window[callbackName] = function () {\n                responseContainer = arguments;\n              };\n              jqXHR.always(function () {\n                window[callbackName] = overwritten;\n                if (s[callbackName]) {\n                  s.jsonpCallback = originalSettings.jsonpCallback;\n                  oldCallbacks.push(callbackName);\n                }\n                if (responseContainer && $.isFunction(overwritten)) {\n                  overwritten(responseContainer[0]);\n                }\n                responseContainer = overwritten = undefined;\n              });\n              return \"script\";\n            }\n          });\n          $.jqx.data.ajaxSetup({\n            accepts: {\n              script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n            },\n            contents: {\n              script: /javascript|ecmascript/\n            },\n            converters: {\n              \"text script\": function (text) {\n                $.globalEval(text);\n                return text;\n              }\n            }\n          });\n          $.jqx.data.ajaxPrefilter(\"script\", function (s) {\n            if (s.cache === undefined) {\n              s.cache = false;\n            }\n            if (s.crossDomain) {\n              s.type = \"GET\";\n              s.global = false;\n            }\n          });\n          $.jqx.data.ajaxTransport(\"script\", function (s) {\n            if (s.crossDomain) {\n              var script,\n                head = document.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n              return {\n                send: function (_, callback) {\n                  script = document.createElement(\"script\");\n                  script.async = \"async\";\n                  if (s.scriptCharset) {\n                    script.charset = s.scriptCharset;\n                  }\n                  script.src = s.url;\n                  script.onload = script.onreadystatechange = function (_, isAbort) {\n                    if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n                      script.onload = script.onreadystatechange = null;\n                      if (head && script.parentNode) {\n                        head.removeChild(script);\n                      }\n                      script = undefined;\n                      if (!isAbort) {\n                        callback(200, \"success\");\n                      }\n                    }\n                  };\n                  head.insertBefore(script, head.firstChild);\n                },\n                abort: function () {\n                  if (script) {\n                    script.onload(0, 1);\n                  }\n                }\n              };\n            }\n          });\n          var xhrCallbacks,\n            xhrOnUnloadAbort = window.ActiveXObject ? function () {\n              for (var key in xhrCallbacks) {\n                xhrCallbacks[key](0, 1);\n              }\n            } : false,\n            xhrId = 0;\n          function createStandardXHR() {\n            try {\n              return new window.XMLHttpRequest();\n            } catch (e) {}\n          }\n          function createActiveXHR() {\n            try {\n              return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch (e) {}\n          }\n          $.jqx.data.ajaxSettings.xhr = window.ActiveXObject ? function () {\n            return !this.isLocal && createStandardXHR() || createActiveXHR();\n          } : createStandardXHR;\n          (function (xhr) {\n            $.extend($.support, {\n              ajax: !!xhr,\n              cors: !!xhr && \"withCredentials\" in xhr\n            });\n          })($.jqx.data.ajaxSettings.xhr());\n          if (!$.support) $.support = {\n            ajax: true\n          };\n          if ($.support.ajax) {\n            $.jqx.data.ajaxTransport(function (s) {\n              if (!s.crossDomain || $.support.cors) {\n                var callback;\n                return {\n                  send: function (headers, complete) {\n                    var handle,\n                      i,\n                      xhr = s.xhr();\n                    if (s.username) {\n                      xhr.open(s.type, s.url, s.async, s.username, s.password);\n                    } else {\n                      xhr.open(s.type, s.url, s.async);\n                    }\n                    if (s.xhrFields) {\n                      for (i in s.xhrFields) {\n                        xhr[i] = s.xhrFields[i];\n                      }\n                    }\n                    if (s.mimeType && xhr.overrideMimeType) {\n                      xhr.overrideMimeType(s.mimeType);\n                    }\n                    if (!s.crossDomain && !headers[\"X-Requested-With\"]) {\n                      headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    }\n                    try {\n                      for (i in headers) {\n                        xhr.setRequestHeader(i, headers[i]);\n                      }\n                    } catch (_) {}\n                    xhr.send(s.hasContent && s.data || null);\n                    callback = function (_, isAbort) {\n                      var status, statusText, responseHeaders, responses, xml;\n                      try {\n                        if (callback && (isAbort || xhr.readyState === 4)) {\n                          callback = undefined;\n                          if (handle) {\n                            xhr.onreadystatechange = function () {};\n                            if (xhrOnUnloadAbort) {\n                              delete xhrCallbacks[handle];\n                            }\n                          }\n                          if (isAbort) {\n                            if (xhr.readyState !== 4) {\n                              xhr.abort();\n                            }\n                          } else {\n                            status = xhr.status;\n                            responseHeaders = xhr.getAllResponseHeaders();\n                            responses = {};\n                            xml = xhr.responseXML;\n                            if (xml && xml.documentElement /* #4958 */) {\n                              responses.xml = xml;\n                            }\n                            try {\n                              responses.text = xhr.responseText;\n                            } catch (e) {}\n                            try {\n                              statusText = xhr.statusText;\n                            } catch (e) {\n                              statusText = \"\";\n                            }\n                            if (!status && s.isLocal && !s.crossDomain) {\n                              status = responses.text ? 200 : 404;\n                            } else if (status === 1223) {\n                              status = 204;\n                            }\n                          }\n                        }\n                      } catch (firefoxAccessException) {\n                        if (!isAbort) {\n                          complete(-1, firefoxAccessException);\n                        }\n                      }\n                      if (responses) {\n                        complete(status, statusText, responses, responseHeaders);\n                      }\n                    };\n                    if (!s.async) {\n                      callback();\n                    } else if (xhr.readyState === 4) {\n                      setTimeout(callback, 0);\n                    } else {\n                      handle = ++xhrId;\n                      if (xhrOnUnloadAbort) {\n                        if (!xhrCallbacks) {\n                          xhrCallbacks = {};\n                          $(window).unload(xhrOnUnloadAbort);\n                        }\n                        xhrCallbacks[handle] = callback;\n                      }\n                      xhr.onreadystatechange = callback;\n                    }\n                  },\n                  abort: function () {\n                    if (callback) {\n                      callback(0, 1);\n                    }\n                  }\n                };\n              }\n            });\n          }\n          $.jqx.filter = function () {\n            this.operator = 'and';\n            var and_operator = 0;\n            var or_operator = 1;\n            var stringcomparisonoperators = ['EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE', 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE', 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'];\n            var numericcomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];\n            var datecomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];\n            var booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n            var filters = new Array();\n            var comparisonoperators = new Array();\n            this.evaluate = function (value) {\n              var result = true;\n              for (var i = 0; i < filters.length; i++) {\n                var currentResult = filters[i].evaluate(value);\n                if (i == 0) {\n                  result = currentResult;\n                } else {\n                  if (comparisonoperators[i] == or_operator || comparisonoperators[i] == \"or\") result = result || currentResult;else result = result && currentResult;\n                }\n              }\n              return result;\n            };\n            this.getfilterscount = function () {\n              return filters.length;\n            };\n            this.setoperatorsbyfiltertype = function (type, array) {\n              switch (type) {\n                case \"numericfilter\":\n                  numericcomparisonoperators = array;\n                  break;\n                case \"stringfilter\":\n                  stringcomparisonoperators = array;\n                  break;\n                case \"datefilter\":\n                  datecomparisonoperators = array;\n                  break;\n                case \"booleanfilter\":\n                  booleancomparisonoperators = array;\n                  break;\n              }\n            };\n            this.getoperatorsbyfiltertype = function (type) {\n              var array = new Array();\n              switch (type) {\n                case \"numericfilter\":\n                  array = numericcomparisonoperators.slice(0);\n                  break;\n                case \"stringfilter\":\n                  array = stringcomparisonoperators.slice(0);\n                  break;\n                case \"datefilter\":\n                  array = datecomparisonoperators.slice(0);\n                  break;\n                case \"booleanfilter\":\n                  array = booleancomparisonoperators.slice(0);\n                  break;\n              }\n              return array;\n            };\n            var generatefilterkey = function () {\n              var S4 = function () {\n                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n              };\n              return S4() + \"-\" + S4() + \"-\" + S4();\n            };\n            this.createfilter = function (filtertype, filtervalue, filtercomparisonoperator, customfilter, formatstring, localization) {\n              if (filtertype == null || filtertype == undefined) return null;\n              switch (filtertype) {\n                case 'numericfilter':\n                  return new numericfilter(filtervalue, filtercomparisonoperator.toUpperCase());\n                case 'stringfilter':\n                  return new stringfilter(filtervalue, filtercomparisonoperator.toUpperCase());\n                case 'datefilter':\n                  return new datefilter(filtervalue, filtercomparisonoperator.toUpperCase(), formatstring, localization);\n                case 'booleanfilter':\n                  return new booleanfilter(filtervalue, filtercomparisonoperator.toUpperCase());\n                case 'custom':\n                  return new filter(filtervalue, filtercomparisonoperator.toUpperCase(), customfilter);\n              }\n              throw new Error(\"jqxGrid: There is no such filter type. The available filter types are: 'numericfilter', 'stringfilter', 'datefilter' and 'booleanfilter'\");\n              return null;\n            };\n            this.getfilters = function () {\n              var filtersarray = new Array();\n              for (var i = 0; i < filters.length; i++) {\n                var filter = {\n                  value: filters[i].filtervalue,\n                  condition: filters[i].comparisonoperator,\n                  operator: comparisonoperators[i],\n                  type: filters[i].type\n                };\n                if (filters[i].data) {\n                  filter.id = filters[i].data;\n                }\n                filtersarray[i] = filter;\n              }\n              return filtersarray;\n            };\n            this.addfilter = function (comparisonoperator, filter) {\n              filters[filters.length] = filter;\n              filter.key = generatefilterkey();\n              comparisonoperators[comparisonoperators.length] = comparisonoperator;\n            };\n            this.removefilter = function (filter) {\n              for (var i = 0; i < filters.length; i++) {\n                if (filters[i].key == filter.key) {\n                  filters.splice(i, 1);\n                  comparisonoperators.splice(i, 1);\n                  break;\n                }\n              }\n            };\n            this.getoperatorat = function (index) {\n              if (index == undefined || index == null) return null;\n              if (index < 0 || index > filters.length) return null;\n              return comparisonoperators[index];\n            };\n            this.setoperatorat = function (index, comparisonoperator) {\n              if (index == undefined || index == null) return null;\n              if (index < 0 || index > filters.length) return null;\n              comparisonoperators[comparisonoperator] = comparisonoperator;\n            };\n            this.getfilterat = function (index) {\n              if (index == undefined || index == null) return null;\n              if (index < 0 || index > filters.length) return null;\n              return filters[index];\n            };\n            this.setfilterat = function (index, filter) {\n              if (index == undefined || index == null) return null;\n              if (index < 0 || index > filters.length) return null;\n              filter.key = generatefilterkey();\n              filters[index] = filter;\n            };\n            this.clear = function () {\n              filters = new Array();\n              comparisonoperators = new Array();\n            };\n            var stringfilter = function (filtervalue, comparisonoperator) {\n              this.filtervalue = filtervalue;\n              this.comparisonoperator = comparisonoperator;\n              this.type = 'stringfilter';\n              this.evaluate = function (value) {\n                var filtervalue = this.filtervalue;\n                var comparisonoperator = this.comparisonoperator;\n                if (value == null || value == undefined || value == \"\") {\n                  if (comparisonoperator == 'NULL') return true;\n                  if (comparisonoperator == 'NOT_NULL') return false;\n                  if (comparisonoperator == \"EQUAL\" && value == filtervalue) {\n                    return true;\n                  }\n                  if (comparisonoperator == \"NOT_EQUAL\" && value != filtervalue) {\n                    return true;\n                  }\n                  if (comparisonoperator != 'EMPTY') return false;else if (value == \"\") return true;\n                }\n                var val = \"\";\n                try {\n                  val = value.toString();\n                } catch (error) {\n                  return true;\n                }\n                var compare = function (val, filtervalue) {\n                  switch (comparisonoperator) {\n                    case 'EQUAL':\n                      return $.jqx.string.equalsIgnoreCase(val, filtervalue);\n                    case 'EQUAL_CASE_SENSITIVE':\n                      return $.jqx.string.equals(val, filtervalue);\n                    case 'NOT_EQUAL':\n                      return !$.jqx.string.equalsIgnoreCase(val, filtervalue);\n                    case 'NOT_EQUAL_CASE_SENSITIVE':\n                      return !$.jqx.string.equals(val, filtervalue);\n                    case 'CONTAINS':\n                      return $.jqx.string.containsIgnoreCase(val, filtervalue);\n                    case 'CONTAINS_CASE_SENSITIVE':\n                      return $.jqx.string.contains(val, filtervalue);\n                    case 'DOES_NOT_CONTAIN':\n                      return !$.jqx.string.containsIgnoreCase(val, filtervalue);\n                    case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':\n                      return !$.jqx.string.contains(val, filtervalue);\n                    case 'EMPTY':\n                      return val == '';\n                    case 'NOT_EMPTY':\n                      return val != '';\n                    case 'NOT_NULL':\n                      return val != null;\n                    case 'STARTS_WITH':\n                      return $.jqx.string.startsWithIgnoreCase(val, filtervalue);\n                    case 'ENDS_WITH':\n                      return $.jqx.string.endsWithIgnoreCase(val, filtervalue);\n                    case 'ENDS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.endsWith(val, filtervalue);\n                    case 'STARTS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.startsWith(val, filtervalue);\n                    default:\n                      return false;\n                  }\n                };\n                var filterValues = new Array();\n                if (filtervalue && filtervalue.indexO && comparisonoperator !== 'NOT_EQUAL') {\n                  if (filtervalue.indexOf(\"|\") >= 0 || filtervalue.indexOf(\" AND \") >= 0 || filtervalue.indexOf(\" OR \") >= 0 || filtervalue.indexOf(\" and \") >= 0 || filtervalue.indexOf(\" or \") >= 0) {\n                    var result = compare(val, filtervalue);\n                    if (result) {\n                      return result;\n                    }\n                    var andFilters = filtervalue.indexOf(\" AND \") >= 0 ? filtervalue.split(\" AND \") : new Array();\n                    var orFilters = filtervalue.indexOf(\" OR \") >= 0 ? filtervalue.split(\" OR \") : new Array();\n                    var andLowerCaseFilters = filtervalue.indexOf(\" and \") >= 0 ? filtervalue.split(\" and \") : new Array();\n                    var orLowerCaseFilters = filtervalue.indexOf(\" or \") >= 0 ? filtervalue.split(\" or \") : new Array();\n                    var delimiterFilters = filtervalue.indexOf(\"|\") >= 0 ? filtervalue.split(\"|\") : new Array();\n                    if (delimiterFilters.length > 0) {\n                      for (var i = 0; i < delimiterFilters.length; i++) {\n                        delimiterFilters[i] = $.trim(delimiterFilters[i]);\n                      }\n                    }\n                    var commaFilters = filtervalue.indexOf(\" \") >= 0 ? filtervalue.split(\" \") : new Array();\n                    if (commaFilters.length > 0) {\n                      for (var i = 0; i < commaFilters.length; i++) {\n                        commaFilters[i] = $.trim(commaFilters[i]);\n                      }\n                    }\n                    andFilters = andFilters.concat(commaFilters);\n                    andFilters = andFilters.concat(andLowerCaseFilters);\n                    orFilters = orFilters.concat(delimiterFilters);\n                    orFilters = orFilters.concat(orLowerCaseFilters);\n                    if (andFilters.length > 0) {\n                      for (var i = 0; i < andFilters.length; i++) {\n                        if (!andFilters[i].indexOf(\" OR \") >= 0) {\n                          filterValues.push(andFilters[i]);\n                        }\n                      }\n                    }\n                    if (orFilters.length > 0) {\n                      for (var i = 0; i < orFilters.length; i++) {\n                        if (!orFilters[i].indexOf(\" AND \") >= 0) {\n                          filterValues.push(orFilters[i]);\n                        }\n                      }\n                    }\n                    var filterresult = undefined;\n                    for (var j = 0; j < filterValues.length; j++) {\n                      var value = filterValues[j];\n                      var result = compare(val, value);\n                      var filteroperator = j < andFilters.length ? \"and\" : \"or\";\n                      if (filterresult == undefined) {\n                        filterresult = result;\n                      } else {\n                        if (filteroperator == 'or') {\n                          filterresult = filterresult || result;\n                        } else {\n                          filterresult = filterresult && result;\n                        }\n                      }\n                    }\n                    return filterresult;\n                  }\n                }\n                return compare(val, filtervalue);\n              };\n            };\n            var booleanfilter = function (filtervalue, comparisonoperator) {\n              this.filtervalue = filtervalue;\n              this.comparisonoperator = comparisonoperator;\n              this.type = 'booleanfilter';\n              this.evaluate = function (value) {\n                var filtervalue = this.filtervalue;\n                var comparisonoperator = this.comparisonoperator;\n                if (value == null || value == undefined) {\n                  if (comparisonoperator == 'NULL') return true;\n                  return false;\n                }\n                var val = value;\n                switch (comparisonoperator) {\n                  case 'EQUAL':\n                    return val == filtervalue || val.toString() == filtervalue.toString();\n                  case 'NOT_EQUAL':\n                    return val != filtervalue && val.toString() != filtervalue.toString();\n                  default:\n                    return false;\n                }\n              };\n            };\n            var numericfilter = function (filtervalue, comparisonoperator) {\n              this.filtervalue = filtervalue;\n              this.comparisonoperator = comparisonoperator;\n              this.type = 'numericfilter';\n              this.evaluate = function (value) {\n                var filtervalue = this.filtervalue;\n                var comparisonoperator = this.comparisonoperator;\n                if (value === null || value === undefined || value === \"\") {\n                  if (comparisonoperator == 'NOT_NULL') return false;\n                  if (comparisonoperator == 'NULL') return true;else {\n                    switch (comparisonoperator) {\n                      case 'EQUAL':\n                        return value == filtervalue;\n                      case 'NOT_EQUAL':\n                        return value != filtervalue;\n                    }\n                    return false;\n                  }\n                } else {\n                  if (comparisonoperator == 'NULL') return false;\n                  if (comparisonoperator == 'NOT_NULL') return true;\n                }\n                var val = value;\n                try {\n                  val = parseFloat(val);\n                } catch (error) {\n                  if (value.toString() != \"\") return false;\n                }\n                var compare = function (val, filtervalue) {\n                  switch (comparisonoperator) {\n                    case 'EQUAL':\n                      return val == filtervalue;\n                    case 'NOT_EQUAL':\n                      return val != filtervalue;\n                    case 'GREATER_THAN':\n                      return val > filtervalue;\n                    case 'GREATER_THAN_OR_EQUAL':\n                      return val >= filtervalue;\n                    case 'LESS_THAN':\n                      return val < filtervalue;\n                    case 'LESS_THAN_OR_EQUAL':\n                      return val <= filtervalue;\n                    case 'STARTS_WITH':\n                      return $.jqx.string.startsWithIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'ENDS_WITH':\n                      return $.jqx.string.endsWithIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'ENDS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.endsWith(val.toString(), filtervalue.toString());\n                    case 'STARTS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.startsWith(val.toString(), filtervalue.toString());\n                    case 'CONTAINS':\n                      return $.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'CONTAINS_CASE_SENSITIVE':\n                      return $.jqx.string.contains(val.toString(), filtervalue.toString());\n                    case 'DOES_NOT_CONTAIN':\n                      return !$.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':\n                      return !$.jqx.string.contains(val.toString(), filtervalue.toString());\n                    default:\n                      return true;\n                  }\n                };\n                var filterValues = new Array();\n                if (filtervalue && filtervalue.indexOf) filtervalue = filtervalue.replace('$', '');\n                if (filtervalue && filtervalue.indexOf && (filtervalue.indexOf(\"|\") >= 0 || filtervalue.indexOf(\" AND \") >= 0 || filtervalue.indexOf(\" OR \") >= 0 || filtervalue.indexOf(\" and \") >= 0 || filtervalue.indexOf(\" or \") >= 0)) {\n                  var result = compare(val, filtervalue);\n                  if (result) {\n                    return result;\n                  }\n                  filtervalue = filtervalue.toString();\n                  var andFilters = filtervalue.indexOf(\" AND \") >= 0 ? filtervalue.split(\" AND \") : new Array();\n                  var orFilters = filtervalue.indexOf(\" OR \") >= 0 ? filtervalue.split(\" OR \") : new Array();\n                  var andLowerCaseFilters = filtervalue.indexOf(\" and \") >= 0 ? filtervalue.split(\" and \") : new Array();\n                  var orLowerCaseFilters = filtervalue.indexOf(\" or \") >= 0 ? filtervalue.split(\" or \") : new Array();\n                  andFilters = andFilters.concat(andLowerCaseFilters);\n                  orFilters = orFilters.concat(orLowerCaseFilters);\n                  var delimiterFilters = filtervalue.indexOf(\"|\") >= 0 ? filtervalue.split(\"|\") : new Array();\n                  if (delimiterFilters.length > 0) {\n                    for (var i = 0; i < delimiterFilters.length; i++) {\n                      delimiterFilters[i] = $.trim(delimiterFilters[i]);\n                    }\n                  }\n                  orFilters = orFilters.concat(delimiterFilters);\n                  if (andFilters.length > 0) {\n                    for (var i = 0; i < andFilters.length; i++) {\n                      if (!andFilters[i].indexOf(\" OR \") >= 0) {\n                        filterValues.push(andFilters[i]);\n                      }\n                    }\n                  }\n                  if (orFilters.length > 0) {\n                    for (var i = 0; i < orFilters.length; i++) {\n                      if (!orFilters[i].indexOf(\" AND \") >= 0) {\n                        filterValues.push(orFilters[i]);\n                      }\n                    }\n                  }\n                  var filterresult = undefined;\n                  for (var j = 0; j < filterValues.length; j++) {\n                    var value = filterValues[j];\n                    if (value && value.indexOf && value.indexOf(\"..\") >= 0) {\n                      var values = value.toString().split(\"..\");\n                      if (values.length == 2) {\n                        result = val >= values[0] && val <= values[1];\n                      }\n                    } else {\n                      var result = compare(val, value);\n                    }\n                    var filteroperator = j < andFilters.length ? \"and\" : \"or\";\n                    if (filterresult == undefined) {\n                      filterresult = result;\n                    } else {\n                      if (filteroperator == 'or') {\n                        filterresult = filterresult || result;\n                      } else {\n                        filterresult = filterresult && result;\n                      }\n                    }\n                  }\n                  return filterresult;\n                }\n                if (filtervalue && filtervalue.indexOf && filtervalue.indexOf(\"..\") >= 0) {\n                  filterValues = filtervalue.toString().split(\"..\");\n                  if (filterValues.length == 2) {\n                    return val >= filterValues[0] && val <= filterValues[1];\n                  }\n                }\n                return compare(val, filtervalue);\n              };\n            };\n            var datefilter = function (filtervalue, comparisonoperator, formatstring, localization) {\n              this.filtervalue = filtervalue;\n              this.type = 'datefilter';\n              var that = this;\n              if (formatstring != undefined && localization != undefined) {\n                var parsedDate = $.jqx.dataFormat.parsedate(filtervalue, formatstring, localization);\n                if (parsedDate != null) {\n                  this.filterdate = parsedDate;\n                } else {\n                  var result = $.jqx.dataFormat.tryparsedate(filtervalue, localization);\n                  if (result != null) this.filterdate = result;\n                }\n              } else {\n                var tmpvalue = new Date(filtervalue);\n                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == \"Invalid Date\") {\n                  this.filterdate = $.jqx.dataFormat.tryparsedate(filtervalue);\n                } else {\n                  this.filterdate = tmpvalue;\n                }\n              }\n              if (!this.filterdate) {\n                var tmpvalue = new Date(filtervalue);\n                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == \"Invalid Date\") {\n                  this.filterdate = $.jqx.dataFormat.tryparsedate(filtervalue);\n                } else {\n                  this.filterdate = tmpvalue;\n                }\n              }\n              this.comparisonoperator = comparisonoperator;\n              this.evaluate = function (value) {\n                var filtervalue = this.filtervalue;\n                var comparisonoperator = this.comparisonoperator;\n                if (value == null || value == undefined || value == \"\") {\n                  if (comparisonoperator == 'NOT_NULL') return false;\n                  if (comparisonoperator == 'NULL') return true;else {\n                    switch (comparisonoperator) {\n                      case 'EQUAL':\n                        return value == filtervalue;\n                      case 'NOT_EQUAL':\n                        return value != filtervalue;\n                    }\n                    return false;\n                  }\n                } else {\n                  if (comparisonoperator == 'NULL') return false;\n                  if (comparisonoperator == 'NOT_NULL') return true;\n                }\n                var val = new Date();\n                val.setFullYear(1900, 0, 1);\n                val.setHours(12, 0, 0, 0);\n                try {\n                  var tmpvalue = new Date(value);\n                  if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == \"Invalid Date\") {\n                    value = $.jqx.dataFormat.tryparsedate(value);\n                  } else {\n                    value = tmpvalue;\n                  }\n                  val = value;\n                  var compareTimePart = false;\n                  if (formatstring != undefined && localization != undefined) {\n                    if (formatstring.indexOf('t') >= 0 || formatstring.indexOf('T') >= 0 || formatstring.indexOf(':') >= 0 || formatstring.indexOf('f') >= 0) {\n                      compareTimePart = true;\n                      if (filtervalue && filtervalue.toString().indexOf(':') == -1) {\n                        var result = $.jqx.dataFormat.tryparsedate(filtervalue.toString() + \":00\", localization);\n                        if (result != null) that.filterdate = result;\n                      }\n                    }\n                  }\n                  if (formatstring != undefined) {\n                    if (formatstring.indexOf('hh') >= 0 || formatstring.indexOf('t') >= 0) {\n                      compareTimePart = true;\n                    }\n                  }\n                  if (!compareTimePart) {\n                    val.setHours(0);\n                    val.setMinutes(0);\n                    val.setSeconds(0);\n                  }\n                } catch (error) {\n                  if (value && value.toString() != \"\") return false;\n                  return false;\n                }\n                if (that.filterdate != null) {\n                  filtervalue = that.filterdate;\n                } else {\n                  if (filtervalue && filtervalue.indexOf) {\n                    if (filtervalue.indexOf(':') != -1 || !isNaN(parseInt(filtervalue))) {\n                      var tmpFilter = new Date(val);\n                      tmpFilter.setHours(12, 0, 0, 0);\n                      var timeStrings = filtervalue.split(':');\n                      for (var i = 0; i < timeStrings.length; i++) {\n                        if (i == 0) {\n                          tmpFilter.setHours(timeStrings[i]);\n                        }\n                        if (i == 1) {\n                          tmpFilter.setMinutes(timeStrings[i]);\n                        }\n                        if (i == 2) {\n                          tmpFilter.setSeconds(timeStrings[i]);\n                        }\n                      }\n                      filtervalue = tmpFilter;\n                    }\n                  }\n                }\n                if (compareTimePart) {\n                  if (filtervalue && filtervalue.setFullYear) {\n                    if (val && val.getFullYear) {\n                      if (formatstring.indexOf('d') == -1 && formatstring.indexOf('M') == -1 && formatstring.indexOf('y') == -1) {\n                        filtervalue.setFullYear(val.getFullYear(), val.getMonth(), val.getDate());\n                      }\n                    }\n                  }\n                }\n                var compare = function (val, filtervalue) {\n                  if (val == null) val = \"\";\n                  switch (comparisonoperator) {\n                    case 'EQUAL':\n                      return val.toString() == filtervalue.toString();\n                    case 'NOT_EQUAL':\n                      return val.toString() != filtervalue.toString();\n                    case 'GREATER_THAN':\n                      return val > filtervalue;\n                    case 'GREATER_THAN_OR_EQUAL':\n                      return val >= filtervalue;\n                    case 'LESS_THAN':\n                      return val < filtervalue;\n                    case 'LESS_THAN_OR_EQUAL':\n                      return val <= filtervalue;\n                    case 'STARTS_WITH':\n                      return $.jqx.string.startsWithIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'ENDS_WITH':\n                      return $.jqx.string.endsWithIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'ENDS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.endsWith(val.toString(), filtervalue.toString());\n                    case 'STARTS_WITH_CASE_SENSITIVE':\n                      return $.jqx.string.startsWith(val.toString(), filtervalue.toString());\n                    case 'CONTAINS':\n                      return $.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'CONTAINS_CASE_SENSITIVE':\n                      return $.jqx.string.contains(val.toString(), filtervalue.toString());\n                    case 'DOES_NOT_CONTAIN':\n                      return !$.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());\n                    case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':\n                      return !$.jqx.string.contains(val.toString(), filtervalue.toString());\n                    default:\n                      return true;\n                  }\n                };\n                var filterValues = new Array();\n                if (filtervalue && filtervalue.indexOf) if (filtervalue.indexOf(\"|\") >= 0 || filtervalue.indexOf(\" AND \") >= 0 || filtervalue.indexOf(\" OR \") >= 0 || filtervalue.indexOf(\" and \") >= 0 || filtervalue.indexOf(\" or \") >= 0) {\n                  var result = compare(val, filtervalue);\n                  if (result) {\n                    return result;\n                  }\n                  var andFilters = filtervalue.indexOf(\" AND \") >= 0 ? filtervalue.split(\" AND \") : new Array();\n                  var orFilters = filtervalue.indexOf(\" OR \") >= 0 ? filtervalue.split(\" OR \") : new Array();\n                  var andLowerCaseFilters = filtervalue.indexOf(\" and \") >= 0 ? filtervalue.split(\" and \") : new Array();\n                  var orLowerCaseFilters = filtervalue.indexOf(\" or \") >= 0 ? filtervalue.split(\" or \") : new Array();\n                  andFilters = andFilters.concat(andLowerCaseFilters);\n                  orFilters = orFilters.concat(orLowerCaseFilters);\n                  var delimiterFilters = filtervalue.indexOf(\"|\") >= 0 ? filtervalue.split(\"|\") : new Array();\n                  if (delimiterFilters.length > 0) {\n                    for (var i = 0; i < delimiterFilters.length; i++) {\n                      delimiterFilters[i] = $.trim(delimiterFilters[i]);\n                    }\n                  }\n                  orFilters = orFilters.concat(delimiterFilters);\n                  if (andFilters.length > 0) {\n                    for (var i = 0; i < andFilters.length; i++) {\n                      if (!andFilters[i].indexOf(\" OR \") >= 0) {\n                        filterValues.push(andFilters[i]);\n                      }\n                    }\n                  }\n                  if (orFilters.length > 0) {\n                    for (var i = 0; i < orFilters.length; i++) {\n                      if (!orFilters[i].indexOf(\" AND \") >= 0) {\n                        filterValues.push(orFilters[i]);\n                      }\n                    }\n                  }\n                  var filterresult = undefined;\n                  for (var j = 0; j < filterValues.length; j++) {\n                    var value = filterValues[j];\n                    if (value && value.indexOf && value.indexOf(\"..\") >= 0) {\n                      var values = value.toString().split(\"..\");\n                      if (values.length == 2) {\n                        result = val >= values[0] && val <= values[1];\n                      }\n                    } else {\n                      var result = compare(val, value);\n                    }\n                    var filteroperator = j < andFilters.length ? \"and\" : \"or\";\n                    if (filterresult == undefined) {\n                      filterresult = result;\n                    } else {\n                      if (filteroperator == 'or') {\n                        filterresult = filterresult || result;\n                      } else {\n                        filterresult = filterresult && result;\n                      }\n                    }\n                  }\n                  return filterresult;\n                }\n                if (filtervalue && filtervalue.indexOf && filtervalue.indexOf(\"..\") >= 0) {\n                  filterValues = filtervalue.toString().split(\"..\");\n                  if (filterValues.length == 2) {\n                    return val >= filterValues[0] && val <= filterValues[1];\n                  }\n                }\n                return compare(val, filtervalue);\n              };\n            };\n            var filter = function (filtervalue, comparisonoperator, customfilter) {\n              this.filtervalue = filtervalue;\n              this.comparisonoperator = comparisonoperator;\n              this.evaluate = function (value, comparisonoperator) {\n                return customfilter(this.filtervalue, value, this.comparisonoperator);\n              };\n            };\n          };\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/137: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          $.jqx.timeSpan = function () {\n            var settings = {\n              ticksPerMillisecond: 10000,\n              millisecondsPerTick: 1 / 10000,\n              ticksPerSecond: 1000 * 10000,\n              secondsPerTick: 1 / (1000 * 10000),\n              ticksPerMinute: 1000 * 10000 * 60,\n              minutesPerTick: 1 / (1000 * 10000 * 60),\n              ticksPerHour: 1000 * 10000 * 3600,\n              hoursPerTick: 1 / (1000 * 10000 * 3600),\n              ticksPerDay: 1000 * 10000 * 3600 * 24,\n              daysPerTick: 1 / (1000 * 10000 * 3600 * 24),\n              millisPerSecond: 1000,\n              millisPerMinute: 1000 * 60,\n              millisPerHour: 1000 * 60 * 60,\n              millisPerDay: 1000 * 60 * 60 * 24,\n              _ticks: 0\n            };\n            $.extend(true, this, settings);\n            var that = this;\n            that.ticks = function () {\n              return that._ticks;\n            };\n            that.days = function () {\n              return parseInt(that._ticks / that.ticksPerDay);\n            };\n            that.timeToMS = function (hour, minute, second, milliseconds) {\n              var totalSeconds = hour * 3600 + minute * 60 + second + milliseconds / 1000;\n              return parseInt(totalSeconds * that.ticksPerSecond);\n            };\n            that.hours = function () {\n              return parseInt(that._ticks / that.ticksPerHour) % 24;\n            };\n            that.milliseconds = function () {\n              return parseInt(that._ticks / that.ticksPerMillisecond) % 1000;\n            };\n            that.minutes = function () {\n              return parseInt(that._ticks / that.ticksPerMinute) % 60;\n            };\n            that.seconds = function () {\n              return parseInt(that._ticks / that.ticksPerSecond) % 60;\n            };\n            that.totalDays = function () {\n              return parseInt(that._ticks * that.daysPerTick);\n            };\n            that.totalHours = function () {\n              return parseInt(that._ticks * that.hoursPerTick);\n            };\n            that.totalMilliseconds = function () {\n              var temp = that._ticks * that.millisecondsPerTick;\n              return parseInt(temp);\n            };\n            that.totalMinutes = function () {\n              return parseInt(that._ticks * that.minutesPerTick);\n            };\n            that.totalSeconds = function () {\n              return parseInt(that._ticks * that.secondsPerTick);\n            };\n            if (arguments.length === 1) {\n              that._ticks = arguments[0];\n            } else if (arguments.length === 3) {\n              that._ticks = that.timeToMS(arguments[0], arguments[1], arguments[2]);\n            } else if (arguments.length === 4) {\n              var days = arguments[0];\n              var hours = arguments[1];\n              var minutes = arguments[2];\n              var seconds = arguments[3];\n              var milliseconds = 0;\n              var totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n              that._ticks = totalMilliSeconds * that.ticksPerMillisecond;\n            } else if (arguments.length === 5) {\n              var days = arguments[0];\n              var hours = arguments[1];\n              var minutes = arguments[2];\n              var seconds = arguments[3];\n              var milliseconds = arguments[4];\n              var totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n              that._ticks = totalMilliSeconds * that.ticksPerMillisecond;\n            }\n            that.add = function (ts) {\n              var result = that._ticks + ts._ticks;\n              var timeSpan = new $.jqx.timeSpan(result);\n              return timeSpan;\n            };\n            that.substract = function (ts) {\n              var result = that._ticks - ts._ticks;\n              return new $.jqx.timeSpan(result);\n            };\n            that.duration = function () {\n              if (that._ticks >= 0) {\n                return new $.jqx.timeSpan(that._ticks);\n              } else {\n                return new $.jqx.timeSpan(-that._ticks);\n              }\n            };\n            that.equals = function (ts) {\n              return that._ticks == ts._ticks;\n            };\n            that.valueOf = function () {\n              return that._ticks;\n            };\n            that.compare = function (t1, t2) {\n              if (t1._ticks > t2._ticks) return 1;\n              if (t1._ticks < t2._ticks) return -1;\n              return 0;\n            };\n            that.interval = function (value, scale) {\n              var tmp = value * scale;\n              var millis = tmp + (value >= 0 ? 0.5 : -0.5);\n              return new $.jqx.timeSpan(millis * that.ticksPerMillisecond);\n            };\n            that.fromDays = function (value) {\n              return that.interval(value, that.millisPerDay);\n            };\n            that.fromHours = function (value) {\n              return that.interval(value, that.millisPerHour);\n            };\n            that.fromMilliseconds = function (value) {\n              return that.interval(value, 1);\n            };\n            that.fromMinutes = function (value) {\n              return that.interval(value, that.millisPerMinute);\n            };\n            that.fromSeconds = function (value) {\n              return that.interval(value, that.millisPerSecond);\n            };\n            that.fromTicks = function (value) {\n              return new $.jqx.timeSpan(value);\n            };\n            return that;\n          };\n          var __timeZones = [{\n            id: 'Local',\n            offset: 0,\n            offsetHours: 0,\n            displayName: \"\",\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Dateline Standard Time',\n            offset: -720,\n            offsetHours: -12,\n            displayName: '(UTC-12:00) International Date Line West',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'UTC-11',\n            offset: -660,\n            offsetHours: -11,\n            displayName: '(UTC-11:00) Coordinated Universal Time-11',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Hawaiteratoran Standard Time',\n            offset: -600,\n            offsetHours: -10,\n            displayName: '(UTC-10:00) Hawaiterator',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Alaskan Standard Time',\n            offset: -540,\n            offsetHours: -9,\n            displayName: '(UTC-09:00) Alaska',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Pacific Standard Time (Mexico)',\n            offset: -480,\n            offsetHours: -8,\n            displayName: '(UTC-08:00) Baja California',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Pacific Standard Time',\n            offset: -480,\n            offsetHours: -8,\n            displayName: '(UTC-08:00) Pacific Time (US & Canada)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'US Mountain Standard Time',\n            offset: -420,\n            offsetHours: -7,\n            displayName: '(UTC-07:00) Arizona',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Mountain Standard Time (Mexico)',\n            offset: -420,\n            offsetHours: -7,\n            displayName: '(UTC-07:00) Chihuahua, La Paz, Mazatlan',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Mountain Standard Time',\n            offset: -420,\n            offsetHours: -7,\n            displayName: '(UTC-07:00) Mountain Time (US & Canada)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Central Standard Time',\n            offset: -360,\n            offsetHours: -6,\n            displayName: '(UTC-06:00) Central Time (US & Canada)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Central America Standard Time',\n            offset: -360,\n            offsetHours: -6,\n            displayName: '(UTC-06:00) Central America',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Canada Central Standard Time',\n            offset: -360,\n            offsetHours: -6,\n            displayName: '(UTC-06:00) Saskatchewan',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Central Standard Time (Mexico)',\n            offset: -360,\n            offsetHours: -6,\n            displayName: '(UTC-06:00) Guadalajara, Mexico City, Monterrey',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'SA Pacific Standard Time',\n            offset: -300,\n            offsetHours: -5,\n            displayName: '(UTC-05:00) Bogota, Lima, Quito, Rio Branco',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Eastern Standard Time',\n            offset: -300,\n            offsetHours: -5,\n            displayName: '(UTC-05:00) Eastern Time (US & Canada)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'US Eastern Standard Time',\n            offset: -300,\n            offsetHours: -5,\n            displayName: '(UTC-05:00) Indiana (East)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Venezuela Standard Time',\n            offset: -270,\n            offsetHours: -4.5,\n            displayName: '(UTC-04:30) Caracas',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Atlantic Standard Time',\n            offset: -240,\n            offsetHours: -4,\n            displayName: '(UTC-04:00) Atlantic Time (Canada)',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Paraguay Standard Time',\n            offset: -240,\n            offsetHours: -4,\n            displayName: '(UTC-04:00) Asuncion',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Central Brazilian Standard Time',\n            offset: -240,\n            offsetHours: -4,\n            displayName: '(UTC-04:00) Cuiaba',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Pacific SA Standard Time',\n            offset: -240,\n            offsetHours: -4,\n            displayName: '(UTC-04:00) Santiago',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'SA Western Standard Time',\n            offset: -240,\n            offsetHours: -4,\n            displayName: '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Newfoundland Standard Time',\n            offset: -210,\n            offsetHours: -3.5,\n            displayName: '(UTC-03:30) Newfoundland',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'SA Eastern Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Cayenne, Fortaleza',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Argentina Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Buenos Aires',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'E. South America Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Brasilia',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Bahia Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Salvador',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Montevideo Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Montevideo',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Greenland Standard Time',\n            offset: -180,\n            offsetHours: -3,\n            displayName: '(UTC-03:00) Greenland',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'UTC-02',\n            offset: -120,\n            offsetHours: -2,\n            displayName: '(UTC-02:00) Coordinated Universal Time-02',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Mid-Atlantic Standard Time',\n            offset: -120,\n            offsetHours: -2,\n            displayName: '(UTC-02:00) Mid-Atlantic - Old',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Azores Standard Time',\n            offset: -60,\n            offsetHours: -1,\n            displayName: '(UTC-01:00) Azores',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Cape Verde Standard Time',\n            offset: -60,\n            offsetHours: -1,\n            displayName: '(UTC-01:00) Cape Verde Is.',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Morocco Standard Time',\n            offset: 0,\n            offsetHours: 0,\n            displayName: '(UTC) Casablanca',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'UTC',\n            offset: 0,\n            offsetHours: 0,\n            displayName: '(UTC) Coordinated Universal Time',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'GMT Standard Time',\n            offset: 0,\n            offsetHours: 0,\n            displayName: '(UTC) Dublin, Edinburgh, Lisbon, London',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Greenwich Standard Time',\n            offset: 0,\n            offsetHours: 0,\n            displayName: '(UTC) Monrovia, Reykjavik',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Central European Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Namibia Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) Windhoek',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'W. Central Africa Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) West Central Africa',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'W. Europe Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Central Europe Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Romance Standard Time',\n            offset: 60,\n            offsetHours: 1,\n            displayName: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'FLE Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'South Africa Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Harare, Pretoria',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Turkey Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Istanbul',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'GTB Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Athens, Bucharest',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Libya Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Tripoli',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'E. Europe Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) E. Europe',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Jordan Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Amman',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Middle East Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Beirut',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Egypt Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Cairo',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Syria Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Damascus',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Israel Standard Time',\n            offset: 120,\n            offsetHours: 2,\n            displayName: '(UTC+02:00) Jerusalem',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Arab Standard Time',\n            offset: 180,\n            offsetHours: 3,\n            displayName: '(UTC+03:00) Kuwait, Riyadh',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'E. Africa Standard Time',\n            offset: 180,\n            offsetHours: 3,\n            displayName: '(UTC+03:00) Nairobi',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Arabic Standard Time',\n            offset: 180,\n            offsetHours: 3,\n            displayName: '(UTC+03:00) Baghdad',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Kaliningrad Standard Time',\n            offset: 180,\n            offsetHours: 3,\n            displayName: '(UTC+03:00) Kaliningrad, Minsk',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Iran Standard Time',\n            offset: 210,\n            offsetHours: 3.5,\n            displayName: '(UTC+03:30) Tehran',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Mauritius Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Port Louis',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Georgian Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Tbilisi',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Caucasus Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Yerevan',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Arabian Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Abu Dhabi, Muscat',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Azerbaijan Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Baku',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Russian Standard Time',\n            offset: 240,\n            offsetHours: 4,\n            displayName: '(UTC+04:00) Moscow, St. Petersburg, Volgograd',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Afghanistan Standard Time',\n            offset: 270,\n            offsetHours: 4.5,\n            displayName: '(UTC+04:30) Kabul',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Pakistan Standard Time',\n            offset: 300,\n            offsetHours: 5,\n            displayName: '(UTC+05:00) Islamabad, Karachi',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'West Asia Standard Time',\n            offset: 300,\n            offsetHours: 5,\n            displayName: '(UTC+05:00) Ashgabat, Tashkent',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'India Standard Time',\n            offset: 330,\n            offsetHours: 5.5,\n            displayName: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Sri Lanka Standard Time',\n            offset: 330,\n            offsetHours: 5.5,\n            displayName: '(UTC+05:30) Sri Jayawardenepura',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Nepal Standard Time',\n            offset: 345,\n            offsetHours: 5.75,\n            displayName: '(UTC+05:45) Kathmandu',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Central Asia Standard Time',\n            offset: 360,\n            offsetHours: 6,\n            displayName: '(UTC+06:00) Astana',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Bangladesh Standard Time',\n            offset: 360,\n            offsetHours: 6,\n            displayName: '(UTC+06:00) Dhaka',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Ekaterinburg Standard Time',\n            offset: 360,\n            offsetHours: 6,\n            displayName: '(UTC+06:00) Ekaterinburg',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Myanmar Standard Time',\n            offset: 390,\n            offsetHours: 6.5,\n            displayName: '(UTC+06:30) Yangon (Rangoon)',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'SE Asia Standard Time',\n            offset: 420,\n            offsetHours: 7,\n            displayName: '(UTC+07:00) Bangkok, Hanoi, Jakarta',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'N. Central Asia Standard Time',\n            offset: 420,\n            offsetHours: 7,\n            displayName: '(UTC+07:00) Novosibirsk',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Ulaanbaatar Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Ulaanbaatar',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'China Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Singapore Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Kuala Lumpur, Singapore',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'North Asia Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Krasnoyarsk',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Taipei Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Taipei',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'W. Australia Standard Time',\n            offset: 480,\n            offsetHours: 8,\n            displayName: '(UTC+08:00) Perth',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Korea Standard Time',\n            offset: 540,\n            offsetHours: 9,\n            displayName: '(UTC+09:00) Seoul',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'North Asia East Standard Time',\n            offset: 540,\n            offsetHours: 9,\n            displayName: '(UTC+09:00) Irkutsk',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Tokyo Standard Time',\n            offset: 540,\n            offsetHours: 9,\n            displayName: '(UTC+09:00) Osaka, Sapporo, Tokyo',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'AUS Central Standard Time',\n            offset: 570,\n            offsetHours: 9.5,\n            displayName: '(UTC+09:30) Darwin',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Cen. Australia Standard Time',\n            offset: 570,\n            offsetHours: 9.5,\n            displayName: '(UTC+09:30) Adelaide',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'West Pacific Standard Time',\n            offset: 600,\n            offsetHours: 10,\n            displayName: '(UTC+10:00) Guam, Port Moresby',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Tasmania Standard Time',\n            offset: 600,\n            offsetHours: 10,\n            displayName: '(UTC+10:00) Hobart',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'E. Australia Standard Time',\n            offset: 600,\n            offsetHours: 10,\n            displayName: '(UTC+10:00) Brisbane',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'AUS Eastern Standard Time',\n            offset: 600,\n            offsetHours: 10,\n            displayName: '(UTC+10:00) Canberra, Melbourne, Sydney',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Yakutsk Standard Time',\n            offset: 600,\n            offsetHours: 10,\n            displayName: '(UTC+10:00) Yakutsk',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Vladivostok Standard Time',\n            offset: 660,\n            offsetHours: 11,\n            displayName: '(UTC+11:00) Vladivostok',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Central Pacific Standard Time',\n            offset: 660,\n            offsetHours: 11,\n            displayName: '(UTC+11:00) Solomon Is., New Caledonia',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Magadan Standard Time',\n            offset: 720,\n            offsetHours: 12,\n            displayName: '(UTC+12:00) Magadan',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Kamchatka Standard Time',\n            offset: 720,\n            offsetHours: 12,\n            displayName: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'Fiji Standard Time',\n            offset: 720,\n            offsetHours: 12,\n            displayName: '(UTC+12:00) Fiji',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'New Zealand Standard Time',\n            offset: 720,\n            offsetHours: 12,\n            displayName: '(UTC+12:00) Auckland, Wellington',\n            supportsDaylightSavingTime: true\n          }, {\n            id: 'UTC+12',\n            offset: 720,\n            offsetHours: 12,\n            displayName: '(UTC+12:00) Coordinated Universal Time+12',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Tonga Standard Time',\n            offset: 780,\n            offsetHours: 13,\n            displayName: '(UTC+13:00) Nuku\\'alofa',\n            supportsDaylightSavingTime: false\n          }, {\n            id: 'Samoa Standard Time',\n            offset: 780,\n            offsetHours: 13,\n            displayName: '(UTC+13:00) Samoa',\n            supportsDaylightSavingTime: true\n          }];\n          var __daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n          var __daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n          var __daysPer4Years = 365 * 4 + 1;\n          var __daysPer100Years = (365 * 4 + 1) * 25 - 1;\n          var __daysPer400Years = ((365 * 4 + 1) * 25 - 1) * 4 + 1;\n          // Number of days from 1/1/0001 to 12/31/1600\n          var __daysTo1601 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4;\n          // Number of days from 1/1/0001 to 12/30/1899\n          var __daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n          // Number of days from 1/1/0001 to 12/31/9999\n          var __daysTo10000 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366;\n          var __minTicks = 0;\n          var __maxTicks = ((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 10000 * 3600 * 24) - 1;\n          var __maxMillis = ((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 60 * 60 * 24);\n          $.jqx.date = function () {\n            var that = this;\n            that.ticksPerMillisecond = 10000;\n            that.millisecondsPerTick = 1 / 10000;\n            that.ticksPerSecond = 1000 * 10000;\n            that.secondsPerTick = 1 / (1000 * 10000);\n            that.ticksPerMinute = 1000 * 10000 * 60;\n            that.minutesPerTick = 1 / (1000 * 10000 * 60);\n            that.ticksPerHour = 1000 * 10000 * 3600;\n            that.hoursPerTick = 1 / (1000 * 10000 * 3600);\n            that.ticksPerDay = 1000 * 10000 * 3600 * 24;\n            that.daysPerTick = 1 / (1000 * 10000 * 3600 * 24);\n            that.millisPerSecond = 1000;\n            that.millisPerMinute = 1000 * 60;\n            that.millisPerHour = 1000 * 60 * 60;\n            that.millisPerDay = 1000 * 60 * 60 * 24;\n            that.daysPerYear = 365;\n            that.daysPer4Years = __daysPer4Years;\n            that.daysPer100Years = __daysPer100Years;\n            that.daysPer400Years = __daysPer400Years;\n            // Number of days from 1/1/0001 to 12/31/1600\n            that.daysTo1601 = __daysTo1601;\n            // Number of days from 1/1/0001 to 12/30/1899\n            that.daysTo1899 = __daysTo1899;\n            // Number of days from 1/1/0001 to 12/31/9999\n            that.daysTo10000 = __daysTo10000;\n            that.minTicks = 0;\n            that.maxTicks = __maxTicks;\n            that.maxMillis = __maxMillis;\n            that.datePartYear = 0;\n            that.datePartDayOfYear = 1;\n            that.datePartMonth = 2;\n            that.datePartDay = 3;\n            that.daysToMonth365 = __daysToMonth365;\n            that.daysToMonth366 = __daysToMonth366;\n            that.minValue = new Date(0);\n            that.maxValue = new Date(((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 10000 * 3600 * 24) - 1);\n            that.ticksMask = 0x3FFFFFFFFFFFFFFF;\n            that.flagsMask = 0xC000000000000000;\n            that.localMask = 0x8000000000000000;\n            that.ticksCeiling = 0x4000000000000000;\n            that.kindUnspecified = 0x0000000000000000;\n            that.kindUtc = 0x4000000000000000;\n            that.kindLocal = 0x8000000000000000;\n            that.kindLocalAmbiguousDst = 0xC000000000000000;\n            that.kindShift = 62;\n            that.regexTrim = /^\\s+|\\s+$/g;\n            that.regexInfinity = /^[+-]?infinity$/i;\n            that.regexHex = /^0x[a-f0-9]+$/i;\n            that.regexParseFloat = /^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/;\n            that.calendar = {\n              // separator of parts of a date (e.g. '/' in 11/05/1955)\n              '/': \"/\",\n              // separator of parts of a time (e.g. ':' in 05:44 PM)\n              ':': \":\",\n              // the first day of the week (0 = Sunday, 1 = Monday, etc)\n              firstDay: 0,\n              days: {\n                // full day names\n                names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                // abbreviated day names\n                namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                // shortest day names\n                namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n              },\n              months: {\n                // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                // abbreviated month names\n                namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n              },\n              // AM and PM designators in one of these forms:\n              // The usual view, and the upper and lower case versions\n              //      [standard,lowercase,uppercase]\n              // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n              //      null\n              AM: [\"AM\", \"am\", \"AM\"],\n              PM: [\"PM\", \"pm\", \"PM\"],\n              eras: [\n              // eras in reverse chronological order.\n              // name: the name of the era in this culture (e.g. A.D., C.E.)\n              // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n              // offset: offset in years from gregorian calendar\n              {\n                \"name\": \"A.D.\",\n                \"start\": null,\n                \"offset\": 0\n              }],\n              twoDigitYearMax: 2029,\n              patterns: {\n                // short date pattern\n                d: \"M/d/yyyy\",\n                // long date pattern\n                D: \"dddd, MMMM dd, yyyy\",\n                // short time pattern\n                t: \"h:mm tt\",\n                // long time pattern\n                T: \"h:mm:ss tt\",\n                // long date, short time pattern\n                f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                // long date, long time pattern\n                F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                // month/day pattern\n                M: \"MMMM dd\",\n                // month/year pattern\n                Y: \"yyyy MMMM\",\n                // S is a sortable format that does not vary by culture\n                S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                // formatting of dates in MySQL DataBases\n                ISO: \"yyyy-MM-dd hh:mm:ss\",\n                ISO2: \"yyyy-MM-dd HH:mm:ss\",\n                d1: \"dd.MM.yyyy\",\n                d2: \"dd-MM-yyyy\",\n                zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n                zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n                custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n                custom2: \"yyyy-MM-dd HH:mm:ss.fff\"\n              },\n              percentsymbol: \"%\",\n              currencysymbol: \"$\",\n              currencysymbolposition: \"before\",\n              decimalseparator: '.',\n              thousandsseparator: ','\n            };\n            that.dateData = 0;\n            that.timeZone = null;\n            that.timeZones = __timeZones;\n            that.internalMS = function () {\n              return that.dateData;\n            };\n            // Returns a given date part of this DateTithat. This method is used\n            // to compute the year, day-of-year, month, or day part.\n            that.getDatePart = function (part) {\n              var ms = that.internalMS();\n              // n = number of days since 1/1/0001\n              var n = parseInt(ms / that.millisPerDay);\n              // y400 = number of whole 400-year periods since 1/1/0001\n              var y400 = parseInt(n / that.daysPer400Years);\n              // n = day number within 400-year period\n              n -= y400 * that.daysPer400Years;\n              // y100 = number of whole 100-year periods within 400-year period\n              var y100 = parseInt(n / that.daysPer100Years);\n              // Last 100-year period has an extra day, so decrement result if 4\n              if (y100 == 4) y100 = 3;\n              // n = day number within 100-year period\n              n -= y100 * that.daysPer100Years;\n              // y4 = number of whole 4-year periods within 100-year period\n              var y4 = parseInt(n / that.daysPer4Years);\n              // n = day number within 4-year period\n              n -= y4 * that.daysPer4Years;\n              // y1 = number of whole years within 4-year period\n              var y1 = parseInt(n / that.daysPerYear);\n              // Last year has an extra day, so decrement result if 4\n              if (y1 == 4) y1 = 3;\n              // If year was requested, compute and return it\n              if (part == that.datePartYear) {\n                return parseInt(y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1);\n              }\n              // n = day number within year\n              n -= y1 * that.daysPerYear;\n              // If day-of-year was requested, return it\n              if (part == that.datePartDayOfYear) return parseInt(n + 1);\n              // Leap year calculation looks different from IsLeapYear since y1, y4,\n              // and y100 are relative to year 1, not year 0\n              var leapYear = y1 == 3 && (y4 != 24 || y100 == 3);\n              var days = leapYear ? that.daysToMonth366 : that.daysToMonth365;\n              // All months have less than 32 days, so n >> 5 is a good conservative\n              // estimate for the month\n              var m = n >> 5 + 1;\n              // m = 1-based month number\n              while (n >= days[m]) m++;\n              // If month was requested, return it\n              if (part == that.datePartMonth) return parseInt(m);\n              // Return 1-based day-of-month\n              return parseInt(n - days[m - 1] + 1);\n            };\n            that.dayOfWeek = function () {\n              var ms = that.dateData;\n              var dayOfWeek = parseInt(ms / that.millisPerDay + 1) % 7;\n              return dayOfWeek;\n            }, that.dayOfYear = function () {\n              return that.getDatePart(that.datePartDayOfYear);\n            };\n            that.weekOfYear = function (firstDay) {\n              var dateObj = that.toDate();\n              var dowOffset = firstDay || that.calendar.firstDay; //default dowOffset to zero\n              var newYear = new Date(dateObj.getFullYear(), 0, 1);\n              var day = newYear.getDay() - dowOffset; //the day of week the year begins on\n              day = day >= 0 ? day : day + 7;\n              var daynum = Math.floor((dateObj.getTime() - newYear.getTime() - (dateObj.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n              var weeknum;\n              //if the year starts before the middle of a week\n              if (day < 4) {\n                weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n                if (weeknum > 52) {\n                  var nYear = new Date(dateObj.getFullYear() + 1, 0, 1);\n                  var nday = nYear.getDay() - dowOffset;\n                  nday = nday >= 0 ? nday : nday + 7;\n                  /*if the next year starts before the middle of\r\n                    the week, it is week #1 of that year*/\n                  weeknum = nday < 4 ? 1 : 53;\n                }\n              } else {\n                weeknum = Math.floor((daynum + day - 1) / 7);\n              }\n              return weeknum;\n            };\n            that.subtract = function (date) {\n              return new $.jqx.timeSpan(that.dateData * that.ticksPerMillisecond - date.dateData * that.ticksPerMillisecond);\n            };\n            that.dateToMS = function (year, month, day) {\n              if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n                year = parseInt(year);\n                var days = that.isLeapYear(year) ? that.daysToMonth366 : that.daysToMonth365;\n                if (day >= 1 && day <= days[month] - days[month - 1]) {\n                  var y = year - 1;\n                  var n = y * 365 + parseInt(y / 4) - parseInt(y / 100) + parseInt(y / 400) + days[month - 1] + day - 1;\n                  return n * that.millisPerDay;\n                }\n              }\n            };\n            that.isLeapYear = function (year) {\n              if (year < 1 || year > 9999) {\n                throw new Error(\"Year out of Range\");\n              }\n              return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n            };\n            that.timeToMS = function (hour, minute, second, ms) {\n              if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n                var totalSeconds = parseInt(hour * 3600 + minute * 60 + second);\n                if (ms > 0 && ms < 1000) {\n                  return totalSeconds * that.millisPerSecond + ms;\n                }\n                return totalSeconds * that.millisPerSecond;\n              }\n            };\n            that.daysInMonth = function (year, month) {\n              if (month < 1 || month > 12) {\n                throw new Error(\"Month out of Range\");\n              }\n              var days = that.isLeapYear(year) ? that.daysToMonth366 : that.daysToMonth365;\n              return days[month] - days[month - 1];\n            };\n            that.arrayIndexOf = function (array, item) {\n              if (array.indexOf) {\n                return array.indexOf(item);\n              }\n              for (var i = 0, length = array.length; i < length; i++) {\n                if (array[i] === item) {\n                  return i;\n                }\n              }\n              return -1;\n            };\n            that.startsWith = function (value, pattern) {\n              return value.indexOf(pattern) === 0;\n            };\n            that.endsWith = function (value, pattern) {\n              return value.substr(value.length - pattern.length) === pattern;\n            }, that.trim = function (value) {\n              return (value + \"\").replace(that.regexTrim, \"\");\n            };\n            that.expandFormat = function (calendar, format) {\n              // expands unspecified or single character date formats into the full pattern.\n              format = format || \"F\";\n              var pattern,\n                patterns = calendar.patterns,\n                len = format.length;\n              if (len === 1) {\n                pattern = patterns[format];\n                if (!pattern) {\n                  throw \"Invalid date format string '\" + format + \"'.\";\n                }\n                format = pattern;\n              } else if (len === 2 && format.charAt(0) === \"%\") {\n                // %X escape format -- intended as a custom format string that is only one character, not a built-in format.\n                format = format.charAt(1);\n              }\n              return format;\n            };\n            that.getEra = function (date, eras) {\n              if (!eras) return 0;\n              if (typeof date === 'string') {\n                return 0;\n              }\n              var start,\n                ticks = date.getTime();\n              for (var i = 0, l = eras.length; i < l; i++) {\n                start = eras[i].start;\n                if (start === null || ticks >= start) {\n                  return i;\n                }\n              }\n              return 0;\n            };\n            that.toUpper = function (value) {\n              // 'he-IL' has non-breaking space in weekday names.\n              return value.split(\"\\u00A0\").join(' ').toUpperCase();\n            };\n            that.toUpperArray = function (arr) {\n              var results = [];\n              for (var i = 0, l = arr.length; i < l; i++) {\n                results[i] = that.toUpper(arr[i]);\n              }\n              return results;\n            };\n            that.getEraYear = function (date, cal, era, sortable) {\n              var year = date.getFullYear();\n              if (!sortable && cal.eras) {\n                // convert normal gregorian year to era-shifted gregorian\n                // year by subtracting the era offset\n                year -= cal.eras[era].offset;\n              }\n              return year;\n            };\n            that.getDayIndex = function (cal, value, abbr) {\n              var ret,\n                days = cal.days,\n                upperDays = cal._upperDays;\n              if (!upperDays) {\n                cal._upperDays = upperDays = [that.toUpperArray(days.names), that.toUpperArray(days.namesAbbr), that.toUpperArray(days.namesShort)];\n              }\n              value = value.toUpperCase();\n              if (abbr) {\n                ret = that.arrayIndexOf(upperDays[1], value);\n                if (ret === -1) {\n                  ret = that.arrayIndexOf(upperDays[2], value);\n                }\n              } else {\n                ret = that.arrayIndexOf(upperDays[0], value);\n              }\n              return ret;\n            };\n            that.getMonthIndex = function (cal, value, abbr) {\n              var months = cal.months,\n                monthsGen = cal.monthsGenitive || cal.months,\n                upperMonths = cal._upperMonths,\n                upperMonthsGen = cal._upperMonthsGen;\n              if (!upperMonths) {\n                cal._upperMonths = upperMonths = [that.toUpperArray(months.names), that.toUpperArray(months.namesAbbr)];\n                cal._upperMonthsGen = upperMonthsGen = [that.toUpperArray(monthsGen.names), that.toUpperArray(monthsGen.namesAbbr)];\n              }\n              value = that.toUpper(value);\n              var i = that.arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);\n              if (i < 0) {\n                i = that.arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);\n              }\n              return i;\n            };\n            that.appendPreOrPostMatch = function (preMatch, strings) {\n              // appends pre- and post- token match strings while removing escaped characters.\n              // Returns a single quote count which is used to determine if the token occurs\n              // in a string literal.\n              var quoteCount = 0,\n                escaped = false;\n              for (var i = 0, il = preMatch.length; i < il; i++) {\n                var c = preMatch.charAt(i);\n                switch (c) {\n                  case '\\'':\n                    if (escaped) {\n                      strings.push(\"'\");\n                    } else {\n                      quoteCount++;\n                    }\n                    escaped = false;\n                    break;\n                  case '\\\\':\n                    if (escaped) {\n                      strings.push(\"\\\\\");\n                    }\n                    escaped = !escaped;\n                    break;\n                  default:\n                    strings.push(c);\n                    escaped = false;\n                    break;\n                }\n              }\n              return quoteCount;\n            };\n            that.getTokenRegExp = function () {\n              // regular expression for matching date and time tokens in format strings.\n              return /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;\n            };\n            that.tryparseDate = function (value, calendar, format) {\n              if (calendar == undefined || calendar == null) {\n                calendar = that.calendar;\n              } else if (calendar != null) {\n                if (calendar && $.type(calendar) === \"string\" && Globalize) {\n                  var culture = Globalize.cultures[calendar];\n                  if (culture) calendar = culture.calendar;\n                }\n              }\n              if (format != undefined) {\n                if ($.type(format) === \"array\") {\n                  for (var i = 0; i < format.length; i++) {\n                    var tryParse = that.parseDate(value, format[i], calendar);\n                    if (tryParse) {\n                      return tryParse;\n                    }\n                  }\n                }\n                var tryParse = that.parseDate(value, format, calendar);\n                if (tryParse) return tryParse;\n              }\n              var me = this;\n              if (value == \"\") return null;\n              if (value != null && !value.substring) {\n                value = value.toString();\n              }\n              if (value != null && value.substring(0, 6) == \"/Date(\") {\n                var jsonDateRE = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\n                var date = new Date(+value.replace(/\\/Date\\((\\d+)\\)\\//, '$1'));\n                if (date == \"Invalid Date\") {\n                  var m = value.match(/^\\/Date\\((\\d+)([-+]\\d\\d)(\\d\\d)\\)\\/$/);\n                  var date = null;\n                  if (m) date = new Date(1 * m[1] + 3600000 * m[2] + 60000 * m[3]);\n                }\n                if (date == null || date == \"Invalid Date\" || isNaN(date)) {\n                  var arr = jsonDateRE.exec(value);\n                  if (arr) {\n                    // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes\n                    var result = new Date(parseInt(arr[1]));\n                    if (arr[2]) {\n                      var mins = parseInt(arr[3]);\n                      if (arr[2] === \"-\") {\n                        mins = -mins;\n                      }\n                      var current = result.getUTCMinutes();\n                      result.setUTCMinutes(current - mins);\n                    }\n                    if (!isNaN(result.valueOf())) {\n                      return result;\n                    }\n                  }\n                }\n                return date;\n              }\n              var defaultPatterns = {\n                jqxdate: \"yyyy-MM-dd HH:mm:ss\",\n                // short date pattern\n                d: \"M/d/yyyy\",\n                // long date pattern\n                D: \"dddd, MMMM dd, yyyy\",\n                // short time pattern\n                t: \"h:mm tt\",\n                // long time pattern\n                T: \"h:mm:ss tt\",\n                // long date, short time pattern\n                f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                // long date, long time pattern\n                F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                // month/day pattern\n                M: \"MMMM dd\",\n                // month/year pattern\n                Y: \"yyyy MMMM\",\n                // S is a sortable format that does not vary by culture\n                S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                // formatting of dates in MySQL DataBases\n                ISO: \"yyyy-MM-dd hh:mm:ss\",\n                ISO2: \"yyyy-MM-dd HH:mm:ss\",\n                ISO8601: \"yyyy-MM-ddTHH:mm:ss.sssZ\",\n                d1: \"dd.MM.yyyy\",\n                d2: \"dd-MM-yyyy\",\n                d3: \"MM-dd-yyyy\",\n                d4: \"MM.dd.yyyy\",\n                zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n                zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n                custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n                custom2: \"yyyy-MM-dd HH:mm:ss.fff\",\n                iso: \"yyyy-MM-ddTHH:mm:ssZ\",\n                iso_date1: 'yyyy-MM-dd',\n                iso_date2: 'yyyy-MM-dd',\n                iso_date3: 'yyyy-ddd',\n                iso_date4: 'yyyy-MM-dd HH:mm',\n                iso_date5: 'yyyy-MM-dd HH:mm Z',\n                iso_date6: 'yyyy-MMM-dd',\n                iso_date7: 'yyyy-MM',\n                iso_date8: 'yyyy-MMM',\n                iso_date9: 'yyyy-MMMM',\n                iso_date10: 'yyyy-MMMM-dd',\n                iso_time1: 'HH:mm:ss.tttt',\n                iso_time2: 'HH:mm:ss',\n                iso_time3: 'HH:mm',\n                iso_time4: 'HH',\n                iso_time5: 'yyyyyy-MM-dd',\n                iso_time6: 'yyyyyy-MM-dd'\n              };\n              for (var prop in defaultPatterns) {\n                date = that.parseDate(value, defaultPatterns[prop], calendar);\n                if (date) {\n                  return date;\n                }\n              }\n              var patterns = calendar.patterns;\n              for (prop in patterns) {\n                date = that.parseDate(value, patterns[prop], calendar);\n                if (date) {\n                  if (prop == \"ISO\") {\n                    var tmpDate = that.parseDate(value, patterns[\"ISO2\"], calendar);\n                    if (tmpDate) return tmpDate;\n                  }\n                  return date;\n                }\n              }\n              if ($.type(value) === \"string\") {\n                value = that.trim(value);\n                var splitParts = [':', '/', '-', ' ', ','];\n                var replaceAll = function (find, replace, str) {\n                  return str.replace(new RegExp(find, 'g'), replace);\n                };\n                value = replaceAll(', ', ',', value);\n                var timePart = \"\";\n                var datePart = value;\n                if (value.indexOf(\":\") >= 0) {\n                  timePart = value.substring(value.indexOf(\":\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.indexOf(\":\") - 2);\n                } else if (value.toUpperCase().indexOf(\"AM\") >= 0) {\n                  timePart = value.substring(value.toUpperCase().indexOf(\"AM\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.toUpperCase().indexOf(\"AM\") - 2);\n                } else if (value.toUpperCase().indexOf(\"PM\") >= 0) {\n                  timePart = value.substring(value.toUpperCase().indexOf(\"PM\") - 2);\n                  timePart = that.trim(timePart);\n                  datePart = value.substring(0, value.toUpperCase().indexOf(\"PM\") - 2);\n                }\n                var parseDate = new Date();\n                var parsed = false;\n                if (datePart) {\n                  for (var i = 0; i < splitParts.length; i++) {\n                    if (datePart.indexOf(splitParts[i]) >= 0) {\n                      dateParts = datePart.split(splitParts[i]);\n                      break;\n                    }\n                  }\n                  var days = new Array();\n                  var months = new Array();\n                  var years = new Array();\n                  var dayPart = null;\n                  var monthPart = null;\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isDay = that.parseDate(part, \"d\", calendar) || that.parseDate(part, \"dd\", calendar) || that.parseDate(part, \"ddd\", calendar) || that.parseDate(part, \"dddd\", calendar);\n                    if (isDay) {\n                      days.push(isDay.getDate());\n                      if (part.length > 2) {\n                        dayPart = i;\n                        break;\n                      }\n                    }\n                  }\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isMonth = that.parseDate(part, \"M\", calendar) || that.parseDate(part, \"MM\", calendar) || that.parseDate(part, \"MMM\", calendar) || that.parseDate(part, \"MMMM\", calendar);\n                    if (isMonth) {\n                      if (dayPart != undefined && dayPart == i) continue;\n                      months.push(isMonth.getMonth());\n                      if (part.length > 2) {\n                        monthPart = i;\n                        break;\n                      }\n                    }\n                  }\n                  for (var i = 0; i < dateParts.length; i++) {\n                    var part = dateParts[i];\n                    var isYear = that.parseDate(part, \"yyyy\", calendar);\n                    if (isYear) {\n                      if (dayPart != undefined && dayPart == i) continue;\n                      if (monthPart != undefined && monthPart == i) continue;\n                      years.push(isYear.getFullYear());\n                    }\n                  }\n                  var dates = new Array();\n                  for (var d = 0; d < days.length; d++) {\n                    for (var m = 0; m < months.length; m++) {\n                      for (var y = 0; y < years.length; y++) {\n                        var result = new Date(years[y], months[m], days[d]);\n                        if (years[y] < 1970) result.setFullYear(years[y]);\n                        if (result.getTime() != NaN) {\n                          dates.push(result);\n                        }\n                      }\n                    }\n                  }\n                  if (dates.length > 0) {\n                    parseDate = dates[0];\n                    parsed = true;\n                  }\n                }\n                if (timePart) {\n                  var timeParts = timePart.indexOf(\":\") >= 0 ? timePart.split(':') : timePart;\n                  var parsedTime = that.parseDate(timePart, \"h:mm tt\", calendar) || that.parseDate(timePart, \"HH:mm:ss.fff\", calendar) || that.parseDate(timePart, \"HH:mm:ss.ff\", calendar) || that.parseDate(timePart, \"h:mm:ss tt\", calendar) || that.parseDate(timePart, \"HH:mm:ss.tttt\", calendar) || that.parseDate(timePart, \"HH:mm:ss\", calendar) || that.parseDate(timePart, \"HH:mm\", calendar) || that.parseDate(timePart, \"HH\", calendar);\n                  var hour = 0,\n                    minute = 0,\n                    second = 0,\n                    milisecond = 0;\n                  if (parsedTime && parsedTime.getTime() != NaN) {\n                    hour = parsedTime.getHours();\n                    minute = parsedTime.getMinutes();\n                    second = parsedTime.getSeconds();\n                    milisecond = parsedTime.getMilliseconds();\n                  } else {\n                    if (timeParts.length == 1) {\n                      hour = parseInt(timeParts[0]);\n                    }\n                    if (timeParts.length == 2) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                    }\n                    if (timeParts.length == 3) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                      if (timeParts[2].indexOf(\".\") >= 0) {\n                        second = parseInt(timeParts[2].toString().split(\".\")[0]);\n                        milisecond = parseInt(timeParts[2].toString().split(\".\")[1]);\n                      } else {\n                        second = parseInt(timeParts[2]);\n                      }\n                    }\n                    if (timeParts.length == 4) {\n                      hour = parseInt(timeParts[0]);\n                      minute = parseInt(timeParts[1]);\n                      second = parseInt(timeParts[2]);\n                      milisecond = parseInt(timeParts[3]);\n                    }\n                  }\n                  if (parseDate && !isNaN(hour) && !isNaN(minute) && !isNaN(second) && !isNaN(milisecond)) {\n                    parseDate.setHours(hour, minute, second, milisecond);\n                    parsed = true;\n                  }\n                }\n                if (parsed) {\n                  return parseDate;\n                }\n              }\n              if (value != null) {\n                var tmpDate = null;\n                var dateParts = [':', '/', '-'];\n                var canParse = true;\n                for (var part = 0; part < dateParts.length; part++) {\n                  if (value.indexOf(dateParts[part]) != -1) {\n                    canParse = false;\n                  }\n                }\n                if (canParse) {\n                  var number = new Number(value);\n                  if (!isNaN(number)) {\n                    return new Date(number);\n                  }\n                }\n              }\n              return null;\n            };\n            that.getParseRegExp = function (cal, format) {\n              // converts a format string into a regular expression with groups that\n              // can be used to extract date fields from a date string.\n              // check for a cached parse regex.\n              var re = cal._parseRegExp;\n              if (!re) {\n                cal._parseRegExp = re = {};\n              } else {\n                var reFormat = re[format];\n                if (reFormat) {\n                  return reFormat;\n                }\n              }\n\n              // expand single digit formats, then escape regular expression characters.\n              var expFormat = that.expandFormat(cal, format).replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"),\n                regexp = [\"^\"],\n                groups = [],\n                index = 0,\n                quoteCount = 0,\n                tokenRegExp = that.getTokenRegExp(),\n                match;\n\n              // iterate through each date token found.\n              while ((match = tokenRegExp.exec(expFormat)) !== null) {\n                var preMatch = expFormat.slice(index, match.index);\n                index = tokenRegExp.lastIndex;\n\n                // don't replace any matches that occur inside a string literal.\n                quoteCount += that.appendPreOrPostMatch(preMatch, regexp);\n                if (quoteCount % 2) {\n                  regexp.push(match[0]);\n                  continue;\n                }\n\n                // add a regex group for the token.\n                var m = match[0],\n                  len = m.length,\n                  add;\n                switch (m) {\n                  case 'dddd':\n                  case 'ddd':\n                  case 'MMMM':\n                  case 'MMM':\n                  case 'gg':\n                  case 'g':\n                    add = \"(\\\\D+)\";\n                    break;\n                  case 'tt':\n                  case 't':\n                    add = \"(\\\\D*)\";\n                    break;\n                  case 'yyyy':\n                  case 'fff':\n                  case 'ff':\n                  case 'f':\n                    add = \"(\\\\d{\" + len + \"})\";\n                    break;\n                  case 'dd':\n                  case 'd':\n                  case 'MM':\n                  case 'M':\n                  case 'yy':\n                  case 'y':\n                  case 'HH':\n                  case 'H':\n                  case 'hh':\n                  case 'h':\n                  case 'mm':\n                  case 'm':\n                  case 'ss':\n                  case 's':\n                    add = \"(\\\\d\\\\d?)\";\n                    break;\n                  case 'zzz':\n                    add = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n                    break;\n                  case 'zz':\n                  case 'z':\n                    add = \"([+-]?\\\\d\\\\d?)\";\n                    break;\n                  case '/':\n                    add = \"(\\\\\" + cal[\"/\"] + \")\";\n                    break;\n                  default:\n                    throw \"Invalid date format pattern '\" + m + \"'.\";\n                    break;\n                }\n                if (add) {\n                  regexp.push(add);\n                }\n                groups.push(match[0]);\n              }\n              that.appendPreOrPostMatch(expFormat.slice(index), regexp);\n              regexp.push(\"$\");\n\n              // allow whitespace to differ when matching formats.\n              var regexpStr = regexp.join('').replace(/\\s+/g, \"\\\\s+\"),\n                parseRegExp = {\n                  'regExp': regexpStr,\n                  'groups': groups\n                };\n\n              // cache the regex for this format.\n              return re[format] = parseRegExp;\n            };\n            that.outOfRange = function (value, low, high) {\n              return value < low || value > high;\n            };\n            that.expandYear = function (cal, year) {\n              // expands 2-digit year into 4 digits.\n              var now = new Date(),\n                era = that.getEra(now);\n              if (year < 100) {\n                var twoDigitYearMax = cal.twoDigitYearMax;\n                twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;\n                var curr = that.getEraYear(now, cal, era);\n                year += curr - curr % 100;\n                if (year > twoDigitYearMax) {\n                  year -= 100;\n                }\n              }\n              return year;\n            };\n            that.parseDate = function (value, format, calendar) {\n              if (calendar == undefined || calendar == null) {\n                calendar = that.calendar;\n              }\n              // try to parse the date string by matching against the format string\n              // while using the specified culture for date field names.\n              value = that.trim(value);\n              var cal = calendar,\n                // convert date formats into regular expressions with groupings.\n                // use the regexp to determine the input format and extract the date fields.\n                parseInfo = that.getParseRegExp(cal, format),\n                match = new RegExp(parseInfo.regExp).exec(value);\n              if (match === null) {\n                return null;\n              }\n              // found a date format that matches the input.\n              var groups = parseInfo.groups,\n                era = null,\n                year = null,\n                month = null,\n                date = null,\n                weekDay = null,\n                hour = 0,\n                hourOffset,\n                min = 0,\n                sec = 0,\n                msec = 0,\n                tzMinOffset = null,\n                pmHour = false;\n              // iterate the format groups to extract and set the date fields.\n              for (var j = 0, jl = groups.length; j < jl; j++) {\n                var matchGroup = match[j + 1];\n                if (matchGroup) {\n                  var current = groups[j],\n                    clength = current.length,\n                    matchInt = parseInt(matchGroup, 10);\n                  switch (current) {\n                    case 'dd':\n                    case 'd':\n                      // Day of month.\n                      date = matchInt;\n                      // check that date is generally in valid range, also checking overflow below.\n                      if (that.outOfRange(date, 1, 31)) return null;\n                      break;\n                    case 'MMM':\n                    case 'MMMM':\n                    case 'MMMMM':\n                    case 'MMMMMM':\n                    case 'MMMMMMM':\n                    case 'MMMMMMMM':\n                      month = that.getMonthIndex(cal, matchGroup, clength === 3);\n                      if (that.outOfRange(month, 0, 11)) return null;\n                      break;\n                    case 'M':\n                    case 'MM':\n                      // Month.\n                      month = matchInt - 1;\n                      if (that.outOfRange(month, 0, 11)) return null;\n                      break;\n                    case 'y':\n                    case 'yy':\n                    case 'yyyy':\n                      year = clength < 4 ? that.expandYear(cal, matchInt) : matchInt;\n                      if (that.outOfRange(year, 0, 9999)) return null;\n                      break;\n                    case 'h':\n                    case 'hh':\n                      // Hours (12-hour clock).\n                      hour = matchInt;\n                      if (hour === 12) hour = 0;\n                      if (that.outOfRange(hour, 0, 11)) return null;\n                      break;\n                    case 'H':\n                    case 'HH':\n                      // Hours (24-hour clock).\n                      hour = matchInt;\n                      if (that.outOfRange(hour, 0, 23)) return null;\n                      break;\n                    case 'm':\n                    case 'mm':\n                      // Minutes.\n                      min = matchInt;\n                      if (that.outOfRange(min, 0, 59)) return null;\n                      break;\n                    case 's':\n                    case 'ss':\n                      // Seconds.\n                      sec = matchInt;\n                      if (that.outOfRange(sec, 0, 59)) return null;\n                      break;\n                    case 'tt':\n                    case 't':\n                      // AM/PM designator.\n                      // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of\n                      // the AM tokens. If not, fail the parse for this format.\n                      pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);\n                      if (!pmHour && (!cal.AM || matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])) return null;\n                      break;\n                    case 'f':\n                    // Deciseconds.\n                    case 'ff':\n                    // Centiseconds.\n                    case 'fff':\n                      // Milliseconds.\n                      msec = matchInt * Math.pow(10, 3 - clength);\n                      if (that.outOfRange(msec, 0, 999)) return null;\n                      break;\n                    case 'ddd':\n                    // Day of week.\n                    case 'dddd':\n                      // Day of week.\n                      weekDay = that.getDayIndex(cal, matchGroup, clength === 3);\n                      if (that.outOfRange(weekDay, 0, 6)) return null;\n                      break;\n                    case 'zzz':\n                      // Time zone offset in +/- hours:min.\n                      var offsets = matchGroup.split(/:/);\n                      if (offsets.length !== 2) return null;\n                      hourOffset = parseInt(offsets[0], 10);\n                      if (that.outOfRange(hourOffset, -12, 13)) return null;\n                      var minOffset = parseInt(offsets[1], 10);\n                      if (that.outOfRange(minOffset, 0, 59)) return null;\n                      tzMinOffset = hourOffset * 60 + (that.startsWith(matchGroup, '-') ? -minOffset : minOffset);\n                      break;\n                    case 'z':\n                    case 'zz':\n                      // Time zone offset in +/- hours.\n                      hourOffset = matchInt;\n                      if (that.outOfRange(hourOffset, -12, 13)) return null;\n                      tzMinOffset = hourOffset * 60;\n                      break;\n                    case 'g':\n                    case 'gg':\n                      var eraName = matchGroup;\n                      if (!eraName || !cal.eras) return null;\n                      eraName = eraName.trim().toLowerCase();\n                      for (var i = 0, l = cal.eras.length; i < l; i++) {\n                        if (eraName === cal.eras[i].nathat.toLowerCase()) {\n                          era = i;\n                          break;\n                        }\n                      }\n                      // could not find an era with that name\n                      if (era === null) return null;\n                      break;\n                  }\n                }\n              }\n              var result = new Date(),\n                defaultYear,\n                convert = cal.convert;\n              defaultYear = result.getFullYear();\n              if (year === null) {\n                year = defaultYear;\n              } else if (cal.eras) {\n                // year must be shifted to normal gregorian year\n                // but not if year was not specified, its already normal gregorian\n                // per the main if clause above.\n                year += cal.eras[era || 0].offset;\n              }\n              // set default day and month to 1 and January, so if unspecified, these are the defaults\n              // instead of the current day/month.\n              if (month === null) {\n                month = 0;\n              }\n              if (date === null) {\n                date = 1;\n              }\n              // now have year, month, and date, but in the culture's calendar.\n              // convert to gregorian if necessary\n              if (convert) {\n                result = convert.toGregorian(year, month, date);\n                // conversion failed, must be an invalid match\n                if (result === null) return null;\n              } else {\n                // have to set year, month and date together to avoid overflow based on current date.\n                result.setFullYear(year, month, date);\n                // check to see if date overflowed for specified month (only checked 1-31 above).\n                if (result.getDate() !== date) return null;\n                // invalid day of week.\n                if (weekDay !== null && result.getDay() !== weekDay) {\n                  return null;\n                }\n              }\n              // if pm designator token was found make sure the hours fit the 24-hour clock.\n              if (pmHour && hour < 12) {\n                hour += 12;\n              }\n              result.setHours(hour, min, sec, msec);\n              if (tzMinOffset !== null) {\n                // adjust timezone to utc before applying local offset.\n                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());\n                // Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours\n                // to ensure both these fields will not exceed this range.  adjustedMin will range\n                // somewhere between -1440 and 1500, so we only need to split this into hours.\n                result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);\n              }\n              return result;\n            }, that.toString = function (format, calendar) {\n              if (format === undefined) {\n                format = \"yyyy-MM-dd HH:mm:ss\";\n              }\n              if ($.jqx.date.cache && $.jqx.date.cache[that.dateData + format]) {\n                return $.jqx.date.cache[that.dateData + format];\n              }\n              if (calendar && $.type(calendar) === \"string\" && Globalize) {\n                var culture = Globalize.cultures[calendar];\n                if (culture) calendar = culture.calendar;\n              }\n              var value = that.toDate();\n              if (calendar == undefined || calendar == null) {\n                calendar = that.calendar;\n              }\n              if (typeof value === 'string') {\n                return value;\n              }\n              var lookupkey = value.toString() + \"_\" + format;\n              if (!format || !format.length || format === 'i') {\n                var ret;\n                ret = that.formatDate(value, calendar.patterns.F, calendar);\n                return ret;\n              }\n              var eras = calendar.eras,\n                sortable = format === \"s\";\n              format = that.expandFormat(calendar, format);\n\n              // Start with an empty string\n              ret = [];\n              var hour,\n                zeros = ['0', '00', '000'],\n                foundDay,\n                checkedDay,\n                dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,\n                quoteCount = 0,\n                tokenRegExp = that.getTokenRegExp(),\n                converted;\n              function padZeros(num, c) {\n                var r,\n                  s = num + '';\n                if (c > 1 && s.length < c) {\n                  r = zeros[c - 2] + s;\n                  return r.substr(r.length - c, c);\n                } else {\n                  r = s;\n                }\n                return r;\n              }\n              function hasDay() {\n                if (foundDay || checkedDay) {\n                  return foundDay;\n                }\n                foundDay = dayPartRegExp.test(format);\n                checkedDay = true;\n                return foundDay;\n              }\n              function getPart(date, part) {\n                if (converted) {\n                  return converted[part];\n                }\n                if (date.getMonth != undefined) {\n                  switch (part) {\n                    case 0:\n                      return date.getFullYear();\n                    case 1:\n                      return date.getMonth();\n                    case 2:\n                      return date.getDate();\n                  }\n                }\n              }\n              for (;;) {\n                // Save the current index\n                var index = tokenRegExp.lastIndex,\n                  // Look for the next pattern\n                  ar = tokenRegExp.exec(format);\n\n                // Append the text before the pattern (or the end of the string if not found)\n                var preMatch = format.slice(index, ar ? ar.index : format.length);\n                quoteCount += that.appendPreOrPostMatch(preMatch, ret);\n                if (!ar) {\n                  break;\n                }\n\n                // do not replace any matches that occur inside a string literal.\n                if (quoteCount % 2) {\n                  ret.push(ar[0]);\n                  continue;\n                }\n                var current = ar[0],\n                  clength = current.length;\n                switch (current) {\n                  case \"ddd\":\n                  //Day of the week, as a three-letter abbreviation\n                  case \"dddd\":\n                    // Day of the week, using the full name\n                    var names = clength === 3 ? calendar.days.namesAbbr : calendar.days.names;\n                    ret.push(names[value.getDay()]);\n                    break;\n                  case \"d\":\n                  // Day of month, without leading zero for single-digit days\n                  case \"dd\":\n                    // Day of month, with leading zero for single-digit days\n                    foundDay = true;\n                    ret.push(padZeros(getPart(value, 2), clength));\n                    break;\n                  case \"MMM\":\n                  // Month, as a three-letter abbreviation\n                  case \"MMMM\":\n                    // Month, using the full name\n                    var part = getPart(value, 1);\n                    ret.push(calendar.months[clength === 3 ? \"namesAbbr\" : \"names\"][part]);\n                    break;\n                  case \"M\":\n                  // Month, as digits, with no leading zero for single-digit months\n                  case \"MM\":\n                    // Month, as digits, with leading zero for single-digit months\n                    ret.push(padZeros(getPart(value, 1) + 1, clength));\n                    break;\n                  case \"y\":\n                  // Year, as two digits, but with no leading zero for years less than 10\n                  case \"yy\":\n                  // Year, as two digits, with leading zero for years less than 10\n                  case \"yyyy\":\n                    // Year represented by four full digits\n                    part = that.getEraYear(value, calendar, that.getEra(value, eras), sortable);\n                    if (clength < 4) {\n                      part = part % 100;\n                    }\n                    ret.push(padZeros(part, clength));\n                    break;\n                  case \"h\":\n                  // Hours with no leading zero for single-digit hours, using 12-hour clock\n                  case \"hh\":\n                    // Hours with leading zero for single-digit hours, using 12-hour clock\n                    hour = value.getHours() % 12;\n                    if (hour === 0) hour = 12;\n                    ret.push(padZeros(hour, clength));\n                    break;\n                  case \"H\":\n                  // Hours with no leading zero for single-digit hours, using 24-hour clock\n                  case \"HH\":\n                    // Hours with leading zero for single-digit hours, using 24-hour clock\n                    ret.push(padZeros(value.getHours(), clength));\n                    break;\n                  case \"m\":\n                  // Minutes with no leading zero  for single-digit minutes\n                  case \"mm\":\n                    // Minutes with leading zero  for single-digit minutes\n                    ret.push(padZeros(value.getMinutes(), clength));\n                    break;\n                  case \"s\":\n                  // Seconds with no leading zero for single-digit seconds\n                  case \"ss\":\n                    // Seconds with leading zero for single-digit seconds\n                    ret.push(padZeros(value.getSeconds(), clength));\n                    break;\n                  case \"t\":\n                  // One character am/pm indicator (\"a\" or \"p\")\n                  case \"tt\":\n                    // Multicharacter am/pm indicator\n                    part = value.getHours() < 12 ? calendar.AM ? calendar.AM[0] : \" \" : calendar.PM ? calendar.PM[0] : \" \";\n                    ret.push(clength === 1 ? part.charAt(0) : part);\n                    break;\n                  case \"f\":\n                  // Deciseconds\n                  case \"ff\":\n                  // Centiseconds\n                  case \"fff\":\n                    // Milliseconds\n                    ret.push(padZeros(value.getMilliseconds(), 3).substr(0, clength));\n                    break;\n                  case \"z\":\n                  // Time zone offset, no leading zero\n                  case \"zz\":\n                    // Time zone offset with leading zero\n                    hour = value.getTimezoneOffset() / 60;\n                    ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), clength));\n                    break;\n                  case \"zzz\":\n                    // Time zone offset with leading zero\n                    hour = value.getTimezoneOffset() / 60;\n                    ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), 2) +\n                    // Hard coded \":\" separator, rather than using calendar.TimeSeparator\n                    // Repeated here for consistency, plus \":\" was already assumed in date parsing.\n                    \":\" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));\n                    break;\n                  case \"g\":\n                  case \"gg\":\n                    if (calendar.eras) {\n                      ret.push(calendar.eras[that.getEra(value, eras)].name);\n                    }\n                    break;\n                  case \"/\":\n                    ret.push(calendar[\"/\"]);\n                    break;\n                  default:\n                    throw \"Invalid date format pattern '\" + current + \"'.\";\n                    break;\n                }\n              }\n              var result = ret.join('');\n              if (!$.jqx.date.cache) {\n                $.jqx.date.cache = new Array();\n              }\n              $.jqx.date.cache[that.dateData + format] = result;\n              return result;\n            };\n            that.add = function (value, scale, createNew) {\n              var ms = that.internalMS();\n              if (scale === undefined) {\n                if (createNew === false) {\n                  that.dateData = ms + parseInt(value._ticks / that.ticksPerMillisecond);\n                  return that;\n                }\n                var newDate = new $.jqx.date(ms + parseInt(value._ticks / that.ticksPerMillisecond));\n                newDate.timeZone = that.timeZone;\n                return newDate;\n              }\n              var millis = value * scale;\n              if (millis <= -that.maxMillis || millis >= that.maxMillis) throw new Error('Out of Range');\n              if (createNew === false) {\n                that.dateData = ms + millis;\n                return that;\n              }\n              var newDate = new $.jqx.date(ms + millis);\n              newDate.timeZone = that.timeZone;\n              return newDate;\n            };\n            that.addDays = function (value, createNew) {\n              return that.add(value, that.millisPerDay, createNew);\n            };\n            that.clone = function () {\n              var date = new $.jqx.date(that.dateData);\n              date.timeZone = that.timeZone;\n              return date;\n            };\n            that.clearTime = function () {\n              var month = that.month();\n              var year = that.year();\n              var day = that.day();\n              var newDate = new $.jqx.date(year, month, day, 0, 0, 0, 0);\n              newDate.timeZone = that.timeZone;\n              return newDate;\n            };\n            that.addHours = function (value, createNew) {\n              return that.add(value, that.millisPerHour, createNew);\n            };\n            that.addMilliseconds = function (value, createNew) {\n              return that.add(value, 1, createNew);\n            };\n            that.addMinutes = function (value, createNew) {\n              return that.add(value, that.millisPerMinute, createNew);\n            };\n            that.addMonths = function (months, createNew) {\n              if (months < -120000 || months > 120000) throw new Error(\"Invalid Months Value\");\n              var y = parseInt(that.getDatePart(that.datePartYear));\n              var m = parseInt(that.getDatePart(that.datePartMonth));\n              var d = parseInt(that.getDatePart(that.datePartDay));\n              var i = m - 1 + months;\n              if (i >= 0) {\n                m = i % 12 + 1;\n                y = y + i / 12;\n              } else {\n                m = 12 + (i + 1) % 12;\n                y = y + (i - 11) / 12;\n              }\n              y = parseInt(y);\n              if (y < 1 || y > 9999) {\n                throw new Error(\"Year out of range\");\n              }\n              var days = that.daysInMonth(y, m);\n              if (d > days) d = days;\n              if (createNew === false) {\n                that.dateData = that.dateToMS(y, m, d) + that.internalMS() % that.millisPerDay;\n                return that;\n              }\n              var newDate = new $.jqx.date(that.dateToMS(y, m, d) + that.internalMS() % that.millisPerDay);\n              newDate.timeZone = that.timeZone;\n              return newDate;\n            };\n            that.addSeconds = function (value, createNew) {\n              return that.add(value, that.millisPerSecond, createNew);\n            };\n            that.addYears = function (value, createNew) {\n              return that.addMonths(value * 12, createNew);\n            };\n            that.getTimeZoneOffset = function () {\n              var today = new Date();\n              var jan = new Date(today.getFullYear(), 0, 1);\n              var jul = new Date(today.getFullYear(), 6, 1);\n              var dst = today.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n              return {\n                offset: -(today.getTimezoneOffset() / 60),\n                dst: +dst\n              };\n            };\n            that.isInDaylightSavingTime = function () {\n              var today = new Date();\n              var winter = new Date(today.getFullYear(), 0, 1);\n              var summer = new Date(today.getFullYear(), 6, 1);\n              return that.date().getTimezoneOffset() < Math.max(winter.getTimezoneOffset(), summer.getTimezoneOffset());\n            };\n            that.supportsDaylightSavingTime = function () {\n              var today = new Date();\n              var winter = new Date(today.getFullYear(), 0, 1);\n              var summer = new Date(today.getFullYear(), 6, 1);\n              return winter.getTimezoneOffset() != summer.getTimezoneOffset();\n            };\n            that.date = function () {\n              var month = that.month();\n              var year = that.year();\n              var day = that.day();\n              var newDate = new $.jqx.date(year, month, day);\n              newDate.timeZone = that.timeZone;\n              return newDate;\n            };\n            that.isToday = function () {\n              var today = new Date();\n              var month = that.month();\n              var year = that.year();\n              var day = that.day();\n              var hour = that.hour();\n              var minute = that.minute();\n              if (today.getFullYear() === year && today.getMonth() === month - 1 && today.getDate() === day) {\n                return true;\n              }\n              return false;\n            };\n            that.isNow = function () {\n              var today = new Date();\n              var month = that.month();\n              var year = that.year();\n              var day = that.day();\n              var hour = that.hour();\n              var minute = that.minute();\n              if (today.getFullYear() === year && today.getMonth() === month - 1 && today.getDate() === day && today.getHours() === hour) {\n                return true;\n              }\n              return false;\n            };\n            that.isWeekend = function () {\n              return that.dayOfWeek() == 0 || that.dayOfWeek() == 6;\n            };\n            that.toDate = function (timeZone) {\n              var month = that.month();\n              var year = that.year();\n              var day = that.day();\n              var hour = that.hour();\n              var minute = that.minute();\n              var second = that.second();\n              var millisecond = that.millisecond();\n              var result = new Date(year, month - 1, day);\n              if (year < 1970) {\n                result.setFullYear(year);\n              }\n              result.setHours(hour, minute, second, millisecond);\n              if (timeZone) {\n                var matches = that.timeZones.filter(function (zone) {\n                  return zone.id == timeZone;\n                });\n                if (matches.length) {\n                  var tzMinOffset = matches[0].offset;\n                  if (timeZone == \"Local\") {\n                    tzMinOffset = -result.getTimezoneOffset();\n                  }\n                  var localTime = result.getTime();\n                  var localOffset = result.getTimezoneOffset() * 60 * 1000;\n                  if (that.timeZone) {\n                    var timeZoneMatches = that.timeZones.filter(function (zone) {\n                      return zone.id == that.timeZone;\n                    });\n                    if (timeZoneMatches.length) {\n                      var localOffset = -timeZoneMatches[0].offset * 60 * 1000;\n                    }\n                  }\n                  // obtain UTC time in msec\n                  var utc = localTime + localOffset;\n\n                  // create new Date object for different city\n                  // using supplied offset\n                  result = new Date(utc + 60 * 1000 * tzMinOffset);\n                }\n              }\n              return result;\n            };\n            that.toTimeZone = function (timeZone) {\n              var tz = timeZone;\n              if (tz == null) tz = \"Local\";\n              var date = that.toDate(tz);\n              var jqxDate = new $.jqx.date(date);\n              jqxDate.timeZone = timeZone;\n              return jqxDate;\n            };\n            that.day = function () {\n              return that.getDatePart(that.datePartDay);\n            };\n            that.month = function () {\n              return that.getDatePart(that.datePartMonth);\n            };\n            that.year = function () {\n              return that.getDatePart(that.datePartYear);\n            };\n            that.millisecond = function () {\n              return parseInt(that.internalMS() % 1000);\n            };\n            that.hour = function () {\n              return parseInt(that.internalMS() / that.millisPerHour % 24);\n            };\n            that.minute = function () {\n              return parseInt(that.internalMS() / that.millisPerMinute % 60);\n            };\n            that.second = function () {\n              return parseInt(that.internalMS() / that.millisPerSecond % 60);\n            };\n            that.valueOf = function () {\n              return that.dateData;\n            };\n            that.equals = function (date) {\n              return that.dateData === date.dateData;\n            };\n            if (arguments.length === 0) {\n              var date = new Date();\n              that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n            } else if (arguments.length === 1) {\n              if (arguments[0] == undefined) arguments[0] = \"todayDate\";\n              var isNumber = typeof arguments[0] === 'number' && isFinite(arguments[0]);\n              if (!isNumber && $.type(arguments[0]) === \"string\") {\n                if (arguments[0] === \"today\") {\n                  var date = new Date();\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                } else if (arguments[0] === \"todayDate\") {\n                  var date = new Date();\n                  date.setHours(0, 0, 0, 0);\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                } else {\n                  var date = that.tryparseDate(arguments[0]);\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                }\n              } else {\n                if (typeof arguments[0] === \"number\") {\n                  that.dateData = arguments[0];\n                } else {\n                  if ($.type(arguments[0]) == \"date\") {\n                    var date = arguments[0];\n                    that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                  } else {\n                    if (arguments[0].dateData !== undefined) {\n                      that.dateData = arguments[0].dateData;\n                    } else {\n                      that.dateData = arguments[0];\n                    }\n                  }\n                }\n              }\n            } else if (arguments.length === 2) {\n              if (arguments[0] == undefined) arguments[0] = \"todayDate\";\n              var isNumber = typeof arguments[0] === 'number' && isFinite(arguments[0]);\n              if (!isNumber && $.type(arguments[0]) === \"string\") {\n                if (arguments[0] === \"today\") {\n                  var date = new Date();\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                } else if (arguments[0] === \"todayDate\") {\n                  var date = new Date();\n                  date.setHours(0, 0, 0, 0);\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                } else {\n                  var date = that.tryparseDate(arguments[0]);\n                  that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                }\n              } else {\n                if (typeof arguments[0] === \"number\") {\n                  that.dateData = arguments[0];\n                } else {\n                  if ($.type(arguments[0]) == \"date\") {\n                    var date = arguments[0];\n                    that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n                  } else {\n                    if (arguments[0].dateData !== undefined) {\n                      that.dateData = arguments[0].dateData;\n                    } else {\n                      that.dateData = arguments[0];\n                    }\n                  }\n                }\n              }\n              that.timeZone = arguments[1];\n            } else if (arguments.length > 2) {\n              if ($.type(arguments[0]) === \"string\") {\n                var date = that.tryparseDate(arguments[0], arguments[2], arguments[1]);\n                that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n              } else {\n                var year = arguments[0];\n                var month = arguments[1];\n                var day = arguments[2];\n                var hour = arguments[3];\n                var minute = arguments[4];\n                var second = arguments[5];\n                var millisecond = arguments[6];\n                if (hour === undefined) hour = 0;\n                if (minute === undefined) minute = 0;\n                if (second === undefined) second = 0;\n                if (millisecond === undefined) millisecond = 0;\n                month--;\n                var date = new Date(year, month, day, hour, minute, second, millisecond);\n                if (year < 1970) {\n                  date.setFullYear(year);\n                }\n                that.dateData = that.dateToMS(date.getFullYear(), date.getMonth() + 1, date.getDate()) + that.timeToMS(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n              }\n            }\n            return that;\n          };\n        })(jqxBaseFramework);\n        if (!Array.prototype.filter) {\n          Array.prototype.filter = function (fun /*, thisp */) {\n            \"use strict\";\n\n            if (this === void 0 || this === null) throw new TypeError();\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (typeof fun !== \"function\") throw new TypeError();\n            var res = [];\n            var thisp = arguments[1];\n            for (var i = 0; i < len; i++) {\n              if (i in t) {\n                var val = t[i]; // in case fun mutates this\n                if (fun.call(thisp, val, i, t)) res.push(val);\n              }\n            }\n            return res;\n          };\n        }\n      })();\n\n      /***/\n    }),\n    /***/4993: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxDateTimeInput\", \"\", {});\n          $.extend($.jqx._jqxDateTimeInput.prototype, {\n            defineInstance: function () {\n              var settings = {\n                value: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                minDate: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                maxDate: $.jqx._jqxDateTimeInput.getDateTime(new Date()),\n                min: new Date(1900, 0, 1),\n                max: new Date(2100, 0, 1),\n                rowHeaderWidth: 25,\n                enableViews: true,\n                views: ['month', 'year', 'decade'],\n                selectableDays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                change: null,\n                changing: null,\n                titleFormat: [\"MMMM yyyy\", \"yyyy\", \"yyyy\", \"yyyy\"],\n                // \"primary\", \"inverse\", \"danger\", \"info\", \"success\", \"warning\", \"link\"\n                template: \"default\",\n                // Default: 20\n                // Gets or sets the column header's height.\n                // Type: Number.\n                columnHeaderHeight: 20,\n                // Default: 25\n                // Gets or sets the title's height.\n                // Type: Number.\n                titleHeight: 30,\n                // Type: Number.\n                // Default: 0\n                // Gets or sets the first day of the week - Sunday:0, Monday:1, Tuesday:2, Wednesday:3, Thursday:4, Friday:5, Saturday:6.\n                firstDayOfWeek: 0,\n                // Type: Boolean.\n                // Default: false.\n                // Shows or hides the week numbers.\n                showWeekNumbers: false,\n                showTimeButton: false,\n                // store value in cookie\n                cookies: false,\n                cookieoptions: null,\n                showFooter: false,\n                //Type: String.\n                //Default: null.\n                //Sets the masked input's formatString.\n                // Available ready to use patterns:\n                // short date pattern: \"d\",\n                // long date pattern: \"D\"\n                // short time pattern: \"t\"\n                // long time pattern: \"T\"\n                // long date, short time pattern: \"f\"\n                // long date, long time pattern: \"F\"\n                // month/day pattern: \"M\"\n                // month/year pattern: \"Y\"\n                // sortable format that does not vary by culture: \"S\"\n                formatString: \"dd/MM/yyyy\",\n                //Type: Number.\n                //Default: 0.\n                //Sets width of the masked input in pixels. Only positive values have effect.\n                width: 200,\n                //Type: Number.\n                //Default: 0.\n                //Sets height of the masked input in pixels.\n                height: 25,\n                // Type: String.\n                // Gets or sets the string format of the day names.\n                // Possible values: default, shortest, firstTwoLetters, firstLetter, full\n                dayNameFormat: 'firstTwoLetters',\n                // Type: String\n                // Sets the  text alignment.\n                textAlign: 'left',\n                // Type: Boolean\n                // Default: false\n                // Sets the readonly state of the input.\n                readonly: false,\n                // Type: String\n                // sets the culture.\n                // Default: 'default'\n                culture: \"default\",\n                activeEditor: null,\n                // Type: Boolean\n                // Default:true.\n                // shows or hides the calendar's button.\n                showCalendarButton: true,\n                showDeleteButton: false,\n                // Type: Number\n                // Default: 250\n                // Sets the animation's duration when the calendar is displayed.\n                openDelay: 250,\n                // Type: Number\n                // Default: 300\n                // Sets the animation's duration when the calendar is going to be hidden.\n                closeDelay: 300,\n                // Type: Boolean\n                // Default: true\n                // Sets whether to close the calendar after selecting a date.\n                closeCalendarAfterSelection: true,\n                // internal property\n                isEditing: false,\n                // Type: Boolean.\n                // enables the browser window bounds detection.\n                // Default: false.\n                enableBrowserBoundsDetection: false,\n                dropDownHorizontalAlignment: 'left',\n                dropDownVerticalAlignment: \"bottom\",\n                // Type: Boolean\n                // Enables absolute date selection. When this property is true, the user selects one symbol at a time instead of a group of symbols.\n                // Default: false\n                enableAbsoluteSelection: false,\n                // Type: Boolean\n                // Enables or disables the DateTimeInput.\n                // Default: false\n                disabled: false,\n                // Type: Number\n                // Default: 18\n                // Sets the button's size.\n                buttonSize: 21,\n                // default, none\n                // Type: String.\n                // enables or disables the animation.\n                animationType: 'slide',\n                // Type: String\n                // Default: auto ( the drop down takes the calendar's width.)\n                // Sets the popup's width.\n                dropDownWidth: '200px',\n                restrictedDates: new Array(),\n                // Type: String\n                // Default: 200px ( the height is 200px )\n                // Sets the popup's height.\n                dropDownHeight: '205px',\n                dropDownContainer: \"default\",\n                // 'none', 'range', 'default'\n                selectionMode: 'default',\n                renderMode: \"full\",\n                rtl: false,\n                timeRange: null,\n                _editor: false,\n                todayString: 'Today',\n                clearString: 'Clear',\n                popupZIndex: 3001,\n                allowNullDate: true,\n                changeType: null,\n                placeHolder: \"\",\n                enableHover: true,\n                hint: true,\n                allowKeyboardDelete: true,\n                yearCutoff: null,\n                editMode: 'default',\n                // Possible values: 'default', 'full'\n                localization: {\n                  backString: \"Back\",\n                  forwardString: \"Forward\",\n                  todayString: \"Today\",\n                  clearString: \"Clear\",\n                  calendar: {\n                    name: \"Gregorian_USEnglish\",\n                    \"/\": \"/\",\n                    // separator of parts of a time (e.g. \":\" in 05:44 PM)\n                    \":\": \":\",\n                    // the first day of the week (0:Sunday, 1:Monday, etc)\n                    firstDay: 0,\n                    days: {\n                      // full day names\n                      names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                      // abbreviated day names\n                      namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                      // shortest day names\n                      namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                      // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                      names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                      // abbreviated month names\n                      namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n                    },\n                    // AM and PM designators in one of these forms:\n                    // The usual view, and the upper and lower case versions\n                    //      [standard,lowercase,uppercase]\n                    // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n                    //      null\n                    AM: [\"AM\", \"am\", \"AM\"],\n                    PM: [\"PM\", \"pm\", \"PM\"],\n                    eras: [\n                    // eras in reverse chronological order.\n                    // name: the name of the era in this culture (e.g. A.D., C.E.)\n                    // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                    // offset: offset in years from gregorian calendar\n                    {\n                      \"name\": \"A.D.\",\n                      \"start\": null,\n                      \"offset\": 0\n                    }],\n                    twoDigitYearMax: 2029,\n                    patterns: {\n                      // short date pattern\n                      d: \"M/d/yyyy\",\n                      // long date pattern\n                      D: \"dddd, MMMM dd, yyyy\",\n                      // short time pattern\n                      t: \"h:mm tt\",\n                      // long time pattern\n                      T: \"h:mm:ss tt\",\n                      // long date, short time pattern\n                      f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                      // long date, long time pattern\n                      F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                      // month/day pattern\n                      M: \"MMMM dd\",\n                      // month/year pattern\n                      Y: \"yyyy MMMM\",\n                      // S is a sortable format that does not vary by culture\n                      S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                      // formatting of dates in MySQL DataBases\n                      ISO: \"yyyy-MM-dd hh:mm:ss\"\n                    }\n                  }\n                },\n                // DateTimeInput events.\n                events: [\n                // Occurs when the value is changed.\n                'valueChanged',\n                // Occurs when the text is changed.\n                'textchanged',\n                // Occurs when the mouse button is clicked.\n                'mousedown',\n                // Occurs when the mouse button is clicked.\n                'mouseup',\n                // Occurs when the user presses a key.\n                'keydown',\n                // Occurs when the user presses a key. Fired after keydown and keypress\n                'keyup',\n                // Occurs when the user presses a key.\n                'keypress',\n                // Occurs when the calendar is opened.\n                'open',\n                // Occurs when the calendar is hidden.\n                'close',\n                // Occurs when the value is changed.\n                'change'],\n                aria: {\n                  \"aria-valuenow\": {\n                    name: \"getDate\",\n                    type: \"date\"\n                  },\n                  \"aria-valuetext\": {\n                    name: \"getText\",\n                    type: \"string\"\n                  },\n                  \"aria-valuemin\": {\n                    name: \"min\",\n                    type: \"date\"\n                  },\n                  \"aria-valuemax\": {\n                    name: \"max\",\n                    type: \"date\"\n                  },\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                }\n              };\n              if (this === $.jqx._jqxDateTimeInput.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              this.value._setHours(0);\n              this.value._setMinutes(0);\n              this.value._setSeconds(0);\n              this.value._setMilliseconds(0);\n              this.minDate._setYear(1900);\n              this.minDate._setMonth(1);\n              this.minDate._setDay(1);\n              this.minDate._setHours(1);\n              this.minDate._setMinutes(1);\n              this.minDate._setSeconds(1);\n              this.minDate._setMilliseconds(1);\n              this.maxDate._setYear(2100);\n              this.maxDate._setMonth(1);\n              this.maxDate._setDay(1);\n              this.maxDate._setHours(1);\n              this.maxDate._setMinutes(1);\n              this.maxDate._setSeconds(1);\n              this.maxDate._setMilliseconds(1);\n              this.defaultMinDate = this.minDate;\n              this.defaultMaxDate = this.maxDate;\n              return settings;\n            },\n            // creates the masked input's instance.\n            createInstance: function (args) {\n              var hasAttr = \"\";\n              var that = this;\n              if (!that.host.jqxCalendar) {\n                throw new Error(\"jqxDateTimeInput: Missing reference to jqxcalendar.js.\");\n              }\n              if (that.isMaterialized()) {\n                var elementStyle = window.getComputedStyle(this.element);\n                var animation = elementStyle.getPropertyValue('--jqx-dropdown-animation');\n                var dropDownWidth = elementStyle.getPropertyValue('--jqx-datetimeinput-dropdown-width') || 280;\n                var dropDownHeight = elementStyle.getPropertyValue('--jqx-datetimeinput-dropdown-height') || 280;\n                if (animation && this.animationType == \"default\") {\n                  this.animationType = animation.trim();\n                }\n                if (dropDownWidth) {\n                  this.dropDownWidth = dropDownWidth;\n                }\n                if (dropDownHeight) {\n                  this.dropDownHeight = dropDownHeight;\n                }\n              }\n              if (that.formatString != \"dd/MM/yyyy\") {\n                var formats = that.formatString.split(\" \");\n                if (formats && formats.length > 1) {\n                  var extendedFormat = \"\";\n                  for (var i = 0; i < formats.length; i++) {\n                    if (formats[i].length == \"1\") {\n                      extendedFormat += that._getFormatValue(formats[i]);\n                    } else extendedFormat += formats[i];\n                    if (i < formats.length - 1) {\n                      extendedFormat += \" \";\n                    }\n                  }\n                  that.formatString = extendedFormat;\n                }\n              }\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                var inputType = that.element.getAttribute(\"type\");\n                if (inputType) {\n                  if (that.formatString == \"dd/MM/yyyy\") {\n                    if (inputType == \"date\") {\n                      that.formatString = \"d\";\n                    }\n                    if (inputType == \"datetime\") {\n                      var formatString = that._getFormatValue(\"d\") + \" \" + that._getFormatValue(\"t\");\n                      that.formatString = formatString;\n                      that.showTimeButton = true;\n                    }\n                    if (inputType == \"time\") {\n                      that.formatString = \"t\";\n                      that.showTimeButton = true;\n                      that.showCalendarButton = false;\n                    }\n                  }\n                }\n                that.field = that.element;\n                if (that.field.getAttribute('min')) {\n                  var min = new Date(that.field.getAttribute('min'));\n                  if (that._isValidDate(min)) that.min = min;\n                }\n                if (that.field.getAttribute('max')) {\n                  var max = new Date(that.field.getAttribute('max'));\n                  if (that._isValidDate(max)) that.max = max;\n                }\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.value) {\n                  properties.value = that.field.value;\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_jqxDateTimeInput\";\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_jqxDateTimeInput\";\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width();\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight();\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n              if (that.host.attr('value')) {\n                hasAttr = true;\n                var val = that.host.attr('value');\n                if (that.selectionMode != 'range') {\n                  var date = new Date(val);\n                  if (date != undefined && !isNaN(date)) {\n                    that.value = $.jqx._jqxDateTimeInput.getDateTime(date);\n                  }\n                }\n              }\n              if (that.value != null && that.value instanceof Date) {\n                that.value = $.jqx._jqxDateTimeInput.getDateTime(that.value);\n              } else if (that.value != null && typeof that.value == \"string\") {\n                var date = new Date(that.value);\n                if (date != undefined && !isNaN(date)) {\n                  that.value = $.jqx._jqxDateTimeInput.getDateTime(date);\n                } else if (that.value.indexOf(',') >= 0) {\n                  that.value = that.value.replace(/\\,/g, '/');\n                  var date = new Date(that.value);\n                  if (date != undefined && !isNaN(date)) {\n                    that.value = $.jqx._jqxDateTimeInput.getDateTime(date);\n                  }\n                }\n              }\n              this._initTimeRange();\n              this._validateTimeRange();\n              that.host.attr('data-role', 'input');\n              that.render();\n              $.jqx.aria(this);\n              if (that.getDate() != null) {\n                $.jqx.aria(this, \"aria-label\", \"Current focused date is \" + that.getDate().toLocaleString());\n              } else {\n                $.jqx.aria(this, \"aria-label\", \"Current focused date is Null\");\n              }\n              if (that.minDate !== that.defaultMinDate) {\n                that.min = that.minDate;\n              }\n              if (that.maxDate !== that.defaultMaxDate) {\n                that.max = that.maxDate;\n              }\n              that.setMaxDate(that.max, false);\n              that.setMinDate(that.min, false);\n              if (that.selectionMode !== 'range' && that.value && that.value.dateTime && that.min && that.max && (that.value.dateTime < that.min || that.value.dateTime > that.max)) {\n                if (that.value.dateTime < that.min) {\n                  that.value.dateTime = that.min;\n                }\n                if (that.value.dateTime > that.max) {\n                  that.value.dateTime = that.max;\n                }\n                that._updateText();\n              }\n              if (that.selectionMode == 'range') {\n                if (hasAttr) {\n                  var val = that.host.attr('value');\n                  var val1 = val.substring(0, val.indexOf('-'));\n                  var val2 = val.substring(val.indexOf('-') + 1);\n                  var from = new Date(val1);\n                  var to = new Date(val2);\n                  if (from != undefined && !isNaN(from)) {\n                    if (to != undefined && !isNaN(to)) {\n                      that.setRange(from, to);\n                    }\n                  }\n                } else {\n                  if (that.getDate() != null) {\n                    that.setRange(that.getDate(), that.getDate());\n                  }\n                }\n              }\n              that._getMask();\n              if (that.editMode === 'full' && that.value === null && that._mask[0] !== undefined) {\n                that.dateTimeInput[0].value = that._mask[0];\n              }\n            },\n            _validateTimeRange: function () {\n              if (this.timeRange) {\n                var hours = this.value.dateTime.getHours();\n                var minute = this.value.dateTime.getMinutes();\n                if (hours <= this.timeRange.minHour) {\n                  this.value._setHours(this.timeRange.minHour);\n                  if (minute < this.timeRange.minMinute) {\n                    this.value._setMinutes(this.timeRange.minMinute);\n                    this._updateEditorsValue();\n                  } else {\n                    this._updateEditorsValue();\n                  }\n                }\n                if (hours >= this.timeRange.maxHour) {\n                  this.value._setHours(this.timeRange.maxHour);\n                  if (minute > this.timeRange.maxMinute) {\n                    this.value._setMinutes(this.timeRange.maxMinute);\n                    this._updateEditorsValue();\n                  } else {\n                    this._updateEditorsValue();\n                  }\n                }\n              }\n            },\n            _initTimeRange: function () {\n              if (this.timeRange) {\n                if (this.timeRange.min) {\n                  var meridian = null;\n                  if (this.timeRange.min.indexOf(\"AM\") >= 0 || this.timeRange.min.indexOf(\"PM\") >= 0) {\n                    meridian = this.timeRange.min.indexOf(\"AM\") >= 0 ? \"AM\" : \"PM\";\n                  }\n                  var minParts = this.timeRange.min.split(\":\");\n                  var hour = parseInt(minParts[0]);\n                  var minute = parseInt(minParts[1]);\n                  if (meridian) {\n                    this.timeRange.minDefaultHour = hour;\n                    this.timeRange.minMeridian = meridian;\n                  }\n                  if (meridian && meridian == \"PM\") {\n                    hour += 12;\n                  }\n                  this.timeRange.minHour = hour;\n                  this.timeRange.minMinute = minute;\n                }\n                if (this.timeRange.max) {\n                  var meridian = null;\n                  if (this.timeRange.max.indexOf(\"AM\") >= 0 || this.timeRange.max.indexOf(\"PM\") >= 0) {\n                    meridian = this.timeRange.max.indexOf(\"AM\") >= 0 ? \"AM\" : \"PM\";\n                  }\n                  var maxParts = this.timeRange.max.split(\":\");\n                  var hour = parseInt(maxParts[0]);\n                  var minute = parseInt(maxParts[1]);\n                  if (meridian) {\n                    this.timeRange.maxDefaultHour = hour;\n                    this.timeRange.maxMeridian = meridian;\n                  }\n                  if (meridian && meridian == \"PM\") {\n                    hour += 12;\n                  }\n                  this.timeRange.maxHour = hour;\n                  this.timeRange.maxMinute = minute;\n                }\n              }\n            },\n            _format: function (date, format, culture) {\n              var globalize = false;\n              try {\n                if (window.Globalize != undefined) {\n                  globalize = true;\n                }\n                if (document.Globalize) {\n                  window.Globalize = document.Globalize;\n                  globalize = true;\n                }\n              } catch (error) {\n                if (document.Globalize) {\n                  window.Globalize = document.Globalize;\n                  globalize = true;\n                }\n              }\n              if (document.Globalize) {\n                window.Globalize = document.Globalize;\n                globalize = true;\n              }\n              if ($.global) {\n                return $.global.format(date, format, this.culture);\n              } else if (globalize) {\n                try {\n                  var format = window.Globalize.format(date, format, this.culture);\n                  return format;\n                } catch (error) {\n                  return window.Globalize.format(date, format);\n                }\n              } else if ($.jqx.dataFormat) {\n                if (date instanceof Date) {\n                  return $.jqx.dataFormat.formatdate(date, format, this.localization.calendar);\n                } else if (typeof date === \"number\") {\n                  return $.jqx.dataFormat.formatnumber(date, format, this.localization.calendar);\n                } else {\n                  return $.jqx.dataFormat.formatdate(date, format, this.localization.calendar);\n                }\n              } else throw new Error(\"jqxDateTimeInput: Missing reference to globalize.js.\");\n            },\n            render: function () {\n              var that = this;\n              that._removeHandlers();\n              that.element.innerHTML = \"\";\n              that.host.attr({\n                role: \"textbox\"\n              });\n              that.id = $.jqx.utilities.createId();\n              var id = $.jqx.utilities.createId();\n              var buttonid = $.jqx.utilities.createId();\n              that._setSize();\n              if (that.width == null) {\n                that.width = that.host.width();\n                that.host.width(that.width);\n              }\n              that.touch = $.jqx.mobile.isTouchDevice();\n              var wrapper = $(\"<div class='jqx-max-size jqx-position-relative'></div>\").appendTo(that.host);\n              that.dateTimeInput = $(\"<input style='border: none; padding-left: 3px; padding-right: 3px;' class='jqx-position-absolute' id='\" + \"input\" + that.element.id + \"' autocomplete='off' type='textarea'/>\").appendTo(wrapper);\n              that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-reset\"));\n              that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-clear\"));\n              that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-input-content\"));\n              that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-widget-content\"));\n              that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-rc-all\"));\n              if (that.touch) {\n                that.dateTimeInput.attr('readonly', true);\n                that.readonly = true;\n              }\n              if (!that.isMaterialized()) {\n                that.dateTimeInput.attr('placeHolder', that.placeHolder);\n              }\n              if (that.renderMode != \"full\") {\n                that.dateTimeInput.remove();\n              }\n              var name = that.host.attr('name');\n              if (name) {\n                that.dateTimeInput.attr('name', name);\n              }\n              if (that.host.attr('tabindex')) {\n                that.dateTimeInput.attr('tabindex', that.host.attr('tabindex'));\n                that.host.removeAttr('tabindex');\n              }\n              if (that.rtl) {\n                that.dateTimeInput.css('direction', 'rtl');\n                that.dateTimeInput.addClass('jqx-rtl');\n              }\n              that.calendarButton = $(\"<div style='height: 100%;' class='jqx-position-absolute'><div></div></div>\").appendTo(wrapper);\n              if (!that.rtl) {\n                that.calendarButton.addClass(that.toThemeProperty('jqx-action-button'));\n              } else {\n                that.calendarButton.addClass(that.toThemeProperty('jqx-action-button-rtl'));\n              }\n              that.calendarButtonIcon = $(that.calendarButton.children()[0]);\n              that.calendarButtonIcon.addClass(that.toThemeProperty('jqx-icon'));\n              that.calendarButtonIcon.addClass(that.toThemeProperty('jqx-icon-calendar'));\n              that.calendarButton.addClass(that.toThemeProperty('jqx-fill-state-normal'));\n              if (!that.rtl) {\n                if (!that.showTimeButton) {\n                  that.calendarButton.addClass(that.toThemeProperty('jqx-rc-r'));\n                }\n              } else {\n                that.calendarButton.addClass(that.toThemeProperty('jqx-rc-l'));\n              }\n\n              //\n              that.timeButton = $(\"<div style='height: 100%;' class='jqx-position-absolute'><div></div></div>\").appendTo(wrapper);\n              if (!that.rtl) {\n                that.timeButton.addClass(that.toThemeProperty('jqx-action-button'));\n              } else {\n                that.timeButton.addClass(that.toThemeProperty('jqx-action-button-rtl'));\n              }\n              that.timeButtonIcon = $(that.timeButton.children()[0]);\n              that.timeButtonIcon.addClass(that.toThemeProperty('jqx-icon'));\n              that.timeButtonIcon.addClass(that.toThemeProperty('jqx-icon-time'));\n              that.timeButton.addClass(that.toThemeProperty('jqx-fill-state-normal'));\n              if (!that.rtl) {\n                that.timeButton.addClass(that.toThemeProperty('jqx-rc-r'));\n              } else {\n                that.timeButton.addClass(that.toThemeProperty('jqx-rc-l'));\n              }\n\n              // delete button\n              that.deleteButton = $(\"<div style='margin-left: 2px; right: 0px; height: 100%;' class='jqx-datetimeinput-delete-button jqx-position-absolute'><div></div></div>\").appendTo(wrapper);\n              if (!that.rtl) {\n                that.deleteButton.addClass(that.toThemeProperty('jqx-action-button'));\n              } else {\n                that.deleteButton.addClass(that.toThemeProperty('jqx-action-button-rtl'));\n              }\n              that.deleteButton[0].onclick = function () {\n                that.setDate(null);\n              };\n              that.deleteButtonIcon = $(that.deleteButton.children()[0]);\n              that.deleteButtonIcon.addClass(that.toThemeProperty('jqx-icon'));\n              that.deleteButtonIcon.addClass(that.toThemeProperty('jqx-icon-close'));\n              that.deleteButton.addClass(that.toThemeProperty('jqx-fill-state-normal'));\n              if (!that.rtl) {\n                that.deleteButton.addClass(that.toThemeProperty('jqx-rc-r'));\n              } else {\n                that.deleteButton.addClass(that.toThemeProperty('jqx-rc-l'));\n              }\n              // end of delete button\n\n              var me = this;\n              that._arrange();\n              if ($.jqx._jqxCalendar != null && $.jqx._jqxCalendar != undefined) {\n                try {\n                  var calendarID = 'calendar' + that.id;\n                  var oldContainer = $($.find('#' + calendarID));\n                  if (oldContainer.length > 0) {\n                    oldContainer.remove();\n                  }\n                  $.jqx.aria(this, \"aria-owns\", calendarID);\n                  $.jqx.aria(this, \"aria-haspopup\", true);\n                  $.jqx.aria(this, \"aria-readonly\", that.selectionMode == 'range' ? true : false);\n                  var container = $(\"<div class='jqx-calendar-container' style='overflow: hidden; background: transparent; position: absolute;' id='calendar\" + that.id + \"'><div id='innerCalendar\" + that.id + \"'></div><div id='innerTime\" + that.id + \"'></div></div>\");\n                  if ($.jqx.utilities.getBrowser().browser == 'opera') {\n                    container.hide();\n                  }\n                  container.addClass(that.toThemeProperty('jqx-calendar-container'));\n                  if (that.dropDownContainer == \"element\") {\n                    container.appendTo(that.host);\n                  } else {\n                    container.appendTo(document.body);\n                  }\n                  that.container = container;\n                  that.calendarContainer = $($.find('#innerCalendar' + that.id)).jqxCalendar({\n                    titleFormat: this.titleFormat,\n                    restrictedDates: this.restrictedDates,\n                    changing: that.changing,\n                    change: that.change,\n                    enableViews: that.enableViews,\n                    selectableDays: that.selectableDays,\n                    views: that.views,\n                    rowHeaderWidth: that.rowHeaderWidth,\n                    titleHeight: that.titleHeight,\n                    columnHeaderHeight: that.columnHeaderHeight,\n                    _checkForHiddenParent: false,\n                    enableAutoNavigation: false,\n                    canRender: false,\n                    localization: that.localization,\n                    todayString: that.todayString,\n                    clearString: that.clearString,\n                    dayNameFormat: that.dayNameFormat,\n                    rtl: that.rtl,\n                    culture: that.culture,\n                    showFooter: that.showFooter,\n                    selectionMode: that.selectionMode,\n                    firstDayOfWeek: that.firstDayOfWeek,\n                    showWeekNumbers: that.showWeekNumbers,\n                    width: that.dropDownWidth,\n                    height: that.dropDownHeight,\n                    theme: that.theme\n                  });\n                  if (that.dropDownContainer == \"element\") {\n                    that.calendarContainer.css({\n                      position: 'absolute',\n                      top: 0,\n                      left: 0\n                    });\n                  } else {\n                    that.calendarContainer.css({\n                      position: 'absolute',\n                      zIndex: that.popupZIndex,\n                      top: 0,\n                      left: 0\n                    });\n                  }\n                  that.calendarContainer.addClass(that.toThemeProperty('jqx-popup'));\n                  if ($.jqx.browser.msie) {\n                    that.calendarContainer.addClass(that.toThemeProperty('jqx-noshadow'));\n                  }\n                  that.timeContainer = $($.find('#innerTime' + that.id));\n                  that.timeContainer.css({\n                    position: 'absolute',\n                    zIndex: that.popupZIndex,\n                    top: 0,\n                    left: 0\n                  });\n                  that.timeContainer.addClass(that.toThemeProperty('jqx-popup'));\n                  if ($.jqx.browser.msie) {\n                    that.timeContainer.addClass(that.toThemeProperty('jqx-noshadow'));\n                  }\n                  that._calendar = $.data(that.calendarContainer[0], \"jqxCalendar\").instance;\n                  var me = this;\n                  that._calendar.today = function () {\n                    me.today();\n                  };\n                  that._calendar.clear = function () {\n                    me.clear();\n                  };\n                  if ($.jqx.utilities.getBrowser().browser == 'opera') {\n                    container.show();\n                  }\n                  container.height(parseInt(that.calendarContainer.height()) + 25);\n                  container.width(parseInt(that.calendarContainer.width()) + 25);\n                  if (that.selectionMode == 'range') {\n                    that.readonly = true;\n                  }\n                  if (that.animationType == 'none') {\n                    that.container.css('display', 'none');\n                  } else {\n                    that.container.hide();\n                  }\n                } catch (e) {}\n              }\n              if ($.global) {\n                $.global.preferCulture(that.culture);\n              }\n              that.selectedText = \"\";\n              that._addHandlers();\n              that.self = this;\n              that.oldValue = that.getDate();\n              that.items = new Array();\n              that.editors = new Array();\n              that._loadItems();\n              that.editorText = \"\";\n              if (that.readonly == true) {\n                that.dateTimeInput.css(\"readonly\", that.readonly);\n              }\n              that.dateTimeInput.css(\"text-align\", that.textAlign);\n              that.host.addClass(that.toThemeProperty('jqx-widget'));\n              that.host.addClass(that.toThemeProperty('jqx-datetimeinput'));\n              that.host.addClass(that.toThemeProperty('jqx-input'));\n              that.host.addClass(that.toThemeProperty('jqx-overflow-hidden'));\n              that.host.addClass(that.toThemeProperty('jqx-rc-all'));\n              that.host.addClass(that.toThemeProperty(\"jqx-reset\"));\n              that.host.addClass(that.toThemeProperty(\"jqx-clear\"));\n              that.host.addClass(that.toThemeProperty(\"jqx-widget-content\"));\n              that.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (value) {\n                  instance.host.addClass(me.toThemeProperty('jqx-input-disabled'));\n                  instance.host.addClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                } else {\n                  instance.host.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                  instance.host.removeClass(me.toThemeProperty('jqx-input-disabled'));\n                }\n                $.jqx.aria(instance, \"aria-disabled\", value);\n              };\n              if (that.disabled) {\n                that.host.addClass(that.toThemeProperty('jqx-input-disabled'));\n                that.host.addClass(that.toThemeProperty('jqx-fill-state-disabled'));\n                that.dateTimeInput.attr(\"disabled\", true);\n              }\n              if (that.host.parents('form').length > 0) {\n                that.addHandler(that.host.parents('form'), 'reset', function () {\n                  setTimeout(function () {\n                    me.setDate(new Date());\n                  }, 10);\n                });\n              }\n              if (that.cookies) {\n                var date = $.jqx.cookie.cookie(\"jqxDateTimeInput\" + that.element.id);\n                if (date != null) {\n                  that.setDate(new Date(date));\n                }\n              }\n\n              // fix for IE7\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                if (that.host.parents('.jqx-window').length > 0) {\n                  var zIndex = that.host.parents('.jqx-window').css('z-index');\n                  that.container.css('z-index', zIndex + 10);\n                  that.calendarContainer.css('z-index', zIndex + 10);\n                }\n              }\n              if (that.culture != 'default') {\n                that._applyCulture();\n              }\n              if (that.value) {\n                if (that.calendarContainer.jqxCalendar('_isDisabled', that.value.dateTime)) {\n                  that.dateTimeInput.addClass(that.toThemeProperty(\"jqx-input-invalid\"));\n                } else {\n                  that.dateTimeInput.removeClass(that.toThemeProperty(\"jqx-input-invalid\"));\n                }\n              }\n              this._addBarAndLabel(this.dateTimeInput);\n              this._updateHint(true);\n              if (that.template) {\n                that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.timeButton.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.calendarButton.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n              }\n              this._setSize();\n              this._arrange();\n            },\n            val: function (value) {\n              var that = this;\n              if (arguments.length != 0) {\n                if (value == null) that.setDate(null);\n                if (that.selectionMode == 'range') {\n                  that.setRange(arguments[0], arguments[1]);\n                  return that.getText();\n                }\n                if (value instanceof Date) {\n                  that.setDate(value);\n                }\n                if (typeof value == \"string\") {\n                  if (value == 'date') {\n                    return that.getDate();\n                  }\n                  that.setDate(value);\n                }\n                if (that._calendar.getDate() != that.getDate()) {\n                  that._calendar.setDate(that.getDate());\n                }\n              }\n              return that.getText();\n            },\n            _setSize: function () {\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (this.element.offsetWidth === 0) {\n                borderSize = 2;\n              }\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              }\n              ;\n              var isPercentage = false;\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.host.width(this.width);\n                if (borderSize > 0) {\n                  this.host.css('box-sizing', 'border-box');\n                }\n              }\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.host.height(this.height);\n              }\n              var me = this;\n              var resizeFunc = function () {\n                if (me.calendarContainer) {\n                  me._arrange();\n                }\n              };\n              if (isPercentage) {\n                if (this.calendarContainer) {\n                  this._arrange();\n                  var width = this.host.width();\n                  if (this.dropDownWidth != 'auto') {\n                    width = this.dropDownWidth;\n                  }\n                  this.calendarContainer.jqxCalendar({\n                    width: width\n                  });\n                  this.container.width(parseInt(width) + 25);\n                }\n              }\n              $.jqx.utilities.resize(this.host, function () {\n                resizeFunc();\n              });\n            },\n            _arrange: function () {\n              if (this.height == null) {\n                this.height = 27;\n                this.host.height(27);\n              }\n              var width = parseInt(this.host.width());\n              var height = parseInt(this.host.height());\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n\n              //     width -= borderSize;\n              //    height -= borderSize;\n              var buttonWidth = this.buttonSize;\n              var rightOffset = 2;\n              if (!this.showCalendarButton && !this.showTimeButton) {\n                buttonWidth = 0;\n                var buttonHeight = 0;\n                this.calendarButton.hide();\n                rightOffset = 0;\n              }\n              if (!this.showCalendarButton) {\n                this.calendarButton.hide();\n              } else {\n                this.calendarButton.show();\n              }\n              if (!this.showTimeButton) {\n                this.timeButton.hide();\n              } else {\n                this.timeButton.show();\n              }\n              if (!this.showDeleteButton) {\n                this.deleteButton.hide();\n              } else {\n                this.deleteButton.show();\n              }\n              var contentWidth = width - buttonWidth - 1 * rightOffset;\n              if (this.showTimeButton && this.showCalendarButton) {\n                var contentWidth = width - 2 * buttonWidth - 1 * rightOffset;\n              } else if (this.showTimeButton || this.showCalendarButton) {\n                var contentWidth = width - buttonWidth - 1 * rightOffset;\n              }\n              if (this.showDeleteButton) {\n                contentWidth -= buttonWidth - rightOffset;\n              }\n              if (contentWidth > 0) {\n                this.dateTimeInput[0].style.width = contentWidth + 'px';\n              }\n              if (this.rtl) {\n                this.dateTimeInput[0].style.width = -1 + contentWidth + 'px';\n              }\n              this.dateTimeInput[0].style.left = '0px';\n              this.dateTimeInput[0].style.top = '0px';\n              this.calendarButton[0].style.width = buttonWidth + 1 + 'px';\n              this.calendarButton[0].style.left = 1 + contentWidth + 'px';\n              this.timeButton[0].style.width = buttonWidth + 1 + 'px';\n              if (this.showCalendarButton) {\n                this.timeButton[0].style.left = 1 + this.calendarButton.width() + contentWidth + 'px';\n              } else {\n                this.timeButton[0].style.left = 1 + contentWidth + 'px';\n              }\n              if (this.renderMode != \"full\") {\n                this.calendarButton[0].style.width = '100%';\n                this.calendarButton[0].style.left = '0px';\n                this.calendarButton.css('border', 'none');\n                this.timeButton[0].style.width = '100%';\n                this.timeButton[0].style.left = '0px';\n                this.timeButton.css('border', 'none');\n              }\n              var inputHeight = this.dateTimeInput.height();\n              if (inputHeight == 0 && this.renderMode != \"full\") {\n                inputHeight = parseInt(this.dateTimeInput.css('font-size')) + 3;\n                this.calendarButton.addClass(this.toThemeProperty('jqx-rc-all'));\n                this.timeButton.addClass(this.toThemeProperty('jqx-rc-all'));\n              } else inputHeight = 17;\n              if (this.dateTimeInput[0].className.indexOf('jqx-rc-all') == -1) {\n                this.dateTimeInput.addClass(this.toThemeProperty('jqx-rc-all'));\n              }\n              var top = parseInt(height) / 2 - parseInt(inputHeight) / 2;\n              if (top > 0) {\n                var fontSize = this.dateTimeInput.css(\"font-size\");\n                if (\"\" == fontSize) fontSize = 13;\n                var top = height - 2 - parseInt(fontSize) - 2;\n                if (isNaN(top)) top = 0;\n                if (top < 0) top = 0;\n                var topPadding = top / 2;\n\n                // fix for MSIE 6 and 7. These browsers double the top padding for some reason...\n                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                  topPadding = top / 4;\n                }\n                this.dateTimeInput[0].style.paddingTop = Math.round(topPadding) + \"px\";\n                this.dateTimeInput[0].style.paddingBottom = Math.round(topPadding) + \"px\";\n              }\n              if (this.rtl) {\n                this.calendarButton[0].style.width = buttonWidth + 'px';\n                this.timeButton[0].style.width = buttonWidth + 'px';\n                this.calendarButton.css('left', '0px');\n                if (this.showCalendarButton) {\n                  this.timeButton.css('left', buttonWidth + 'px');\n                } else {\n                  this.timeButton.css('left', '0px');\n                }\n                this.dateTimeInput.css('left', this.calendarButton.width());\n                if (this.showTimeButton && this.showCalendarButton) {\n                  this.dateTimeInput.css('left', this.timeButton.width() + this.calendarButton.width());\n                }\n                if ($.jqx.browser.msie && $.jqx.browser.version <= 8) {\n                  this.dateTimeInput.css('left', 1 + this.calendarButton.width());\n                  if (this.showTimeButton && this.showCalendarButton) {\n                    this.dateTimeInput.css('left', 1 + this.timeButton.width() + this.calendarButton.width());\n                  }\n                }\n              }\n            },\n            _removeHandlers: function () {\n              var me = this;\n              this.removeHandler($(document), 'mousedown.' + this.id);\n              if (this.dateTimeInput) {\n                this.removeHandler(this.dateTimeInput, 'keydown.' + this.id);\n                this.removeHandler(this.dateTimeInput, 'blur');\n                this.removeHandler(this.dateTimeInput, 'focus');\n                this.removeHandler(this.host, 'focus');\n                this.removeHandler(this.dateTimeInput, 'mousedown');\n                this.removeHandler(this.dateTimeInput, 'mouseup');\n                this.removeHandler(this.dateTimeInput, 'keydown');\n                this.removeHandler(this.dateTimeInput, 'keyup');\n                this.removeHandler(this.dateTimeInput, 'keypress');\n              }\n              if (this.calendarButton != null) {\n                this.removeHandler(this.calendarButton, 'mousedown');\n              }\n              if (this.timeButton != null) {\n                this.removeHandler(this.timeButton, 'mousedown');\n              }\n              if (this.calendarContainer != null) {\n                this.removeHandler(this.calendarContainer, 'cellSelected');\n                this.removeHandler(this.calendarContainer, 'cellMouseDown');\n              }\n              this.removeHandler($(window), 'resize.' + this.id);\n            },\n            isOpened: function () {\n              var me = this;\n              var openedCalendar = $.data(document.body, \"openedJQXCalendar\" + this.id);\n              if (openedCalendar != null && openedCalendar == me.calendarContainer) {\n                return true;\n              }\n              return false;\n            },\n            wheel: function (event, self) {\n              if (!self.isEditing) {\n                return;\n              }\n              self.changeType = \"mouse\";\n              var delta = 0;\n              if (!event) /* For IE. */\n                event = window.event;\n              if (event.originalEvent && event.originalEvent.wheelDelta) {\n                event.wheelDelta = event.originalEvent.wheelDelta;\n              }\n              if (event.wheelDelta) {\n                /* IE/Opera. */\n                delta = event.wheelDelta / 120;\n              } else if (event.detail) {\n                /** Mozilla case. */\n                delta = -event.detail / 3;\n              }\n              if (delta) {\n                var result = self._handleDelta(delta);\n                if (!result) {\n                  if (event.preventDefault) event.preventDefault();\n                  event.returnValue = false;\n                  return result;\n                } else return false;\n              }\n              if (event.preventDefault) event.preventDefault();\n              event.returnValue = false;\n            },\n            _handleDelta: function (delta) {\n              if (delta < 0) {\n                this.spinDown();\n              } else this.spinUp();\n              return false;\n            },\n            focus: function () {\n              try {\n                var me = this;\n                me._firstFocusDate = me.getDate();\n                this._setSelectionStart(0);\n                this._selectGroup(-1);\n                this.dateTimeInput.focus();\n                setTimeout(function () {\n                  me._setSelectionStart(0);\n                  me._selectGroup(-1);\n                  me.dateTimeInput.focus();\n                }, 25);\n              } catch (error) {}\n            },\n            _addHandlers: function () {\n              var id = this.element.id;\n              var el = this.element;\n              var me = this;\n              if (this.host.parents()) {\n                this.addHandler(this.host.parents(), 'scroll.datetimeinput' + this.element.id, function (event) {\n                  var opened = me.isOpened();\n                  if (opened) {\n                    me.close();\n                  }\n                });\n              }\n              this.addHandler(this.host, 'mouseenter', function () {\n                if (!me.disabled && me.enableHover) {\n                  var hovered = true;\n                  me.calendarButtonIcon.addClass(me.toThemeProperty('jqx-icon-calendar-hover'));\n                  me.calendarButton.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  if (me.showTimeButton) {\n                    me.timeButtonIcon.addClass(me.toThemeProperty('jqx-icon-time-hover'));\n                    me.timeButton.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                }\n              });\n              this.addHandler(this.host, 'mouseleave', function () {\n                if (!me.disabled && me.enableHover) {\n                  me.calendarButtonIcon.removeClass(me.toThemeProperty('jqx-icon-calendar-hover'));\n                  me.calendarButton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  if (me.showTimeButton) {\n                    me.timeButtonIcon.removeClass(me.toThemeProperty('jqx-icon-time-hover'));\n                    me.timeButton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                }\n              });\n              this.addHandler(this.host, 'mousewheel', function (event) {\n                me.wheel(event, me);\n              });\n              this.addHandler($(document), 'mousedown.' + this.id, this._closeOpenedCalendar, {\n                me: this\n              });\n              if ($.jqx.mobile.isTouchDevice()) {\n                this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id, this._closeOpenedCalendar, {\n                  me: this\n                });\n              }\n              this.addHandler(this.dateTimeInput, 'keydown.' + this.id, function (event) {\n                var openedCalendar = $.data(document.body, \"openedJQXCalendar\" + me.id);\n                if (openedCalendar != null && openedCalendar == me.calendarContainer) {\n                  var result = me.handleCalendarKey(event, me);\n                  return result;\n                }\n              });\n              if (this.calendarContainer != null) {\n                this.addHandler(this.calendarContainer, 'keydown', function (event) {\n                  if (event.keyCode == 13) {\n                    if (me.isOpened()) {\n                      if (!me._calendar._viewAnimating && me._calendar.view == \"month\") {\n                        me.hideCalendar('selected', 'keyboard');\n                        me.dateTimeInput.focus();\n                        return false;\n                      }\n                    }\n                    return true;\n                  } else if (event.keyCode == 9) {\n                    if (me.isOpened()) {\n                      me.hideCalendar('selected', 'keyboard');\n                      return true;\n                    }\n                  } else if (event.keyCode == 27) {\n                    if (me.isOpened()) {\n                      me.hideCalendar(null, 'keyboard');\n                      me.dateTimeInput.focus();\n                      return false;\n                    }\n                    return true;\n                  }\n                  me.timePopup = false;\n                  if (event.keyCode == 84) {\n                    me.timePopup = true;\n                  }\n                  if (event.keyCode == 115) {\n                    if (me.isOpened()) {\n                      me.hideCalendar(\"keyboard\", 'keyboard');\n                      me.dateTimeInput.focus();\n                      return false;\n                    } else if (!me.isOpened()) {\n                      me.showCalendar(\"keyboard\", 'keyboard');\n                      me.dateTimeInput.focus();\n                      return false;\n                    }\n                  }\n                  if (event.altKey) {\n                    if (event.keyCode == 38) {\n                      if (me.isOpened()) {\n                        me.hideCalendar(\"keyboard\", 'keyboard');\n                        me.dateTimeInput.focus();\n                        return false;\n                      }\n                    } else if (event.keyCode == 40) {\n                      if (!me.isOpened()) {\n                        me.showCalendar(\"keyboard\", 'keyboard');\n                        me.dateTimeInput.focus();\n                        return false;\n                      }\n                    }\n                  }\n                });\n                this.addHandler(this.calendarContainer, 'cellSelected', function (event) {\n                  if (me.closeCalendarAfterSelection) {\n                    var calendarOldValue = $.data(document.body, \"openedJQXCalendarValue\");\n                    if (event.args.selectionType == 'mouse') {\n                      if (me.selectionMode != 'range') {\n                        me.hideCalendar('selected', 'mouse');\n                      } else {\n                        if (me._calendar._clicks == 0) {\n                          me.hideCalendar('selected', 'mouse');\n                        }\n                      }\n                    }\n                  }\n                });\n                this.addHandler(this.calendarContainer, 'cellMouseDown', function (event) {\n                  if (me.closeCalendarAfterSelection) {\n                    if (me._calendar.value) {\n                      $.data(document.body, \"openedJQXCalendarValue\", new $.jqx._jqxDateTimeInput.getDateTime(me._calendar.value.dateTime));\n                    }\n                  }\n                });\n              }\n              this.addHandler(this.dateTimeInput, 'blur', function (event) {\n                me.bar.removeClass('focused');\n                me.label.removeClass('focused');\n                me._endFullEdit();\n                if (me.value != null) {\n                  me.isEditing = false;\n                  var oldDay = me.value.dateTime.getDay();\n                  var oldValue = me._oldDT;\n                  me._validateValue(true);\n                  if (event.stopPropagation) {\n                    event.stopPropagation();\n                  }\n                  //if (me.selectableDays.length != 7) {\n                  //    var dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                  //    var d = me.value.dateTime.getDay();\n                  //    var name = dayNames[d];\n                  //    if (me.selectableDays.length > 0) {\n                  //        if (me.selectableDays.indexOf(name) == -1) {\n                  //            if (me.value.dateTime < oldValue) {\n                  //                while (me.selectableDays.indexOf(name) == -1) {\n                  //                    me.value._addDays(-1);\n                  //                    var d = me.value.dateTime.getDay();\n                  //                    name = dayNames[d];\n                  //                }\n                  //            }\n                  //            else {\n                  //                while (me.selectableDays.indexOf(name) == -1) {\n                  //                    me.value._addDays(1);\n                  //                    var d = me.value.dateTime.getDay();\n                  //                    name = dayNames[d];\n                  //                }\n                  //            }\n                  //            me.value.day = me.value.dateTime.getDate();\n                  //            me.value.month = me.value.dateTime.getMonth() + 1;\n                  //            me._updateEditorsValue();\n                  //        }\n                  //    }\n                  //}\n                  me._updateText();\n                  me._raiseEvent(9, event);\n                }\n                if (!me.isOpened()) {\n                  me.host.removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                }\n              });\n              this.addHandler(this.host, 'focus', function (event) {\n                me.focus();\n              });\n              this.addHandler(this.dateTimeInput, 'focus', function (event) {\n                me._firstFocusDate = me.getDate();\n                if (me.value != null) {\n                  if (me.selectionMode != 'range') {\n                    me._oldDT = new Date(me.value.dateTime);\n                  } else me._oldDT = me.getRange();\n                  setTimeout(function () {\n                    var selection = me._selection();\n                    me.isEditing = true;\n                    me._validateValue();\n                    me._updateText();\n                    me._setSelectionStart(0);\n                    me._selectGroup(-1, selection);\n                    me.host.addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                  });\n                } else {\n                  me._setSelectionStart(0);\n                  me._selectGroup(-1);\n                  me.host.addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                }\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n                me.bar.addClass('focused');\n                me.label.addClass('focused');\n                if (event.preventDefault) {\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              var eventName = 'mousedown';\n              if (this.touch) {\n                eventName = $.jqx.mobile.getTouchEventName('touchstart');\n              }\n              this.addHandler(this.calendarButton, eventName, function (event) {\n                var calendar = me.container;\n                var isOpen = calendar.css('display') == 'block';\n                me.timePopup = false;\n                me.calendarPopup = true;\n                if (!me.disabled) {\n                  if (!me.isanimating) {\n                    if (isOpen) {\n                      me.hideCalendar();\n                      return false;\n                    } else {\n                      me.showCalendar(\"mouse\");\n                      event.preventDefault();\n                    }\n                  }\n                }\n              });\n              this.addHandler(this.timeButton, eventName, function (event) {\n                var calendar = me.container;\n                var isOpen = calendar.css('display') == 'block';\n                me.timePopup = true;\n                me.calendarPopup = false;\n                if (!me.disabled) {\n                  if (!me.isanimating) {\n                    if (isOpen) {\n                      me.hideCalendar(\"mouse\", 'mouse');\n                      return false;\n                    } else {\n                      me.showCalendar(\"mouse\");\n                      event.preventDefault();\n                    }\n                  }\n                }\n              });\n              this.addHandler(this.dateTimeInput, 'mousedown', function (event) {\n                if (me.touch) {\n                  if (me.showTimeButton === true && me.showCalendarButton === false) {\n                    me.open('time');\n                  } else {\n                    me.open();\n                  }\n                }\n                return me._raiseEvent(2, event);\n              });\n              this.addHandler(this.dateTimeInput, 'mouseup', function (event) {\n                return me._raiseEvent(3, event);\n              });\n              this.addHandler(this.dateTimeInput, 'keydown', function (event) {\n                return me._raiseEvent(4, event);\n              });\n              this.addHandler(this.dateTimeInput, 'keyup', function (event) {\n                var value = this.value;\n                if (me._fullEditInProgress && me._enteredValue && me._mask[value.length] !== undefined) {\n                  this.value = this.value + me._mask[value.length];\n                }\n                return me._raiseEvent(5, event);\n              });\n              this.addHandler(this.dateTimeInput, 'keypress', function (event) {\n                return me._raiseEvent(6, event);\n              });\n            },\n            createID: function () {\n              var id = Math.random() + '';\n              id = id.replace('.', '');\n              id = '99' + id;\n              id = id / 1;\n              return 'dateTimeInput' + id;\n            },\n            setMaxDate: function (date, refresh) {\n              if (date == null) return;\n              if (date != null && typeof date == \"string\") {\n                date = new Date(date);\n                if (!this._isValidDate(date)) return;\n              }\n              this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(date);\n              if (this._calendar != null) {\n                this._calendar.setMaxDate(date);\n              }\n              if (refresh != false) {\n                if (this.getDate() != null && this.getDate() > date) {\n                  this.setDate(date);\n                }\n                $.jqx.aria(this, \"aria-valuemax\", date);\n                this._refreshValue();\n                this._updateText();\n              }\n            },\n            getMaxDate: function () {\n              if (this.maxDate != null && this.maxDate != undefined) {\n                return this.maxDate.dateTime;\n              }\n              return null;\n            },\n            setMinDate: function (date, refresh) {\n              if (date == null) return;\n              if (date != null && typeof date == \"string\") {\n                date = new Date(date);\n                if (!this._isValidDate(date)) return;\n              }\n              this.minDate = $.jqx._jqxDateTimeInput.getDateTime(date);\n              if (this._calendar != null) {\n                this._calendar.setMinDate(date);\n              }\n              if (refresh != false) {\n                if (this.getDate() != null && this.getDate() < date) {\n                  this.setDate(date);\n                }\n                $.jqx.aria(this, \"aria-valuemin\", date);\n                this._refreshValue();\n                this._updateText();\n              }\n            },\n            getMinDate: function () {\n              if (this.minDate != null && this.minDate != undefined) {\n                return this.minDate.dateTime;\n              }\n              return null;\n            },\n            _applyCulture: function () {\n              var globalize = false;\n              try {\n                if (window.Globalize != undefined) {\n                  globalize = true;\n                }\n              } catch (error) {}\n              try {\n                if ($.global) {\n                  $.global.preferCulture(this.culture);\n                  this.localization.calendar = $.global.culture.calendar;\n                } else if (globalize) {\n                  var culture = Globalize.culture(this.culture);\n                  this.localization.calendar = culture.calendar;\n                }\n                this._loadItems();\n                if (this._calendar != null) {\n                  this._calendar.culture = this.culture;\n                  this._calendar.localization = this.localization;\n                  this._calendar.render();\n                }\n              } catch (error) {}\n            },\n            propertyMap: function (key) {\n              if (key == \"value\") {\n                if (this.selectionMode != 'range') {\n                  return this.getDate();\n                } else return this.getRange();\n              }\n              return null;\n            },\n            propertiesChangedHandler: function (object, oldValues, newValues) {\n              if (newValues && newValues.width && newValues.height && Object.keys(newValues).length == 2) {\n                object.refresh();\n                object.close();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (object.isInitialized == undefined || object.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"dropDownVerticalAlignment\") {\n                object.close();\n              }\n              if (key == \"template\") {\n                object.bar.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue));\n                object.label.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue));\n                object.timeButton.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue));\n                object.calendarButton.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue));\n                object.bar.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.label.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.timeButton.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.calendarButton.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n              }\n              if (key == \"restrictedDates\") {\n                object.calendarContainer.css({\n                  restrictedDates: value\n                });\n              }\n              if (key == \"popupZIndex\") {\n                object.calendarContainer.css({\n                  zIndex: value\n                });\n              }\n              if (key == \"showCalendarButton\" || key === \"showDeleteButton\") {\n                object._arrange();\n              }\n              if (key == \"showTimeButton\") {\n                object._arrange();\n                if (object.timePopupElement) {\n                  object.timePopupElement.remove();\n                  object.timePopupElement = null;\n                }\n              }\n              if (key == \"selectionMode\") {\n                object._calendar.selectionMode = value;\n                object.refreshValue();\n              }\n              if (key == \"min\") {\n                if (typeof value == \"string\") {\n                  object.setMinDate(new Date(value));\n                } else {\n                  object.setMinDate(value);\n                }\n              }\n              if (key == \"max\") {\n                if (typeof value == \"string\") {\n                  object.setMaxDate(new Date(value));\n                } else {\n                  object.setMaxDate(value);\n                }\n              }\n              if (key == \"value\") {\n                if (value != null && value instanceof Date) {\n                  if (isNaN(value.getFullYear()) || isNaN(value.getMonth()) || isNaN(value.getDate())) {\n                    this.value = oldvalue;\n                    return;\n                  }\n                  value = $.jqx._jqxDateTimeInput.getDateTime(value);\n                } else if (value != null && typeof value == \"string\") {\n                  var date = new Date(value);\n                  if (date != undefined && !isNaN(date)) {\n                    this.value = $.jqx._jqxDateTimeInput.getDateTime(date);\n                  }\n                }\n              }\n              if (key == \"views\") {\n                object.calendarContainer.jqxCalendar({\n                  views: value\n                });\n              }\n              if (key == \"enableViews\") {\n                object.calendarContainer.jqxCalendar({\n                  enableViews: value\n                });\n              }\n              if (key == \"selectableDays\") {\n                object.calendarContainer.jqxCalendar({\n                  selectableDays: value\n                });\n              }\n              if (key == \"showFooter\") {\n                object.calendarContainer.jqxCalendar({\n                  showFooter: value\n                });\n              }\n              if (key == 'rtl') {\n                object.calendarContainer.jqxCalendar({\n                  rtl: value\n                });\n                if (value) {\n                  object.dateTimeInput.css('direction', 'rtl');\n                  object.dateTimeInput.addClass('jqx-rtl');\n                } else {\n                  object.dateTimeInput.css('direction', 'ltr');\n                  object.dateTimeInput.removeClass('jqx-rtl');\n                }\n              }\n              if (key == 'todayString' || key == 'clearString') {\n                object.calendarContainer.jqxCalendar({\n                  clearString: object.clearString,\n                  todayString: object.todayString\n                });\n              }\n              if (key == 'dayNameFormat') {\n                object.calendarContainer.jqxCalendar({\n                  dayNameFormat: value\n                });\n              }\n              if (key == 'firstDayOfWeek') {\n                object.calendarContainer.jqxCalendar({\n                  firstDayOfWeek: value\n                });\n              }\n              if (key == 'showWeekNumbers') {\n                object.calendarContainer.jqxCalendar({\n                  showWeekNumbers: value\n                });\n              }\n              if (key == 'culture' || key == 'localization') {\n                object._applyCulture();\n              } else if (key == 'formatString' || key === 'yearCutoff' && (value === null || oldvalue === null)) {\n                if (key === 'formatString') {\n                  object._getMask();\n                }\n                object.items = new Array();\n                object._loadItems();\n              }\n              if (key == \"theme\") {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n                object.calendarContainer.jqxCalendar({\n                  theme: value\n                });\n              }\n              if (key == \"width\" || key == \"height\") {\n                object.close();\n                object.refresh();\n                return;\n              }\n              object._setOption(key, value, oldvalue);\n              if (key == 'dropDownWidth' || key == 'dropDownHeight') {\n                object.calendarContainer.jqxCalendar({\n                  width: object.dropDownWidth,\n                  height: object.dropDownHeight\n                });\n                object._calendar.render();\n                object.container.height(object.calendarContainer.height());\n                object.container.width(object.calendarContainer.width());\n              }\n            },\n            clear: function () {\n              if (this.allowNullDate) {\n                if (this.selectionMode != 'range') {\n                  this.setDate(null);\n                } else {\n                  this._calendar._clicks = 1;\n                  this.setRange(null, null);\n                }\n                this._calendar._clicks = 0;\n              } else {\n                if (this.selectionMode != 'range') {\n                  this.setDate(this.getMinDate());\n                } else {\n                  this._calendar._clicks = 1;\n                  this.setRange(this.getMinDate(), this.getMinDate());\n                  this._calendar._clicks = 0;\n                }\n              }\n              this.hideCalendar();\n            },\n            today: function () {\n              var date = new Date();\n              date.setHours(0, 0, 0, 0);\n              if (this.selectionMode != 'range') {\n                this.setDate(date);\n              } else {\n                this._calendar._clicks = 0;\n                var toDate = new Date();\n                toDate.setHours(23, 59, 59, 0);\n                this.setRange(date, toDate);\n                this._calendar._clicks = 0;\n              }\n              this.hideCalendar();\n            },\n            _isValidDate: function (date) {\n              if (date == null) {\n                return true;\n              }\n              if (typeof date !== 'object') return false;\n              if (date !== null && date.getFullYear) {\n                return true;\n              }\n              if (date == \"Invalid Date\" || date.valueOf() < 0 || isNaN(date.valueOf())) return false;\n              return true;\n            },\n            setDate: function (date) {\n              var oldDate = this.getDate();\n              if (date != null && typeof date == \"string\") {\n                var beforeParse = date;\n                if (date.toString().indexOf(',') >= 0) {\n                  date = date.replace(/\\,/g, '/');\n                  date = new Date(date);\n                  if (!this._isValidDate(date)) {\n                    date = beforeParse;\n                  }\n                }\n                if (date.toString().indexOf('-') >= 0) {\n                  date = date.replace(/\\-/g, '/');\n                  date = new Date(date);\n                  if (!this._isValidDate(date)) {\n                    date = beforeParse;\n                  }\n                  if (date.getFullYear && isNaN(date.getFullYear)) {\n                    date = beforeParse;\n                  }\n                }\n                if (date != '') {\n                  var tmpDate = date;\n                  if (window.Globalize != undefined) {\n                    date = window.Globalize.parseDate(tmpDate, this.formatString, this.culture);\n                  } else if ($.jqx.dataFormat) {\n                    date = $.jqx.dataFormat.parsedate(tmpDate, this.formatString, this.localization.calendar);\n                  } else {\n                    date = new Date(date);\n                  }\n                  if (date === null && tmpDate !== null) {\n                    if (this._isValidDate(tmpDate)) {\n                      date = tmpDate;\n                    }\n                  }\n                  if (!this._isValidDate(date)) {\n                    return;\n                  }\n                }\n              }\n              if (date == null || date == 'null' || date == 'undefined') {\n                if (!this.allowNullDate) {\n                  date = this.min;\n                }\n              }\n              if (!this._isValidDate(date)) date = null;\n              if (date == null || date == 'null' || date == 'undefined' || date === '') {\n                if (this.value != null) {\n                  this.value = null;\n                  this._calendar.setDate(null);\n                  this._refreshValue();\n                  if (this.cookies) {\n                    if (this.value != null) {\n                      $.jqx.cookie.cookie(\"jqxDateTimeInput\" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);\n                    }\n                  }\n                  this._setSelectionStart(0);\n                  this._selectGroup(-1);\n                  this._raiseEvent('0', date, oldDate);\n                  this._raiseEvent('9', date, oldDate);\n                }\n                return;\n              }\n              if (date < this.getMinDate() || date > this.getMaxDate()) {\n                return;\n              }\n              if (this.value == null) {\n                this.value = new $.jqx._jqxDateTimeInput.getDateTime(new Date());\n                this.value._setHours(0);\n                this.value._setMinutes(0);\n                this.value._setSeconds(0);\n                this.value._setMilliseconds(0);\n              }\n              if (date.getFullYear) {\n                this.value._setYear(date.getFullYear());\n                this.value._setDay(1);\n                this.value._setMonth(date.getMonth() + 1);\n                this.value._setHours(date.getHours());\n                this.value._setMinutes(date.getMinutes());\n                this.value._setSeconds(date.getSeconds());\n                this.value._setMilliseconds(date.getMilliseconds());\n                this.value._setDay(date.getDate());\n              }\n              this._validateTimeRange();\n              this._refreshValue();\n              if (this.cookies) {\n                if (this.value != null) {\n                  $.jqx.cookie.cookie(\"jqxDateTimeInput\" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);\n                }\n              }\n              var newDate = this.getDate();\n              var diff = newDate - oldDate;\n              if (diff != 0) {\n                this._raiseEvent('0', date, oldDate);\n                this._raiseEvent('9', date, oldDate);\n                return true;\n              }\n            },\n            getDate: function () {\n              if (this.value == undefined) return null;\n              return new Date(this.value.dateTime);\n            },\n            getText: function () {\n              return this.dateTimeInput.val();\n            },\n            setRange: function (from, to) {\n              if (typeof from == 'object' && !this._isValidDate(from)) from = null;\n              if (typeof to == 'object' && !this._isValidDate(to)) to = null;\n              if (from != null && typeof from == \"string\") {\n                from = new Date(from);\n                if (!this._isValidDate(from)) return;\n              }\n              if (to != null && typeof to == \"string\") {\n                to = new Date(to);\n                if (!this._isValidDate(to)) return;\n              }\n              if (from && isNaN(from) && from.toString() == \"NaN\" && typeof from != \"string\") {\n                return;\n              }\n              if (to && isNaN(to) && to.toString() == \"NaN\" && typeof to != \"string\") {\n                return;\n              }\n              this._calendar.setRange(from, to);\n              if (to && from && to.valueOf() != from.valueOf()) {\n                this._range = {\n                  from: from,\n                  to: to\n                };\n              } else {\n                this._range = this._calendar.getRange();\n              }\n              var date = from;\n              if (date != null && date.getFullYear) {\n                if (this.value == null) {\n                  this.value = new $.jqx._jqxDateTimeInput.getDateTime(new Date());\n                  this.value._setHours(0);\n                  this.value._setMinutes(0);\n                  this.value._setSeconds(0);\n                  this.value._setMilliseconds(0);\n                }\n                this.value._setYear(date.getFullYear());\n                this.value._setMonth(date.getMonth() + 1);\n                this.value._setHours(date.getHours());\n                this.value._setMinutes(date.getMinutes());\n                this.value._setSeconds(date.getSeconds());\n                this.value._setMilliseconds(date.getMilliseconds());\n                this.value._setDay(date.getDate());\n              }\n              this._refreshValue();\n              if (this.value) {\n                this._raiseEvent('0', this.value.dateTime);\n              } else {\n                this._raiseEvent('0', null);\n              }\n            },\n            getRange: function () {\n              var range = this._calendar.getRange();\n              if (this._range) {\n                var from = this._range.from;\n                var to = this._range.to;\n                if (to && from && to.valueOf() != from.valueOf()) {\n                  if (range.from) {\n                    range.from.setHours(from.getHours(), from.getMinutes(), from.getSeconds(), from.getMilliseconds());\n                  }\n                  if (range.to) {\n                    range.to.setHours(to.getHours(), to.getMinutes(), to.getSeconds(), to.getMilliseconds());\n                  }\n                }\n              }\n              return range;\n            },\n            _validateValue: function (blur) {\n              var needValueUpdate = false;\n              for (var i = 0; i < this.items.length; i++) {\n                var editValue = this.editors[i].value;\n                switch (this.items[i].type) {\n                  case 'FORMAT_AMPM':\n                    if (editValue < 0) {\n                      editValue = 0;\n                    } else if (editValue > 1) {\n                      editValue = 1;\n                    }\n                    break;\n                  case 'Character':\n                    break;\n                  case 'Day':\n                    if (editValue < 1) {\n                      editValue = 1;\n                    } else if (editValue > 31) {\n                      editValue = 31;\n                    }\n                    break;\n                  case 'FORMAT_hh':\n                    if (editValue < 1) {\n                      editValue = 1;\n                    } else if (editValue > 12) {\n                      editValue = 12;\n                    }\n                    break;\n                  case 'FORMAT_HH':\n                    if (editValue < 0) {\n                      editValue = 0;\n                    } else if (editValue > 23) {\n                      editValue = 23;\n                    }\n                    break;\n                  case 'Millisecond':\n                    if (editValue < 0) {\n                      editValue = 0;\n                    } else if (editValue > 999) {\n                      editValue = 999;\n                    }\n                    break;\n                  case 'Minute':\n                    if (editValue < 0) {\n                      editValue = 0;\n                    } else if (editValue > 59) {\n                      editValue = 59;\n                    }\n                    break;\n                  case 'Month':\n                    if (editValue < 1) {\n                      editValue = 1;\n                    } else if (editValue > 12) {\n                      editValue = 12;\n                    }\n                    break;\n                  case 'ReadOnly':\n                    break;\n                  case 'Second':\n                    if (editValue < 0) {\n                      editValue = 0;\n                    } else if (editValue > 59) {\n                      editValue = 59;\n                    }\n                    break;\n                  case 'Year':\n                    if (editValue < this.minDate.year) {\n                      editValue = this.minDate.year;\n                    } else if (editValue > this.maxDate.year) {\n                      editValue = this.maxDate.year;\n                    }\n                    break;\n                }\n                if (this.editors[i].value != editValue) {\n                  this.editors[i].value = editValue;\n                  needValueUpdate = true;\n                }\n              }\n              this.updateValue(blur);\n              if (this.value != null && blur === true) {\n                if (this.value.dateTime > this.maxDate.dateTime) {\n                  this._internalSetValue(this.maxDate);\n                  this._updateEditorsValue();\n                } else if (this.value.dateTime < this.minDate.dateTime) {\n                  this._internalSetValue(this.minDate);\n                  this._updateEditorsValue();\n                }\n                this._updateText();\n              }\n            },\n            spinUp: function () {\n              var value = this.value;\n              if (value == null) return;\n              if (this.activeEditor != null) {\n                var currentEditorIndex = this.editors.indexOf(this.activeEditor);\n                if (currentEditorIndex == -1) return;\n                if (this.items[currentEditorIndex].type == 'Day') {\n                  if (this.value != null) {\n                    this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month);\n                  }\n                }\n                var positions = this.activeEditor.positions;\n                this.activeEditor.increaseValue(this.enableAbsoluteSelection);\n                this.activeEditor.positions = positions;\n              }\n              if (this.isEditing) this.isEditing = false;\n              this.updateValue();\n              this.isEditing = true;\n              this._updateText();\n              var index1 = this.editors.indexOf(this.activeEditor);\n              if (index1 >= 0) {\n                this._selectGroup(index1);\n              }\n            },\n            spinDown: function () {\n              var value = this.value;\n              if (value == null) return;\n              if (this.activeEditor != null) {\n                var currentEditorIndex = this.editors.indexOf(this.activeEditor);\n                if (currentEditorIndex == -1) return;\n                if (this.items[currentEditorIndex].type == 'Day') {\n                  if (this.value != null) {\n                    this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month);\n                  }\n                }\n                var positions = this.activeEditor.positions;\n                this.activeEditor.decreaseValue(this.enableAbsoluteSelection);\n                this.activeEditor.positions = positions;\n              }\n              if (this.isEditing) this.isEditing = false;\n              this.updateValue();\n              this.isEditing = true;\n              this._updateText();\n              var index1 = this.editors.indexOf(this.activeEditor);\n              if (index1 >= 0) {\n                this._selectGroup(index1);\n              }\n            },\n            _passKeyToCalendar: function (event) {\n              if (event.keyCode == 13 || event.keyCode == 9) {\n                this.hideCalendar('selected', 'keyboard');\n                return true;\n              } else if (event.keyCode == 27) {\n                var calendar = this.calendarContainer;\n                var calendarInstance = this._calendar;\n                var closeAfterSelection = this.closeCalendarAfterSelection;\n                this.closeCalendarAfterSelection = false;\n                calendarInstance.setDate(this.value.dateTime);\n                this.closeCalendarAfterSelection = closeAfterSelection;\n                this.hideCalendar();\n              }\n              var closeAfterSelection = this.closeCalendarAfterSelection;\n              this.closeCalendarAfterSelection = false;\n              var result = this._calendar._handleKey(event);\n              this.closeCalendarAfterSelection = closeAfterSelection;\n              return result;\n            },\n            handleCalendarKey: function (event, me) {\n              var $target = $(event.target);\n              var openedCalendar = $.data(document.body, \"openedJQXCalendar\" + this.id);\n              if (openedCalendar != null) {\n                if (openedCalendar.length > 0) {\n                  var result = me._passKeyToCalendar(event);\n                  return result;\n                }\n              }\n              return true;\n            },\n            _findPos: function (obj) {\n              if (obj == null) return;\n              while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {\n                obj = obj['nextSibling'];\n              }\n              var position = $(obj).coord(true);\n              return [position.left, position.top];\n            },\n            testOffset: function (element, offset, inputHeight) {\n              var dpWidth = element.outerWidth();\n              var dpHeight = element.outerHeight();\n              var viewWidth = $(window).width() + $(window).scrollLeft();\n              var viewHeight = $(window).height() + $(window).scrollTop();\n              if (offset.left + dpWidth > viewWidth) {\n                if (dpWidth > this.host.width()) {\n                  var hostLeft = this.host.coord().left;\n                  var hOffset = dpWidth - this.host.width();\n                  offset.left = hostLeft - hOffset + 2;\n                }\n              }\n              if (offset.left < 0) {\n                offset.left = parseInt(this.host.coord().left) + 'px';\n              }\n              offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight + 23) : 0);\n              return offset;\n            },\n            open: function (mode) {\n              if (mode == \"time\") {\n                this.timePopup = true;\n              } else {\n                this.timePopup = false;\n              }\n              this.showCalendar();\n            },\n            close: function (reason) {\n              this.hideCalendar();\n            },\n            _getBodyOffset: function () {\n              var top = 0;\n              var left = 0;\n              if ($('body').css('border-top-width') != '0px') {\n                top = parseInt($('body').css('border-top-width'));\n                if (isNaN(top)) top = 0;\n              }\n              if ($('body').css('border-left-width') != '0px') {\n                left = parseInt($('body').css('border-left-width'));\n                if (isNaN(left)) left = 0;\n              }\n              return {\n                left: left,\n                top: top\n              };\n            },\n            initTimePopup: function () {\n              this.timePopupElement = $(\"<div style='border-style: solid; border-width: 0px;'></div>\").appendTo(this.timeContainer);\n              this.timePopupElement.addClass(this.toThemeProperty('jqx-widget-content jqx-widget jqx-date-time-input-popup'));\n              var popupTable = \"\";\n              popupTable += \"<table>\" + \"<tbody>\" + \"<tr>\" + \"<td><a class='increment-hour-column' href='javascript:;' data-action='incrementHour'><div class='jqx-icon-up'></div></a>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td><a class='increment-minute-column' href='javascript:;' data-action='incrementMinute'><div class='jqx-icon-up'></div></a>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td><a class='increment-second-column' href='javascript:;' data-action='incrementSecond'><div class='jqx-icon-up'></div></a>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td><a class='increment-millisecond-column' href='javascript:;' data-action='incrementMSSecond'><div class='jqx-icon-up'></div></a>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td class='increment-meridian-column'><a href='javascript:;' data-action='toggleMeridian'><div class='jqx-icon-up'></div></a>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\" + \"<input type='text' class='jqx-timepicker-hour' maxlength='2'>\" + \"</td>\" + \"<td class='separator'>:</td>\" + \"<td>\" + \"<input type='text' class='jqx-timepicker-minute' maxlength='2'>\" + \"</td>\" + \"<td class='separator'>:</td>\" + \"<td>\" + \"<input type='text' class='jqx-timepicker-second' maxlength='2'>\" + \"</td>\" + \"<td class='separator'>:</td>\" + \"<td>\" + \"<input type='text' class='jqx-timepicker-millisecond' maxlength='3'>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td>\" + \"<input type='text' class='jqx-timepicker-meridian' maxlength='2'>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td><a class='decrement-hour-column' href='javascript:;' data-action='decrementHour'><div class='jqx-icon-down'></div></a>\" + \"</td>\" + \"<td class='separator'></td>\" + \"<td><a class='decrement-minute-column' href='javascript:;' data-action='decrementMinute'><div class='jqx-icon-down'></div></a>\" + \"</td>\" + \"<td class='separator'></td>\" + \"<td><a class='decrement-second-column' href='javascript:;' data-action='decrementSecond'><div class='jqx-icon-down'></div></a>\" + \"</td>\" + \"<td class='separator'></td>\" + \"<td><a class='decrement-millisecond-column' href='javascript:;' data-action='decrementMillisecond'><div class='jqx-icon-down'></div></a>\" + \"</td>\" + \"<td class='separator'>&nbsp;</td>\" + \"<td><a class='decrement-meridian-column' href='javascript:;' data-action='toggleMeridian'><div class='jqx-icon-down'></div></a>\" + \"</td>\" + \"</tr>\" + \"</tbody>\" + \"</table>\";\n              var formatString = this._getFormatValue(this.formatString);\n              if (this.selectionMode != \"range\") {\n                this.timePopupElement[0].innerHTML = popupTable;\n              } else {\n                this.timePopupElement[0].innerHTML = \"<table><tr><td>\" + popupTable + \"</td><td>-</td><td>\" + popupTable + \"</td></tr></table>\";\n              }\n              this.timePopupElement.find('.jqx-icon-down').addClass(this.toThemeProperty('jqx-icon jqx-icon-arrow-down'));\n              this.timePopupElement.find('.jqx-icon-up').addClass(this.toThemeProperty('jqx-icon jqx-icon-arrow-up'));\n              var inputs = this.timePopupElement.find('input');\n              inputs.addClass(this.toThemeProperty('jqx-input'));\n              inputs.addClass(this.toThemeProperty('jqx-rc-all'));\n              this.addHandler(inputs, \"mousedown\", function (event) {\n                event.stopPropagation();\n              });\n              var spinDown = function (event) {\n                if (event.target.className.indexOf(\"hour\") >= 0) {\n                  that._decrementHour($(event.target));\n                }\n                if (event.target.className.indexOf(\"minute\") >= 0) {\n                  that._decrementMinuteSecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"second\") >= 0) {\n                  that._decrementMinuteSecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"millisecond\") >= 0) {\n                  that._decrementMillisecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"meridian\") >= 0) {\n                  that._decrementMeridian($(event.target));\n                }\n              };\n              var spinUp = function (event) {\n                if (event.target.className.indexOf(\"hour\") >= 0) {\n                  that._incrementHour($(event.target));\n                }\n                if (event.target.className.indexOf(\"minute\") >= 0) {\n                  that._incrementMinuteSecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"second\") >= 0) {\n                  that._incrementMinuteSecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"millisecond\") >= 0) {\n                  that._incrementMillisecond($(event.target));\n                }\n                if (event.target.className.indexOf(\"meridian\") >= 0) {\n                  that._incrementMeridian($(event.target));\n                }\n              };\n              var wheel = function (event, self) {\n                if (!self.isEditing) return;\n                var delta = 0;\n                if (!event) /* For IE. */\n                  event = window.event;\n                if (event.originalEvent && event.originalEvent.wheelDelta) {\n                  event.wheelDelta = event.originalEvent.wheelDelta;\n                }\n                if (event.originalEvent && event.originalEvent.deltaY != undefined) {\n                  delta = -event.originalEvent.deltaY;\n                }\n                if (event.wheelDelta) {\n                  /* IE/Opera. */\n                  delta = event.wheelDelta / 120;\n                } else if (event.detail) {\n                  /** Mozilla case. */\n                  delta = -event.detail / 3;\n                }\n                if (delta) {\n                  if (document.activeElement == event.target && event.target.nodeName.toLowerCase() == \"input\") {\n                    if (delta < 0) {\n                      spinDown(event);\n                    } else {\n                      spinUp(event);\n                    }\n                  }\n                  if (event.preventDefault) event.preventDefault();\n                  event.returnValue = false;\n                }\n                if (event.preventDefault) event.preventDefault();\n                event.returnValue = false;\n              };\n              this.addHandler(inputs, \"wheel\", function (event) {\n                wheel(event, that);\n              });\n              this.addHandler(inputs, \"keydown\", function (event) {\n                var input = $(event.target);\n                if (event.ctrlKey) {\n                  if (event.keyCode == 38) {\n                    if (that.isOpened()) {\n                      that.hideCalendar(\"keyboard\", \"keyboard\");\n                      that.dateTimeInput.focus();\n                      return false;\n                    }\n                  } else if (event.keyCode == 40) {\n                    if (!that.isOpened()) {\n                      that.showCalendar(\"keyboard\", \"keyboard\");\n                      that.dateTimeInput.focus();\n                      return false;\n                    }\n                  }\n                }\n                if (event.keyCode == 40) {\n                  spinDown(event);\n                  event.preventDefault();\n                } else if (event.keyCode == 38) {\n                  spinUp(event);\n                  event.preventDefault();\n                } else if (event.keyCode == 13) {\n                  event.preventDefault();\n                  that.hideCalendar(\"keyboard\", \"keyboard\");\n                  that.dateTimeInput.focus();\n                } else if (event.keyCode == 27) {\n                  event.preventDefault();\n                  that.hideCalendar(\"cancel\");\n                  that.dateTimeInput.focus();\n                }\n              });\n              this.hourInput = $(inputs[0]);\n              this.minuteInput = $(inputs[1]);\n              this.secondInput = $(inputs[2]);\n              this.mssecondInput = $(inputs[3]);\n              this.meridianInput = $(inputs[4]);\n              this.hourInput2 = $(inputs[5]);\n              this.minuteInput2 = $(inputs[6]);\n              this.secondInput2 = $(inputs[7]);\n              this.mssecondInput2 = $(inputs[8]);\n              this.meridianInput2 = $(inputs[9]);\n              var that = this;\n              var hourIncrementColumns = this.timePopupElement.find('.increment-hour-column');\n              this.hourIncrement = $(hourIncrementColumns[0]);\n              this.hourIncrement2 = $(hourIncrementColumns[1]);\n              this.addHandler(inputs, \"change\", function (event) {\n                var input = $(event.target);\n                if (input.val().length <= 1) {\n                  input.val(\"0\" + $(event.target).val());\n                }\n                if (event.target.className.indexOf(\"hour\") >= 0) {\n                  var value = parseInt($(event.target).val());\n                  if (formatString.indexOf('HH') >= 0) {\n                    while (value > 24) value = value - 24;\n                  } else {\n                    while (value > 12) value = value - 12;\n                  }\n                  if (value < 10) value = \"0\" + value;\n                  if (input.val() != value) {\n                    input.val(value);\n                  }\n                }\n                if (event.target.className.indexOf(\"minute\") >= 0 || event.target.className.indexOf(\"second\") >= 0) {\n                  var value = parseInt($(event.target).val());\n                  while (value > 59) value--;\n                  if (value < 10) value = \"0\" + value;\n                  if (input.val() != value) {\n                    input.val(value);\n                  }\n                }\n              });\n              this._incrementHour = function (input) {\n                var value = parseInt(input.val());\n                value++;\n                if (formatString.indexOf('HH') >= 0) {\n                  if (value > 23) value = 0;\n                } else if (value > 12) value = 1;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._incrementMinuteSecond = function (input) {\n                var value = parseInt(input.val());\n                value++;\n                if (value > 59) value = 0;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._incrementMillisecond = function (input) {\n                var value = parseInt(input.val());\n                value++;\n                if (value > 999) value = 0;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._incrementMeridian = function (input) {\n                var value = input.val();\n                if (value.toLowerCase().indexOf(\"a\") >= 0) {\n                  value = \"PM\";\n                } else value = \"AM\";\n                input.val(value);\n              };\n              this._decrementHour = function (input) {\n                var value = parseInt(input.val());\n                value--;\n                if (formatString.indexOf('HH') >= 0) {\n                  if (value < 0) value = 23;\n                } else if (value < 1) value = 12;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._decrementMinuteSecond = function (input) {\n                var value = parseInt(input.val());\n                value--;\n                if (value < 0) value = 59;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._decrementMillisecond = function (input) {\n                var value = parseInt(input.val());\n                value--;\n                if (value < 0) value = 999;\n                if (value < 10) value = \"0\" + value;\n                input.val(value);\n              };\n              this._decrementMeridian = function (input) {\n                var value = input.val();\n                if (value.toLowerCase().indexOf(\"a\") >= 0) {\n                  value = \"PM\";\n                } else value = \"AM\";\n                input.val(value);\n              };\n              this.addHandler(this.hourIncrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementHour(that.hourInput);\n              });\n              this.addHandler(this.hourIncrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementHour(that.hourInput2);\n              });\n              var minuteIncrementColumns = this.timePopupElement.find('.increment-minute-column');\n              this.minuteIncrement = $(minuteIncrementColumns[0]);\n              this.minuteIncrement2 = $(minuteIncrementColumns[1]);\n              this.addHandler(this.minuteIncrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMinuteSecond(that.minuteInput);\n              });\n              this.addHandler(this.minuteIncrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMinuteSecond(that.minuteInput2);\n              });\n              var secondIncrementColumns = this.timePopupElement.find('.increment-second-column');\n              this.secondIncrement = $(secondIncrementColumns[0]);\n              this.secondIncrement2 = $(secondIncrementColumns[1]);\n              this.addHandler(this.secondIncrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMinuteSecond(that.secondInput);\n              });\n              this.addHandler(this.secondIncrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMinuteSecond(that.secondInput2);\n              });\n              var millisecondsIncrementColumns = this.timePopupElement.find('.increment-millisecond-column');\n              this.millisecondsIncrement = $(millisecondsIncrementColumns[0]);\n              this.millisecondsIncrement2 = $(millisecondsIncrementColumns[1]);\n              this.addHandler(this.millisecondsIncrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMillisecond(that.mssecondInput);\n              });\n              this.addHandler(this.millisecondsIncrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMillisecond(that.mssecondInput2);\n              });\n              var meridianIncrementColumns = this.timePopupElement.find('.increment-meridian-column');\n              this.meridianIncrement = $(meridianIncrementColumns[0]);\n              this.meridianIncrement2 = $(meridianIncrementColumns[1]);\n              this.addHandler(this.meridianIncrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMeridian(that.meridianInput);\n              });\n              this.addHandler(this.meridianIncrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._incrementMeridian(that.meridianInput2);\n              });\n              // decrement\n              var hourDecrementColumns = this.timePopupElement.find('.decrement-hour-column');\n              this.hourDecrement = $(hourDecrementColumns[0]);\n              this.hourDecrement2 = $(hourDecrementColumns[1]);\n              this.addHandler(this.hourDecrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementHour(that.hourInput);\n              });\n              this.addHandler(this.hourDecrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementHour(that.hourInput2);\n              });\n              var minuteDecrementColumns = this.timePopupElement.find('.decrement-minute-column');\n              this.minuteDecrement = $(minuteDecrementColumns[0]);\n              this.minuteDecrement2 = $(minuteDecrementColumns[1]);\n              this.addHandler(this.minuteDecrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMinuteSecond(that.minuteInput);\n              });\n              this.addHandler(this.minuteDecrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMinuteSecond(that.minuteInput2);\n              });\n              var secondDecrementColumns = this.timePopupElement.find('.decrement-second-column');\n              this.secondDecrement = $(secondDecrementColumns[0]);\n              this.secondDecrement2 = $(secondDecrementColumns[1]);\n              this.addHandler(this.secondDecrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMinuteSecond(that.secondInput);\n              });\n              this.addHandler(this.secondDecrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMinuteSecond(that.secondInput2);\n              });\n              var millisecondsDecrementColumns = this.timePopupElement.find('.decrement-millisecond-column');\n              this.millisecondsDecrement = $(millisecondsDecrementColumns[0]);\n              this.millisecondsDecrement2 = $(millisecondsDecrementColumns[1]);\n              this.addHandler(this.millisecondsDecrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMillisecond(that.mssecondInput);\n              });\n              this.addHandler(this.millisecondsDecrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMillisecond(that.mssecondInput2);\n              });\n              var meridianDecrementColumns = this.timePopupElement.find('.decrement-meridian-column');\n              this.meridianDecrement = $(meridianDecrementColumns[0]);\n              this.meridianDecrement2 = $(meridianDecrementColumns[1]);\n              this.addHandler(this.meridianDecrement, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMeridian(that.meridianInput);\n              });\n              this.addHandler(this.meridianDecrement2, \"mousedown\", function (event) {\n                event.stopPropagation();\n                that._decrementMeridian(that.meridianInput2);\n              });\n              var table = this.timePopupElement.find('table');\n              this.addHandler(this.timePopupElement, \"mousedown\", function (event) {\n                event.stopPropagation();\n              });\n              var hideByTable = function (table) {\n                var rows = table.find('tr');\n                if (formatString.indexOf('mm') == -1) {\n                  that.minuteInput.hide();\n                  that.minuteInput2.hide();\n                  $($(rows[0]).children()[1]).hide();\n                  $($(rows[0]).children()[2]).hide();\n                  $($(rows[1]).children()[1]).hide();\n                  $($(rows[1]).children()[2]).hide();\n                  $($(rows[2]).children()[1]).hide();\n                  $($(rows[2]).children()[2]).hide();\n                }\n                if (formatString.indexOf('ss') == -1) {\n                  that.secondInput.hide();\n                  that.secondInput2.hide();\n                  $($(rows[0]).children()[3]).hide();\n                  $($(rows[0]).children()[4]).hide();\n                  $($(rows[1]).children()[3]).hide();\n                  $($(rows[1]).children()[4]).hide();\n                  $($(rows[2]).children()[3]).hide();\n                  $($(rows[2]).children()[4]).hide();\n                }\n                if (formatString.indexOf('tt') == -1 && formatString.indexOf('hh') == -1) {\n                  that.meridianInput.hide();\n                  that.meridianInput2.hide();\n                  $($(rows[0]).children()[7]).hide();\n                  $($(rows[0]).children()[8]).hide();\n                  $($(rows[1]).children()[7]).hide();\n                  $($(rows[1]).children()[8]).hide();\n                  $($(rows[2]).children()[7]).hide();\n                  $($(rows[2]).children()[8]).hide();\n                }\n                if (formatString.indexOf('zz') == -1) {\n                  that.mssecondInput.hide();\n                  that.mssecondInput2.hide();\n                  $($(rows[0]).children()[5]).hide();\n                  $($(rows[0]).children()[6]).hide();\n                  $($(rows[1]).children()[5]).hide();\n                  $($(rows[1]).children()[6]).hide();\n                  $($(rows[2]).children()[5]).hide();\n                  $($(rows[2]).children()[6]).hide();\n                }\n              };\n              if (table.length == 1) {\n                hideByTable(table);\n              } else {\n                hideByTable($($(table)[1]));\n                hideByTable($($(table)[2]));\n              }\n            },\n            updateTimePopup: function () {\n              var formatString = this._getFormatValue(this.formatString);\n              if (this.selectionMode != \"range\") {\n                var date = this.getDate();\n                if (this.hourInput) {\n                  if (date) {\n                    var hour = date.getHours();\n                    var minute = date.getMinutes();\n                    var meridian = date.getHours();\n                    var second = date.getSeconds();\n                    var milliseconds = date.getMilliseconds();\n                  } else {\n                    var hour = 0;\n                    var minute = 0;\n                    var meridian = 0;\n                    var second = 0;\n                    var milliseconds = 0;\n                  }\n                  if (hour >= 12) {\n                    meridian = \"PM\";\n                    if (formatString.indexOf(\"HH\") == -1) {\n                      hour -= 12;\n                      if (hour == 0) hour = 12;\n                    }\n                  } else meridian = \"AM\";\n                  if (this.meridianInput.css('display') != \"none\") {\n                    if (hour == 0) hour = 12;\n                  }\n                  if (hour < 10) hour = \"0\" + hour;\n                  if (minute < 10) minute = \"0\" + minute;\n                  if (second < 10) second = \"0\" + second;\n                  if (milliseconds < 10) milliseconds = \"0\" + milliseconds;\n                  this.hourInput.val(hour);\n                  this.minuteInput.val(minute);\n                  this.secondInput.val(second);\n                  this.mssecondInput.val(milliseconds);\n                  this.meridianInput.val(meridian);\n                }\n              } else {\n                var date = this.getRange().from;\n                if (this.hourInput) {\n                  if (date) {\n                    var hour = date.getHours();\n                    var minute = date.getMinutes();\n                    var meridian = date.getHours();\n                    var second = date.getSeconds();\n                    var milliseconds = date.getMilliseconds();\n                  } else {\n                    var hour = 0;\n                    var minute = 0;\n                    var meridian = 0;\n                    var second = 0;\n                    var milliseconds = 0;\n                  }\n                  if (hour >= 12) {\n                    meridian = \"PM\";\n                    if (formatString.indexOf(\"HH\") == -1) {\n                      hour -= 12;\n                      if (hour == 0) hour = 12;\n                    }\n                  } else meridian = \"AM\";\n                  if (this.meridianInput.css('display') != \"none\") {\n                    if (hour == 0) hour = 12;\n                  }\n                  if (hour < 10) hour = \"0\" + hour;\n                  if (minute < 10) minute = \"0\" + minute;\n                  if (second < 10) second = \"0\" + second;\n                  if (milliseconds < 10) milliseconds = \"0\" + milliseconds;\n                  this.hourInput.val(hour);\n                  this.minuteInput.val(minute);\n                  this.secondInput.val(second);\n                  this.mssecondInput.val(milliseconds);\n                  this.meridianInput.val(meridian);\n                }\n                var date = this.getRange().to;\n                if (this.hourInput2) {\n                  if (date) {\n                    var hour = date.getHours();\n                    var minute = date.getMinutes();\n                    var meridian = date.getHours();\n                    var second = date.getSeconds();\n                    var milliseconds = date.getMilliseconds();\n                  } else {\n                    var hour = 0;\n                    var minute = 0;\n                    var meridian = 0;\n                    var second = 0;\n                    var milliseconds = 0;\n                  }\n                  if (hour >= 12) {\n                    meridian = \"PM\";\n                    if (formatString.indexOf(\"HH\") == -1) {\n                      hour -= 12;\n                      if (hour == 0) hour = 12;\n                    }\n                  } else meridian = \"AM\";\n                  if (this.meridianInput.css('display') != \"none\") {\n                    if (hour == 0) hour = 12;\n                  }\n                  if (hour < 10) hour = \"0\" + hour;\n                  if (minute < 10) minute = \"0\" + minute;\n                  if (second < 10) second = \"0\" + second;\n                  if (milliseconds < 10) milliseconds = \"0\" + milliseconds;\n                  this.hourInput2.val(hour);\n                  this.minuteInput2.val(minute);\n                  this.secondInput2.val(second);\n                  this.mssecondInput2.val(milliseconds);\n                  this.meridianInput2.val(meridian);\n                }\n              }\n            },\n            showCalendar: function () {\n              var calendar = this.calendarContainer;\n              var calendarInstance = this._calendar;\n              $.jqx.aria(this, \"aria-expanded\", true);\n              if (this.showTimeButton) {\n                if (this.timePopup) {\n                  if (!this.timePopupElement) {\n                    this.initTimePopup();\n                  }\n                  this.calendarContainer.css('visibility', 'hidden');\n                  this.timeContainer.css('visibility', 'visible');\n                  this.updateTimePopup();\n                  var inputs = this.timeContainer.find('input');\n                  var width = 0;\n                  for (var i = 0; i < inputs.length; i++) {\n                    if (inputs[i].style.display != \"none\") {\n                      width += 50;\n                    }\n                  }\n                  this.container.width(parseInt(width));\n                  if (!this.touch) {\n                    setTimeout(function () {\n                      inputs[0].focus();\n                      $(inputs[0]).select();\n                    }, 150 + this.openDelay);\n                  }\n                } else {\n                  this.container.width(parseInt(this.calendarContainer.width()) + 25);\n                  this.timeContainer.css('visibility', 'hidden');\n                  this.calendarContainer.css('visibility', 'visible');\n                }\n              }\n              if (this.value != null) {\n                if (this.selectionMode != 'range') {\n                  this._oldDT = new Date(this.value.dateTime);\n                } else {\n                  this._oldDT = this.getRange();\n                }\n              } else {\n                this._oldDT = null;\n              }\n              if (!calendarInstance.canRender) {\n                calendarInstance.canRender = true;\n                calendarInstance.render();\n              }\n              var container = this.container;\n              var self = this;\n              var scrollPosition = $(window).scrollTop();\n              var scrollLeftPosition = $(window).scrollLeft();\n              var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';\n              var left,\n                leftPos = parseInt(Math.round(this.host.coord(true).left));\n              if (this.dropDownContainer === 'element') {\n                top = parseInt(this.host.outerHeight()) - 1 + 'px';\n                left = 0;\n              }\n              left = leftPos + 'px';\n              var isMobileBrowser = false; // $.jqx.mobile.isSafariMobileBrowser() || $.jqx.mobile.isWindowsPhone();\n\n              if (isMobileBrowser != null && isMobileBrowser) {\n                left = $.jqx.mobile.getLeftPos(this.element);\n                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());\n                if ($('body').css('border-top-width') != '0px') {\n                  top = parseInt(top) - this._getBodyOffset().top + 'px';\n                }\n                if ($('body').css('border-left-width') != '0px') {\n                  left = parseInt(left) - this._getBodyOffset().left + 'px';\n                }\n              }\n              this.container.css('left', left);\n              this.container.css('top', top);\n              var closeAfterSelection = this.closeCalendarAfterSelection;\n              this.closeCalendarAfterSelection = false;\n              this.isEditing = false;\n              if (self.selectionMode == 'default') {\n                this._validateValue();\n                this._updateText();\n                var value = this.value != null ? this.value.dateTime : new Date();\n                calendarInstance.setDate(value);\n              }\n              this.closeCalendarAfterSelection = closeAfterSelection;\n              var positionChanged = false;\n              if (this.dropDownHorizontalAlignment == 'right' || this.rtl) {\n                var containerWidth = this.container.outerWidth();\n                var containerLeftOffset = Math.abs(containerWidth - this.host.outerWidth() + 2);\n                if (!this.rtl) containerLeftOffset -= 2;\n                if (containerWidth > this.host.width()) {\n                  var offset = 23;\n                  this.container.css('left', offset + parseInt(Math.round(leftPos)) - containerLeftOffset + \"px\");\n                } else this.container.css('left', 25 + parseInt(Math.round(leftPos)) + containerLeftOffset + \"px\");\n              }\n              if (this.dropDownVerticalAlignment == \"top\") {\n                var dpHeight = calendar.height();\n                if (this.timePopup) {\n                  this.timeContainer.css('top', this.container.height() - 75);\n                }\n                positionChanged = true;\n                calendar.css('top', 23);\n                calendar.addClass(this.toThemeProperty('jqx-popup-up'));\n                var inputHeight = parseInt(this.host.outerHeight());\n                var t = parseInt(top) - Math.abs(dpHeight + inputHeight + 23);\n                this.container.css('top', t);\n              }\n              if (this.enableBrowserBoundsDetection) {\n                var newOffset = this.testOffset(calendar, {\n                  left: parseInt(this.container.css('left')),\n                  top: parseInt(top)\n                }, parseInt(this.host.outerHeight()));\n                if (parseInt(this.container.css('top')) != newOffset.top) {\n                  positionChanged = true;\n                  calendar.css('top', 23);\n                  calendar.addClass(this.toThemeProperty('jqx-popup-up'));\n                } else calendar.css('top', 0);\n                this.container.css('top', newOffset.top);\n                if (parseInt(this.container.css('left')) != newOffset.left) {\n                  this.container.css('left', newOffset.left);\n                }\n              }\n              this._raiseEvent(7, calendar);\n              if (this.animationType != 'none' && this.animationType != 'transform') {\n                this.container.css('display', 'block');\n                var height = parseInt(calendar.outerHeight());\n                calendar.stop();\n                this.isanimating = true;\n                this.opening = true;\n                if (this.animationType == 'fade') {\n                  calendar.css('margin-top', 0);\n                  calendar.css('opacity', 0);\n                  calendar.animate({\n                    'opacity': 1\n                  }, this.openDelay, function () {\n                    self.isanimating = false;\n                    self.opening = false;\n                    $.data(document.body, \"openedJQXCalendar\" + self.id, calendar);\n                    self.calendarContainer.focus();\n                  });\n                  if (this.timePopup) {\n                    this.timeContainer.css('margin-top', 0);\n                    this.timeContainer.css('opacity', 0);\n                    this.timeContainer.animate({\n                      'opacity': 1\n                    }, this.openDelay, function () {\n                      self.isanimating = false;\n                      self.opening = false;\n                      $.data(document.body, \"openedJQXCalendar\" + self.id, calendar);\n                      self.timeContainer.focus();\n                    });\n                  }\n                } else {\n                  calendar.css('opacity', 1);\n                  if (this.timePopup) {\n                    this.timeContainer.css('opacity', 1);\n                  }\n                  if (positionChanged) {\n                    calendar.css('margin-top', height);\n                  } else {\n                    calendar.css('margin-top', -height);\n                  }\n                  if (this.timePopup) {\n                    if (positionChanged) {\n                      this.timeContainer.css('margin-top', height);\n                    } else {\n                      this.timeContainer.css('margin-top', -height);\n                    }\n                    this.timeContainer.animate({\n                      'margin-top': 0\n                    }, this.openDelay, function () {\n                      self.isanimating = false;\n                      self.opening = false;\n                      $.data(document.body, \"openedJQXCalendar\" + self.id, calendar);\n                      self.timeContainer.focus();\n                    });\n                  }\n                  calendar.animate({\n                    'margin-top': 0\n                  }, this.openDelay, function () {\n                    self.isanimating = false;\n                    self.opening = false;\n                    $.data(document.body, \"openedJQXCalendar\" + self.id, calendar);\n                    self.calendarContainer.focus();\n                  });\n                }\n              } else {\n                calendar.stop();\n                self.isanimating = false;\n                self.opening = false;\n                calendar.css('opacity', 1);\n                calendar.css('margin-top', 0);\n                this.container.css('display', 'block');\n                $.data(document.body, \"openedJQXCalendar\" + self.id, calendar);\n                this.calendarContainer.focus();\n                if (this.timePopup) {\n                  this.timeContainer.stop();\n                  this.timeContainer.css('opacity', 1);\n                  this.timeContainer.css('margin-top', 0);\n                  this.timeContainer.focus();\n                }\n              }\n              if (this.value == null) {\n                if (this._calendar && this._calendar._getSelectedCell()) {\n                  this._calendar._getSelectedCell().isSelected = false;\n                }\n              }\n              if (this.timePopup) {\n                this.timeButtonIcon.addClass(this.toThemeProperty('jqx-icon-time-pressed'));\n                this.timeButton.addClass(this.toThemeProperty('jqx-fill-state-hover'));\n                this.timeButton.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this.timeContainer.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              } else {\n                this.calendarButtonIcon.addClass(this.toThemeProperty('jqx-icon-calendar-pressed'));\n                this.calendarButton.addClass(this.toThemeProperty('jqx-fill-state-hover'));\n                this.calendarButton.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this.calendarContainer.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              }\n              this.host.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.calendarContainer.addClass(this.toThemeProperty('jqx-popup-show'));\n              if (this.isMaterialized()) {\n                this._calendar.refresh();\n              }\n            },\n            hideCalendar: function (reason, changeType) {\n              if (changeType) {\n                this.changeType = changeType;\n              }\n              var calendar = this.calendarContainer;\n              var container = this.container;\n              var self = this;\n              $.jqx.aria(this, \"aria-expanded\", false);\n              if (this.showTimeButton) {\n                if (this.timeContainer.css('visibility') != \"hidden\" && reason != \"cancel\") {\n                  if (this.selectionMode != \"range\" && this.hourInput) {\n                    var date = this.getDate();\n                    var hour = parseInt(this.hourInput.val());\n                    var minute = parseInt(this.minuteInput.val());\n                    var second = parseInt(this.secondInput.val());\n                    var millisecond = parseInt(this.mssecondInput.val());\n                    var meridian = this.meridianInput.val();\n                    if (isNaN(hour)) hour = 0;\n                    if (isNaN(minute)) minute = 0;\n                    if (isNaN(second)) second = 0;\n                    if (isNaN(millisecond)) millisecond = 0;\n                    if (this.meridianInput.css('display') != \"none\") {\n                      if (meridian.toLowerCase().indexOf(\"p\") >= 0) {\n                        if (hour < 12) {\n                          hour += 12;\n                        }\n                      }\n                      if (meridian.toLowerCase().indexOf(\"a\") >= 0) {\n                        if (hour >= 12) {\n                          hour -= 12;\n                        }\n                      }\n                    }\n                    if (!date) date = new Date();\n                    date.setHours(hour, minute, second, millisecond);\n                    this.setDate(date);\n                  } else if (this.hourInput && reason != \"selected\") {\n                    var range = this.getRange();\n                    var hour = parseInt(this.hourInput.val());\n                    var minute = parseInt(this.minuteInput.val());\n                    var second = parseInt(this.secondInput.val());\n                    var millisecond = parseInt(this.mssecondInput.val());\n                    var meridian = this.meridianInput.val();\n                    if (isNaN(hour)) hour = 0;\n                    if (isNaN(minute)) minute = 0;\n                    if (isNaN(second)) second = 0;\n                    if (isNaN(millisecond)) millisecond = 0;\n                    if (this.meridianInput.css('display') != \"none\") {\n                      if (meridian.toLowerCase().indexOf(\"p\") >= 0) {\n                        if (hour < 12) {\n                          hour += 12;\n                        }\n                      }\n                      if (meridian.toLowerCase().indexOf(\"a\") >= 0) {\n                        if (hour >= 12) {\n                          hour -= 12;\n                        }\n                      }\n                    }\n                    var from = range.from;\n                    if (!from) from = new Date();\n                    from.setHours(hour, minute, second, millisecond);\n                    var hour = parseInt(this.hourInput2.val());\n                    var minute = parseInt(this.minuteInput2.val());\n                    var second = parseInt(this.secondInput2.val());\n                    var millisecond = parseInt(this.mssecondInput2.val());\n                    var meridian = this.meridianInput2.val();\n                    if (minute == \"\") minute = 0;\n                    if (second == \"\") second = 0;\n                    if (millisecond == \"\") millisecond = 0;\n                    if (this.meridianInput2.css('display') != \"none\") {\n                      if (meridian.toLowerCase().indexOf(\"p\") >= 0) {\n                        if (hour < 12) {\n                          hour += 12;\n                        }\n                      }\n                      if (meridian.toLowerCase().indexOf(\"a\") >= 0) {\n                        if (hour >= 12) {\n                          hour -= 12;\n                        }\n                      }\n                    }\n                    var to = range.to;\n                    if (!to) to = new Date();\n                    to.setHours(hour, minute, second, millisecond);\n                    if (to.valueOf() < from.valueOf()) {\n                      return false;\n                    }\n                    this.setRange(from, to);\n                  } else if (reason == \"selected\") {\n                    return;\n                  }\n                }\n              }\n              $.data(document.body, \"openedJQXCalendar\" + this.id, null);\n              if (this.animationType != 'none' && this.animationType != 'transform') {\n                var height = calendar.outerHeight();\n                calendar.css('margin-top', 0);\n                if (this.showTimeButton) {\n                  this.timeContainer.css('margin-top', 0);\n                }\n                this.isanimating = true;\n                var animationValue = -height;\n                if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) {\n                  animationValue = height;\n                }\n                if (this.animationType == 'fade') {\n                  calendar.animate({\n                    'opacity': 0\n                  }, this.closeDelay, function () {\n                    container.css('display', 'none');\n                    self.isanimating = false;\n                  });\n                } else {\n                  calendar.animate({\n                    'margin-top': animationValue\n                  }, this.closeDelay, function () {\n                    container.css('display', 'none');\n                    self.isanimating = false;\n                  });\n                }\n                if (this.showTimeButton) {\n                  if (this.animationType == 'fade') {\n                    this.timeContainer.animate({\n                      'opacity': 0\n                    }, this.closeDelay, function () {\n                      container.css('display', 'none');\n                      self.isanimating = false;\n                    });\n                  } else {\n                    this.timeContainer.animate({\n                      'margin-top': animationValue\n                    }, this.closeDelay, function () {\n                      container.css('display', 'none');\n                      self.isanimating = false;\n                    });\n                  }\n                }\n              } else if (this.animationType === \"transform\") {\n                setTimeout(function () {\n                  container.css('display', 'none');\n                }, this.closeDelay);\n              } else {\n                container.css('display', 'none');\n              }\n              if (reason != undefined) {\n                this._updateSelectedDate(reason);\n              }\n              this.timeButtonIcon.removeClass(this.toThemeProperty('jqx-icon-time-pressed'));\n              this.timeButton.removeClass(this.toThemeProperty('jqx-fill-state-hover'));\n              this.timeButton.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.calendarButtonIcon.removeClass(this.toThemeProperty('jqx-icon-calendar-pressed'));\n              this.calendarButton.removeClass(this.toThemeProperty('jqx-fill-state-hover'));\n              this.calendarButton.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.host.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.timeContainer.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.calendarContainer.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this._raiseEvent(8, calendar);\n              this.calendarContainer.removeClass(this.toThemeProperty('jqx-popup-show'));\n            },\n            _updateSelectedDate: function () {\n              var value = this.value;\n              if (value == null) {\n                value = new $.jqx._jqxDateTimeInput.getDateTime(new Date());\n                value._setHours(0);\n                value._setMinutes(0);\n                value._setSeconds(0);\n                value._setMilliseconds(0);\n              }\n              var hour = value.hour;\n              var minute = value.minute;\n              var second = value.second;\n              var milisecond = value.millisecond;\n              if (this.selectionMode == 'range' && this._calendar.getRange().from == null) {\n                this.setDate(null);\n                return;\n              }\n              var date = new $.jqx._jqxDateTimeInput.getDateTime(this._calendar.value.dateTime);\n              date._setHours(hour);\n              date._setMinutes(minute);\n              date._setSeconds(second);\n              date._setMilliseconds(milisecond);\n              var result = this.setDate(date.dateTime);\n              if (this.selectionMode == \"range\" && !result && this._oldDT) {\n                var range = this.getRange();\n                var oldRange = this._oldDT;\n                var from = false;\n                var to = false;\n                var oldDate = this._oldDT.from;\n                var date = range.from;\n                if (date != null && oldDate) {\n                  if (!(date.getFullYear() != oldDate.getFullYear() || date.getMonth() != oldDate.getMonth() || date.getDate() != oldDate.getDate() || date.getHours() != oldDate.getHours() || date.getMinutes() != oldDate.getMinutes() || date.getSeconds() != oldDate.getSeconds())) {\n                    from = true;\n                  }\n                }\n                var date = range.to;\n                if (date != null) {\n                  oldDate = this._oldDT.to;\n                  if (oldDate) {\n                    if (!(date.getFullYear() != oldDate.getFullYear() || date.getMonth() != oldDate.getMonth() || date.getDate() != oldDate.getDate() || date.getHours() != oldDate.getHours() || date.getMinutes() != oldDate.getMinutes() || date.getSeconds() != oldDate.getSeconds())) {\n                      to = true;\n                    }\n                  }\n                }\n                if (from && to) {\n                  return true;\n                }\n                this._raiseEvent(0, {});\n                this._raiseEvent(9, {});\n              }\n            },\n            _closeOpenedCalendar: function (event) {\n              var $target = $(event.target);\n              var openedCalendar = $.data(document.body, \"openedJQXCalendar\" + event.data.me.id);\n              var isCalendar = false;\n              $.each($target.parents(), function () {\n                if (this.className && this.className.indexOf) {\n                  if (this.className.indexOf('jqx-calendar') != -1) {\n                    isCalendar = true;\n                    return false;\n                  }\n                  if (this.className.indexOf('jqx-date-time-input-popup') != -1) {\n                    isCalendar = true;\n                    return false;\n                  }\n                  if (this.className.indexOf('jqx-input') != -1) {\n                    //      isCalendar = true;\n                    return false;\n                  }\n                }\n              });\n              if ($(event.target).ischildof(event.data.me.host)) {\n                return true;\n              }\n              if (event.target != null && (event.target.tagName == \"B\" || event.target.tagName == 'b')) {\n                var hostOffset = event.data.me.host.coord();\n                var hostWidth = event.data.me.host.width();\n                var hostHeight = event.data.me.host.height();\n                var top = parseInt(hostOffset.top);\n                var left = parseInt(hostOffset.left);\n                if (top <= event.pageY && event.pageY <= top + hostHeight) {\n                  if (left <= event.pageX && event.pageX <= left + hostWidth) {\n                    return true;\n                  }\n                }\n              }\n              if (openedCalendar != null && !isCalendar) {\n                if (openedCalendar.length > 0) {\n                  var calendarID = openedCalendar[0].id.toString();\n                  var inputID = calendarID.toString().substring(13);\n                  var datetimeinput = $(document).find(\"#\" + inputID);\n                  var result = event.data.me.hideCalendar();\n                  if (result !== false) {\n                    $.data(document.body, \"openedJQXCalendar\" + event.data.me.id, null);\n                  }\n                }\n              }\n            },\n            _loadItems: function () {\n              if (this.value != null) {\n                this.items = new Array();\n                var expandedMask = this._getFormatValue(this.formatString);\n                this.items = this._parseFormatValue(expandedMask);\n                this.editors = new Array();\n                for (var i = 0; i < this.items.length; i++) {\n                  var editor = this.items[i].getDateTimeEditorByItemType(this.value, this);\n                  this.editors[i] = editor;\n                }\n              }\n              this._updateEditorsValue();\n              this._updateText();\n            },\n            _updateText: function () {\n              var that = this;\n              var text = \"\";\n              if (that.items.length == 0 && that.value != null) {\n                that._loadItems();\n              }\n              if (that.value != null) {\n                if (that.items.length >= 1) {\n                  text = that.format(that.value, 0, that.items.length);\n                }\n                var oldText = that.dateTimeInput.val();\n                if (oldText != text) {\n                  that._raiseEvent(1, that.value);\n                }\n              }\n              if (that.selectionMode == 'range') {\n                var range = that.getRange();\n                var fromText = that.format(that.value, 0, that.items.length);\n                if (range.to) {\n                  var from = $.jqx._jqxDateTimeInput.getDateTime(range.from);\n                  fromText = that.format(from, 0, that.items.length);\n                  var to = $.jqx._jqxDateTimeInput.getDateTime(range.to);\n                  var toText = that.format(to, 0, that.items.length);\n                  var text = fromText + \" - \" + toText;\n                  if (text == ' - ') text = \"\";\n                } else {\n                  text = \"\";\n                }\n              }\n              that.dateTimeInput.val(text);\n            },\n            format: function (value, startFormatIndex, endFormatIndex) {\n              var result = \"\";\n              for (var i = startFormatIndex; i < endFormatIndex; ++i) {\n                var item = this.items[i];\n                var parsedValue = item.dateParser(value, this);\n                if (this.isEditing && item.type != 'ReadOnly') {\n                  if (this.selectionMode != 'range') {\n                    var isReadOnlyDay = item.type == 'Day' && item.format.length > 2;\n                    if (item.type == 'FORMAT_AMPM') {\n                      isReadOnlyDay = true;\n                      if (this.editors[i].value == 0) parsedValue = this.editors[i].amString;else parsedValue = this.editors[i].pmString;\n                    }\n                    if (!isReadOnlyDay) {\n                      if (this.yearCutoff !== null && item.type === 'Year' && item.format === 'yy') {\n                        parsedValue = this.editors[i].value.toString().substring(2);\n                      } else {\n                        parsedValue = item.dateParserInEditMode(new Number(this.editors[i].value), \"d\" + this.editors[i].maxEditPositions, this);\n                        while (parsedValue.length < this.editors[i].maxEditPositions) {\n                          parsedValue = '0' + parsedValue;\n                        }\n                      }\n                    }\n                  }\n                }\n                result += parsedValue;\n              }\n              return result;\n            },\n            _getFormatValueGroupLength: function (item) {\n              for (var i = 1; i < item.toString().length; ++i) {\n                if (item.substring(i, i + 1) != item.substring(0, 1)) return i;\n              }\n              return item.length;\n            },\n            _parseFormatValue: function (value) {\n              var myResult = new Array();\n              var currentValue = value.toString();\n              var i = 0;\n              while (currentValue.length > 0) {\n                var formatItemLength = this._getFormatValueGroupLength(currentValue);\n                var myItem = null;\n                switch (currentValue.substring(0, 1)) {\n                  case ':':\n                  case '/':\n                    formatItemLength = 1;\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), 'ReadOnly', this.culture);\n                    break;\n                  case '\"':\n                  case '\\'':\n                    var closingQuotePosition = currentValue.indexOf(currentValue[0], 1);\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(1, 1 + Math.max(1, closingQuotePosition - 1)), 'ReadOnly', this.culture);\n                    formatItemLength = Math.max(1, closingQuotePosition + 1);\n                    break;\n                  case '\\\\':\n                    if (currentValue.length >= 2) {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(1, 1), 'ReadOnly', this.culture);\n                      formatItemLength = 2;\n                    }\n                    break;\n                  case 'd':\n                  case 'D':\n                    if (formatItemLength > 2) {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Day', this.culture);\n                    } else {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Day', this.culture);\n                    }\n                    break;\n                  case 'f':\n                  case 'F':\n                    if (formatItemLength > 7) {\n                      formatItemLength = 7;\n                    }\n                    if (formatItemLength > 3) {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);\n                    } else {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Millisecond', this.culture);\n                    }\n                    break;\n                  case 'g':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);\n                    break;\n                  case 'h':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_hh', this.culture);\n                    break;\n                  case 'H':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_HH', this.culture);\n                    break;\n                  case 'm':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Minute', this.culture);\n                    break;\n                  case 'M':\n                    if (formatItemLength > 4) formatItemLength = 4;\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Month', this.culture);\n                    break;\n                  case 's':\n                  case 'S':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Second', this.culture);\n                    break;\n                  case 't':\n                  case 'T':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_AMPM', this.culture);\n                    break;\n                  case 'y':\n                  case 'Y':\n                    if (formatItemLength > 1) {\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Year', this.culture);\n                    } else {\n                      formatItemLength = 1;\n                      myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), null, 'ReadOnly', this.culture);\n                    }\n                    break;\n                  case 'z':\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);\n                    break;\n                  default:\n                    formatItemLength = 1;\n                    myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), 'ReadOnly', this.culture);\n                    break;\n                }\n                myResult[i] = $.extend(true, {}, myItem);\n                currentValue = currentValue.substring(formatItemLength);\n                i++;\n              }\n              return myResult;\n            },\n            _getFormatValue: function (format) {\n              if (format == null || format.length == 0) format = \"d\";\n              if (format.length == 1) {\n                switch (format.substring(0, 1)) {\n                  case \"d\":\n                    return this.localization.calendar.patterns.d;\n                  case \"D\":\n                    return this.localization.calendar.patterns.D;\n                  case \"t\":\n                    return this.localization.calendar.patterns.t;\n                  case \"T\":\n                    return this.localization.calendar.patterns.T;\n                  case \"f\":\n                    return this.localization.calendar.patterns.f;\n                  case \"F\":\n                    return this.localization.calendar.patterns.F;\n                  case \"M\":\n                    return this.localization.calendar.patterns.M;\n                  case \"Y\":\n                    return this.localization.calendar.patterns.Y;\n                  case \"S\":\n                    return this.localization.calendar.patterns.S;\n                }\n              }\n              if (format.length == 2 && format.substring(0, 1) == '%') format = format.substring(1);\n              return format;\n            },\n            _updateEditorsValue: function () {\n              var value = this.value;\n              if (value == null) return;\n              var year = value.year;\n              var day = value.day;\n              var hour = value.hour;\n              var millisecond = value.millisecond;\n              var second = value.second;\n              var minute = value.minute;\n              var month = value.month;\n              if (this.items == null) return;\n              for (var i = 0; i < this.items.length; i++) {\n                switch (this.items[i].type) {\n                  case 'FORMAT_AMPM':\n                    var initialValue = hour % 12;\n                    if (initialValue == 0) initialValue = 12;\n                    if (hour >= 0 && hour < 12) {\n                      this.editors[i].value = 0;\n                    } else {\n                      this.editors[i].value = 1;\n                    }\n                    break;\n                  case 'Day':\n                    this.editors[i].value = day;\n                    break;\n                  case 'FORMAT_hh':\n                    var initialValue = hour % 12;\n                    if (initialValue == 0) initialValue = 12;\n                    this.editors[i].value = initialValue;\n                    break;\n                  case 'FORMAT_HH':\n                    this.editors[i].value = hour;\n                    break;\n                  case 'Millisecond':\n                    this.editors[i].value = millisecond;\n                    break;\n                  case 'Minute':\n                    this.editors[i].value = minute;\n                    break;\n                  case 'Month':\n                    this.editors[i].value = month;\n                    break;\n                  case 'Second':\n                    this.editors[i].value = second;\n                    break;\n                  case 'Year':\n                    this.editors[i].value = year;\n                    break;\n                }\n              }\n            },\n            updateValue: function (blur) {\n              if (this.isEditing) {\n                return;\n              }\n              if (this.items && this.items.length == 0) {\n                return;\n              }\n              var dateTime = 0;\n              var year = 1;\n              var day = 1;\n              var hour = 0;\n              var milisecond = 0;\n              var second = 0;\n              var minute = 0;\n              var month = 1;\n              var amPmOffset = 0;\n              var hasYear = false;\n              var hasMonth = false;\n              var hasDay = false;\n              var hasHour = false;\n              var hasMinute = false;\n              var hasSecond = false;\n              var hasMillisecond = false;\n              var dayEditors = new Array();\n              var amPmEditor = null;\n              var k = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                switch (this.items[i].type) {\n                  case 'FORMAT_AMPM':\n                    amPmOffset = this.editors[i].value;\n                    amPmEditor = this.editors[i];\n                    break;\n                  case 'Character':\n                    break;\n                  case 'Day':\n                    if (this.items[i].format.length < 3) {\n                      day = this.editors[i].value;\n                      dayEditors[k++] = this.editors[i];\n                      if (day == 0) day = 1;\n                      hasDay = true;\n                    }\n                    break;\n                  case 'FORMAT_hh':\n                    var hoursEditor = this.editors[i];\n                    hour = hoursEditor.value;\n                    hasHour = true;\n                    break;\n                  case 'FORMAT_HH':\n                    hour = this.editors[i].value;\n                    hasHour = true;\n                    break;\n                  case 'Millisecond':\n                    milisecond = this.editors[i].value;\n                    hasMillisecond = true;\n                    break;\n                  case 'Minute':\n                    minute = this.editors[i].value;\n                    hasMinute = true;\n                    break;\n                  case 'Month':\n                    month = this.editors[i].value;\n                    hasMonth = true;\n                    if (month == 0) month = 1;\n                    break;\n                  case 'ReadOnly':\n                    break;\n                  case 'Second':\n                    second = this.editors[i].value;\n                    hasSecond = true;\n                    break;\n                  case 'Year':\n                    hasYear = true;\n                    year = this.editors[i].value;\n                    var yearFormatValue = this.editors[i].getDateTimeItem().format;\n                    if (yearFormatValue.length < 3) {\n                      var yearString = \"1900\";\n                      if (yearString.Length == 4) {\n                        var baseYearString = \"\" + yearString[0] + yearString[1];\n                        var baseYear;\n                        baseYear = parseInt(baseYearString);\n                        year = year + baseYear * 100;\n                      }\n                    }\n                    if (year == 0) year = 1;\n                    break;\n                }\n              }\n              var oldDate = this.value != null ? new Date(this.value.dateTime) : null;\n              if (year > 0 && month > 0 && day > 0 && minute >= 0 && hour >= 0 && second >= 0 && milisecond >= 0) {\n                var val = this.value;\n                if (val != null) {\n                  if (!hasYear) {\n                    year = val.year;\n                  }\n                  if (!hasMonth) {\n                    month = val.month;\n                  }\n                  if (!hasDay) {\n                    day = val.day;\n                  }\n                }\n                try {\n                  if (month > 12) month = 12;\n                  if (month < 1) month = 1;\n                  if (blur && val._daysInMonth(year, month) <= day) {\n                    day = val._daysInMonth(year, month);\n                    if (dayEditors != null && dayEditors.length > 0) {\n                      for (i = 0; i < dayEditors.length; i++) {\n                        dayEditors[i].value = day;\n                      }\n                    }\n                  }\n                  if (amPmEditor != null) {\n                    if (amPmEditor.value == 0) {\n                      if (hour >= 12) {\n                        hour -= 12;\n                      }\n                    } else {\n                      if (hour + 12 < 24) {\n                        hour += 12;\n                      }\n                    }\n                  }\n                  var oldDay = this.value.dateTime.getDate();\n                  this.value._setYear(parseInt(year));\n                  this.value._setDay(day);\n                  this.value._setMonth(month);\n                  if (hasHour) {\n                    this.value._setHours(hour);\n                  }\n                  if (hasMinute) {\n                    this.value._setMinutes(minute);\n                  }\n                  if (hasSecond) {\n                    this.value._setSeconds(second);\n                  }\n                  if (hasMillisecond) {\n                    this.value._setMilliseconds(milisecond);\n                  }\n                  this._validateTimeRange();\n                } catch (err) {\n                  this.value = val;\n                }\n                if (oldDate != null) {\n                  var areEqual = this.value.dateTime.getFullYear() == oldDate.getFullYear() && this.value.dateTime.getDate() == oldDate.getDate() && this.value.dateTime.getMonth() == oldDate.getMonth() && this.value.dateTime.getHours() == oldDate.getHours() && this.value.dateTime.getMinutes() == oldDate.getMinutes() && this.value.dateTime.getSeconds() == oldDate.getSeconds();\n                  if (!areEqual) {\n                    if (this.changing) {\n                      var newDate = this.changing(oldDate, this.value.dateTime);\n                      if (newDate) {\n                        this.value = $.jqx._jqxDateTimeInput.getDateTime(newDate);\n                      }\n                    }\n                    this._raiseEvent('0', this.value.dateTime);\n                    if (this.cookies) {\n                      if (this.value != null) {\n                        $.jqx.cookie.cookie(\"jqxDateTimeInput\" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);\n                      }\n                    }\n                    if (this.change) {\n                      this.change(this.value.dateTime);\n                    }\n                  }\n                }\n              }\n              var editorIndex = this.editors.indexOf(this.activeEditor);\n              var currentItem = this.items[editorIndex];\n              if (this.value) {\n                if (this.calendarContainer.jqxCalendar('_isDisabled', this.value.dateTime)) {\n                  this.dateTimeInput.addClass(this.toThemeProperty(\"jqx-input-invalid\"));\n                } else {\n                  this.dateTimeInput.removeClass(this.toThemeProperty(\"jqx-input-invalid\"));\n                }\n              }\n            },\n            _internalSetValue: function (date) {\n              this.value._setYear(parseInt(date.year));\n              this.value._setDay(date.day);\n              this.value._setMonth(date.month);\n              this.value._setHours(date.hour);\n              this.value._setMinutes(date.minute);\n              this.value._setSeconds(date.second);\n              this.value._setMilliseconds(date.milisecond);\n            },\n            _raiseEvent: function (id, arg, arg2) {\n              var evt = this.events[id];\n              var args = {};\n              args.owner = this;\n              if (arg == null) {\n                arg = {};\n              }\n              if (arg2 == null) {\n                arg2 = arg;\n              }\n              var key = arg.charCode ? arg.charCode : arg.keyCode ? arg.keyCode : 0;\n              var result = true;\n              var isreadOnly = this.readonly;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              event.args.date = this.getDate();\n              if (id == 9) {\n                event.args.type = this.changeType;\n                this.changeType = null;\n              }\n              this.element.value = this.dateTimeInput.val();\n              if (id == 9 && this.selectionMode != 'range') {\n                var date = event.args.date;\n                if (this._oldDT) {\n                  if (date != null) {\n                    if (!(date.getFullYear() != this._oldDT.getFullYear() || date.getMonth() != this._oldDT.getMonth() || date.getDate() != this._oldDT.getDate() || date.getHours() != this._oldDT.getHours() || date.getMinutes() != this._oldDT.getMinutes() || date.getSeconds() != this._oldDT.getSeconds())) {\n                      return true;\n                    }\n                  }\n                  $.jqx.aria(this, \"aria-valuenow\", this.getDate());\n                  $.jqx.aria(this, \"aria-valuetext\", this.getText());\n                  if (this.getDate() != null) {\n                    $.jqx.aria(this, \"aria-label\", \"Current focused date is \" + this.getDate().toLocaleString());\n                  } else {\n                    $.jqx.aria(this, \"aria-label\", \"Current focused date is Null\");\n                  }\n                }\n                event.args.oldValue = arg2;\n                event.args.newValue = event.args.date;\n                if (this._oldDT) {\n                  event.args.oldValue = this._oldDT;\n                }\n              }\n              if (this.selectionMode == 'range') {\n                event.args.date = this.getRange();\n                if (this._oldDT) {\n                  var date = event.args.date.from;\n                  if (id == 9) {\n                    var from = false;\n                    var to = false;\n                    var oldDate = this._oldDT.from;\n                    if (date != null && oldDate) {\n                      if (!(date.getFullYear() != oldDate.getFullYear() || date.getMonth() != oldDate.getMonth() || date.getDate() != oldDate.getDate() || date.getHours() != oldDate.getHours() || date.getMinutes() != oldDate.getMinutes() || date.getSeconds() != oldDate.getSeconds())) {\n                        from = true;\n                      }\n                    }\n                    var date = event.args.date.to;\n                    if (date != null) {\n                      oldDate = this._oldDT.to;\n                      if (oldDate) {\n                        if (!(date.getFullYear() != oldDate.getFullYear() || date.getMonth() != oldDate.getMonth() || date.getDate() != oldDate.getDate() || date.getHours() != oldDate.getHours() || date.getMinutes() != oldDate.getMinutes() || date.getSeconds() != oldDate.getSeconds())) {\n                          to = true;\n                        }\n                      }\n                    }\n                    if (from && to) {\n                      return true;\n                    }\n                    var from = event.args.date.from;\n                    if (from == null) from = \"\";else from = from.toString();\n                    var to = event.args.date.to;\n                    if (to == null) to = \"\";else to = to.toString();\n                    $.jqx.aria(this, \"aria-valuenow\", from + \"-\" + to);\n                    $.jqx.aria(this, \"aria-valuetext\", this.getText());\n                    if (from && to) {\n                      $.jqx.aria(this, \"aria-label\", \"Current focused range is \" + from.toLocaleString() + \"-\" + to.toLocaleString());\n                    }\n                  }\n                }\n                event.args.oldValue = arg2;\n                event.args.newValue = event.args.date;\n                if (this._oldDT) {\n                  event.args.oldValue = this._oldDT;\n                }\n              }\n              if (this.host.css('display') == 'none') return true;\n              if (id != 2 && id != 3 && id != 4 && id != 5 && id != 6) {\n                result = this.host.trigger(event);\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n              }\n              var me = this;\n              if (!isreadOnly) {\n                if (id == 2 && !this.disabled) {\n                  setTimeout(function () {\n                    me.isEditing = true;\n                    if (this.selectionMode == 'range') {\n                      me._selectGroup(-1);\n                    } else {\n                      me._selectGroup(-1);\n                    }\n                  }, 25);\n                }\n              }\n              if (id == 4) {\n                if (isreadOnly || this.disabled) {\n                  if (key == 8 || key == 46) {\n                    this.isEditing = false;\n                    if (this.allowKeyboardDelete) {\n                      if (this.allowNullDate) {\n                        this.setDate(null);\n                      } else {\n                        if (this.selectionMode != 'range') {\n                          this.setDate(this.getMinDate());\n                        } else {\n                          this.setRange(this.getMinDate(), this.getMinDate());\n                        }\n                      }\n                    }\n                  }\n                  if (key == 9) return true;\n                  if (!arg.altKey) {\n                    return false;\n                  }\n                }\n                result = this._handleKeyDown(arg, key);\n              } else if (id == 5) {\n                if (key == 9) return true;\n                if (isreadOnly || this.disabled) {\n                  return false;\n                }\n              } else if (id == 6) {\n                if (key == 9) return true;\n                if (isreadOnly || this.disabled) {\n                  return false;\n                }\n                result = this._handleKeyPress(arg, key);\n              }\n              return result;\n            },\n            _doLeftKey: function () {\n              if (this.activeEditor != null) {\n                if (!this.isEditing) this.isEditing = true;\n                var lastEditor = this.activeEditor;\n                var newEditor = false;\n                var index3 = this.editors.indexOf(this.activeEditor);\n                var tmpIndex3 = index3;\n                if (this.enableAbsoluteSelection) {\n                  if (index3 >= 0 && this.activeEditor.positions > 0) {\n                    this.activeEditor.positions--;\n                    this._selectGroup(index3);\n                    return;\n                  }\n                }\n                while (index3 > 0) {\n                  this.activeEditor = this.editors[--index3];\n                  this._selectGroup(index3);\n                  if (this.items[index3].type != 'ReadOnly') {\n                    newEditor = true;\n                    break;\n                  }\n                }\n                if (!newEditor) {\n                  if (tmpIndex3 >= 0) {\n                    this.activeEditor = this.editors[tmpIndex3];\n                  }\n                }\n                if (this.activeEditor != null && lastEditor != this.activeEditor) {\n                  if (this.items[index3].type != 'ReadOnly') {\n                    if (this.enableAbsoluteSelection) {\n                      this.activeEditor.positions = this.activeEditor.maxEditPositions - 1;\n                    } else {\n                      this.activeEditor.positions = 0;\n                    }\n                  }\n                }\n                if (this.activeEditor != lastEditor) {\n                  this._validateValue();\n                  this._updateText();\n                  this._selectGroup(this.editors.indexOf(this.activeEditor));\n                  return true;\n                } else return false;\n              }\n            },\n            _doRightKey: function () {\n              if (this.activeEditor != null) {\n                if (!this.isEditing) this.isEditing = true;\n                var lastEditor = this.activeEditor;\n                var newEditor = false;\n                var index4 = this.editors.indexOf(this.activeEditor);\n                var tmpIndex3 = index4;\n                if (this.enableAbsoluteSelection) {\n                  if (index4 >= 0 && this.activeEditor.positions < this.activeEditor.maxEditPositions - 1) {\n                    this.activeEditor.positions++;\n                    this._selectGroup(index4);\n                    return;\n                  }\n                }\n                while (index4 <= this.editors.length - 2) {\n                  this.activeEditor = this.editors[++index4];\n                  this._selectGroup(index4);\n                  if (this.items[index4].type != 'ReadOnly') {\n                    if (this.items[index4].type == 'Day' && this.items[index4].format.length > 2) break;\n                    newEditor = true;\n                    break;\n                  }\n                }\n                if (!newEditor) {\n                  if (tmpIndex3 >= 0) {\n                    this.activeEditor = this.editors[tmpIndex3];\n                  }\n                }\n                if (this.activeEditor != null && this.activeEditor != lastEditor) {\n                  if (this.items[index4].type != 'ReadOnly') {\n                    this.activeEditor.positions = 0;\n                  }\n                }\n                if (this.activeEditor != lastEditor) {\n                  this._validateValue();\n                  this._updateText();\n                  this._selectGroup(this.editors.indexOf(this.activeEditor));\n                  return true;\n                } else return false;\n              }\n            },\n            _saveSelectedText: function () {\n              var selection = this._selection();\n              var text = \"\";\n              var allText = this.dateTimeInput.val();\n              if (selection.start > 0 || selection.length > 0) {\n                for (var i = selection.start; i < selection.end; i++) {\n                  text += allText[i];\n                }\n              }\n              if (window.clipboardData) {\n                window.clipboardData.setData(\"Text\", text);\n              }\n              return text;\n            },\n            _selectWithAdvancePattern: function () {\n              var editorIndex = this.editors.indexOf(this.activeEditor);\n              var canAdvance = false;\n              if (this.items[editorIndex].type != 'ReadOnly') {\n                canAdvance = true;\n              }\n              if (!canAdvance) return;\n              var numericEditor = this.activeEditor;\n              if (numericEditor != null) {\n                var canSelectRight = numericEditor.positions == numericEditor.maxEditPositions;\n                if (canSelectRight) {\n                  this.editorText = \"\";\n                  var editValue = numericEditor.value;\n                  var needValueUpdate = false;\n                  switch (this.items[editorIndex].type) {\n                    case 'FORMAT_AMPM':\n                      if (editValue < 0) {\n                        editValue = 0;\n                      } else if (editValue > 1) {\n                        editValue = 1;\n                      }\n                      break;\n                    case 'Character':\n                      break;\n                    case 'Day':\n                      if (editValue < 1) {\n                        editValue = 1;\n                      } else if (editValue > 31) {\n                        editValue = 31;\n                      }\n                      break;\n                    case 'FORMAT_hh':\n                      if (editValue < 1) {\n                        editValue = 1;\n                      } else if (editValue > 12) {\n                        editValue = 12;\n                      }\n                      break;\n                    case 'FORMAT_HH':\n                      if (editValue < 0) {\n                        editValue = 0;\n                      } else if (editValue > 23) {\n                        editValue = 23;\n                      }\n                      break;\n                    case 'Millisecond':\n                      if (editValue < 0) {\n                        editValue = 0;\n                      } else if (editValue > 99) {\n                        editValue = 99;\n                      }\n                      break;\n                    case 'Minute':\n                      if (editValue < 0) {\n                        editValue = 0;\n                      } else if (editValue > 59) {\n                        editValue = 59;\n                      }\n                      break;\n                    case 'Month':\n                      if (editValue < 1) {\n                        editValue = 1;\n                      } else if (editValue > 12) {\n                        editValue = 12;\n                      }\n                      break;\n                    case 'ReadOnly':\n                      break;\n                    case 'Second':\n                      if (editValue < 0) {\n                        editValue = 0;\n                      } else if (editValue > 59) {\n                        editValue = 59;\n                      }\n                      break;\n                    case 'Year':\n                      if (editValue < this.minDate.year) {\n                        editValue = this.minDate.year;\n                      } else if (editValue > this.maxDate.year) {\n                        editValue = this.maxDate.year;\n                      }\n                      break;\n                  }\n                  if (numericEditor.value != editValue) {\n                    needValueUpdate = true;\n                  }\n                  if (!needValueUpdate) {\n                    this.isEditing = false;\n                    this._validateValue();\n                    this._updateText();\n                    this.isEditing = true;\n                    this._doRightKey();\n                    return true;\n                  }\n                  return false;\n                }\n              }\n            },\n            _handleKeyPress: function (e, key) {\n              if (this._fullEditInProgress) {\n                this._enteredValue = true;\n                return;\n              }\n              var selection = this._selection();\n              var rootElement = this;\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if (ctrlKey && key == 97 /* firefox */ || ctrlKey && key == 65 /* opera */) {\n                return true;\n              }\n              if (key == 8) {\n                if (selection.start > 0) {\n                  rootElement._setSelectionStart(selection.start);\n                }\n                return false;\n              }\n              if (key == 46) {\n                if (selection.start < this.items.length) {\n                  rootElement._setSelectionStart(selection.start);\n                }\n                return false;\n              }\n              if (key === 27) {\n                if (this._firstFocusDate) {\n                  this.setDate(this._firstFocusDate);\n                  this._setSelectionStart(0);\n                  this._selectGroup(-1);\n                }\n                return false;\n              }\n              if (selection.start >= 0) {\n                this.changeType = \"keyboard\";\n                var letter = String.fromCharCode(key);\n                var digit = parseInt(letter);\n                if (letter == \"p\" || letter == \"a\" || letter == \"A\" || letter == \"P\") {\n                  if (this.activeEditor && this.activeEditor.item.type == \"FORMAT_AMPM\") {\n                    if (this.activeEditor.value == 0 && (letter == \"p\" || letter == \"P\")) {\n                      this.spinUp();\n                    } else if (this.activeEditor.value == 1 && (letter == \"a\" || letter == \"A\")) {\n                      this.spinDown();\n                    }\n                  }\n                }\n                if (!isNaN(digit)) {\n                  if (this.container.css('display') == 'block') {\n                    this.hideCalendar();\n                  }\n                  this.updateValue();\n                  this._updateText();\n                  var inserted = false;\n                  var activeItem = this.editors.indexOf(this.activeEditor);\n                  var dateTimeEditor = null;\n                  this.isEditing = true;\n                  if (activeItem.type != \"ReadOnly\") {\n                    dateTimeEditor = this.activeEditor;\n                  }\n                  if (dateTimeEditor != null && dateTimeEditor.positions == 0) {\n                    this.editorText = \"\";\n                  }\n                  if (this.activeEditor == null) {\n                    this.activeEditor = this.editors[0];\n                  }\n                  if (this.activeEditor == null) return false;\n                  this.activeEditor.insert(letter);\n                  if (dateTimeEditor != null && this.editorText.length >= dateTimeEditor.maxEditPositions) {\n                    this.editorText = \"\";\n                  }\n                  this.editorText += letter;\n                  var advanced = this._selectWithAdvancePattern();\n                  if (this.activeEditor.positions == this.activeEditor.maxEditPositions) {\n                    var lastEditorIndex = this._getLastEditableEditorIndex();\n                    if (this.editors.indexOf(this.activeEditor) == lastEditorIndex && advanced && this.enableAbsoluteSelection) {\n                      this.activeEditor.positions = this.activeEditor.maxEditPositions - 1;\n                    } else {\n                      this.activeEditor.positions = 0;\n                    }\n                  }\n                  inserted = true;\n                  this.updateValue();\n                  this._updateText();\n                  this._selectGroup(this.editors.indexOf(this.activeEditor));\n                  return false;\n                }\n              }\n              var specialKey = this._isSpecialKey(key);\n              return specialKey;\n            },\n            _getLastEditableEditorIndex: function () {\n              var i = 0;\n              var me = this;\n              for (var itemIndex = this.items.length - 1; itemIndex >= 0; itemIndex--) {\n                if (this.items[itemIndex].type != 'ReadOnly') {\n                  return itemIndex;\n                }\n              }\n              return -1;\n            },\n            _handleKeyDown: function (e, key) {\n              var that = this;\n              this.timePopup = false;\n              if (key == 84) {\n                this.timePopup = true;\n              }\n              if (e.keyCode == 115) {\n                if (that.isOpened()) {\n                  that.hideCalendar(\"keyboard\", \"keyboard\");\n                  return false;\n                } else if (!that.isOpened()) {\n                  that.showCalendar(\"keyboard\", \"keyboard\");\n                  return false;\n                }\n              }\n              if (e.altKey) {\n                if (e.keyCode == 38) {\n                  if (that.isOpened()) {\n                    if (that.showTimeButton && !that.showCalendarButton) {\n                      that.timePopup = true;\n                    }\n                    that.hideCalendar(\"keyboard\", \"keyboard\");\n                    return false;\n                  }\n                } else if (e.keyCode == 40) {\n                  if (!that.isOpened()) {\n                    if (that.showTimeButton && !that.showCalendarButton) {\n                      that.timePopup = true;\n                    }\n                    that.showCalendar(\"keyboard\", \"keyboard\");\n                    return false;\n                  }\n                }\n              } else if (e.ctrlKey) {\n                this.timePopup = true;\n                if (e.keyCode == 38) {\n                  if (that.isOpened()) {\n                    that.hideCalendar(\"keyboard\", \"keyboard\");\n                    return false;\n                  }\n                } else if (e.keyCode == 40) {\n                  if (!that.isOpened()) {\n                    that.showCalendar(\"keyboard\", \"keyboard\");\n                    return false;\n                  }\n                }\n              }\n              if (that.isOpened()) {\n                if (e.keyCode == 9) {\n                  that.hideCalendar('selected', \"keyboard\");\n                  return true;\n                }\n                return;\n              }\n              var selection = that._selection();\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if (ctrlKey && key == 99 /* firefox */ || ctrlKey && key == 67 /* opera */) {\n                that._saveSelectedText(e);\n                return true;\n              }\n              if (ctrlKey && key == 122 /* firefox */ || ctrlKey && key == 90 /* opera */) return false;\n              if (ctrlKey && key == 118 /* firefox */ || ctrlKey && key == 86 /* opera */ || e.shiftKey && key == 45) {\n                var value = that.val();\n                var me = this;\n                var pasteFrom = $('<textarea style=\"position: absolute; left: -1000px; top: -1000px;\"/>');\n                $('body').append(pasteFrom);\n                pasteFrom.select();\n                setTimeout(function () {\n                  var val = pasteFrom.val();\n                  me.setDate(val);\n                  pasteFrom.remove();\n                }, 100);\n                return true;\n              }\n              if (that._fullEditInProgress || that.editMode === 'full' && that.value === null) {\n                if (key == 13 && that._fullEditInProgress) {\n                  // Enter has been pressed\n                  that._endFullEdit();\n                  if (that.value != null) {\n                    that.isEditing = false;\n                    that._validateValue(true);\n                    that._updateText();\n                    that._raiseEvent(9, event);\n                    var i = that.editors.length - 1,\n                      editor = that.editors[i];\n                    while (editor && editor.formatValueLength === undefined) {\n                      i--;\n                      editor = that.editors[i];\n                    }\n                    if (editor && editor.formatValueLength !== undefined) {\n                      that.activeEditor = editor;\n                      that._selectGroup(i);\n                    }\n                  }\n                } else {\n                  that._fullEditInProgress = true;\n                  delete that._enteredValue;\n                }\n                return;\n              }\n              if (key == 8 || key == 46) {\n                if (!e.altKey && !ctrlKey && key == 46) {\n                  that.isEditing = false;\n                  if (that.allowKeyboardDelete) {\n                    that.changeType = \"keyboard\";\n                    if (that.allowNullDate) {\n                      that.setDate(null);\n                    } else {\n                      if (that.selectionMode != 'range') {\n                        that.setDate(that.getMinDate());\n                      } else {\n                        that.setRange(that.getMinDate(), that.getMinDate());\n                      }\n                    }\n                  }\n                } else {\n                  if (that.activeEditor != null) {\n                    var activeEditorIndex = that.editors.indexOf(that.activeEditor);\n                    if (that.activeEditor.positions >= 0) {\n                      var formattedValue = that._format(Number(that.activeEditor.value), \"d\" + that.activeEditor.maxEditPositions, that.culture);\n                      var tmp = formattedValue;\n                      tmp = tmp.substring(0, that.activeEditor.positions) + '0' + tmp.substring(that.activeEditor.positions + 1);\n                      if (parseInt(tmp) < that.activeEditor.minValue) {\n                        tmp = that._format(Number(that.activeEditor.minValue), \"d\" + that.activeEditor.maxEditPositions, that.culture);\n                      }\n                      if (that.enableAbsoluteSelection) {\n                        that.activeEditor.value = tmp;\n                      } else that.activeEditor.value = that.activeEditor.minValue;\n                      that._validateValue();\n                      that._updateText();\n                      that.changeType = \"keyboard\";\n                      if (key == 8) {\n                        var myself = this;\n                        if (that.enableAbsoluteSelection && that.activeEditor.positions > 0) {\n                          setTimeout(function () {\n                            myself.activeEditor.positions = myself.activeEditor.positions - 1;\n                            myself._selectGroup(activeEditorIndex);\n                          }, 10);\n                        } else {\n                          setTimeout(function () {\n                            myself._doLeftKey();\n                          }, 10);\n                        }\n                      } else that._selectGroup(activeEditorIndex);\n                    } else that._doLeftKey();\n                  }\n                }\n                return false;\n              }\n              if (key == 38) {\n                this.spinUp();\n                that.changeType = \"keyboard\";\n                return false;\n              } else if (key == 40) {\n                this.spinDown();\n                that.changeType = \"keyboard\";\n                return false;\n              }\n              if (key == 9) {\n                if (that.value == null) return true;\n                if (e.shiftKey) {\n                  var result = this._doLeftKey();\n                } else {\n                  var result = this._doRightKey();\n                }\n                if (!result) return true;else return false;\n              }\n              if (key == 37) {\n                if (this._editor) {\n                  var result = this._doLeftKey();\n                  if (!result) {\n                    this.isEditing = false;\n                    this._validateValue();\n                  }\n                  return !result;\n                } else {\n                  var result = this._doLeftKey();\n                  return false;\n                }\n              } else if (key == 39 || key == 191) {\n                if (this._editor) {\n                  var result = this._doRightKey();\n                  if (!result) {\n                    this.isEditing = false;\n                    this._validateValue();\n                  }\n                  return !result;\n                } else {\n                  var result = this._doRightKey();\n                  return false;\n                }\n              }\n              var specialKey = this._isSpecialKey(key);\n              if (this.value == null && (key >= 48 && key <= 57 || key >= 96 && key <= 105)) {\n                that.changeType = \"keyboard\";\n                if (new Date() >= this.getMinDate() && new Date() <= this.getMaxDate()) {\n                  this.setDate(new Date());\n                } else {\n                  this.setDate(this.getMaxDate());\n                }\n              }\n              if (!$.jqx.browser.mozilla) return true;\n              if ($.jqx.browser.mozilla && $.jqx.browser.version > 24) {\n                return true;\n              }\n              return specialKey;\n            },\n            _isSpecialKey: function (key) {\n              if (key != 8 /* backspace */ && key != 9 /* tab */ && key != 13 /* enter */ && key != 35 /* end */ && key != 36 /* home */ && key != 37 /* left */ && key != 39 /* right */ && key != 27 /* right */ && key != 46 /* del */) {\n                return false;\n              }\n              return true;\n            },\n            _selection: function () {\n              if ('selectionStart' in this.dateTimeInput[0]) {\n                var e = this.dateTimeInput[0];\n                var selectionLength = e.selectionEnd - e.selectionStart;\n                return {\n                  start: e.selectionStart,\n                  end: e.selectionEnd,\n                  length: selectionLength,\n                  text: e.value\n                };\n              } else {\n                var r = document.selection.createRange();\n                if (r == null) {\n                  return {\n                    start: 0,\n                    end: e.value.length,\n                    length: 0\n                  };\n                }\n                var re = this.dateTimeInput[0].createTextRange();\n                var rc = re.duplicate();\n                re.moveToBookmark(r.getBookmark());\n                rc.setEndPoint('EndToStart', re);\n                var selectionLength = r.text.length;\n                return {\n                  start: rc.text.length,\n                  end: rc.text.length + r.text.length,\n                  length: selectionLength,\n                  text: r.text\n                };\n              }\n            },\n            _selectGroup: function (value, selection) {\n              if (this.host.css('display') == 'none') return;\n              if (this.readonly) return;\n              if (!selection) {\n                var selection = this._selection();\n              }\n              var str = \"\";\n              var currentString = \"\";\n              var activeEditor = null;\n              for (var i = 0; i < this.items.length; i++) {\n                currentString = this.items[i].dateParser(this.value, this);\n                if (this.isEditing && this.items[i].type != 'ReadOnly') {\n                  var isReadOnlyDay = this.items[i].type == 'Day' && this.items[i].format.length > 2;\n                  if (!isReadOnlyDay && this.items[i].type != 'FORMAT_AMPM') {\n                    if (this.yearCutoff !== null && this.items[i].type === 'Year' && this.items[i].format === 'yy') {\n                      currentString = this.editors[i].value.toString().substring(2);\n                    } else {\n                      currentString = this.items[i].dateParserInEditMode(new Number(this.editors[i].value), \"d\" + this.editors[i].maxEditPositions, this);\n                      while (currentString.length < this.editors[i].maxEditPositions) {\n                        currentString = '0' + currentString;\n                      }\n                    }\n                  }\n                }\n                str += currentString;\n                if (this.items[i].type == 'ReadOnly') continue;\n                if (this.items[i].type == 'Day' && this.items[i].format.length > 2) continue;\n                if (value != undefined && value != -1) {\n                  if (i >= value) {\n                    var selectionStart = str.length - currentString.length;\n                    var selectionLength = currentString.length;\n                    if (this.enableAbsoluteSelection) {\n                      if (!isNaN(parseInt(currentString)) && this.isEditing && value != -1) {\n                        selectionLength = 1;\n                        selectionStart += this.editors[i].positions;\n                      }\n                    }\n                    if (selectionStart == this.dateTimeInput.val().length) {\n                      selectionStart--;\n                    }\n                    this._setSelection(selectionStart, selectionStart + selectionLength);\n                    activeEditor = this.editors[i];\n                    this.activeEditor = activeEditor;\n                    break;\n                  }\n                } else if (str.length >= selection.start) {\n                  activeEditor = this.editors[i];\n                  this.activeEditor = activeEditor;\n                  var selectionStart = str.length - currentString.length;\n                  var selectionLength = 1;\n                  if (this.enableAbsoluteSelection) {\n                    if (!isNaN(parseInt(currentString)) && this.isEditing && value != -1) {\n                      selectionLength = 1;\n                      selectionStart += this.editors[i].positions;\n                    }\n                  } else selectionLength = currentString.length;\n                  this._setSelection(selectionStart, selectionStart + selectionLength);\n                  break;\n                }\n              }\n              if (i < this.items.length && value == -1) {\n                if (this.items[i].type != 'ReadOnly') {\n                  this.activeEditor.positions = 0;\n                }\n              }\n              var newSelection = this._selection();\n              if (newSelection.length == 0) {\n                if (newSelection.start > 0) {\n                  var editorIndex = this._getLastEditableEditorIndex();\n                  if (editorIndex >= 0) {\n                    //   this._selectGroup(editorIndex);\n                  }\n                }\n              }\n            },\n            _getLastEditableEditorIndex: function () {\n              var editorIndex = -1;\n              for (var i = 0; i < this.editors.length; i++) {\n                if (this.items[i].type == 'ReadOnly') continue;\n                if (this.items[i].type == 'Day' && this.items[i].format.length > 2) continue;\n                editorIndex = i;\n              }\n              return editorIndex;\n            },\n            _setSelection: function (start, end) {\n              try {\n                if ('selectionStart' in this.dateTimeInput[0]) {\n                  //  this.dateTimeInput[0].focus();\n                  this.dateTimeInput[0].setSelectionRange(start, end);\n                } else {\n                  var range = this.dateTimeInput[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', end);\n                  range.moveStart('character', start);\n                  range.select();\n                }\n              } catch (error) {}\n            },\n            _setSelectionStart: function (start) {\n              this._setSelection(start, start);\n            },\n            destroy: function () {\n              $.jqx.utilities.resize(this.host, null, true);\n              this.host.removeClass(\"jqx-rc-all\");\n              if (this.timePopupElement) {\n                this.timePopupElement.remove();\n              }\n              this._calendar.destroy();\n              this.container.remove();\n              this._removeHandlers();\n              this.dateTimeInput.remove();\n              this.host.remove();\n            },\n            refreshValue: function () {\n              this._refreshValue();\n            },\n            refresh: function (initialRefresh) {\n              if (initialRefresh != true) {\n                this._setSize();\n                this._arrange();\n              }\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this.refresh();\n            },\n            _setOption: function (key, value, oldvalue) {\n              if (key === \"value\") {\n                if (this.selectionMode != 'range') {\n                  this._oldDT = null;\n                } else this._oldDT = null;\n                this.value = value;\n                this._refreshValue();\n                this._raiseEvent(9, {\n                  type: null\n                });\n              }\n              if (key == 'maxDate') {\n                this._calendar.maxDate = value;\n                this._raiseEvent(9, {\n                  type: null\n                });\n              }\n              if (key == 'minDate') {\n                this._calendar.minDate = value;\n                this._raiseEvent(9, {\n                  type: null\n                });\n              }\n              if (key == 'showCalendarButton') {\n                if (value) {\n                  this.calendarButton.css('display', 'block');\n                } else {\n                  this.calendarButton.css('display', 'none');\n                }\n              }\n              if (key == \"disabled\") {\n                this.dateTimeInput.attr(\"disabled\", value);\n              }\n              if (key == \"readonly\") {\n                this.readonly = value;\n                this.dateTimeInput.css(\"readonly\", value);\n              }\n              if (key == \"textAlign\") {\n                this.dateTimeInput.css(\"text-align\", value);\n                this.textAlign = value;\n              }\n              if (key == \"width\") {\n                this.width = value;\n                this.width = parseInt(this.width);\n                this._arrange();\n              } else if (key == \"height\") {\n                this.height = value;\n                this.height = parseInt(this.height);\n                this._arrange();\n              }\n            },\n            _updateHint: function () {\n              var that = this;\n              if (!that.hint) {\n                return;\n              }\n              if (that.isMaterialized()) {\n                setTimeout(function () {\n                  if (that.dateTimeInput[0].value.length === 0) {\n                    that.element.removeAttribute('hint');\n                    that.label[0].innerHTML = that.placeHolder;\n                  } else {\n                    that.label[0].innerHTML = '';\n                    if (that.hint) {\n                      that.element.setAttribute('hint', true);\n                    }\n                  }\n                });\n              }\n            },\n            _refreshValue: function () {\n              this._updateEditorsValue();\n              this.updateValue();\n              this._validateValue();\n              this._updateText();\n              this._updateHint();\n            },\n            _getYearBasedOnCutoff: function (lastTwoDigits) {\n              var yearCutoff = this.yearCutoff.toString(),\n                threshold = parseFloat(yearCutoff.substring(2)),\n                decade = parseFloat(yearCutoff.substring(0, 2));\n              if (parseFloat(lastTwoDigits) < threshold) {\n                decade++;\n              }\n              return parseFloat(decade + '' + lastTwoDigits);\n            },\n            _endFullEdit: function () {\n              var me = this;\n              if (!me._fullEditInProgress) {\n                return;\n              }\n              var enteredValue = me.dateTimeInput[0].value;\n              delete me._fullEditInProgress;\n              delete me._enteredValue;\n              if (enteredValue === '') {\n                me.value = null;\n              } else {\n                var enteredDate = new Date(enteredValue);\n                if (this._mask && this.formatString) {\n                  var maskKeys = Object.keys(this._mask);\n                  if (maskKeys.length === 2) {\n                    var mask = [maskKeys[0], maskKeys[1]];\n                    var prefix = enteredValue.substring(0, mask[0]);\n                    var middle = enteredValue.substring(parseInt(mask[0]) + 1, mask[1]);\n                    var suffix = enteredValue.substring(parseInt(mask[1]) + 1);\n                    if (this.formatString.substring(0, mask[0]) === \"dd\") {\n                      prefix = parseInt(prefix);\n                      middle = parseInt(middle);\n                      suffix = parseInt(suffix);\n                      enteredDate = new Date(suffix, middle - 1, prefix);\n                    }\n                  }\n                }\n                if (!isNaN(enteredDate.getTime())) {\n                  me.items = [];\n                  if (me.yearCutoff) {\n                    var year = enteredDate.getFullYear().toString();\n                    if (enteredValue.indexOf(year) === -1 && enteredValue.indexOf(year.slice(2))) {\n                      // only 2-digit year has been entered by the user\n                      var validYear = me._getYearBasedOnCutoff(year.slice(2));\n                      enteredDate.setFullYear(validYear);\n                    }\n                  }\n                  me.value = $.jqx._jqxDateTimeInput.getDateTime(enteredDate);\n                } else if (me.value === null) {\n                  me._updateText();\n                }\n              }\n            },\n            _getMask: function () {\n              var that = this,\n                format = that.formatString,\n                patterns = {\n                  // short date pattern\n                  d: \"M/d/yyyy\",\n                  // long date pattern\n                  D: \"dddd, MMMM dd, yyyy\",\n                  // short time pattern\n                  t: \"h:mm tt\",\n                  // long time pattern\n                  T: \"h:mm:ss tt\",\n                  // long date, short time pattern\n                  f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                  // long date, long time pattern\n                  F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                  // month/day pattern\n                  M: \"MMMM dd\",\n                  // month/year pattern\n                  Y: \"yyyy MMMM\",\n                  // S is a sortable format that does not vary by culture\n                  S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                  // formatting of dates in MySQL DataBases\n                  ISO: \"yyyy-MM-dd hh:mm:ss\",\n                  ISO2: \"yyyy-MM-dd HH:mm:ss\",\n                  d1: \"dd.MM.yyyy\",\n                  d2: \"dd-MM-yyyy\",\n                  zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n                  zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n                  custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n                  custom2: \"yyyy-MM-dd HH:mm:ss.fff\"\n                },\n                mask = {};\n              if (patterns[format]) {\n                format = patterns[format];\n              }\n\n              // expand single digit formats, then escape regular expression characters.\n              var expFormat = format.replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"),\n                regexp = [\"^\"],\n                index = 0,\n                quoteCount = 0,\n                tokenRegExp = /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,\n                match;\n\n              // iterate through each date token found.\n              while ((match = tokenRegExp.exec(expFormat)) !== null) {\n                var preMatch = expFormat.slice(index, match.index);\n                if (preMatch !== '') {\n                  mask[index] = preMatch;\n                }\n                index = tokenRegExp.lastIndex;\n\n                // don't replace any matches that occur inside a string literal.\n                quoteCount += that._appendPreOrPostMatch(preMatch, regexp);\n                if (quoteCount % 2) {\n                  regexp.push(match[0]);\n                  continue;\n                }\n\n                // add a regex group for the token.\n                var m = match[0],\n                  len = m.length,\n                  add;\n                switch (m) {\n                  case 'dddd':\n                  case 'ddd':\n                  case 'MMMM':\n                  case 'MMM':\n                  case 'gg':\n                  case 'g':\n                    add = \"(\\\\D+)\";\n                    break;\n                  case 'tt':\n                  case 't':\n                    add = \"(\\\\D*)\";\n                    break;\n                  case 'yyyy':\n                  case 'fff':\n                  case 'ff':\n                  case 'f':\n                    add = \"(\\\\d{\" + len + \"})\";\n                    break;\n                  case 'dd':\n                  case 'd':\n                  case 'MM':\n                  case 'M':\n                  case 'yy':\n                  case 'y':\n                  case 'HH':\n                  case 'H':\n                  case 'hh':\n                  case 'h':\n                  case 'mm':\n                  case 'm':\n                  case 'ss':\n                  case 's':\n                    add = \"(\\\\d\\\\d?)\";\n                    break;\n                  case 'zzz':\n                    add = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n                    break;\n                  case 'zz':\n                  case 'z':\n                    add = \"([+-]?\\\\d\\\\d?)\";\n                    break;\n                  case '/':\n                    add = \"(\\\\/)\";\n                    mask[index - 1] = '/';\n                    break;\n                  default:\n                    throw \"Invalid date format pattern '\" + m + \"'.\";\n                    break;\n                }\n                if (add) {\n                  regexp.push(add);\n                }\n              }\n              that._appendPreOrPostMatch(expFormat.slice(index), regexp);\n              regexp.push(\"$\");\n              that._mask = mask;\n            },\n            _appendPreOrPostMatch: function (preMatch, strings) {\n              // appends pre- and post- token match strings while removing escaped characters.\n              // Returns a single quote count which is used to determine if the token occurs\n              // in a string literal.\n              var quoteCount = 0,\n                escaped = false;\n              for (var i = 0, il = preMatch.length; i < il; i++) {\n                var c = preMatch.charAt(i);\n                switch (c) {\n                  case '\\'':\n                    if (escaped) {\n                      strings.push(\"'\");\n                    } else {\n                      quoteCount++;\n                    }\n                    escaped = false;\n                    break;\n                  case '\\\\':\n                    if (escaped) {\n                      strings.push(\"\\\\\");\n                    }\n                    escaped = !escaped;\n                    break;\n                  default:\n                    strings.push(c);\n                    escaped = false;\n                    break;\n                }\n              }\n              return quoteCount;\n            }\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          $.jqx._jqxDateTimeInput.DateTimeFormatItem = {};\n          $.extend($.jqx._jqxDateTimeInput.DateTimeFormatItem, {\n            _create: function (format, type, culture) {\n              this.format = format;\n              this.type = type;\n              this.culture = culture;\n              return this;\n            },\n            _itemValue: function () {\n              switch (this.format.length) {\n                case 1:\n                  return 9;\n                case 2:\n                  return 99;\n                case 3:\n                default:\n                  return 999;\n              }\n            },\n            _maximumValue: function () {\n              switch (this.format.length) {\n                case 1:\n                  return 9;\n                case 2:\n                  return 99;\n                case 3:\n                default:\n                  return 999;\n              }\n            },\n            dateParser: function (formattedDateTime, that) {\n              if (formattedDateTime == null) return \"\";\n              var value = that._format(formattedDateTime.dateTime, this.format.length == 1 ? '%' + this.format : this.format, this.culture);\n              return value;\n            },\n            dateParserInEditMode: function (val, format, that) {\n              if (val == null) return \"\";\n              var value = that._format(val.toString(), format.length == 1 ? '%' + format : format, this.culture);\n              return value;\n            },\n            getDateTimeEditorByItemType: function (value, that) {\n              switch (this.type) {\n                case 'FORMAT_AMPM':\n                  var aMpMEditor = $.jqx._jqxDateTimeInput.AmPmEditor._createAmPmEditor(this.format, value.hour / 12, that.localization.calendar.AM[0], that.localization.calendar.PM[0], this, that);\n                  var newEditor = $.extend({}, aMpMEditor);\n                  return newEditor;\n                case 'Character':\n                  return null;\n                case 'Day':\n                  var year = value.year;\n                  var month = value.month;\n                  var dayNames;\n                  if (this.format.length == 3) dayNames = that.localization.calendar.days.namesAbbr;else if (this.format.length > 3) dayNames = that.localization.calendar.days.names;else dayNames = null;\n                  var val = value.day;\n                  if (dayNames != null) val = value.dayOfWeek + 1;\n                  var dayEditor = $.jqx._jqxDateTimeInput.DateEditor._createDayEditor(value, value.day, 1, value._daysInMonth(year, month), this.format.length == 1 ? 1 : 2, 2, dayNames, this, that);\n                  var newEditor = $.extend({}, dayEditor);\n                  return newEditor;\n                case 'FORMAT_hh':\n                  var initialValue = value.hour % 12;\n                  if (initialValue == 0) initialValue = 12;\n                  var hhEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(initialValue, 1, 12, this.format.length == 1 ? 1 : 2, 2, this, that);\n                  var newEditor = $.extend({}, hhEditor);\n                  return newEditor;\n                case 'FORMAT_HH':\n                  var HHEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.hour, 0, 23, this.format.length == 1 ? 1 : 2, 2, this, that);\n                  var newEditor = $.extend({}, HHEditor);\n                  return newEditor;\n                case 'Millisecond':\n                  var milisecondEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.millisecond / this._itemValue(), 0, this._maximumValue(), this.format.length, this.format.length, this, that);\n                  var newEditor = $.extend({}, milisecondEditor);\n                  return newEditor;\n                case 'Minute':\n                  var minuteEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.minute, 0, 59, this.format.length == 1 ? 1 : 2, 2, this, that);\n                  var newEditor = $.extend({}, minuteEditor);\n                  return newEditor;\n                case 'Month':\n                  var monthNames;\n                  if (this.format.length == 3) monthNames = that.localization.calendar.months.namesAbbr;else if (this.format.length > 3) monthNames = that.localization.calendar.months.names;else monthNames = null;\n                  var monthEditor = $.jqx._jqxDateTimeInput.DateEditor._createMonthEditor(value.month, this.format.length == 2 ? 2 : 1, monthNames, this, that);\n                  var newEditor = $.extend({}, monthEditor);\n                  return newEditor;\n                case 'ReadOnly':\n                  return $.jqx._jqxDateTimeInput.DisabledEditor._create(this.format.length, value.day, this, that);\n                case 'Second':\n                  var secondEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.second, 0, 59, this.format.length == 1 ? 1 : 2, 2, this, that);\n                  var newEditor = $.extend({}, secondEditor);\n                  return newEditor;\n                case 'Year':\n                  var yearEditor = $.jqx._jqxDateTimeInput.DateEditor._createYearEditor(value.year, that.yearCutoff !== null && this.format === 'yy' ? 2 : 4, this, that);\n                  var newEditor = $.extend({}, yearEditor);\n                  return newEditor;\n              }\n              return null;\n            }\n\n            //getDateTimeWithOffset: function(offset, value)\n            //{\n            //    if (offset == null || value == null)\n            //    {\n            //        throw 'Invalid arguments';\n            //    }\n\n            //    var hours = value.hour;\n            //    var minutes = value.minute;\n            //    var seconds = value.second;\n            //    var days = value.day();\n            //    var months = value.month();\n            //    var years = value.year();\n\n            //    var dateTime = value;\n            //    var newDateTime = value;\n\n            //    switch (this.type)\n            //    {\n            //        case 'FORMAT_AMPM':\n            //            hours = 12 * (offset - hours / 12);\n            //            break;\n            //        case 'Day':\n            //            days = offset - days;\n            //            if (days != offset)\n            //            {\n            //                if (offset == 29 && months == 2)\n            //                {\n            //                    newDateTime = dateTime;\n            //                    while (!DateTime._isLeapYear(newDateTime.year))\n            //                    {\n            //                        newDateTime = newDateTime._addYears(1);\n            //                    }\n\n            //                        newDateTime = newDateTime._addDays(offset - newDateTime.day);\n            //                }\n            //                else\n            //                {\n            //                    newDateTime = dateTime._addMonths(1 - dateTime.month);\n            //                    newDateTime = newDateTime._addDays(offset - dateTime.day);\n            //                }\n            //            }\n            //            break;\n            //        case 'FORMAT_hh':\n            //            var res = offset == 12 ? 0 : offset;\n            //            dateTime = dateTime._addHours(res - (dateTime.hour % 12));\n            //            break;\n            //        case 'FORMAT_HH':\n            //            dateTime = dateTime._addHours(offset - dateTime.hour);\n            //            break;\n            //        case 'Millisecond':\n            //            dateTime = dateTime._addMilliseconds(offset * this._itemValue() - dateTime.millisecond);\n            //            break;\n            //        case 'Minute':\n            //            dateTime = dateTime._addMinutes(offset - dateTime.minute);\n            //            break;\n            //        case 'Month':\n            //            newDateTime = dateTime._addMonths(offset - dateTime.month);\n            //            if (offset == 2 && dateTime.day == 29 && dateTime.day != newDateTime.day\n            //                )\n            //            {\n            //                newDateTime = dateTime;\n            //                while (!dateTime.IsLeapYear(newDateTime.year))\n            //                {\n            //                    newDateTime = newDateTime._addYears(1);\n            //                }\n\n            //                newDateTime = newDateTime._addMonths(offset - newDateTime.month);\n            //            }\n\n            //            dateTime = newDateTime;\n            //            break;\n            //        case 'ReadOnly':\n            //            break;\n            //        case 'Second':\n            //            dateTime = dateTime._addSeconds(offset - dateTime.second);\n\n            //            break;\n            //        case 'Year':\n            //            if (offset == 0)\n            //                offset = 1;\n\n            //            dateTime = dateTime._addYears(offset - value.year);\n            //            break;\n            //    }\n            //    return dateTime;\n            //}\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          $.jqx._jqxDateTimeInput.DateEditor = $.extend($.jqx._jqxDateTimeInput.DateEditor, {\n            formatValueLength: 0,\n            handleYears: false,\n            handleDays: false,\n            handleMonths: false,\n            positions: 0,\n            value: 0,\n            minEditPositions: 0,\n            maxEditPositions: 0,\n            minValue: 0,\n            maxValue: 0,\n            item: null,\n            dateTimeFormatInfo: null,\n            days: null,\n            dateTimeMonths: null,\n            lastDayInput: null,\n            minPositions: function () {\n              if (this.handleYears) {\n                if (this.formatValueLength == 4) {\n                  if (this.positions <= 1) {\n                    return 1;\n                  } else {\n                    if (this.positions >= 4) {\n                      return 4;\n                    }\n                  }\n                  return this.positions;\n                } else {\n                  return this.minEditPositions;\n                }\n              }\n              return this.minEditPositions;\n            },\n            initializeFields: function (minValue, maxValue, minEditPositions, maxEditPositions, item) {\n              this.minValue = minValue;\n              this.maxValue = maxValue;\n              this.minEditPositions = minEditPositions;\n              this.maxEditPositions = maxEditPositions;\n              this.updateActiveEditor(minValue);\n              this.item = item;\n            },\n            _createYearEditor: function (baseYear, formatValueLength, item, that) {\n              $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);\n              this.initializeFields(formatValueLength <= 4 ? 0 : 0, formatValueLength < 4 ? 99 : 9999, formatValueLength == 2 ? 2 : 1, formatValueLength > 3 ? 4 : 2, item);\n              this.initializeYearEditor(baseYear, formatValueLength, item.culture);\n              this.handleYears = true;\n              this.that = that;\n              return this;\n            },\n            initializeYearEditor: function (baseYear, formatValueLength, info) {\n              this.formatValueLength = formatValueLength;\n              this.dateTimeFormatInfo = info;\n              var realYear = baseYear;\n              realYear = Math.min(realYear, 9999);\n              realYear = Math.max(realYear, 1);\n              realYear = this.formatValueLength < 4 ? realYear % 100 : realYear;\n              this.updateActiveEditor(realYear);\n              this.value = realYear;\n            },\n            updateActiveEditor: function (newValue) {\n              this.value = newValue;\n              this.positions = 0;\n            },\n            _createDayEditor: function (editedValue, initialValue, minValue, maxValue, minEditingPositions, maxEditingPositions, dayKeys, item, that) {\n              $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);\n              this.initializeFields(minValue, maxValue, 1, maxEditingPositions, item);\n              this.currentValue = editedValue;\n              this.value = initialValue;\n              this.days = dayKeys;\n              this.handleDays = true;\n              this.that = that;\n              return this;\n            },\n            getDayOfWeek: function (val) {\n              if (typeof this.currentValue == $.jqx._jqxDateTimeInput.DateTime) {\n                this.currentValue.dayOfWeek();\n              }\n              return val;\n            },\n            defaultTextValue: function () {\n              var value = this.value;\n              var minPositions = this.minEditPositions;\n              var minFormattedPositions = minPositions;\n              var formattedValue = this.that._format(this.value, \"d\" + minFormattedPositions, \"\");\n              return formattedValue;\n            },\n            textValue: function () {\n              if (this.handleDays) {\n                if (this.days == null) {\n                  return this.defaultTextValue();\n                } else {\n                  var val = this.value % 7 + 1;\n                  val = this.getDayOfWeek(val);\n                  return this.days[val];\n                }\n              } else if (this.handleMonths) {\n                if (this.dateTimeMonths == null || this.value < 1 || this.value > 12) {\n                  return this.defaultTextValue();\n                } else {\n                  return this.dateTimeMonths[this.value - 1];\n                }\n              }\n              return this.defaultTextValue();\n            },\n            defaultInsertString: function (inseredValue) {\n              if (inseredValue == null) {\n                return this.deleteValue();\n              }\n              if (inseredValue.length == 0) {\n                return this.deleteValue();\n              }\n              var character = inseredValue.substring(0, 1);\n              if (isNaN(character)) {\n                return;\n              }\n              var res = true;\n              var tmp;\n              var entries = 1;\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              tmp = formattedValue;\n              if (this.positions >= this.maxEditPositions) {\n                this.positions = 0;\n              }\n              tmp = tmp.substring(0, this.positions) + character + tmp.substring(this.positions + 1);\n              tmp = this.setValueByString(tmp, entries);\n              return true;\n            },\n            setValueByString: function (tmp, entries) {\n              tmp = this.fixValueString(tmp);\n              var nextValue = new Number(tmp);\n              this.value = nextValue;\n              this.positions += entries;\n              return tmp;\n            },\n            fixValueString: function (tmp) {\n              if (tmp.length > this.maxEditPositions) {\n                tmp = tmp.substring(tmp.length - this.maxEditPositions);\n              }\n\n              //            var enteredDigit = parseInt(tmp[this.positions]);\n              //            var pos = this.maxEditPositions - 1;\n              //            while(parseInt(tmp) > this.maxValue)\n              //            {\n              //                if (pos < 0)\n              //                    break;\n\n              //                if (tmp[pos] > 0)\n              //                {\n              //                    var digit = parseInt(tmp[pos])-1;\n              //                    tmp = tmp.substring(0, pos) + digit + tmp.substring(pos+1);\n              //                }\n              //                else pos--;\n              //            }\n\n              return tmp;\n            },\n            initializeValueString: function (formattedValue) {\n              var tmp;\n              tmp = \"\";\n              if (this.hasDigits()) {\n                tmp = formattedValue;\n              }\n              return tmp;\n            },\n            deleteValue: function () {\n              if (this.value == this.minValue && this.hasDigits() == false) {\n                return false;\n              }\n              this.updateActiveEditor(this.minValue);\n              return true;\n            },\n            hasDigits: function () {\n              return this.positions > 0;\n            },\n            insert: function (input) {\n              if (this.handleDays) {\n                if (this.days != null) {\n                  var res = false;\n                  res = this.insertLongString(input, res);\n                  if (res) {\n                    return res;\n                  }\n                  res = this.insertShortString(input, res);\n                  if (res) {\n                    return res;\n                  }\n                }\n                if (this.value == 1 && this.lastDayInput != null && this.lastDayInput.toString().length > 0 && this.lastDayInput.toString() == \"0\") {\n                  this.value = 0;\n                }\n                this.lastDayInput = input;\n                return this.defaultInsertString(input);\n              } else if (this.handleMonths) {\n                if (this.dateTimeMonths != null) {\n                  var res = false;\n                  res = this.insertLongString2(input, res);\n                  if (res) {\n                    return res;\n                  }\n                  res = this.insertShortString2(input, res);\n                  if (res) {\n                    return res;\n                  }\n                }\n              } else if (this.that.yearCutoff !== null && this.handleYears && this.formatValueLength === 2) {\n                if (input == null || input.length == 0) {\n                  return this.deleteValue();\n                }\n                var character = input.substring(0, 1);\n                if (isNaN(character)) {\n                  return;\n                }\n                if (this.positions >= this.maxEditPositions) {\n                  this.positions = 0;\n                }\n                var tmp = this.value.toString().substring(2);\n                tmp = tmp.substring(0, this.positions) + character + tmp.substring(this.positions + 1);\n                this.value = this.that._getYearBasedOnCutoff(tmp);\n                this.positions += 1;\n                return true;\n              }\n              return this.defaultInsertString(input);\n            },\n            insertShortString: function (input, res) {\n              if (input.length == 1) {\n                for (var i = 0; i < 6; ++i) {\n                  var testedDay = (this.value + i) % 7 + 1;\n                  var dayName = this.days[testedDay - 1];\n                  if (dayName.substring(0, 1) == input) {\n                    this.updateActiveEditor(testedDay);\n                    res = true;\n                    return res;\n                  }\n                }\n              }\n              return res;\n            },\n            insertLongString: function (input, res) {\n              if (input.length > 0) {\n                for (var i = 0; i < 6; ++i) {\n                  var testedDay = (this.value + i) % 7 + 1;\n                  if (this.days[testedDay - 1] == input) {\n                    this.updateActiveEditor(testedDay);\n                    res = true;\n                    return res;\n                  }\n                }\n              }\n              return res;\n            },\n            _createMonthEditor: function (baseValue, positions, monthsNames, item, that) {\n              $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);\n              this.initializeFields(1, 12, positions, 2, item);\n              this.dateTimeMonths = monthsNames;\n              this.value = baseValue;\n              if (this.dateTimeMonths != null && this.dateTimeMonths[12] != null && this.dateTimeMonths[12].length > 0) this.dateTimeMonths = null;\n              this.handleMonths = true;\n              this.that = that;\n              return this;\n            },\n            insertLongString2: function (input, res) {\n              if (input.length > 0) {\n                for (var i = 0; i < 11; ++i) {\n                  var month = (this.value + i) % 12 + 1;\n                  if (this.dateTimeMonths[month - 1] == input) {\n                    this.updateActiveEditor(month);\n                    res = true;\n                    return res;\n                  }\n                }\n              }\n              return res;\n            },\n            insertShortString2: function (input, res) {\n              if (input.length == 1) {\n                for (var i = 0; i < 11; ++i) {\n                  var month = (this.value + i) % 12 + 1;\n                  var monthName = this.dateTimeMonths[month - 1];\n                  if (monthName.substring(0, 1) == input) {\n                    this.updateActiveEditor(month);\n                    res = true;\n                    return res;\n                  }\n                }\n              }\n              return res;\n            },\n            correctMaximumValue: function (val) {\n              var maxValue = this.maxValue;\n              if (this.that.yearCutoff !== null && this.item.type === 'Year' && this.item.format === 'yy') {\n                maxValue = 9999;\n              }\n              if (val > maxValue) {\n                val = this.minValue;\n              }\n              return val;\n            },\n            correctMinimumValue: function (val) {\n              if (val < this.minValue) {\n                val = this.maxValue;\n              }\n              return val;\n            },\n            increaseValue: function (byPosition) {\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              var digit = formattedValue.toString()[this.positions];\n              digit = parseInt(digit) + 1;\n              if (digit > 9) digit = 0;\n              if (!byPosition) {\n                var tmpValue = this.value + 1;\n                tmpValue = this.correctMaximumValue(tmpValue);\n                this.updateActiveEditor(tmpValue);\n                return true;\n              }\n              var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);\n              if (val != this.value || this.hasDigits()) {\n                this.updateActiveEditor(val);\n                return true;\n              } else {\n                return false;\n              }\n            },\n            decreaseValue: function (byPosition) {\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              var digit = formattedValue.toString()[this.positions];\n              digit = parseInt(digit) - 1;\n              if (digit < 0) digit = 9;\n              if (!byPosition) {\n                var tmpValue = this.value - 1;\n                tmpValue = this.correctMinimumValue(tmpValue);\n                this.updateActiveEditor(tmpValue);\n                return true;\n              }\n              var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);\n              if (val != this.value || this.hasDigits()) {\n                this.updateActiveEditor(val);\n                return true;\n              } else {\n                return false;\n              }\n            },\n            getDateTimeItem: function () {\n              return this.item;\n            }\n          });\n        })(jqxBaseFramework);\n\n        //Number Editor\n        (function ($) {\n          $.jqx._jqxDateTimeInput.NumberEditor = {};\n          $.extend($.jqx._jqxDateTimeInput.NumberEditor, {\n            formatValueLength: 0,\n            positions: 0,\n            value: 0,\n            minEditPositions: 0,\n            maxEditPositions: 0,\n            minValue: 0,\n            maxValue: 0,\n            item: null,\n            minPositions: function () {\n              if (this.handleYears) {\n                if (this.formatValueLength == 4) {\n                  if (this.positions <= 1) {\n                    return 1;\n                  } else {\n                    if (this.positions >= 4) {\n                      return 4;\n                    }\n                  }\n                  return this.positions;\n                } else {\n                  return this.minEditPositions;\n                }\n              }\n              return this.minEditPositions;\n            },\n            _createNumberEditor: function (value, minValue, maxValue, minEditPositions, maxEditPositions, item, that) {\n              $.jqx._jqxDateTimeInput.NumberEditor = $.extend(true, {}, this);\n              this.initializeFields(minValue, maxValue, minEditPositions, maxEditPositions, item);\n              this.that = that;\n              return this;\n            },\n            initializeFields: function (minValue, maxValue, minEditPositions, maxEditPositions, item) {\n              this.minValue = minValue;\n              this.maxValue = maxValue;\n              this.minEditPositions = minEditPositions;\n              this.maxEditPositions = maxEditPositions;\n              this.updateActiveEditor(minValue);\n              this.item = item;\n            },\n            updateActiveEditor: function (newValue) {\n              this.value = newValue;\n              this.positions = 0;\n            },\n            getDayOfWeek: function (val) {\n              if (typeof this.currentValue == $.jqx._jqxDateTimeInput.DateTime) {\n                this.currentValue.dayOfWeek();\n              }\n              return val;\n            },\n            textValue: function () {\n              var value = this.value;\n              var minPositions = this.minEditPositions;\n              var minFormattedPositions = minPositions;\n              var formattedValue = this.that._format(this.value, \"d\" + minFormattedPositions, \"\");\n              return formattedValue;\n            },\n            insert: function (inseredValue) {\n              if (inseredValue == null) {\n                return this.deleteValue();\n              }\n              if (inseredValue.length == 0) {\n                return this.deleteValue();\n              }\n              var character = inseredValue.substring(0, 1);\n              if (isNaN(character)) {\n                return;\n              }\n              var res = true;\n              var tmp;\n              var entries = 1;\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              tmp = formattedValue;\n              if (this.positions >= this.maxEditPositions) {\n                this.positions = 0;\n              }\n              tmp = tmp.substring(0, this.positions) + character + tmp.substring(this.positions + 1);\n              tmp = this.setValueByString(tmp, entries);\n              return true;\n            },\n            setValueByString: function (tmp, entries) {\n              tmp = this.fixValueString(tmp);\n              var nextValue = new Number(tmp);\n              this.value = nextValue;\n              this.positions += entries;\n              return tmp;\n            },\n            fixValueString: function (tmp) {\n              if (tmp.length > this.maxEditPositions) {\n                tmp = tmp.substring(tmp.length - this.maxEditPositions);\n              }\n\n              //            var enteredDigit = parseInt(tmp[this.positions]);\n              //            var pos = this.maxEditPositions - 1;\n              //            while(parseInt(tmp) > this.maxValue)\n              //            {\n              //                if (pos < 0)\n              //                    break;\n\n              //                if (tmp[pos] > 0)\n              //                {\n              //                    var digit = parseInt(tmp[pos])-1;\n              //                    tmp = tmp.substring(0, pos) + digit + tmp.substring(pos+1);\n              //                }\n              //                else pos--;\n              //            }\n\n              return tmp;\n            },\n            initializeValueString: function (formattedValue) {\n              var tmp;\n              tmp = \"\";\n              if (this.hasDigits()) {\n                tmp = formattedValue;\n              }\n              return tmp;\n            },\n            deleteValue: function () {\n              if (this.value == this.minValue && this.hasDigits() == false) {\n                return false;\n              }\n              this.updateActiveEditor(this.minValue);\n              return true;\n            },\n            hasDigits: function () {\n              return this.positions > 0;\n            },\n            correctMaximumValue: function (val) {\n              if (val > this.maxValue) {\n                val = this.minValue;\n              }\n              return val;\n            },\n            correctMinimumValue: function (val) {\n              if (val < this.minValue) {\n                val = this.maxValue;\n              }\n              return val;\n            },\n            increaseValue: function (byPosition) {\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              var digit = formattedValue.toString()[this.positions];\n              digit = parseInt(digit) + 1;\n              if (digit > 9) digit = 0;\n              if (!byPosition) {\n                var tmpValue = this.value + 1;\n                tmpValue = this.correctMaximumValue(tmpValue);\n                this.updateActiveEditor(tmpValue);\n                return true;\n              }\n              var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);\n              if (val != this.value || this.hasDigits()) {\n                this.updateActiveEditor(val);\n                return true;\n              } else {\n                return false;\n              }\n            },\n            decreaseValue: function (byPosition) {\n              var formattedValue = this.that._format(Number(this.value), \"d\" + this.maxEditPositions, this.culture);\n              var digit = formattedValue.toString()[this.positions];\n              digit = parseInt(digit) - 1;\n              if (digit < 0) digit = 9;\n              if (!byPosition) {\n                var tmpValue = this.value - 1;\n                tmpValue = this.correctMinimumValue(tmpValue);\n                this.updateActiveEditor(tmpValue);\n                return true;\n              }\n              var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);\n              if (val != this.value || this.hasDigits()) {\n                this.updateActiveEditor(val);\n                return true;\n              } else {\n                return false;\n              }\n            },\n            getDateTimeItem: function () {\n              return this.item;\n            }\n          });\n        })(jqxBaseFramework);\n\n        //DisabledEditor\n        (function ($) {\n          $.jqx._jqxDateTimeInput.DisabledEditor = {};\n          $.extend($.jqx._jqxDateTimeInput.DisabledEditor, {\n            _create: function (format, baseValue, am, pm, item, that) {\n              this.format = format;\n              this.value = -1;\n              this.item = item;\n              this.that = that;\n              return this;\n            },\n            textValue: function () {\n              return \"\";\n            },\n            insert: function (val) {\n              return false;\n            },\n            deleteValue: function () {\n              return false;\n            },\n            increaseValue: function () {\n              return false;\n            },\n            decreaseValue: function () {\n              return false;\n            },\n            getDateTimeItem: function () {\n              return this.item;\n            }\n          });\n        })(jqxBaseFramework);\n\n        //AmPmEditor\n        (function ($) {\n          $.jqx._jqxDateTimeInput.AmPmEditor = {};\n          $.extend($.jqx._jqxDateTimeInput.AmPmEditor, {\n            _createAmPmEditor: function (format, baseValue, am, pm, item, that) {\n              this.format = format;\n              this.value = baseValue;\n              this.minValue = 0;\n              this.amString = am;\n              this.pmString = pm;\n              this.item = item;\n              this.that = that;\n              if (am == pm) {\n                this.amString = \"<\" + am;\n                this.pmString = \">\" + pm;\n              }\n              return this;\n            },\n            textValue: function () {\n              var res = this.amString;\n              if (this.value != 0) {\n                res = this.pmString;\n              }\n              if (this.format.length == 1 && res.length > 1) {\n                res = res.substring(0, 1);\n              }\n              return res;\n            },\n            insert: function (val) {\n              var inserted = val.toString();\n              if (inserted.Length == 0) {\n                return this.deleteValue();\n              }\n              var res = false;\n              if (this.amString.Length > 0 && this.pmString.Length > 0) {\n                var amChar = this.amString[0];\n                var newChar = inserted[0];\n                var pmChar = this.pmString[0];\n                if (amChar.toString() == newChar.toString()) {\n                  this.value = 0;\n                  res = true;\n                } else if (pmChar.toString() == newChar.toString()) {\n                  this.value = 1;\n                  res = true;\n                }\n              } else if (this.pmString.Length > 0) {\n                this.value = 1;\n                res = true;\n              } else if (this.amString.Length > 0) {\n                this.value = 0;\n                res = true;\n              }\n              return res;\n            },\n            deleteValue: function () {\n              var isValid = true;\n              if (this.amString.Length == 0 && this.pmString.Length != 0) {\n                if (this.value == 0) {\n                  return false;\n                }\n                this.value = 0;\n              } else {\n                if (this.value == 1) {\n                  return false;\n                }\n                this.value = 1;\n              }\n              return isValid;\n            },\n            increaseValue: function () {\n              this.value = 1 - this.value;\n              return true;\n            },\n            decreaseValue: function () {\n              this.increaseValue();\n              return true;\n            },\n            getDateTimeItem: function () {\n              return this.item;\n            }\n          });\n        })(jqxBaseFramework);\n\n        // DateTime\n        (function ($) {\n          $.jqx._jqxDateTimeInput.getDateTime = function (date) {\n            var result = {\n              dateTime: new Date(date),\n              daysPer4Years: 0x5b5,\n              daysPerYear: 0x16d,\n              daysToMonth365: {\n                0: 0,\n                1: 0x1f,\n                2: 0x3b,\n                3: 90,\n                4: 120,\n                5: 0x97,\n                6: 0xb5,\n                7: 0xd4,\n                8: 0xf3,\n                9: 0x111,\n                10: 0x130,\n                11: 0x14e,\n                12: 0x16d\n              },\n              daysToMonth366: {\n                0: 0,\n                1: 0x1f,\n                2: 60,\n                3: 0x5b,\n                4: 0x79,\n                5: 0x98,\n                6: 0xb6,\n                7: 0xd5,\n                8: 0xf4,\n                9: 0x112,\n                10: 0x131,\n                11: 0x14f,\n                12: 0x16e\n              },\n              maxValue: 0x2bca2875f4373fff,\n              millisPerDay: 0x5265c00,\n              millisPerHour: 0x36ee80,\n              millisPerMinute: 0xea60,\n              millisPerSecond: 0x3e8,\n              minTicks: 0,\n              minValue: 0,\n              ticksPerDay: 0xc92a69c000,\n              ticksPerHour: 0x861c46800,\n              ticksPerMillisecond: 0x2710,\n              ticksPerMinute: 0x23c34600,\n              ticksPerSecond: 0x989680,\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              day: date.getDate(),\n              second: date.getSeconds(),\n              month: 1 + date.getMonth(),\n              year: date.getFullYear(),\n              millisecond: date.getMilliseconds(),\n              dayOfWeek: date.getDay(),\n              isWeekend: function (value) {\n                if (value == undefined || value == null) value = this.dateTime;\n                var isWeekend = value.getDay() % 6 == 0;\n                return isWeekend;\n              },\n              dayOfYear: function (value) {\n                if (value == undefined || value == null) value = this.dateTime;\n                var firstDay = new Date(value.getFullYear(), 0, 1);\n                return Math.ceil((value - firstDay) / 86400000);\n              },\n              _setDay: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setDate(value);\n                this.day = this.dateTime.getDate();\n              },\n              _setMonth: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setMonth(value - 1);\n                this.month = 1 + this.dateTime.getMonth();\n              },\n              _setYear: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setFullYear(value);\n                this.year = this.dateTime.getFullYear();\n              },\n              _setHours: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setHours(value);\n                this.hour = this.dateTime.getHours();\n              },\n              _setMinutes: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setMinutes(value);\n                this.minute = this.dateTime.getMinutes();\n              },\n              _setSeconds: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setSeconds(value);\n                this.second = this.dateTime.getSeconds();\n              },\n              _setMilliseconds: function (value) {\n                if (value == undefined || value == null) value = 0;\n                this.dateTime.setMilliseconds(value);\n                this.millisecond = this.dateTime.getMilliseconds();\n              },\n              _addDays: function (value) {\n                var newDate = this.dateTime;\n                var day = newDate.getDate();\n                newDate.setDate(newDate.getDate() + value);\n                if (day === newDate.getDate()) {\n                  newDate.setHours(newDate.getHours() + newDate.getTimezoneOffset() / 60);\n                }\n                return newDate;\n              },\n              _addWeeks: function (value) {\n                var newDate = this.dateTime;\n                newDate.setDate(newDate.getDate() + 7 * value);\n                return newDate;\n              },\n              _addMonths: function (value) {\n                var newDate = this.dateTime;\n                newDate.setMonth(newDate.getMonth() + value);\n                return newDate;\n              },\n              _addYears: function (value) {\n                var newDate = this.dateTime;\n                newDate.setFullYear(newDate.getFullYear() + value);\n                return newDate;\n              },\n              _addHours: function (value) {\n                var newDate = this.dateTime;\n                newDate.setHours(newDate.getHours() + value);\n                return newDate;\n              },\n              _addMinutes: function (value) {\n                var newDate = this.dateTime;\n                newDate.setMinutes(newDate.getMinutes() + value);\n                return newDate;\n              },\n              _addSeconds: function (value) {\n                var newDate = this.dateTime;\n                newDate.setSeconds(newDate.getSeconds() + value);\n                return newDate;\n              },\n              _addMilliseconds: function (value) {\n                var newDate = this.dateTime;\n                newDate.setMilliseconds(newDate.getMilliseconds() + value);\n                return newDate;\n              },\n              _isLeapYear: function (year) {\n                if (year < 1 || year > 0x270f) {\n                  throw \"invalid year\";\n                }\n                if (year % 4 != 0) {\n                  return false;\n                }\n                if (year % 100 == 0) {\n                  return year % 400 == 0;\n                }\n                return true;\n              },\n              _dateToTicks: function (year, month, day) {\n                if (year >= 1 && year <= 0x270f && month >= 1 && month <= 12) {\n                  var numArray = this._isLeapYear(year) ? this.daysToMonth366 : this.daysToMonth365;\n                  if (day >= 1 && day <= numArray[month] - numArray[month - 1]) {\n                    var year = year - 1;\n                    var ticks = year * 0x16d + year / 4 - year / 100 + year / 400 + numArray[month - 1] + day - 1;\n                    return ticks * 0xc92a69c000;\n                  }\n                }\n              },\n              _daysInMonth: function (year, month) {\n                if (month < 1 || month > 12) {\n                  throw \"Invalid month.\";\n                }\n                var arr = this._isLeapYear(year) ? this.daysToMonth366 : this.daysToMonth365;\n                return arr[month] - arr[month - 1];\n              },\n              _timeToTicks: function (hour, minute, second) {\n                var ticks = hour * 0xe10 + minute * 60 + second;\n                return ticks * 0x989680;\n              },\n              _equalDate: function (date) {\n                if (this.year == date.getFullYear() && this.day == date.getDate() && this.month == date.getMonth() + 1) return true;\n                return false;\n              }\n            };\n            return result;\n          };\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/5868: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxDropDownList\", \"\", {});\n          $.extend($.jqx._jqxDropDownList.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // enables/disables the dropdownlist.\n                disabled: false,\n                // gets or sets the listbox width.\n                width: null,\n                // gets or sets the listbox height.\n                height: null,\n                // Represents the collection of list items.\n                items: new Array(),\n                // Gets or sets the selected index.\n                selectedIndex: -1,\n                // data source.\n                source: null,\n                // gets or sets the scrollbars size.\n                scrollBarSize: 15,\n                // gets or sets the scrollbars size.\n                arrowSize: 17,\n                // enables/disables the hover state.\n                enableHover: true,\n                // enables/disables the selection.\n                enableSelection: true,\n                autoItemsHeight: false,\n                // gets the visible items. // this property is internal for the dropdownlist.\n                visualItems: new Array(),\n                // gets the groups. // this property is internal for the dropdownlist.\n                groups: new Array(),\n                // gets or sets whether the items width should be equal to the dropdownlist's width.\n                equalItemsWidth: true,\n                // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.\n                itemHeight: -1,\n                // represents the dropdownlist's events.\n                visibleItems: new Array(),\n                // emptry group's text.\n                emptyGroupText: 'Group',\n                checkboxes: false,\n                // Type: Number\n                // Default: 100\n                // Showing Popup Animation's delay.\n                openDelay: 250,\n                // Type: Number\n                // Default: 200\n                // Hiding Popup Animation's delay.\n                closeDelay: 300,\n                dropDownContainer: \"default\",\n                // default, none\n                // Type: String.\n                // enables or disables the animation.\n                animationType: 'default',\n                autoOpen: false,\n                // Type: String\n                // Default: auto ( the drop down takes the dropdownlist's width.)\n                // Sets the popup's width.\n                dropDownWidth: 'auto',\n                // Type: String\n                // Default: 200px ( the height is 200px )\n                // Sets the popup's height.\n                dropDownHeight: '200px',\n                // Type: Boolean\n                // Default: false\n                // Sets the popup's height to be equal to the items summary height,\n                autoDropDownHeight: false,\n                keyboardSelection: true,\n                // Type: Boolean\n                // Default: false\n                // Enables or disables the browser detection.\n                enableBrowserBoundsDetection: false,\n                dropDownHorizontalAlignment: 'left',\n                dropDownVerticalAlignment: 'bottom',\n                displayMember: \"\",\n                valueMember: \"\",\n                groupMember: \"\",\n                searchMember: \"\",\n                searchMode: 'startswithignorecase',\n                incrementalSearch: true,\n                incrementalSearchDelay: 700,\n                renderer: null,\n                placeHolder: \"\",\n                promptText: \"Please Choose:\",\n                emptyString: \"\",\n                rtl: false,\n                selectionRenderer: null,\n                listBox: null,\n                popupZIndex: 3001,\n                renderMode: \"default\",\n                touchMode: \"auto\",\n                _checkForHiddenParent: true,\n                autoBind: true,\n                ready: null,\n                focusable: true,\n                filterable: false,\n                filterHeight: 27,\n                filterPlaceHolder: \"Looking for\",\n                filterDelay: 100,\n                hint: true,\n                // \"primary\", \"inverse\", \"danger\", \"info\", \"success\", \"warning\", \"link\"\n                template: \"default\",\n                aria: {\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                events: [\n                // occurs when the dropdownlist is opened.\n                'open',\n                // occurs when the dropdownlist is closed.\n                'close',\n                // occurs when an item is selected.\n                'select',\n                // occurs when an item is unselected.\n                'unselect',\n                // occurs when the selection is changed.\n                'change',\n                // triggered when the user checks or unchecks an item.\n                'checkChange',\n                // triggered when the binding operation is completed.\n                'bindingComplete',\n                // triggered when a new item is added.\n                'itemAdd',\n                // triggered when a new item is removed.\n                'itemRemove',\n                // triggered when a new item is updated.\n                'itemUpdate']\n              };\n              if (this === $.jqx._jqxDropDownList.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var that = this;\n              if (that.isMaterialized()) {\n                var elementStyle = window.getComputedStyle(this.element);\n                var animation = elementStyle.getPropertyValue('--jqx-dropdown-animation');\n                var rowHeight = elementStyle.getPropertyValue('--jqx-list-item-height');\n                var arrowSize = elementStyle.getPropertyValue('--jqx-action-button-size');\n                if (arrowSize) {\n                  this.arrowSize = parseInt(arrowSize);\n                } else {\n                  this.arrowSize = 25;\n                }\n                if (animation && this.animationType == \"default\") {\n                  this.animationType = animation.trim();\n                }\n                if (rowHeight && this.itemHeight === -1) {\n                  this.itemHeight = parseInt(rowHeight);\n                }\n              }\n              this.render();\n            },\n            render: function () {\n              var self = this;\n              if (!self.width) self.width = 200;\n              if (!self.height) self.height = 25;\n              self.host.addClass(self.toThemeProperty('jqx-dropdownlist'));\n              var nodeName = self.element.nodeName.toLowerCase();\n              if (nodeName == \"select\" || nodeName == \"ul\" || nodeName == \"ol\") {\n                self.field = self.element;\n                if (self.field.className) {\n                  self._className = self.field.className;\n                }\n                var properties = {\n                  'title': self.field.title\n                };\n                if (self.field.id.length) {\n                  properties.id = self.field.id.replace(/[^\\w]/g, '_') + \"_jqxDropDownList\";\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_jqxDropDownList\";\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                if (!self.width) {\n                  self.width = $(self.field).width();\n                }\n                if (!self.height) {\n                  self.height = $(self.field).outerHeight();\n                }\n                wrapper[0].style.cssText = self.field.style.cssText;\n                $(self.field).hide().after(wrapper);\n                var data = self.host.data();\n                self.host = wrapper;\n                self.host.data(data);\n                self.element = wrapper[0];\n                self.element.id = self.field.id;\n                self.field.id = properties.id;\n                if (self._className) {\n                  self.host.addClass(self._className);\n                  $(self.field).removeClass(self._className);\n                }\n                if (self.field.tabIndex) {\n                  var tabIndex = self.field.tabIndex;\n                  self.field.tabIndex = -1;\n                  self.element.tabIndex = tabIndex;\n                }\n                var result = $.jqx.parseSourceTag(self.field);\n                self.source = result.items;\n                if (self.selectedIndex == -1) self.selectedIndex = result.index;\n              } else {\n                if (self.host.find('li').length > 0 || self.host.find('option').length > 0) {\n                  var result = $.jqx.parseSourceTag(self.element);\n                  self.source = result.items;\n                }\n              }\n              self.element.innerHTML = \"\";\n              self.isanimating = false;\n              self.id = self.element.id || $.jqx.utilities.createId();\n              self.host.attr('role', 'combobox');\n              $.jqx.aria(self, \"aria-autocomplete\", \"both\");\n              $.jqx.aria(self, \"aria-readonly\", false);\n              var comboStructure = \"<div style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>\" + \"<div id='dropdownlistWrapper' style='overflow: hidden; outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'>\" + \"<div id='dropdownlistContent' unselectable='on' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'></div>\" + \"<div id='dropdownlistArrow' unselectable='on' style='background-color: transparent; border: none; float: right; position: relative;'><div unselectable='on'></div></div>\" + \"</div>\" + \"</div>\";\n              if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {\n                throw new Error(\"jqxDropDownList: Missing reference to jqxlistbox.js.\");\n              }\n              if (self.host.attr('tabindex')) {} else {\n                self.host.attr('tabindex', 0);\n              }\n              var me = self;\n              self.touch = $.jqx.mobile.isTouchDevice();\n              self.comboStructure = comboStructure;\n              self.element.innerHTML = comboStructure;\n              self.dropdownlistWrapper = $(self.element.firstChild.firstChild);\n              self.dropdownlistArrow = $(self.dropdownlistWrapper[0].firstChild.nextSibling);\n              self.arrow = $(self.dropdownlistArrow[0].firstChild);\n              self.dropdownlistContent = $(self.dropdownlistWrapper[0].firstChild);\n              self.dropdownlistContent.addClass(self.toThemeProperty('jqx-dropdownlist-content jqx-disableselect'));\n              if (self.rtl) {\n                self.dropdownlistContent.addClass(self.toThemeProperty('jqx-rtl jqx-dropdownlist-content-rtl'));\n              }\n              self.addHandler(self.dropdownlistWrapper, 'selectstart', function () {\n                return false;\n              });\n              self.dropdownlistWrapper[0].id = \"dropdownlistWrapper\" + self.element.id;\n              self.dropdownlistArrow[0].id = \"dropdownlistArrow\" + self.element.id;\n              self.dropdownlistContent[0].id = \"dropdownlistContent\" + self.element.id;\n              self._addInput();\n              var label = $(\"<label></label\");\n              if (this.hint) {\n                label[0].innerHTML = this.placeHolder;\n              }\n              label.addClass(self.toThemeProperty('jqx-input-label'));\n              self.dropdownlistWrapper.append(label);\n              self.label = label;\n              var bar = $(\"<span></span>\");\n              self.dropdownlistWrapper.append(bar);\n              bar.addClass(self.toThemeProperty('jqx-input-bar'));\n              self.bar = bar;\n              self.bar.css('top', this.host.height());\n              var that = this;\n              if (that.template) {\n                that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n              }\n              if (self.promptText != \"Please Choose:\") self.placeHolder = self.promptText;\n              var hostClassName = self.toThemeProperty('jqx-widget') + \" \" + self.toThemeProperty('jqx-dropdownlist-state-normal') + \" \" + self.toThemeProperty('jqx-rc-all') + \" \" + self.toThemeProperty('jqx-fill-state-normal');\n              self.element.className += \" \" + hostClassName;\n              self._firstDiv = $(self.element.firstChild);\n              try {\n                var listBoxID = 'listBox' + self.id;\n                var oldContainer = $($.find('#' + listBoxID));\n                if (oldContainer.length > 0) {\n                  oldContainer.remove();\n                }\n                $.jqx.aria(self, \"aria-owns\", listBoxID);\n                $.jqx.aria(self, \"aria-haspopup\", true);\n                var container = $(\"<div style='overflow: hidden; background-color: transparent; border: none; position: absolute;' id='listBox\" + self.id + \"'><div id='innerListBox\" + self.id + \"'></div></div>\");\n                container.hide();\n                container.addClass(self.toThemeProperty('jqx-listbox-container'));\n                if (self.dropDownContainer == \"element\") {\n                  container.appendTo(self.host);\n                } else {\n                  container.appendTo(document.body);\n                }\n                self.container = container;\n                self.listBoxContainer = $($.find('#innerListBox' + self.id));\n                var width = self.width;\n                if (self.dropDownWidth != 'auto') {\n                  width = self.dropDownWidth;\n                }\n                if (width == null) {\n                  width = self.host.width();\n                  if (width == 0) width = self.dropDownWidth;\n                }\n                if (self.dropDownHeight == null) {\n                  self.dropDownHeight = 200;\n                }\n                var me = self;\n                self.container.width(parseInt(width) + 25);\n                self.container.height(parseInt(self.dropDownHeight) + 25);\n                self._ready = false;\n                self.addHandler(self.listBoxContainer, 'bindingComplete', function (event) {\n                  if (!self.listBox) {\n                    self.listBox = $.data(self.listBoxContainer[0], \"jqxListBox\").instance;\n                  }\n                  if (self.selectedIndex != self.listBoxContainer.jqxListBox('selectedIndex')) {\n                    self.listBox = $.data(self.listBoxContainer[0], \"jqxListBox\").instance;\n                    self.listBoxContainer.jqxListBox({\n                      selectedIndex: self.selectedIndex\n                    });\n                    self.renderSelection('mouse');\n                  } else {\n                    self.renderSelection('mouse');\n                  }\n                  if (!self._ready) {\n                    if (self.ready) {\n                      self.ready();\n                    }\n                    self._ready = true;\n                  }\n                  self._raiseEvent('6');\n                });\n                self.addHandler(self.listBoxContainer, 'itemAdd', function (event) {\n                  self._raiseEvent('7', event.args);\n                });\n                self.addHandler(self.listBoxContainer, 'itemRemove', function (event) {\n                  self._raiseEvent('8', event.args);\n                });\n                self.addHandler(self.listBoxContainer, 'itemUpdate', function (event) {\n                  self._raiseEvent('9', event.args);\n                });\n                self.listBoxContainer.jqxListBox({\n                  filterHeight: self.filterHeight,\n                  filterPlaceHolder: self.filterPlaceHolder,\n                  filterDelay: self.filterDelay,\n                  autoItemsHeight: self.autoItemsHeight,\n                  filterable: self.filterable,\n                  allowDrop: false,\n                  allowDrag: false,\n                  autoBind: self.autoBind,\n                  _checkForHiddenParent: false,\n                  focusable: self.focusable,\n                  touchMode: self.touchMode,\n                  checkboxes: self.checkboxes,\n                  rtl: self.rtl,\n                  _renderOnDemand: true,\n                  emptyString: self.emptyString,\n                  itemHeight: self.itemHeight,\n                  width: width,\n                  searchMode: self.searchMode,\n                  incrementalSearch: self.incrementalSearch,\n                  incrementalSearchDelay: self.incrementalSearchDelay,\n                  groupMember: self.groupMember,\n                  searchMember: self.searchMember,\n                  displayMember: self.displayMember,\n                  valueMember: self.valueMember,\n                  height: self.dropDownHeight,\n                  autoHeight: self.autoDropDownHeight,\n                  scrollBarSize: self.scrollBarSize,\n                  selectedIndex: self.selectedIndex,\n                  source: self.source,\n                  theme: self.theme,\n                  rendered: function () {\n                    if (self.selectedIndex != self.listBoxContainer.jqxListBox('selectedIndex')) {\n                      self.listBox = $.data(self.listBoxContainer[0], \"jqxListBox\").instance;\n                      self.listBoxContainer.jqxListBox({\n                        selectedIndex: self.selectedIndex\n                      });\n                      self.renderSelection('mouse');\n                    } else {\n                      self.renderSelection('mouse');\n                    }\n                  },\n                  renderer: self.renderer,\n                  filterChange: function (value) {\n                    if (self.autoDropDownHeight) {\n                      self.container.height(self.listBoxContainer.height() + 25);\n                    }\n                  }\n                });\n                if (self.dropDownContainer === \"element\") {\n                  self.listBoxContainer.css({\n                    position: 'absolute',\n                    top: 0,\n                    left: 0\n                  });\n                } else {\n                  self.listBoxContainer.css({\n                    position: 'absolute',\n                    zIndex: self.popupZIndex,\n                    top: 0,\n                    left: 0\n                  });\n                }\n                if (self.template) {\n                  self.listBoxContainer.addClass(self.toThemeProperty(\"jqx-\" + self.template + \"-item\"));\n                }\n                self.listBox = $.data(self.listBoxContainer[0], \"jqxListBox\").instance;\n                self.listBox.enableSelection = self.enableSelection;\n                self.listBox.enableHover = self.enableHover;\n                self.listBox.equalItemsWidth = self.equalItemsWidth;\n                self.listBox.selectIndex(self.selectedIndex);\n                self.listBox._arrange();\n                self.listBoxContainer.addClass(self.toThemeProperty('jqx-popup'));\n                if ($.jqx.browser.msie) {\n                  self.listBoxContainer.addClass(self.toThemeProperty('jqx-noshadow'));\n                }\n                self.addHandler(self.listBoxContainer, 'unselect', function (event) {\n                  self._raiseEvent('3', {\n                    index: event.args.index,\n                    type: event.args.type,\n                    item: event.args.item\n                  });\n                });\n                self.addHandler(self.listBoxContainer, 'change', function (event) {\n                  if (event.args) {\n                    if (event.args.type != \"keyboard\") {\n                      self._raiseEvent('4', {\n                        index: event.args.index,\n                        type: event.args.type,\n                        item: event.args.item\n                      });\n                    } else if (event.args.type == \"keyboard\") {\n                      if (!self.isOpened()) {\n                        self._raiseEvent('4', {\n                          index: self.selectedIndex,\n                          type: 'keyboard',\n                          item: self.getItem(self.selectedIndex)\n                        });\n                      } else {\n                        if (event.args.item && event.args.oldItem && event.args.item.label !== event.args.oldItem.label) {\n                          self._raiseEvent('4', {\n                            index: self.selectedIndex,\n                            type: 'keyboard',\n                            item: self.getItem(self.selectedIndex)\n                          });\n                        }\n                      }\n                    }\n                  }\n                });\n                if (self.animationType == 'none') {\n                  self.container.css('display', 'none');\n                } else {\n                  self.container.hide();\n                }\n              } catch (e) {\n                if (console) console.log(e);\n              }\n              var self = self;\n              self.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (value) {\n                  instance.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));\n                  instance.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));\n                  instance.dropdownlistContent.addClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));\n                } else {\n                  instance.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));\n                  instance.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));\n                  instance.dropdownlistContent.removeClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));\n                }\n                $.jqx.aria(instance, \"aria-disabled\", instance.disabled);\n              };\n              if (self.disabled) {\n                self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));\n                self.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));\n                self.dropdownlistContent.addClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));\n              }\n              if (self.dropDownVerticalAlignment == \"top\") {\n                self.arrow.addClass(self.toThemeProperty('jqx-icon-arrow-up'));\n              } else {\n                self.arrow.addClass(self.toThemeProperty('jqx-icon-arrow-down'));\n              }\n              self.arrow.addClass(self.toThemeProperty('jqx-icon'));\n              if (self.renderMode === \"simple\") {\n                self.arrow.remove();\n                self.host.removeClass(self.toThemeProperty('jqx-fill-state-normal'));\n                self.host.removeClass(self.toThemeProperty('jqx-rc-all'));\n              }\n              if (self.template) {\n                self.host.addClass(self.toThemeProperty(\"jqx-\" + self.template));\n              }\n              self._updateHandlers();\n              self._setSize();\n              self._arrange();\n              if (self.listBox) {\n                self.renderSelection();\n              }\n\n              // fix for IE7\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                if (self.host.parents('.jqx-window').length > 0) {\n                  var zIndex = self.host.parents('.jqx-window').css('z-index');\n                  container.css('z-index', zIndex + 10);\n                  self.listBoxContainer.css('z-index', zIndex + 10);\n                }\n              }\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._setSize();\n              this._arrange();\n            },\n            val: function (value) {\n              if (!this.dropdownlistContent) return \"\";\n              var isEmpty = function (obj) {\n                for (var key in obj) {\n                  if (obj.hasOwnProperty(key)) return false;\n                }\n                if (typeof value == \"number\") return false;\n                if (typeof value == \"date\") return false;\n                if (typeof value == \"boolean\") return false;\n                if (typeof value == \"string\") return false;\n                return true;\n              };\n              if (this.input && (isEmpty(value) || arguments.length == 0)) {\n                return this.input.val();\n              }\n              var item = this.getItemByValue(value);\n              if (item != null) {\n                this.selectItem(item);\n              }\n              if (this.input) {\n                return this.input.val();\n              }\n            },\n            focus: function () {\n              try {\n                var me = this;\n                var doFocus = function () {\n                  if (me.host) {\n                    me.host.focus();\n                    if (me._firstDiv) {\n                      me._firstDiv.focus();\n                    }\n                  }\n                };\n                doFocus();\n                setTimeout(function () {\n                  doFocus();\n                }, 10);\n              } catch (error) {}\n            },\n            _addInput: function () {\n              var name = this.host.attr('name');\n              this.input = $(\"<input type='hidden'/>\");\n              this.host.append(this.input);\n              if (name) {\n                this.input.attr('name', name);\n              }\n            },\n            getItems: function () {\n              if (!this.listBox) {\n                return new Array();\n              }\n              return this.listBox.items;\n            },\n            getVisibleItems: function () {\n              return this.listBox.getVisibleItems();\n            },\n            _setSize: function () {\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (this.element.offsetWidth === 0) {\n                borderSize = 2;\n              }\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              }\n              ;\n              var isPercentage = false;\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.element.style.width = this.width;\n                if (borderSize > 0) {\n                  this.host.css('box-sizing', 'border-box');\n                  this.listBoxContainer.css('box-sizing', 'border-box');\n                }\n              }\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                isPercentage = true;\n                this.element.style.height = this.height;\n              }\n              var me = this;\n              var resizeFunc = function () {\n                me._arrange();\n                if (me.dropDownWidth == 'auto') {\n                  var width = me.host.width() + 2;\n                  me.listBoxContainer.jqxListBox({\n                    width: width\n                  });\n                  me.container.width(parseInt(width) + 25);\n                }\n              };\n              if (isPercentage) {\n                var width = this.host.width() + 2;\n                if (this.dropDownWidth != 'auto') {\n                  width = this.dropDownWidth;\n                }\n                this.listBoxContainer.jqxListBox({\n                  width: width\n                });\n                this.container.width(parseInt(width) + 25);\n              }\n              $.jqx.utilities.resize(this.host, function () {\n                resizeFunc();\n              }, false, this._checkForHiddenParent);\n            },\n            // returns true when the listbox is opened, otherwise returns false.\n            isOpened: function () {\n              var me = this;\n              var openedListBox = $.data(document.body, \"openedJQXListBox\" + this.id);\n              if (openedListBox != null && openedListBox == me.listBoxContainer) {\n                return true;\n              }\n              return false;\n            },\n            _updateHandlers: function () {\n              var self = this;\n              var hovered = false;\n              this.removeHandlers();\n              if (!this.touch) {\n                this.addHandler(this.host, 'mouseenter', function () {\n                  if (!self.disabled && self.enableHover && self.renderMode !== 'simple') {\n                    hovered = true;\n                    self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));\n                    if (self.dropDownVerticalAlignment == \"top\") {\n                      self.arrow.addClass(self.toThemeProperty('jqx-icon-arrow-up-hover'));\n                    } else {\n                      self.arrow.addClass(self.toThemeProperty('jqx-icon-arrow-down-hover'));\n                    }\n                    self.host.addClass(self.toThemeProperty('jqx-fill-state-hover'));\n                  }\n                });\n                this.addHandler(this.host, 'mouseleave', function () {\n                  if (!self.disabled && self.enableHover && self.renderMode !== 'simple') {\n                    self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));\n                    self.host.removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                    self.arrow.removeClass(self.toThemeProperty('jqx-icon-arrow-down-hover'));\n                    self.arrow.removeClass(self.toThemeProperty('jqx-icon-arrow-up-hover'));\n                    hovered = false;\n                  }\n                });\n              }\n              if (this.host.parents()) {\n                this.addHandler(this.host.parents(), 'scroll.dropdownlist' + this.element.id, function (event) {\n                  var opened = self.isOpened();\n                  if (opened) {\n                    self.close();\n                  }\n                });\n              }\n              var eventName = 'mousedown';\n              if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');\n              this.addHandler(this.dropdownlistWrapper, eventName, function (event) {\n                if (!self.disabled) {\n                  var isOpen = self.container.css('display') == 'block';\n                  if (!self.isanimating) {\n                    if (isOpen) {\n                      self.hideListBox();\n                      return false;\n                    } else {\n                      self.showListBox();\n                      if (!self.focusable) {\n                        if (event.preventDefault) {\n                          event.preventDefault();\n                        }\n                      } else self.focus();\n                      event.stopPropagation();\n                    }\n                  }\n                }\n              });\n              if (self.autoOpen) {\n                this.addHandler(this.host, 'mouseenter', function () {\n                  var isOpened = self.isOpened();\n                  if (!isOpened && self.autoOpen) {\n                    self.open();\n                    self.host.focus();\n                  }\n                });\n                $(document).on('mousemove.' + self.id, function (event) {\n                  var isOpened = self.isOpened();\n                  if (isOpened && self.autoOpen) {\n                    var offset = self.host.coord();\n                    var top = offset.top;\n                    var left = offset.left;\n                    var popupOffset = self.container.coord();\n                    var popupLeft = popupOffset.left;\n                    var popupTop = popupOffset.top;\n                    var canClose = true;\n                    if (event.pageY >= top && event.pageY <= top + self.host.height()) {\n                      if (event.pageX >= left && event.pageX < left + self.host.width()) canClose = false;\n                    }\n                    if (event.pageY >= popupTop && event.pageY <= popupTop + self.container.height()) {\n                      if (event.pageX >= popupLeft && event.pageX < popupLeft + self.container.width()) canClose = false;\n                    }\n                    if (canClose) {\n                      self.close();\n                    }\n                  }\n                });\n              }\n              if (this.touch) {\n                this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id, self.closeOpenedListBox, {\n                  me: this,\n                  listbox: this.listBox,\n                  id: this.id\n                });\n              } else this.addHandler($(document), 'mousedown.' + this.id, self.closeOpenedListBox, {\n                me: this,\n                listbox: this.listBox,\n                id: this.id\n              });\n              this.addHandler(this.host, 'keydown', function (event) {\n                var isOpen = self.container.css('display') == 'block';\n                if (self.host.css('display') == 'none') {\n                  return true;\n                }\n                if (event.keyCode == '13' || event.keyCode == '9') {\n                  if (!self.isanimating) {\n                    if (isOpen) {\n                      self.renderSelection();\n                      if (event.keyCode == '13' && self.focusable) {\n                        self._firstDiv.focus();\n                      }\n                      self.hideListBox();\n                      if (!self.keyboardSelection) {\n                        self._raiseEvent('2', {\n                          index: self.selectedIndex,\n                          type: 'keyboard',\n                          item: self.getItem(self.selectedIndex)\n                        });\n                      }\n                      if (event.keyCode == \"13\") {\n                        self._raiseEvent('4', {\n                          index: self.selectedIndex,\n                          type: 'keyboard',\n                          item: self.getItem(self.selectedIndex)\n                        });\n                      }\n                    }\n                    if (isOpen && event.keyCode != '9') {\n                      return false;\n                    }\n                    return true;\n                  }\n                }\n                if (event.keyCode == 115) {\n                  if (!self.isanimating) {\n                    if (!self.isOpened()) {\n                      self.showListBox();\n                    } else if (self.isOpened()) {\n                      self.hideListBox();\n                    }\n                  }\n                  return false;\n                }\n                if (event.altKey) {\n                  if (self.host.css('display') == 'block') {\n                    if (event.keyCode == 38) {\n                      if (self.isOpened()) {\n                        self.hideListBox();\n                        return true;\n                      }\n                    } else if (event.keyCode == 40) {\n                      if (!self.isOpened()) {\n                        self.showListBox();\n                        return true;\n                      }\n                    }\n                  }\n                }\n                if (event.keyCode == '27') {\n                  if (!self.ishiding) {\n                    if (self.isOpened()) {\n                      self.hideListBox();\n                      if (self.tempSelectedIndex != undefined) {\n                        self.selectIndex(self.tempSelectedIndex);\n                      }\n                    }\n                    return true;\n                  }\n                }\n                if (!self.disabled) {\n                  self._kbnavigated = self.listBox._handleKeyDown(event);\n                  return self._kbnavigated;\n                }\n              });\n              this.addHandler(this.listBoxContainer, 'checkChange', function (event) {\n                self.renderSelection();\n                self._updateInputSelection();\n                self._raiseEvent(5, {\n                  label: event.args.label,\n                  value: event.args.value,\n                  checked: event.args.checked,\n                  item: event.args.item\n                });\n              });\n              this.addHandler(this.listBoxContainer, 'select', function (event) {\n                if (!self.disabled) {\n                  if (!event.args) return;\n                  if (event.args.type == 'keyboard' && !self.isOpened()) {\n                    self.renderSelection();\n                  }\n                  if (event.args.type != 'keyboard' || self.keyboardSelection) {\n                    self.renderSelection();\n                    self._raiseEvent('2', {\n                      index: event.args.index,\n                      type: event.args.type,\n                      item: event.args.item,\n                      originalEvent: event.args.originalEvent\n                    });\n                    if (event.args.type == 'mouse') {\n                      if (!self.checkboxes) {\n                        self.hideListBox();\n                        if (self._firstDiv && self.focusable) {\n                          self._firstDiv.focus();\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n              if (this.listBox) {\n                if (this.listBox.content) {\n                  this.addHandler(this.listBox.content, 'click', function (event) {\n                    if (!self.disabled) {\n                      if (self.listBox.itemswrapper && event.target === self.listBox.itemswrapper[0]) return true;\n                      self.renderSelection('mouse');\n                      if (!self.touch) {\n                        if (!self.ishiding) {\n                          if (!self.checkboxes) {\n                            self.hideListBox();\n                            if (self._firstDiv && self.focusable) {\n                              self._firstDiv.focus();\n                            }\n                          }\n                        }\n                      }\n                      if (!self.keyboardSelection) {\n                        if (self._kbnavigated === false) {\n                          if (self.tempSelectedIndex != self.selectedIndex) {\n                            self._raiseEvent('4', {\n                              index: self.selectedIndex,\n                              type: \"mouse\",\n                              item: self.getItem(self.selectedIndex)\n                            });\n                          }\n                          self._kbnavigated = true;\n                        }\n                        if (self._oldSelectedInd == undefined) self._oldSelectedIndx = self.selectedIndex;\n                        if (self.selectedIndex != self._oldSelectedIndx) {\n                          self._raiseEvent('2', {\n                            index: self.selectedIndex,\n                            type: 'keyboard',\n                            item: self.getItem(self.selectedIndex)\n                          });\n                          self._oldSelectedIndx = self.selectedIndex;\n                        }\n                      }\n                    }\n                  });\n                }\n              }\n              this.addHandler(this.host, 'focus', function (event) {\n                if (self.renderMode !== 'simple') {\n                  self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));\n                  self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));\n                }\n                self.bar.addClass('focused');\n                self.label.addClass('focused');\n              });\n              this.addHandler(this.host, 'blur', function () {\n                if (self.renderMode !== 'simple') {\n                  self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));\n                  self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));\n                }\n                self.bar.removeClass('focused');\n                self.label.removeClass('focused');\n              });\n              this.addHandler(this._firstDiv, 'focus', function (event) {\n                if (self.renderMode !== 'simple') {\n                  self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));\n                  self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));\n                }\n                self.bar.addClass('focused');\n                self.label.addClass('focused');\n              });\n              this.addHandler(this._firstDiv, 'blur', function () {\n                if (self.renderMode !== 'simple') {\n                  self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));\n                  self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));\n                }\n                self.bar.removeClass('focused');\n                self.label.removeClass('focused');\n              });\n            },\n            removeHandlers: function () {\n              var self = this;\n              var eventName = 'mousedown';\n              if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');\n              this.removeHandler(this.dropdownlistWrapper, eventName);\n              if (this.listBox) {\n                if (this.listBox.content) {\n                  this.removeHandler(this.listBox.content, 'click');\n                }\n              }\n              this.removeHandler(this.host, 'loadContent');\n              this.removeHandler(this.listBoxContainer, 'checkChange');\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.host, 'focus');\n              this.removeHandler(this.host, 'blur');\n              this.removeHandler(this._firstDiv, 'focus');\n              this.removeHandler(this._firstDiv, 'blur');\n              this.removeHandler(this.host, 'mouseenter');\n              this.removeHandler(this.host, 'mouseleave');\n              this.removeHandler($(document), 'mousemove.' + self.id);\n            },\n            // gets an item by index.\n            getItem: function (index) {\n              var item = this.listBox.getItem(index);\n              return item;\n            },\n            getItemByValue: function (value) {\n              var item = this.listBox.getItemByValue(value);\n              return item;\n            },\n            selectItem: function (item) {\n              if (this.listBox != undefined) {\n                this.listBox.selectItem(item);\n                this.selectedIndex = this.listBox.selectedIndex;\n                this.renderSelection('mouse');\n              }\n            },\n            unselectItem: function (item) {\n              if (this.listBox != undefined) {\n                this.listBox.unselectItem(item);\n                this.renderSelection('mouse');\n              }\n            },\n            checkItem: function (item) {\n              if (this.listBox != undefined) {\n                this.listBox.checkItem(item);\n              }\n            },\n            uncheckItem: function (item) {\n              if (this.listBox != undefined) {\n                this.listBox.uncheckItem(item);\n              }\n            },\n            indeterminateItem: function (item) {\n              if (this.listBox != undefined) {\n                this.listBox.indeterminateItem(item);\n              }\n            },\n            // renders the selection.\n            renderSelection: function () {\n              if (this.listBox == null) return;\n              if (this.height && this.height.toString().indexOf('%') != -1) {\n                this._arrange();\n              }\n              var item = this.listBox.visibleItems[this.listBox.selectedIndex];\n              if (this.filterable) {\n                if (this.listBox.selectedIndex == -1) {\n                  for (var selectedValue in this.listBox.selectedValues) {\n                    var value = this.listBox.selectedValues[selectedValue];\n                    var selectedItem = this.listBox.getItemByValue(value);\n                    if (selectedItem) {\n                      item = selectedItem;\n                    }\n                  }\n                }\n              }\n              var me = this;\n              if (this.checkboxes) {\n                var checkedItems = this.getCheckedItems();\n                if (checkedItems != null && checkedItems.length > 0) {\n                  item = checkedItems[0];\n                } else item = null;\n              }\n              if (this.hint) {\n                if (this.label) {\n                  this.label[0].innerHTML = this.placeHolder;\n                }\n                if (item != null) {\n                  this.element.setAttribute('hint', true);\n                } else {\n                  this.element.removeAttribute('hint');\n                }\n              }\n              this.bar.css('top', this.host.height());\n              if (item == null) {\n                var spanElement = $('<span unselectable=\"on\" style=\"color: inherit; border: none; background-color: transparent;\"></span>');\n                spanElement.appendTo($(document.body));\n                spanElement.addClass(this.toThemeProperty('jqx-widget'));\n                spanElement.addClass(this.toThemeProperty('jqx-listitem-state-normal'));\n                spanElement.addClass(this.toThemeProperty('jqx-item'));\n                $.jqx.utilities.html(spanElement, this.placeHolder);\n                if (this.isMaterialized() && !this.element.getAttribute('default-placeholder') && this.hint) {\n                  spanElement[0].innerHTML = \"\";\n                  if (this.label) {\n                    this.label[0].innerHTML = this.placeHolder;\n                  }\n                }\n                var topPadding = this.dropdownlistContent.css('padding-top');\n                var bottomPadding = this.dropdownlistContent.css('padding-bottom');\n                spanElement.css('padding-top', topPadding);\n                spanElement.css('padding-bottom', bottomPadding);\n                var spanHeight = spanElement.outerHeight();\n                spanElement.remove();\n                spanElement.removeClass();\n                $.jqx.utilities.html(this.dropdownlistContent, spanElement);\n                var height = this.host.height();\n                if (this.height != null && this.height != undefined) {\n                  if (this.height.toString().indexOf('%') === -1) {\n                    height = parseInt(this.height);\n                  }\n                }\n                var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);\n                if (this.host.css('box-sizing') === 'border-box') {\n                  top = parseInt((parseInt(height - 2) - parseInt(spanHeight)) / 2);\n                }\n                if (top > 0) {\n                  this.dropdownlistContent.css('margin-top', top + 'px');\n                  this.dropdownlistContent.css('margin-bottom', top + 'px');\n                }\n                if (this.selectionRenderer) {\n                  $.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(spanElement, -1, \"\", \"\"));\n                  this.dropdownlistContent.css('margin-top', '0px');\n                  this.dropdownlistContent.css('margin-bottom', '0px');\n                  this._updateInputSelection();\n                } else this._updateInputSelection();\n                this.selectedIndex = this.listBox.selectedIndex;\n                if (this.width === \"auto\") {\n                  this._arrange();\n                }\n                if (this.focusable && this.isOpened()) {\n                  this.focus();\n                }\n                return;\n              }\n              this.selectedIndex = this.listBox.selectedIndex;\n              var spanElement = $(document.createElement('span'));\n              spanElement[0].setAttribute('unselectable', 'on');\n              try {\n                spanElement[0].style.color = \"inherit\";\n              } catch (er) {}\n              spanElement[0].style.borderWidth = '0px';\n              spanElement[0].style.backgroundColor = \"transparent\";\n              spanElement.appendTo($(document.body));\n              spanElement.addClass(this.toThemeProperty('jqx-widget jqx-listitem-state-normal jqx-item'));\n              var emptyItem = false;\n              try {\n                if (item.html != undefined && item.html != null && item.html.toString().length > 0) {\n                  $.jqx.utilities.html(spanElement, item.html);\n                } else if (item.label != undefined && item.label != null && item.label.toString().length > 0) {\n                  $.jqx.utilities.html(spanElement, item.label);\n                } else if (item.label === null || item.label === \"\") {\n                  emptyItem = true;\n                  $.jqx.utilities.html(spanElement, \"\");\n                } else if (item.value != undefined && item.value != null && item.value.toString().length > 0) {\n                  $.jqx.utilities.html(spanElement, item.value);\n                } else if (item.title != undefined && item.title != null && item.title.toString().length > 0) {\n                  $.jqx.utilities.html(spanElement, item.title);\n                } else if (item.label == \"\" || item.label == null) {\n                  emptyItem = true;\n                  $.jqx.utilities.html(spanElement, \"\");\n                }\n              } catch (error) {\n                var errorMessage = error;\n              }\n              var topPadding = this.dropdownlistContent[0].style.paddingTop;\n              var bottomPadding = this.dropdownlistContent[0].style.paddingBottom;\n              if (topPadding === \"\") topPadding = \"0px\";\n              if (bottomPadding === \"\") bottomPadding = \"0px\";\n              spanElement[0].style.paddingTop = topPadding;\n              spanElement[0].style.paddingBottom = bottomPadding;\n              var spanHeight = spanElement.outerHeight();\n              if (spanHeight === 0) {\n                spanHeight = 16;\n              }\n              if ((item.label == \"\" || item.label == null) && emptyItem) {\n                $.jqx.utilities.html(spanElement, \"\");\n              }\n              var notPercentageWidth = this.width && this.width.toString().indexOf('%') <= 0;\n              spanElement.remove();\n              spanElement.removeClass();\n              if (this.selectionRenderer) {\n                $.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(spanElement, item.index, item.label, item.value));\n                if (this.focusable && this.isOpened()) {\n                  this.focus();\n                }\n              } else {\n                if (this.checkboxes) {\n                  var items = this.getCheckedItems();\n                  var str = \"\";\n                  for (var i = 0; i < items.length; i++) {\n                    if (i == items.length - 1) {\n                      str += items[i].label;\n                    } else {\n                      str += items[i].label + \",\";\n                    }\n                  }\n                  spanElement.text(str);\n                  if (notPercentageWidth) {\n                    spanElement.css('max-width', this.host.width() - 30);\n                  }\n                  spanElement.css('overflow', 'hidden');\n                  spanElement.css('display', 'block');\n                  if (!this.rtl) {\n                    if (notPercentageWidth) {\n                      spanElement.css('width', this.host.width() - 30);\n                    }\n                  }\n                  spanElement.css('text-overflow', 'ellipsis');\n                  spanElement.css('padding-bottom', 1 + parseInt(bottomPadding));\n                  this.dropdownlistContent.html(spanElement);\n                  if (this.focusable && this.isOpened()) {\n                    this.focus();\n                  }\n                } else {\n                  var w = this.host.width() - this.arrowSize - 1;\n                  if (this.width && this.width !== 'auto') {\n                    if (notPercentageWidth) {\n                      if (!this.rtl) {\n                        spanElement.css('max-width', w + \"px\");\n                      }\n                    }\n                    spanElement[0].style.overflow = \"hidden\";\n                    spanElement[0].style.display = \"block\";\n                    spanElement[0].style.paddingTop = 1 + parseInt(bottomPadding) + \"px\";\n                    if (!this.rtl) {\n                      if (notPercentageWidth) {\n                        if (w < 0) w = 0;\n                        spanElement[0].style.width = w + \"px\";\n                      }\n                    }\n                    spanElement[0].style.textOverflow = 'ellipsis';\n                  }\n                  this.dropdownlistContent[0].innerHTML = spanElement[0].innerHTML;\n                  if (this.focusable && this.isOpened()) {\n                    this.focus();\n                  }\n                }\n              }\n              var height = this.host.height();\n              if (this.height != null && this.height != undefined) {\n                if (this.height.toString().indexOf('%') === -1) {\n                  height = parseInt(this.height);\n                }\n              }\n              var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);\n              if (this.host.css('box-sizing') === 'border-box') {\n                top = parseInt((parseInt(height - 2) - parseInt(spanHeight)) / 2);\n              }\n              if (top >= 0) {\n                this.dropdownlistContent[0].style.marginTop = top + 'px';\n                this.dropdownlistContent[0].style.marginBottom = top + 'px';\n              }\n              if (this.selectionRenderer) {\n                this.dropdownlistContent[0].style.marginTop = '0px';\n                this.dropdownlistContent[0].style.marginBottom = '0px';\n              }\n              if (this.dropdownlistContent && this.input) {\n                this._updateInputSelection();\n              }\n              if (this.listBox && this.listBox._activeElement) {\n                $.jqx.aria(this, \"aria-activedescendant\", this.listBox._activeElement.id);\n              }\n              if (this.width === \"auto\") {\n                this._arrange();\n              }\n            },\n            _updateInputSelection: function () {\n              if (this.input) {\n                var selectedValues = new Array();\n                if (this.selectedIndex == -1) {\n                  this.input.val(\"\");\n                } else {\n                  var selectedItem = this.getSelectedItem();\n                  if (selectedItem != null) {\n                    this.input.val(selectedItem.value);\n                    selectedValues.push(selectedItem.value);\n                  } else {\n                    this.input.val(this.dropdownlistContent.text());\n                  }\n                }\n                if (this.checkboxes) {\n                  var items = this.getCheckedItems();\n                  var str = \"\";\n                  if (items != null) {\n                    for (var i = 0; i < items.length; i++) {\n                      var value = items[i].value;\n                      if (value == undefined) continue;\n                      if (i == items.length - 1) {\n                        str += value;\n                      } else {\n                        str += value + \",\";\n                      }\n                      selectedValues.push(value);\n                    }\n                  }\n                  this.input.val(str);\n                }\n              }\n              if (this.field && this.input) {\n                if (this.field.nodeName.toLowerCase() == \"select\") {\n                  $.each(this.field, function (index, value) {\n                    $(this).removeAttr('selected');\n                    this.selected = selectedValues.indexOf(this.value) >= 0;\n                    if (this.selected) {\n                      $(this).attr('selected', true);\n                    }\n                  });\n                } else {\n                  $.each(this.items, function (index, value) {\n                    $(this.originalItem.originalItem).removeAttr('data-selected');\n                    this.selected = selectedValues.indexOf(this.value) >= 0;\n                    if (this.selected) {\n                      $(this.originalItem.originalItem).attr('data-selected', true);\n                    }\n                  });\n                }\n              }\n            },\n            setContent: function (content) {\n              $.jqx.utilities.html(this.dropdownlistContent, content);\n              this._updateInputSelection();\n            },\n            dataBind: function () {\n              this.listBoxContainer.jqxListBox({\n                source: this.source\n              });\n              this.renderSelection('mouse');\n              if (this.source == null) {\n                this.clearSelection();\n              }\n            },\n            clear: function () {\n              this.listBoxContainer.jqxListBox({\n                source: null\n              });\n              this.clearSelection();\n            },\n            // clears the selection.\n            clearSelection: function (render) {\n              this.selectedIndex = -1;\n              this._updateInputSelection();\n              this.listBox.clearSelection();\n              this.renderSelection();\n              if (!this.selectionRenderer && !this.hint && !this.isMaterialized()) {\n                $.jqx.utilities.html(this.dropdownlistContent, this.placeHolder);\n              }\n            },\n            // unselects an item at specific index.\n            // @param Number\n            unselectIndex: function (index, render) {\n              if (isNaN(index)) return;\n              this.listBox.unselectIndex(index, render);\n              this.renderSelection();\n            },\n            // selects an item at specific index.\n            // @param Number\n            selectIndex: function (index, ensureVisible, render, forceSelect) {\n              this.listBox.selectIndex(index, ensureVisible, render, forceSelect, 'api');\n            },\n            // gets the selected index.\n            getSelectedIndex: function () {\n              return this.selectedIndex;\n            },\n            // gets the selected item.\n            getSelectedItem: function () {\n              return this.listBox.getVisibleItem(this.selectedIndex);\n            },\n            getCheckedItems: function () {\n              return this.listBox.getCheckedItems();\n            },\n            checkIndex: function (index) {\n              this.listBox.checkIndex(index);\n            },\n            uncheckIndex: function (index) {\n              this.listBox.uncheckIndex(index);\n            },\n            indeterminateIndex: function (index) {\n              this.listBox.indeterminateIndex(index);\n            },\n            checkAll: function () {\n              this.listBox.checkAll();\n              this.renderSelection('mouse');\n            },\n            uncheckAll: function () {\n              this.listBox.uncheckAll();\n              this.renderSelection('mouse');\n            },\n            addItem: function (item) {\n              return this.listBox.addItem(item);\n            },\n            insertAt: function (item, index) {\n              if (item == null) return false;\n              return this.listBox.insertAt(item, index);\n            },\n            removeAt: function (index) {\n              var result = this.listBox.removeAt(index);\n              this.renderSelection('mouse');\n              return result;\n            },\n            removeItem: function (item) {\n              var result = this.listBox.removeItem(item);\n              this.renderSelection('mouse');\n              return result;\n            },\n            updateItem: function (item, oldItem) {\n              var result = this.listBox.updateItem(item, oldItem);\n              this.renderSelection('mouse');\n              return result;\n            },\n            updateAt: function (item, index) {\n              var result = this.listBox.updateAt(item, index);\n              this.renderSelection('mouse');\n              return result;\n            },\n            ensureVisible: function (index) {\n              return this.listBox.ensureVisible(index);\n            },\n            disableAt: function (index) {\n              return this.listBox.disableAt(index);\n            },\n            enableAt: function (index) {\n              return this.listBox.enableAt(index);\n            },\n            disableItem: function (item) {\n              return this.listBox.disableItem(item);\n            },\n            enableItem: function (item) {\n              return this.listBox.enableItem(item);\n            },\n            _findPos: function (obj) {\n              while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {\n                obj = obj['nextSibling'];\n              }\n              var position = $(obj).coord(true);\n              return [position.left, position.top];\n            },\n            testOffset: function (element, offset, inputHeight) {\n              var dpWidth = element.outerWidth();\n              var dpHeight = element.outerHeight();\n              var viewWidth = $(window).width() + $(window).scrollLeft();\n              var viewHeight = $(window).height() + $(window).scrollTop();\n              if (offset.left + dpWidth > viewWidth) {\n                if (dpWidth > this.host.width()) {\n                  var hostLeft = this.host.coord().left;\n                  var hOffset = dpWidth - this.host.width();\n                  offset.left = hostLeft - hOffset + 2;\n                }\n              }\n              if (offset.left < 0) {\n                offset.left = parseInt(this.host.coord().left) + 'px';\n              }\n              offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight + 22) : 0);\n              return offset;\n            },\n            open: function () {\n              this.showListBox();\n            },\n            close: function () {\n              this.hideListBox();\n            },\n            _getBodyOffset: function () {\n              var top = 0;\n              var left = 0;\n              if ($('body').css('border-top-width') != '0px') {\n                top = parseInt($('body').css('border-top-width'));\n                if (isNaN(top)) top = 0;\n              }\n              if ($('body').css('border-left-width') != '0px') {\n                left = parseInt($('body').css('border-left-width'));\n                if (isNaN(left)) left = 0;\n              }\n              return {\n                left: left,\n                top: top\n              };\n            },\n            // shows the listbox.\n            showListBox: function () {\n              $.jqx.aria(this, \"aria-expanded\", true);\n              if (this.listBox._renderOnDemand) {\n                this.listBoxContainer.jqxListBox({\n                  _renderOnDemand: false\n                });\n              }\n              if (this.dropDownWidth == 'auto' && this.width != null && this.width.indexOf && (this.width.indexOf('%') != -1 || this.width.indexOf('auto') != -1)) {\n                if (this.listBox.host.width() != this.host.width()) {\n                  var width = this.element.offsetWidth;\n                  this.listBoxContainer.jqxListBox({\n                    width: width\n                  });\n                  this.container.width(parseInt(width) + 25);\n                }\n              }\n              if (this.dropDownWidth == 'auto' && this.host.css('border-left-width') === \"0px\") {\n                var width = this.element.offsetWidth;\n                this.listBoxContainer.jqxListBox({\n                  width: width + 1\n                });\n                this.container.width(parseInt(width) + 25);\n              }\n              var self = this;\n              var listBox = this.listBoxContainer;\n              var listBoxInstance = this.listBox;\n              var scrollPosition = $(window).scrollTop();\n              var scrollLeftPosition = $(window).scrollLeft();\n              var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';\n              //var left = parseInt(Math.round(this.host.coord(true).left)) + 'px';\n              var left,\n                leftPos = parseInt(Math.round(this.host.coord(true).left));\n              left = leftPos + 'px';\n              if (this.dropDownContainer === 'element') {\n                top = parseInt(this.host.outerHeight()) - 1 + 'px';\n                left = 0;\n              }\n              var isMobileBrowser = false; //$.jqx.mobile.isSafariMobileBrowser() || $.jqx.mobile.isWindowsPhone();\n\n              if (this.listBox == null) return;\n              this.ishiding = false;\n              if (!this.keyboardSelection) {\n                this.listBox.selectIndex(this.selectedIndex);\n                this.listBox.ensureVisible(this.selectedIndex);\n              }\n              this.tempSelectedIndex = this.selectedIndex;\n              if (this.autoDropDownHeight) {\n                this.container.height(this.listBoxContainer.height() + 25);\n              }\n              if (isMobileBrowser != null && isMobileBrowser) {\n                left = $.jqx.mobile.getLeftPos(this.element);\n                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());\n                if ($('body').css('border-top-width') != '0px') {\n                  top = parseInt(top) - this._getBodyOffset().top + 'px';\n                }\n                if ($('body').css('border-left-width') != '0px') {\n                  left = parseInt(left) - this._getBodyOffset().left + 'px';\n                }\n              }\n              listBox.stop();\n              if (this.renderMode !== 'simple') {\n                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));\n                this.host.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                if (this.dropDownVerticalAlignment == \"top\") {\n                  this.arrow.addClass(this.toThemeProperty('jqx-icon-arrow-up-selected'));\n                } else {\n                  this.arrow.addClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));\n                }\n              }\n              this.container.css('left', left);\n              this.container.css('top', top);\n              listBoxInstance._arrange();\n              var closeAfterSelection = true;\n              var positionChanged = false;\n              if (this.dropDownHorizontalAlignment == 'right' || this.rtl) {\n                var containerWidth = this.container.outerWidth();\n                var containerLeftOffset = -2 + Math.abs(containerWidth - this.host.width());\n                if (containerWidth > this.host.width()) {\n                  this.container.css('left', 25 + parseInt(Math.round(leftPos)) - containerLeftOffset + \"px\");\n                } else this.container.css('left', 25 + parseInt(Math.round(leftPos)) + containerLeftOffset + \"px\");\n              }\n              if (this.dropDownVerticalAlignment == \"top\") {\n                var dpHeight = listBox.height();\n                positionChanged = true;\n                listBox.css('top', 23);\n                listBox.addClass(this.toThemeProperty('jqx-popup-up'));\n                var inputHeight = parseInt(this.host.outerHeight());\n                var t = parseInt(top) - Math.abs(dpHeight + inputHeight + 23);\n                this.container.css('top', t);\n              }\n              if (this.enableBrowserBoundsDetection) {\n                var newOffset = this.testOffset(listBox, {\n                  left: parseInt(this.container.css('left')),\n                  top: parseInt(top)\n                }, parseInt(this.host.outerHeight()));\n                if (parseInt(this.container.css('top')) != newOffset.top) {\n                  positionChanged = true;\n                  listBox.css('top', 23);\n                  listBox.addClass(this.toThemeProperty('jqx-popup-up'));\n                } else listBox.css('top', 0);\n                this.container.css('top', newOffset.top);\n                if (parseInt(this.container.css('left')) != newOffset.left) {\n                  this.container.css('left', newOffset.left);\n                }\n              }\n              if (this.animationType == 'none' || this.animationType === 'transform') {\n                this.container.css('display', 'block');\n                $.data(document.body, \"openedJQXListBoxParent\", self);\n                $.data(document.body, \"openedJQXListBox\" + this.id, listBox);\n                listBox.css('margin-top', 0);\n                listBox.css('opacity', 1);\n                listBoxInstance._renderItems();\n                self._raiseEvent('0', listBoxInstance);\n              } else {\n                this.container.css('display', 'block');\n                self.isanimating = true;\n                if (this.animationType == 'fade') {\n                  listBox.css('margin-top', 0);\n                  listBox.css('opacity', 0);\n                  listBox.animate({\n                    'opacity': 1\n                  }, this.openDelay, function () {\n                    $.data(document.body, \"openedJQXListBoxParent\", self);\n                    $.data(document.body, \"openedJQXListBox\" + self.id, listBox);\n                    self.ishiding = false;\n                    self.isanimating = false;\n                    listBoxInstance._renderItems();\n                    self._raiseEvent('0', listBoxInstance);\n                  });\n                } else {\n                  listBox.css('opacity', 1);\n                  var height = listBox.outerHeight();\n                  if (positionChanged) {\n                    listBox.css('margin-top', height);\n                  } else {\n                    listBox.css('margin-top', -height);\n                  }\n                  listBox.animate({\n                    'margin-top': 0\n                  }, this.openDelay, function () {\n                    $.data(document.body, \"openedJQXListBoxParent\", self);\n                    $.data(document.body, \"openedJQXListBox\" + self.id, listBox);\n                    self.ishiding = false;\n                    self.isanimating = false;\n                    listBoxInstance._renderItems();\n                    self._raiseEvent('0', listBoxInstance);\n                  });\n                }\n              }\n              if (!positionChanged) {\n                this.host.addClass(this.toThemeProperty('jqx-rc-b-expanded'));\n                listBox.addClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              } else {\n                this.host.addClass(this.toThemeProperty('jqx-rc-t-expanded'));\n                listBox.addClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              }\n              if (this.renderMode !== 'simple') {\n                listBox.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-focus'));\n                this.host.addClass(this.toThemeProperty('jqx-fill-state-focus'));\n              }\n              this.element.setAttribute('opened', true);\n              listBox.addClass(this.toThemeProperty('jqx-popup-show'));\n            },\n            // hides the listbox.\n            hideListBox: function () {\n              $.jqx.aria(this, \"aria-expanded\", false);\n              var listBox = this.listBoxContainer;\n              var listBoxInstance = this.listBox;\n              var container = this.container;\n              var me = this;\n              this.element.removeAttribute('opened');\n              listBox.removeClass('jqx-popup-show');\n              $.data(document.body, \"openedJQXListBox\" + this.id, null);\n              if (this.animationType == 'none') {\n                this.container.css('display', 'none');\n              } else if (this.animationType === 'transform') {\n                setTimeout(function () {\n                  container.css('display', 'none');\n                }, this.closeDelay);\n              } else {\n                if (!me.ishiding) {\n                  listBox.stop();\n                  var height = listBox.outerHeight();\n                  listBox.css('margin-top', 0);\n                  me.isanimating = true;\n                  var animationValue = -height;\n                  if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) {\n                    animationValue = height;\n                  }\n                  if (this.animationType == 'fade') {\n                    listBox.css({\n                      'opacity': 1\n                    });\n                    listBox.animate({\n                      'opacity': 0\n                    }, this.closeDelay, function () {\n                      container.css('display', 'none');\n                      me.isanimating = false;\n                      me.ishiding = false;\n                    });\n                  } else {\n                    listBox.animate({\n                      'margin-top': animationValue\n                    }, this.closeDelay, function () {\n                      container.css('display', 'none');\n                      me.isanimating = false;\n                      me.ishiding = false;\n                    });\n                  }\n                }\n              }\n              this.ishiding = true;\n              this.host.removeClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));\n              this.host.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.arrow.removeClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));\n              this.arrow.removeClass(this.toThemeProperty('jqx-icon-arrow-up-selected'));\n              this.host.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              this.host.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));\n              listBox.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this.host.removeClass(this.toThemeProperty('jqx-dropdownlist-state-focus'));\n              this.host.removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n              this._raiseEvent('1', listBoxInstance);\n            },\n            /* Close popup if clicked elsewhere. */\n            closeOpenedListBox: function (event) {\n              var self = event.data.me;\n              var $target = $(event.target);\n              var openedListBox = event.data.listbox;\n              if (openedListBox == null) return true;\n              if ($(event.target).ischildof(event.data.me.host)) {\n                return true;\n              }\n              if (!self.isOpened()) {\n                return true;\n              }\n              if ($(event.target).ischildof(self.listBoxContainer)) {\n                return true;\n              }\n              var dropdownlistInstance = self;\n              var isListBox = false;\n              $.each($target.parents(), function () {\n                if (this.className != 'undefined') {\n                  if (this.className.indexOf) {\n                    if (this.className.indexOf('jqx-listbox') != -1) {\n                      isListBox = true;\n                      return false;\n                    }\n                    if (this.className.indexOf('jqx-dropdownlist') != -1) {\n                      if (self.element.id == this.id) {\n                        isListBox = true;\n                      }\n                      return false;\n                    }\n                  }\n                }\n              });\n              if (openedListBox != null && !isListBox && self.isOpened()) {\n                self.hideListBox();\n              }\n              return true;\n            },\n            clearFilter: function () {\n              this.listBox.clearFilter();\n            },\n            loadFromSelect: function (id) {\n              this.listBox.loadFromSelect(id);\n            },\n            refresh: function (initialRefresh) {\n              if (initialRefresh !== true) {\n                this._setSize();\n                this._arrange();\n                if (this.listBox) {\n                  this.renderSelection();\n                }\n              }\n            },\n            _arrange: function () {\n              var that = this;\n              var width = parseInt(that.host.width());\n              var height = parseInt(that.host.height());\n              var arrowHeight = that.arrowSize;\n              var arrowWidth = that.arrowSize;\n              var rightOffset = 3;\n              var contentWidth = width - arrowWidth - 2 * rightOffset;\n              if (contentWidth > 0 && that.width !== \"auto\") {\n                that.dropdownlistContent[0].style.width = contentWidth + \"px\";\n              } else if (contentWidth <= 0) {\n                that.dropdownlistContent[0].style.width = \"0px\";\n              }\n              if (that.width === \"auto\") {\n                that.dropdownlistContent.css('width', 'auto');\n                width = 2 + that.dropdownlistContent.width() + arrowWidth + 2 * rightOffset;\n                if (width < 47) {\n                  width = 47;\n                }\n                that.host.width(width);\n              }\n              that.dropdownlistContent[0].style.height = height + \"px\";\n              that.dropdownlistContent[0].style.left = \"0px\";\n              that.dropdownlistContent[0].style.top = \"0px\";\n              that.dropdownlistArrow[0].style.width = arrowWidth + \"px\";\n              if (that.width && that.width.toString().indexOf('%') >= 0) {\n                var arrowPercentage = arrowWidth * 100 / width;\n                var contentPercentage = contentWidth * 100 / width;\n                that.dropdownlistArrow[0].style.width = arrowPercentage + '%';\n                that.dropdownlistContent[0].style.width = contentPercentage + '%';\n              }\n              that.dropdownlistArrow[0].style.height = height + \"px\";\n              if (that.rtl) {\n                that.dropdownlistArrow.css('float', 'left');\n                that.dropdownlistContent.css('float', 'right');\n              }\n            },\n            destroy: function () {\n              $.jqx.utilities.resize(this.host, null, true);\n              this.removeHandler(this.listBoxContainer, 'select');\n              this.removeHandler(this.listBoxContainer, 'unselect');\n              this.removeHandler(this.listBoxContainer, 'change');\n              this.removeHandler(this.dropdownlistWrapper, 'selectstart');\n              this.removeHandler(this.dropdownlistWrapper, 'mousedown');\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.listBoxContainer, 'select');\n              this.removeHandler(this.listBox.content, 'click');\n              this.removeHandler(this.listBoxContainer, 'bindingComplete');\n              if (this.host.parents()) {\n                this.removeHandler(this.host.parents(), 'scroll.dropdownlist' + this.element.id);\n              }\n              this.removeHandlers();\n              this.listBoxContainer.jqxListBox('destroy');\n              this.listBoxContainer.remove();\n              this.host.removeClass();\n              this.removeHandler($(document), 'mousedown.' + this.id, this.closeOpenedListBox);\n              if (this.touch) {\n                this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id);\n              }\n              this.dropdownlistArrow.remove();\n              delete this.dropdownlistArrow;\n              delete this.dropdownlistWrapper;\n              delete this.listBoxContainer;\n              delete this.input;\n              delete this.arrow;\n              delete this.dropdownlistContent;\n              delete this.listBox;\n              delete this._firstDiv;\n              this.container.remove();\n              delete this.container;\n              var vars = $.data(this.element, \"jqxDropDownList\");\n              if (vars) {\n                delete vars.instance;\n              }\n              this.host.removeData();\n              this.host.remove();\n              delete this.comboStructure;\n              delete this.host;\n              delete this.element;\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg;\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              if (id == 2 || id == 3 || id == 4 || id == 5 || id == 6 || id == 7 || id == 8 || id == 9) {\n                event.args = arg;\n              }\n              var result = this.host.trigger(event);\n              return result;\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object._setSize();\n                if (key == 'width') {\n                  if (object.dropDownWidth == 'auto') {\n                    var width = object.host.width();\n                    object.listBoxContainer.jqxListBox({\n                      width: width\n                    });\n                    object.container.width(parseInt(width) + 25);\n                  }\n                }\n                object._arrange();\n                object.close();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (object.isInitialized == undefined || object.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"template\") {\n                object.listBoxContainer.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue + \"-item\"));\n                object.listBoxContainer.addClass(object.toThemeProperty(\"jqx-\" + object.template + \"-item\"));\n                object.host.removeClass(object.toThemeProperty(\"jqx-\" + oldvalue + \"\"));\n                object.host.addClass(object.toThemeProperty(\"jqx-\" + object.template + \"\"));\n              }\n              if (key == \"dropDownVerticalAlignment\") {\n                object.close();\n                object.arrow.removeClass(object.toThemeProperty('jqx-icon-arrow-up'));\n                object.arrow.removeClass(object.toThemeProperty('jqx-icon-arrow-down'));\n                if (object.dropDownVerticalAlignment == \"top\") {\n                  object.arrow.addClass(object.toThemeProperty('jqx-icon-arrow-up'));\n                } else {\n                  object.arrow.addClass(object.toThemeProperty('jqx-icon-arrow-down'));\n                }\n                object.listBoxContainer.css('top', 0);\n                object.listBoxContainer.removeClass(this.toThemeProperty('jqx-popup-up'));\n              }\n              if (key == \"autoItemsHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  autoItemsHeight: value\n                });\n              }\n              if (key == \"filterable\") {\n                object.listBoxContainer.jqxListBox({\n                  filterable: value\n                });\n              }\n              if (key == \"filterHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  filterHeight: value\n                });\n              }\n              if (key == \"filterPlaceHolder\") {\n                object.listBoxContainer.jqxListBox({\n                  filterPlaceHolder: value\n                });\n              }\n              if (key == \"filterDelay\") {\n                object.listBoxContainer.jqxListBox({\n                  filterDelay: value\n                });\n              }\n              if (key == \"enableSelection\") {\n                object.listBoxContainer.jqxListBox({\n                  enableSelection: value\n                });\n              }\n              if (key == \"enableHover\") {\n                object.listBoxContainer.jqxListBox({\n                  enableHover: value\n                });\n              }\n              if (key == 'autoOpen') {\n                object._updateHandlers();\n              }\n              if (key == 'emptyString') {\n                object.listBox.emptyString = object.emptyString;\n              }\n              if (key == \"itemHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  itemHeight: value\n                });\n              }\n              if (key == \"renderer\") {\n                object.listBoxContainer.jqxListBox({\n                  renderer: value\n                });\n              }\n              if (key == \"rtl\") {\n                if (value) {\n                  object.dropdownlistArrow.css('float', 'left');\n                  object.dropdownlistContent.css('float', 'right');\n                } else {\n                  object.dropdownlistArrow.css('float', 'right');\n                  object.dropdownlistContent.css('float', 'left');\n                }\n                object.listBoxContainer.jqxListBox({\n                  rtl: object.rtl\n                });\n              }\n              if (key == 'source') {\n                object.listBoxContainer.jqxListBox({\n                  source: object.source\n                });\n                object.listBox.selectedIndex = -1;\n                object.listBox.selectIndex(this.selectedIndex);\n                object.renderSelection();\n                if (value == null) {\n                  object.clear();\n                }\n              }\n              if (key == \"displayMember\" || key == \"valueMember\") {\n                object.listBoxContainer.jqxListBox({\n                  displayMember: object.displayMember,\n                  valueMember: object.valueMember\n                });\n                object.renderSelection();\n              }\n              if (key == \"placeHolder\") {\n                object.renderSelection();\n              }\n              if (key == 'theme' && value != null) {\n                object.listBoxContainer.jqxListBox({\n                  theme: value\n                });\n                object.listBoxContainer.addClass(object.toThemeProperty('jqx-popup'));\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n              if (key == \"autoDropDownHeight\") {\n                object.listBoxContainer.jqxListBox({\n                  autoHeight: object.autoDropDownHeight\n                });\n                if (object.autoDropDownHeight) {\n                  object.container.height(object.listBoxContainer.height() + 25);\n                } else {\n                  object.listBoxContainer.jqxListBox({\n                    height: object.dropDownHeight\n                  });\n                  object.container.height(parseInt(object.dropDownHeight) + 25);\n                }\n                object.listBox._arrange();\n                object.listBox._updatescrollbars();\n              }\n              if (key == \"searchMode\") {\n                object.listBoxContainer.jqxListBox({\n                  searchMode: object.searchMode\n                });\n              }\n              if (key == \"incrementalSearch\") {\n                object.listBoxContainer.jqxListBox({\n                  incrementalSearch: object.incrementalSearch\n                });\n              }\n              if (key == \"incrementalSearchDelay\") {\n                object.listBoxContainer.jqxListBox({\n                  incrementalSearchDelay: object.incrementalSearchDelay\n                });\n              }\n              if (key == \"dropDownHeight\") {\n                if (!object.autoDropDownHeight) {\n                  object.listBoxContainer.jqxListBox({\n                    height: object.dropDownHeight\n                  });\n                  object.container.height(parseInt(object.dropDownHeight) + 25);\n                }\n              }\n              if (key == \"dropDownWidth\" || key == \"scrollBarSize\") {\n                var width = object.width;\n                if (object.dropDownWidth != 'auto') {\n                  width = object.dropDownWidth;\n                }\n                object.listBoxContainer.jqxListBox({\n                  width: width,\n                  scrollBarSize: object.scrollBarSize\n                });\n                object.container.width(parseInt(width) + 25);\n              }\n              if (key == 'width' || key == 'height') {\n                if (value != oldvalue) {\n                  this.refresh();\n                  if (key == 'width') {\n                    if (object.dropDownWidth == 'auto') {\n                      var width = 2 + object.host.width();\n                      object.listBoxContainer.jqxListBox({\n                        width: width\n                      });\n                      object.container.width(parseInt(width) + 25);\n                    }\n                  }\n                  object.close();\n                }\n              }\n              if (key == \"checkboxes\") {\n                object.listBoxContainer.jqxListBox({\n                  checkboxes: object.checkboxes\n                });\n              }\n              if (key == 'selectedIndex') {\n                if (object.listBox != null) {\n                  object.listBox.selectIndex(parseInt(value));\n                  object.renderSelection();\n                }\n              }\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/5875: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          $.jqx.jqxWidget('jqxInput', '', {});\n          $.extend($.jqx._jqxInput.prototype, {\n            defineInstance: function () {\n              var that = this;\n              var settings = {\n                disabled: false,\n                filter: that._filter,\n                sort: that._sort,\n                highlight: that._highlight,\n                dropDownWidth: null,\n                renderer: that._renderer,\n                opened: false,\n                $popup: document.createElement('ul'),\n                source: [],\n                roundedCorners: true,\n                searchMode: 'default',\n                placeHolder: '',\n                width: null,\n                height: null,\n                value: '',\n                rtl: false,\n                enableBrowserBoundsDetection: true,\n                hint: true,\n                displayMember: '',\n                valueMember: '',\n                events: ['select', 'open', 'close', 'change'],\n                popupZIndex: 1000,\n                items: 8,\n                minLength: 1,\n                maxLength: null\n              };\n              if (this === $.jqx._jqxInput.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function () {\n              var that = this;\n              if (that.host.css('display') === 'none' || document.body.contains(that.element) === false) {\n                that._initiallyHidden = true;\n              }\n              that._popupHelper = $(that.$popup);\n              that.render();\n            },\n            render: function () {\n              var that = this;\n              this.input = this.element;\n              if (that.isMaterialized() && this.input instanceof HTMLInputElement) {\n                var children = this.host.children();\n                $.each(children, function (index) {\n                  var classToAdd = 'jqx-input-group-addon';\n                  $(this).removeClass(that.toThemeProperty('jqx-rc-all'));\n                  if (index === 0) {\n                    classToAdd += ' jqx-rc-l';\n                  }\n                  if (index === children.length - 1) {\n                    classToAdd += ' jqx-rc-r';\n                  }\n                  if (this !== that.element) {\n                    classToAdd += ' jqx-fill-state-normal';\n                  }\n                  this.className += ' ' + that.toThemeProperty(classToAdd);\n                });\n                var group = $(\"<div></div>\");\n                group.addClass(that.toThemeProperty('jqx-input-group'));\n                this.host.after(group);\n                var input = this.element;\n                var data = this.host.data();\n                group.append(input);\n                var label = $(\"<label></label\");\n                if (this.hint) {\n                  label[0].innerHTML = this.placeHolder;\n                }\n                label.addClass(that.toThemeProperty('jqx-input-label'));\n                group.append(label);\n                var bar = $(\"<span></span>\");\n                group.append(bar);\n                bar.addClass(that.toThemeProperty('jqx-input-bar'));\n                group[0].id = this.element.id;\n                this.element.removeAttribute('id');\n                group[0].style.cssText = this.element.style.cssText;\n                if (this.element.className.indexOf('underlined') >= 0) {\n                  group.addClass('underlined');\n                }\n                that.input = that.element;\n                if (!(this.input instanceof HTMLInputElement)) {\n                  this.input = this.host.find('input');\n                  if (this.input.length > 0) {\n                    this.input = this.input[0];\n                  }\n                  $(this.input).addClass(this.toThemeProperty(\"jqx-input-widget\"));\n                }\n                this.label = label;\n                this.bar = bar;\n                this.element.style.cssText = '';\n                this.host = group;\n                this.element = group[0];\n                this.host.data(data);\n                var that = this;\n                if (that.template) {\n                  that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                  that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                }\n                if (children.length > 0) {\n                  that._hasAddons = true;\n                }\n              } else if (this.element.nodeName.toLowerCase() === 'textarea') {\n                this.element.style.overflow = 'auto';\n              } else if (this.element.nodeName.toLowerCase() === 'div') {\n                this.baseHost = this.element;\n                var input = that.element.getElementsByTagName('input');\n                var hasTextInput = false;\n                $.each(input, function () {\n                  var type = this.type;\n                  if (type == null || type === 'text' || type === 'textarea') {\n                    input = $(this);\n                    hasTextInput = true;\n                    return false;\n                  }\n                });\n                if (!hasTextInput) {\n                  throw new Error('jqxInput: Missing Text Input in the Input Group');\n                }\n                if (input.length > 0) {\n                  this.baseHost = $(this.element);\n                  that.baseElement = that.element;\n                  var data = this.host.data();\n                  this.host = input;\n                  this.element = input[0];\n                  that.input = input[0];\n                  this.host.data(data);\n                  that.baseElement.className += ' ' + that.toThemeProperty('jqx-widget jqx-rc-all jqx-input-group');\n                  var children = this.baseHost.children();\n                  $.each(children, function (index) {\n                    var classToAdd = 'jqx-input-group-addon';\n                    $(this).removeClass(that.toThemeProperty('jqx-rc-all'));\n                    if (index === 0) {\n                      classToAdd += ' jqx-rc-l';\n                    }\n                    if (index === children.length - 1) {\n                      classToAdd += ' jqx-rc-r';\n                    }\n                    if (this !== that.element) {\n                      classToAdd += ' jqx-fill-state-normal';\n                    }\n                    this.className += ' ' + that.toThemeProperty(classToAdd);\n                  });\n                }\n              }\n              this.addHandlers();\n              if (this.rtl) {\n                that.element.className += ' ' + that.toThemeProperty('jqx-rtl');\n              }\n              that.element.setAttribute('role', 'textbox');\n              $.jqx.aria(this, 'aria-autocomplete', 'both');\n              $.jqx.aria(this, 'aria-disabled', this.disabled);\n              $.jqx.aria(this, 'aria-readonly', false);\n              $.jqx.aria(this, 'aria-multiline', false);\n              if (this.source && this.source.length) {\n                $.jqx.aria(this, 'aria-haspopup', true);\n              }\n              if (this.value !== '') {\n                this.input.value = this.value;\n              }\n              this._oldsource = this.source;\n              this._updateSource();\n            },\n            _updateSource: function () {\n              var that = this;\n              var mapItem = function (item) {\n                if (item === undefined) {\n                  return null;\n                }\n                if (typeof item === 'string' || item instanceof String) {\n                  return {\n                    label: item,\n                    value: item\n                  };\n                }\n                if (typeof item !== 'string' && item instanceof String === false) {\n                  var label = '';\n                  var value = '';\n                  if (that.displayMember !== '' && that.displayMember !== undefined) {\n                    if (item[that.displayMember]) {\n                      label = item[that.displayMember];\n                    }\n                  }\n                  if (that.valueMember !== '' && that.valueMember !== undefined) {\n                    value = item[that.valueMember];\n                  }\n                  if (label === '') {\n                    label = item.label;\n                  }\n                  if (value === '') {\n                    value = item.value;\n                  }\n                  return {\n                    label: label,\n                    value: value\n                  };\n                }\n                return item;\n              };\n              var mapItems = function (source) {\n                var items = [];\n                for (var i = 0; i < source.length; i++) {\n                  items[i] = mapItem(source[i]);\n                }\n                return items;\n              };\n              if (this.source && this.source._source) {\n                this.adapter = this.source;\n                if (this.adapter._source.localdata != null) {\n                  this.adapter.unbindBindingUpdate(this.element.id);\n                  this.adapter.bindBindingUpdate(this.element.id, function () {\n                    that.source = mapItems(that.adapter.records);\n                  });\n                } else {\n                  var postdata = {};\n                  if (this.adapter._options.data) {\n                    $.extend(that.adapter._options.data, postdata);\n                  } else {\n                    if (this.source._source.data) {\n                      $.extend(postdata, this.source._source.data);\n                    }\n                    this.adapter._options.data = postdata;\n                  }\n                  this.adapter.unbindDownloadComplete(this.element.id);\n                  this.adapter.bindDownloadComplete(this.element.id, function () {\n                    that.source = mapItems(that.adapter.records);\n                  });\n                }\n                this.source.dataBind();\n                return;\n              }\n              if (!$.isFunction(this.source)) {\n                this.source = mapItems(this.source);\n              }\n            },\n            _refreshClasses: function (add) {\n              var func = add ? 'addClass' : 'removeClass',\n                hostClass = 'jqx-widget-content jqx-input-widget jqx-input jqx-widget',\n                popupClass = 'jqx-popup jqx-input-popup jqx-menu jqx-menu-vertical jqx-menu-dropdown jqx-widget jqx-widget-content';\n              if ($.jqx.browser.msie) {\n                popupClass += ' jqx-noshadow';\n              }\n              if (this.roundedCorners) {\n                hostClass += ' jqx-rc-all';\n                popupClass += ' jqx-rc-all';\n              }\n              if (this.disabled) {\n                hostClass += ' jqx-fill-state-disabled';\n              } else {\n                this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              }\n              this.host[func](this.toThemeProperty(hostClass));\n              this._popupHelper[func](this.toThemeProperty(popupClass));\n            },\n            selectAll: function () {\n              var that = this;\n              var textbox = this.host;\n              if (textbox[0] instanceof HTMLInputElement === false) {\n                textbox = $(that.input);\n              }\n              setTimeout(function () {\n                if ('selectionStart' in textbox[0]) {\n                  textbox[0].focus();\n                  textbox[0].setSelectionRange(0, textbox[0].value.length);\n                } else {\n                  var range = textbox[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', textbox[0].value.length);\n                  range.moveStart('character', 0);\n                  range.select();\n                }\n              }, 10);\n            },\n            selectLast: function () {\n              var that = this;\n              var textbox = this.host;\n              if (textbox[0] instanceof HTMLInputElement === false) {\n                textbox = $(that.input);\n              }\n              this.selectStart(textbox[0].value.length);\n            },\n            selectFirst: function () {\n              //var textbox = this.host;\n              this.selectStart(0);\n            },\n            selectStart: function (index) {\n              var that = this;\n              var textbox = this.host;\n              if (textbox[0] instanceof HTMLInputElement === false) {\n                textbox = $(that.input);\n              }\n              setTimeout(function () {\n                if ('selectionStart' in textbox[0]) {\n                  textbox[0].focus();\n                  textbox[0].setSelectionRange(index, index);\n                } else {\n                  var range = textbox[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', index);\n                  range.moveStart('character', index);\n                  range.select();\n                }\n              }, 10);\n            },\n            focus: function () {\n              try {\n                var that = this;\n                that.element.focus();\n                setTimeout(function () {\n                  that.element.focus();\n                }, 25);\n              } catch (error) {}\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this.refresh();\n            },\n            refresh: function () {\n              this._refreshClasses(false);\n              this._refreshClasses(true);\n              if (!this.baseHost) {\n                if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                  this.element.style.width = parseInt(this.width) + 'px';\n                } else if (this.width != undefined && !isNaN(this.width)) {\n                  this.element.style.width = this.width + 'px';\n                } else {\n                  this.element.style.width = this.width;\n                }\n                if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                  this.element.style.height = parseInt(this.height) + 'px';\n                  ;\n                } else if (this.height != undefined && !isNaN(this.height)) {\n                  this.element.style.height = this.height + 'px';\n                } else {\n                  this.element.style.height = this.height;\n                }\n                if (this._hasAddons) {\n                  this._addonsWidth = 35;\n                  this.input.style.width = 'calc(100% - ' + this._addonsWidth + 'px)';\n                }\n              } else {\n                if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                  this.baseElement.style.width = parseInt(this.width) + 'px';\n                } else if (this.width != undefined && !isNaN(this.width)) {\n                  this.baseElement.style.width = this.width + 'px';\n                }\n                if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                  this.baseElement.style.height = parseInt(this.height) + 'px';\n                } else if (this.height != undefined && !isNaN(this.height)) {\n                  this.baseElement.style.height = this.height + 'px';\n                }\n                ;\n                var that = this,\n                  IE8 = $.jqx.browser.msie && $.jqx.browser.version < 9,\n                  totalWidth = 0;\n                $.each(this.baseHost.children(), function () {\n                  this.style.height = '100%';\n                  if (this !== that.element) {\n                    totalWidth += $(this).outerWidth();\n                  }\n                });\n                that._addonsWidth = totalWidth;\n                if (IE8) {\n                  var height = Math.max(0, that.baseElement.offsetHeight - 2);\n                  that.element.style.width = Math.max(0, that.baseElement.offsetWidth - totalWidth - 1) + 'px';\n                  that.element.style.minHeight = height + 'px';\n                  that.element.style.lineHeight = height + 'px';\n                } else {\n                  that.element.style.width = 'calc(100% - ' + totalWidth + 'px)';\n                }\n                $.jqx.utilities.resize(that.baseHost, function () {\n                  if (IE8 && typeof that.width === 'string' && that.width.indexOf('%') !== -1 && !that._initiallyHidden) {\n                    that.element.style.width = that.baseElement.offsetWidth - that._addonsWidth - 1 + 'px';\n                  } else if (that._initiallyHidden) {\n                    that._addonsWidth = that._getAddonsWidth();\n                    if (!IE8) {\n                      that.element.style.width = 'calc(100% - ' + that._addonsWidth + 'px)';\n                    } else {\n                      that.element.style.width = that.baseElement.offsetWidth - that._addonsWidth - 1 + 'px';\n                      var height = that.baseElement.offsetHeight - 2;\n                      that.element.style.minHeight = height + 'px';\n                      that.element.style.lineHeight = height + 'px';\n                    }\n                    that._initiallyHidden = false;\n                  }\n                });\n              }\n              if (this.disabled) {\n                this.element.setAttribute('disabled', true);\n              } else {\n                this.element.removeAttribute('disabled');\n              }\n              if (this.maxLength) {\n                this.element.setAttribute('maxlength', this.maxLength);\n                if (this.input) {\n                  this.input.setAttribute('maxlength', this.maxLength);\n                }\n              }\n              if (!this.element.getAttribute('placeholder')) {\n                this._refreshPlaceHolder();\n              }\n            },\n            _refreshPlaceHolder: function () {\n              var that = this;\n              if (!that.isMaterialized() || !that.hint) {\n                if ('placeholder' in this.input && !($.jqx.browser.msie && $.jqx.browser.version < 9)) {\n                  that.input.setAttribute('placeHolder', that.placeHolder);\n                } else {\n                  if (that.input.value === '') {\n                    that.input.value = that.placeHolder;\n                  }\n                }\n              }\n              if (!that.hint) {\n                return;\n              }\n              if (that.input.value !== \"\") {\n                that.element.setAttribute(\"hint\", true);\n              } else {\n                that.element.removeAttribute(\"hint\");\n              }\n              if (that.label) {\n                that.label.innerHTML = that.placeHolder;\n              }\n            },\n            destroy: function () {\n              this.removeHandlers();\n              if (this.baseHost) {\n                this.baseHost.remove();\n              } else {\n                this.host.remove();\n              }\n              if (this.$popup) {\n                this._popupHelper.remove();\n              }\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length === 2) {\n                object.refresh();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (key === 'width' && value !== oldvalue) {\n                if (object.baseHost) {\n                  object.baseElement.style.width = object._toPx(value);\n                  if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                    object.element.style.width = object.baseElement.offsetWidth - object._addonsWidth - 1 + 'px';\n                  }\n                } else {\n                  object.element.style.width = object._toPx(value);\n                }\n                return;\n              }\n              if (key === 'placeHolder') {\n                if ((!('placeholder' in object.element) || $.jqx.browser.msie && $.jqx.browser.version < 9) && object.input.value === oldvalue) {\n                  object.input.value = '';\n                }\n                object._refreshPlaceHolder();\n                return;\n              }\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length === 2) {\n                return;\n              }\n              if (key === 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n              if (key === 'opened') {\n                if (value) {\n                  object.open();\n                } else {\n                  object.close();\n                }\n                return;\n              }\n              if (key === 'source') {\n                object._oldsource = value;\n                object._updateSource();\n              }\n              if (key === 'displayMember' || key === 'valueMember') {\n                object.source = object._oldsource;\n                object._updateSource();\n              }\n              if (key === 'disabled') {\n                $.jqx.aria(object, 'aria-disabled', object.disabled);\n              }\n              if (key === 'value') {\n                object.input.value = value;\n                object._refreshPlaceHolder();\n              }\n              object.refresh();\n            },\n            select: function (event, ui, changeType) {\n              var selectedItem = this._find('jqx-fill-state-pressed', this._popupHelper);\n              var val = selectedItem.getAttribute('data-value');\n              var label = selectedItem.getAttribute('data-name');\n              this.input.value = this.renderer(label, this.input.value);\n              this.selectedItem = {\n                'label': label,\n                'value': val\n              };\n              this.element.setAttribute('data-value', val);\n              this.element.setAttribute('data-label', label);\n              this._raiseEvent('0', {\n                'item': {\n                  'label': label,\n                  'value': val\n                },\n                'label': label,\n                'value': val\n              });\n              this._raiseEvent('3', {\n                type: changeType,\n                'item': {\n                  'label': label,\n                  'value': val\n                },\n                'label': label,\n                'value': val\n              });\n              this.value = label;\n              return this.close();\n            },\n            val: function (value) {\n              if (arguments.length === 0 || value != null && typeof value === 'object' && !value.label && !value.value) {\n                if (this.displayMember !== '' && this.valueMember !== '' && this.selectedItem) {\n                  if (this.input.value === '') {\n                    return '';\n                  }\n                  return this.selectedItem;\n                }\n                return this.input.value;\n              }\n              if (value && value.label) {\n                this.selectedItem = {\n                  'label': value.label,\n                  'value': value.value\n                };\n                this.element.setAttribute('data-value', value.value);\n                this.element.setAttribute('data-label', value.label);\n                this.value = value;\n                this.input.value = value.label;\n                if (this.input) {\n                  this.input.value = value.label;\n                }\n                return this.input.value;\n              }\n              this.value = value;\n              this.input.value = value;\n              this.element.setAttribute('data-value', value);\n              this.element.setAttribute('data-label', value);\n              if (value && value.label) {\n                this._raiseEvent('3', {\n                  type: null,\n                  'item': {\n                    'label': value.label,\n                    'value': value.value\n                  },\n                  'label': value.label,\n                  'value': value.value\n                });\n              } else {\n                this._raiseEvent('3', {\n                  type: null,\n                  'item': {\n                    'label': value,\n                    'value': value\n                  },\n                  'label': value,\n                  'value': value\n                });\n              }\n              this._refreshPlaceHolder();\n              return this.input.value;\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg === undefined) {\n                arg = {\n                  owner: null\n                };\n              }\n              var evt = this.events[id];\n              arg.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = arg;\n              if (event.preventDefault) {\n                event.preventDefault();\n              }\n              var result = this.host.trigger(event);\n              return result;\n            },\n            _renderer: function (item) {\n              return item;\n            },\n            open: function () {\n              if ($.jqx.isHidden(this.host)) {\n                return;\n              }\n              var position = $.extend({}, this.host.coord(true), {\n                height: this.element.offsetHeight\n              });\n              if (this.$popup.parentNode !== document.body) {\n                var popupId = this.element.id + '_popup';\n                this.$popup.id = popupId;\n                $.jqx.aria(this, 'aria-owns', popupId);\n                document.body.appendChild(this.$popup);\n              }\n              this.$popup.style.position = 'absolute';\n              this.$popup.style.zIndex = this.popupZIndex;\n              this.$popup.style.top = this._toPx(position.top + position.height);\n              this.$popup.style.left = this._toPx(position.left);\n              this.$popup.style.display = 'block';\n              var height = 0;\n              var children = this._popupHelper.children();\n              $.each(children, function () {\n                height += $(this).outerHeight() + 1;\n              });\n              this.$popup.style.height = this._toPx(height);\n              if (this.enableBrowserBoundsDetection) {\n                var viewHeight = $(window).height() + $(window).scrollTop();\n                var offset = $(this.$popup).offset();\n                var dpHeight = $(this.$popup).outerHeight();\n                if (offset.top + dpHeight > viewHeight) {\n                  var newPosition = position.top + position.height - dpHeight - this.host.height();\n                  if (newPosition < 0) {\n                    newPosition = 0;\n                  }\n                  this.$popup.style.top = newPosition + 'px';\n                }\n              }\n              this.opened = true;\n              this._raiseEvent('1', {\n                popup: this.$popup\n              });\n              $.jqx.aria(this, 'aria-expanded', true);\n              return this;\n            },\n            close: function () {\n              if (!this.opened) {\n                return;\n              }\n              this.$popup.style.display = 'none';\n              this.opened = false;\n              this._raiseEvent('2', {\n                popup: this.$popup\n              });\n              $.jqx.aria(this, 'aria-expanded', false);\n              this._refreshPlaceHolder();\n              return this;\n            },\n            suggest: function () {\n              var items;\n              this.query = this.input.value;\n              if (!this.query || this.query.length < this.minLength) {\n                return this.opened ? this.close() : this;\n              }\n              if ($.isFunction(this.source)) {\n                items = this.source(this.query, $.proxy(this.load, this));\n              } else {\n                items = this.source;\n              }\n              if (items) {\n                return this.load(items);\n              }\n              return this;\n            },\n            load: function (originalItems) {\n              var that = this,\n                items = [];\n              for (var i = 0; i < originalItems.length; i++) {\n                var item = originalItems[i];\n                if (that.filter(item)) {\n                  items.push(item);\n                }\n              }\n              items = this.sort(items);\n              if (!items.length) {\n                if (this.opened) {\n                  return this.close();\n                } else {\n                  return this;\n                }\n              }\n              return this._render(items.slice(0, this.items)).open();\n            },\n            _filter: function (item) {\n              var value = this.query;\n              var itemValue = item;\n              if (item.label != null) {\n                itemValue = item.label;\n              } else if (this.displayMember) {\n                itemValue = item[this.displayMember];\n              }\n              switch (this.searchMode) {\n                case 'none':\n                  break;\n                default:\n                  // ('containsignorecase')\n                  return $.jqx.string.containsIgnoreCase(itemValue, value);\n                case 'contains':\n                  return $.jqx.string.contains(itemValue, value);\n                case 'equals':\n                  return $.jqx.string.equals(itemValue, value);\n                case 'equalsignorecase':\n                  return $.jqx.string.equalsIgnoreCase(itemValue, value);\n                case 'startswith':\n                  return $.jqx.string.startsWith(itemValue, value);\n                case 'startswithignorecase':\n                  return $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                case 'endswith':\n                  return $.jqx.string.endsWith(itemValue, value);\n                case 'endswithignorecase':\n                  return $.jqx.string.endsWithIgnoreCase(itemValue, value);\n              }\n            },\n            _sort: function (items) {\n              var bw = [],\n                cs = [],\n                cis = [];\n              for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                var itemValue = item;\n                if (item.label) {\n                  itemValue = item.label;\n                } else if (this.displayMember) {\n                  itemValue = item[this.displayMember];\n                }\n                if (itemValue.toString().toLowerCase().indexOf(this.query.toString().toLowerCase()) === 0) {\n                  bw.push(item);\n                } else if (itemValue.toString().indexOf(this.query) >= 0) {\n                  cs.push(item);\n                } else if (itemValue.toString().toLowerCase().indexOf(this.query.toString().toLowerCase()) >= 0) {\n                  cis.push(item);\n                }\n              }\n              return bw.concat(cs, cis);\n            },\n            _highlight: function (item) {\n              var query = this.query;\n              query = query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n              var regex = new RegExp('(' + query + ')', 'ig');\n              return item.replace(regex, function ($1, match) {\n                return '<b>' + match + '</b>';\n              });\n            },\n            escapeHTML: function (value) {\n              var entityMap = {\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                '\"': '&quot;',\n                '\\'': '&#39;',\n                '/': '&#x2F;',\n                '`': '&#x60;',\n                '=': '&#x3D;'\n              };\n              return String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n                return entityMap[s];\n              });\n            },\n            sanitizeHTML: function (value) {\n              var that = this;\n              var regExp = new RegExp('<\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)[^>]*>(.*?)<\\s*/\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)>', 'ig');\n              var result = String(value).replace(regExp, function (s) {\n                return that.escapeHTML(s);\n              });\n              return result;\n            },\n            escape_HTML: function (html_str) {\n              if (html_str && (html_str.indexOf('onclick') >= 0 || html_str.indexOf('onload') >= 0 || html_str.indexOf('onerror') >= 0)) {\n                return this.escapeHTML(html_str);\n              }\n              var sanitized = this.sanitizeHTML(html_str);\n              return sanitized;\n            },\n            _render: function (originalItems) {\n              var that = this,\n                popupChildren = that._popupHelper.children();\n              if (popupChildren.length > 0) {\n                for (var j = 0; j < popupChildren.length; j++) {\n                  $(popupChildren[j]).remove();\n                }\n              }\n              var mapItem = function (item, index) {\n                var itemValue = item,\n                  i = document.createElement('li'),\n                  a = document.createElement('a'),\n                  dataName,\n                  dataValue;\n                a.setAttribute('href', '#');\n                i.appendChild(a);\n                if (item.value !== undefined && item.value !== null) {\n                  if (item.label !== undefined && item.label !== null) {\n                    dataName = item.label;\n                    dataValue = that.escape_HTML(item.value);\n                  } else {\n                    dataName = item.value;\n                    dataValue = that.escape_HTML(item.value);\n                  }\n                } else if (item.label !== undefined && item.label !== null) {\n                  dataName = item.label;\n                  dataValue = item.label;\n                } else if (that.displayMember !== undefined && that.displayMember !== '') {\n                  dataName = item[that.displayMember];\n                  dataValue = item[that.valueMember];\n                } else {\n                  dataName = item;\n                  dataValue = item;\n                }\n                i.setAttribute('data-value', dataValue);\n                i.setAttribute('data-name', dataName);\n                if (item.label) {\n                  itemValue = item.label;\n                } else if (that.displayMember) {\n                  itemValue = item[that.displayMember];\n                }\n                a.innerHTML = that.highlight(itemValue);\n                var plusClass = '';\n                if (that.rtl) {\n                  plusClass = ' jqx-rtl';\n                }\n                if (index === 0) {\n                  plusClass += ' jqx-fill-state-pressed';\n                }\n                i.className = that.toThemeProperty('jqx-item jqx-menu-item jqx-rc-all' + plusClass);\n                that.$popup.appendChild(i);\n                that.addHandler(i, 'mouseenter', function (event) {\n                  that.mouseenter(event);\n                });\n              };\n              var mapItems = function (source) {\n                for (var i = 0; i < source.length; i++) {\n                  mapItem(source[i], i);\n                }\n              };\n              mapItems(originalItems);\n              if (!this.dropDownWidth) {\n                this.$popup.style.width = that._toPx(that.element.offsetWidth - 6);\n              } else {\n                this.$popup.style.width = that._toPx(that.dropDownWidth);\n              }\n              return this;\n            },\n            next: function () {\n              var active = this._find('jqx-fill-state-pressed', this._popupHelper),\n                next = active.nextSibling;\n              $(active).removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              if (!next) {\n                next = this.$popup.firstChild;\n              }\n              next.className += ' ' + this.toThemeProperty('jqx-fill-state-pressed');\n            },\n            prev: function () {\n              var active = this._find('jqx-fill-state-pressed', this._popupHelper),\n                prev = active.previousSibling;\n              $(active).removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              if (!prev) {\n                prev = this.$popup.lastChild;\n              }\n              prev.className += ' ' + this.toThemeProperty('jqx-fill-state-pressed');\n            },\n            addHandlers: function () {\n              var that = this,\n                eventNamespace = '.jqxInput' + that.element.id;\n              that.addHandler(that.host, 'focus' + eventNamespace, function () {\n                that.onFocus();\n              });\n              that.addHandler(that.host, 'blur' + eventNamespace, function () {\n                that.onBlur();\n              });\n              if (that.isMaterialized() && this.input instanceof HTMLInputElement) {\n                that.addHandler(that.input, 'blur' + eventNamespace, function () {\n                  that.onBlur();\n                });\n              }\n              that.addHandler(that.host, 'change' + eventNamespace, function (event) {\n                if (that.opened && !event.args) {\n                  event.stopPropagation();\n                  event.preventDefault();\n                  event.stopImmediatePropagation();\n                  return;\n                }\n                if (!event.args) {\n                  event.stopPropagation();\n                  event.preventDefault();\n                  event.stopImmediatePropagation();\n                  var item = that.val(),\n                    label,\n                    val;\n                  if (item && item.label) {\n                    label = item.label;\n                    val = item.val;\n                  } else {\n                    label = item;\n                    val = item;\n                  }\n                  that._raiseEvent('3', {\n                    type: 'keyboard',\n                    'item': {\n                      'label': label,\n                      'value': val\n                    },\n                    'label': label,\n                    'value': val\n                  });\n                  that.value = label;\n                  that._refreshPlaceHolder();\n                }\n              });\n              that.addHandler(that.host, 'keypress' + eventNamespace, function (event) {\n                that.keypress(event);\n              });\n              that.addHandler(that.host, 'keyup' + eventNamespace, function (event) {\n                that.keyup(event);\n              });\n              that.addHandler(that.host, 'keydown' + eventNamespace, function (event) {\n                that.keydown(event);\n              });\n              that.addHandler(that.$popup, 'pointerdown' + eventNamespace, function (event) {\n                that.click(event);\n              });\n            },\n            removeHandlers: function () {\n              var that = this,\n                eventNamespace = '.jqxInput' + that.element.id;\n              that.removeHandler(that.host, 'change' + eventNamespace);\n              that.removeHandler(that.host, 'focus' + eventNamespace);\n              that.removeHandler(that.host, 'blur' + eventNamespace);\n              that.removeHandler(that.host, 'keypress' + eventNamespace);\n              that.removeHandler(that.host, 'keyup' + eventNamespace);\n              that.removeHandler(that.host, 'keydown' + eventNamespace);\n              that.removeHandler(that.$popup, 'pointerdown' + eventNamespace);\n            },\n            move: function (e) {\n              if (!this.opened) {\n                return;\n              }\n              switch (e.keyCode) {\n                case 9: // tab\n                case 13: // enter\n                case 27:\n                  // escape\n                  e.preventDefault();\n                  break;\n                case 38:\n                  // up arrow\n                  if (!e.shiftKey) {\n                    e.preventDefault();\n                    this.prev();\n                  }\n                  break;\n                case 40:\n                  // down arrow\n                  if (!e.shiftKey) {\n                    e.preventDefault();\n                    this.next();\n                  }\n                  break;\n              }\n              e.stopPropagation();\n            },\n            keydown: function (e) {\n              var arr = [40, 38, 9, 13, 27];\n              this.suppressKeyPressRepeat = arr.indexOf(e.keyCode) !== -1;\n              this.move(e);\n            },\n            keypress: function (e) {\n              if (this.suppressKeyPressRepeat) {\n                return;\n              }\n              this.move(e);\n            },\n            keyup: function (e) {\n              switch (e.keyCode) {\n                case 40: // down arrow\n                case 38: // up arrow\n                case 16: // shift\n                case 17: // ctrl\n                case 18:\n                  // alt\n                  e.stopPropagation();\n                  e.preventDefault();\n                  break;\n                case 9: // tab\n                case 13:\n                  // enter\n                  if (!this.opened) {\n                    return;\n                  }\n                  this.select(e, this, 'keyboard');\n                  e.stopPropagation();\n                  e.preventDefault();\n                  break;\n                case 27:\n                  // escape\n                  if (!this.opened) {\n                    return;\n                  }\n                  this.close();\n                  e.stopPropagation();\n                  e.preventDefault();\n                  break;\n                default:\n                  {\n                    var me = this;\n                    if (this.timer) {\n                      clearTimeout(this.timer);\n                    }\n                    this.timer = setTimeout(function () {\n                      me.suggest();\n                    }, 300);\n                  }\n              }\n            },\n            clear: function () {\n              this.val('');\n            },\n            onBlur: function () {\n              var that = this;\n              setTimeout(function () {\n                that.close();\n              }, 150);\n              that.host.removeClass(that.toThemeProperty('jqx-fill-state-focus'));\n              that._refreshPlaceHolder();\n            },\n            onFocus: function () {\n              var that = this;\n              that.element.className += ' ' + that.toThemeProperty('jqx-fill-state-focus');\n              that._refreshPlaceHolder();\n            },\n            click: function (e) {\n              e.stopPropagation();\n              e.preventDefault();\n              this.select(e, this, 'mouse');\n            },\n            mouseenter: function (e) {\n              $(this._find('jqx-fill-state-pressed', this._popupHelper)).removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              e.currentTarget.className += ' ' + this.toThemeProperty('jqx-fill-state-pressed');\n            },\n            _toPx: function (value) {\n              if (typeof value === 'number') {\n                return value + 'px';\n              } else {\n                return value;\n              }\n            },\n            _find: function (className, parentElement) {\n              var children = parentElement.children();\n              for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.className.indexOf(className) !== -1) {\n                  return child;\n                }\n              }\n            },\n            _getAddonsWidth: function () {\n              var that = this,\n                children = that.baseHost.children(),\n                result = 0;\n              for (var i = 0; i < children.length; i++) {\n                if (children[i] !== that.element) {\n                  result += $(children[i]).outerWidth();\n                }\n              }\n              return result;\n            }\n          });\n        })(jqxBaseFramework); //ignore jslint\n      })();\n\n      /***/\n    }),\n    /***/1062: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxListBox\", \"\", {});\n          $.extend($.jqx._jqxListBox.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: Boolean\n                // Default: true\n                // enables/disables the listbox.\n                disabled: false,\n                // Type: Boolean\n                // Default: 16\n                // Gets or sets the checkbox size.\n                checkboxSize: 16,\n                // Type: Boolean\n                // Default: false\n                // Gets or sets whether the listbox should display a checkbox next to each item.\n                checkboxes: false,\n                // gets or sets the listbox width.\n                width: null,\n                // gets or sets the listbox height.\n                height: null,\n                // Represents the collection of list items.\n                items: new Array(),\n                // Type: Boolean\n                // Default: false\n                // enables/disables the multiple selection.\n                multiple: false,\n                // Gets or sets the selected index.\n                selectedIndex: -1,\n                // Gets the selected item indexes.\n                selectedIndexes: new Array(),\n                // Type: Object\n                // Default: null\n                // data source.\n                source: null,\n                // Type: Number\n                // Default: 15\n                // gets or sets the scrollbars size.\n                scrollBarSize: $.jqx.utilities.scrollBarSize,\n                // Type: Boolean\n                // Default: true\n                // enables/disables the hover state.\n                enableHover: true,\n                // Type: Boolean\n                // Default: true\n                // enables/disables the selection.\n                enableSelection: true,\n                // gets the visible items. // this property is internal for the listbox.\n                visualItems: new Array(),\n                // gets the groups. // this property is internal for the listbox.\n                groups: new Array(),\n                // Type: Boolean\n                // Default: true\n                // gets or sets whether the items width should be equal to the listbox's width.\n                equalItemsWidth: true,\n                // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.\n                itemHeight: -1,\n                // this property is internal for the listbox.\n                visibleItems: new Array(),\n                // Type: String\n                // Default: Group\n                // represents the text of the empty group. This is displayed only when the items are not loaded from html select element.\n                emptyGroupText: 'Group',\n                // Type: Boolean\n                // Default: false\n                // Gets or sets whether the listbox checkboxes have three states - checked, unchecked and indeterminate.\n                hasThreeStates: false,\n                // Type: Boolean\n                // Default: false\n                // Gets or sets whether the listbox's height is equal to the sum of its items height\n                autoHeight: false,\n                autoItemsHeight: false,\n                // represents the listbox's events.\n                // Type: Boolean\n                // Default: true\n                // Gets or sets whether the listbox items are with rounded corners.\n                roundedcorners: true,\n                touchMode: 'auto',\n                displayMember: \"\",\n                groupMember: \"\",\n                valueMember: \"\",\n                searchMember: \"\",\n                // Type: String\n                // Default: startswithignorecase\n                // Possible Values: 'none, 'contains', 'containsignorecase', 'equals', 'equalsignorecase', 'startswithignorecase', 'startswith', 'endswithignorecase', 'endswith'\n                searchMode: 'startswithignorecase',\n                incrementalSearch: true,\n                incrementalSearchDelay: 1000,\n                incrementalSearchKeyDownDelay: 300,\n                allowDrag: false,\n                allowDrop: true,\n                // Possible values: 'none, 'default', 'copy'\n                dropAction: 'default',\n                touchModeStyle: 'auto',\n                keyboardNavigation: true,\n                enableMouseWheel: true,\n                multipleextended: false,\n                selectedValues: new Array(),\n                emptyString: \"\",\n                rtl: false,\n                rendered: null,\n                renderer: null,\n                dragStart: null,\n                dragEnd: null,\n                focusable: true,\n                ready: null,\n                _checkForHiddenParent: true,\n                autoBind: true,\n                _renderOnDemand: false,\n                filterable: false,\n                filterHeight: 30,\n                filterPlaceHolder: \"Looking for\",\n                filterDelay: 100,\n                filterChange: null,\n                aria: {\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                events: [\n                // triggered when the user selects an item.\n                'select',\n                // triggered when the user unselects an item.\n                'unselect',\n                // triggered when the selection is changed.\n                'change',\n                // triggered when the user checks or unchecks an item.\n                'checkChange',\n                // triggered when the user drags an item.\n                'dragStart',\n                // triggered when the user drops an item.\n                'dragEnd',\n                // triggered when the binding is completed.\n                'bindingComplete',\n                // triggered when a new item is added.\n                'itemAdd',\n                // triggered when a new item is removed.\n                'itemRemove',\n                // triggered when a new item is updated.\n                'itemUpdate']\n              };\n              if (this === $.jqx._jqxListBox.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var self = this;\n              if ($.jqx.utilities.scrollBarSize != 15) {\n                self.scrollBarSize = $.jqx.utilities.scrollBarSize;\n              }\n              if (self.width == null) self.width = 200;\n              if (self.height == null) self.height = 200;\n              if (self.isMaterialized()) {\n                var gridStyle = window.getComputedStyle(self.element);\n                var rowHeight = gridStyle.getPropertyValue('--jqx-list-item-height');\n                if (rowHeight && this.itemHeight === -1) {\n                  this.itemHeight = parseInt(rowHeight);\n                }\n              }\n              self.renderListBox();\n              var that = self;\n              $.jqx.utilities.resize(self.host, function () {\n                that._updateSize();\n              }, false, self._checkForHiddenParent);\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._updateSize();\n            },\n            render: function () {\n              this.renderListBox();\n              this.refresh();\n            },\n            renderListBox: function () {\n              var self = this;\n              var nodeName = self.element.nodeName.toLowerCase();\n              if (nodeName == \"select\" || nodeName == \"ul\" || nodeName == \"ol\") {\n                self.field = self.element;\n                if (self.field.className) {\n                  self._className = self.field.className;\n                }\n                var properties = {\n                  'title': self.field.title\n                };\n                if (self.field.id.length) {\n                  properties.id = self.field.id.replace(/[^\\w]/g, '_') + \"_jqxListBox\";\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_jqxListBox\";\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                if (!self.width) {\n                  self.width = $(self.field).width();\n                }\n                if (!self.height) {\n                  self.height = $(self.field).outerHeight();\n                }\n                self.element.style.cssText = self.field.style.cssText;\n                $(self.field).hide().after(wrapper);\n                var data = self.host.data();\n                self.host = wrapper;\n                self.host.data(data);\n                self.element = wrapper[0];\n                self.element.id = self.field.id;\n                self.field.id = properties.id;\n                if (self._className) {\n                  self.host.addClass(self._className);\n                  $(self.field).removeClass(self._className);\n                }\n                if (self.field.tabIndex) {\n                  var tabIndex = self.field.tabIndex;\n                  self.field.tabIndex = -1;\n                  self.element.tabIndex = tabIndex;\n                }\n              } else {\n                if (self.host.find('li').length > 0 || self.host.find('option').length > 0) {\n                  var result = $.jqx.parseSourceTag(self.element);\n                  self.source = result.items;\n                }\n              }\n              self.element.innerHTML = \"\";\n              var self = self;\n              var className = self.element.className;\n              className += \" \" + self.toThemeProperty(\"jqx-listbox\");\n              className += \" \" + self.toThemeProperty(\"jqx-reset\");\n              className += \" \" + self.toThemeProperty(\"jqx-rc-all\");\n              className += \" \" + self.toThemeProperty(\"jqx-widget\");\n              className += \" \" + self.toThemeProperty(\"jqx-widget-content\");\n              self.element.className = className;\n              var isPercentage = false;\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (this.element.offsetWidth === 0) {\n                borderSize = 2;\n              }\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              if (self.width != null && self.width.toString().indexOf(\"%\") != -1) {\n                self.host.width(self.width);\n                if (borderSize > 0) {\n                  this.host.css('box-sizing', 'border-box');\n                }\n                isPercentage = true;\n              }\n              if (self.height != null && self.height.toString().indexOf(\"%\") != -1) {\n                self.host.height(self.height);\n                if (self.host.height() == 0) {\n                  self.host.height(200);\n                }\n                isPercentage = true;\n              }\n              if (self.width != null && self.width.toString().indexOf(\"px\") != -1) {\n                self.element.style.width = parseInt(self.width) - borderSize + 'px';\n              } else if (self.width != undefined && !isNaN(self.width)) {\n                self.element.style.width = parseInt(self.width) - borderSize + 'px';\n              }\n              ;\n              if (self.height != null && self.height.toString().indexOf(\"px\") != -1) {\n                self.element.style.height = parseInt(self.height) - borderSize + 'px';\n              } else if (self.height != undefined && !isNaN(self.height)) {\n                self.element.style.height = parseInt(self.height) - borderSize + 'px';\n              }\n              ;\n              if (self.multiple || self.multipleextended || self.checkboxes) {\n                $.jqx.aria(self, \"aria-multiselectable\", true);\n              } else {\n                $.jqx.aria(self, \"aria-multiselectable\", false);\n              }\n              var listBoxStructure = \"<div style='-webkit-appearance: none; background: transparent; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>\" + \"<div style='-webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>\" + \"<div id='filter\" + self.element.id + \"' style='display: none; visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><input style='position: absolute;'/></div>\" + \"<div id='listBoxContent' style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='verticalScrollBar\" + self.element.id + \"' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='horizontalScrollBar\" + self.element.id + \"' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/>\" + \"</div>\" + \"</div>\";\n              self.host.attr('role', 'listbox');\n              self.element.innerHTML = listBoxStructure;\n              if (self._checkForHiddenParent) {\n                self._addInput();\n                if (!self.host.attr('tabIndex')) {\n                  self.host.attr('tabIndex', 1);\n                }\n              }\n              self.filter = $(self.element.firstChild.firstChild.firstChild);\n              self.filterInput = $(self.filter[0].firstChild);\n              self.filterInput.attr('placeholder', self.filterPlaceHolder);\n              self.filterInput.addClass(self.toThemeProperty('jqx-widget jqx-listbox-filter-input jqx-input jqx-rc-all'));\n              self.addHandler(self.filterInput, 'keyup.textchange', function (event) {\n                if (event.keyCode == 13) {\n                  self._search(event);\n                } else {\n                  if (self.filterDelay > 0) {\n                    if (self._filterTimer) clearTimeout(self._filterTimer);\n                    self._filterTimer = setTimeout(function () {\n                      self._search(event);\n                    }, self.filterDelay);\n                  }\n                }\n                event.stopPropagation();\n              });\n              var verticalScrollBar = $(self.element.firstChild.firstChild.firstChild.nextSibling.nextSibling);\n              if (!self.host.jqxButton) {\n                throw new Error('jqxListBox: Missing reference to jqxbuttons.js.');\n                return;\n              }\n              if (!verticalScrollBar.jqxScrollBar) {\n                throw new Error('jqxListBox: Missing reference to jqxscrollbar.js.');\n                return;\n              }\n              var largestep = parseInt(self.host.height()) / 2;\n              if (largestep == 0) largestep = 10;\n              self.vScrollBar = verticalScrollBar.jqxScrollBar({\n                _initialLayout: true,\n                'vertical': true,\n                rtl: self.rtl,\n                theme: self.theme,\n                touchMode: self.touchMode,\n                largestep: largestep\n              });\n              var horizontalScrollBar = $(self.element.firstChild.firstChild.firstChild.nextSibling.nextSibling.nextSibling);\n              self.hScrollBar = horizontalScrollBar.jqxScrollBar({\n                _initialLayout: true,\n                'vertical': false,\n                rtl: self.rtl,\n                touchMode: self.touchMode,\n                theme: self.theme\n              });\n              self.content = $(self.element.firstChild.firstChild.firstChild.nextSibling);\n              self.content.addClass(self.toThemeProperty('jqx-listbox-content-element'));\n              self.content[0].id = 'listBoxContent' + self.element.id;\n              self.bottomRight = $(self.element.firstChild.firstChild.firstChild.nextSibling.nextSibling.nextSibling.nextSibling).addClass(self.toThemeProperty('jqx-listbox-bottomright')).addClass(self.toThemeProperty('jqx-scrollbar-state-normal'));\n              self.bottomRight[0].id = \"bottomRight\" + self.element.id;\n              self.vScrollInstance = $.data(self.vScrollBar[0], 'jqxScrollBar').instance;\n              self.hScrollInstance = $.data(self.hScrollBar[0], 'jqxScrollBar').instance;\n              if (self.isTouchDevice()) {\n                if (!($.jqx.browser.msie && $.jqx.browser.version < 9)) {\n                  var overlayContent = $(\"<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\");\n                  self.content.parent().append(overlayContent);\n                  self.overlayContent = self.host.find('.overlay');\n                  if (self.filterable) {\n                    self.overlayContent.css('top', '30px');\n                  }\n                }\n              }\n              self._updateTouchScrolling();\n              self.host.addClass('jqx-disableselect');\n              if (self.host.jqxDragDrop) {\n                window.jqxListBoxDragDrop();\n              }\n            },\n            _highlight: function (label, searchstring) {\n              var query = searchstring.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n              return label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n                return '<b>' + match + '</b>';\n              });\n            },\n            _addInput: function () {\n              var name = this.host.attr('name');\n              if (name) {\n                this.host.attr('name', \"\");\n              }\n              this.input = $(\"<input type='hidden'/>\");\n              this.host.append(this.input);\n              this.input.attr('name', name);\n            },\n            _updateTouchScrolling: function () {\n              var self = this;\n              if (this.isTouchDevice()) {\n                self.enableHover = false;\n                var element = this.overlayContent ? this.overlayContent : this.content;\n                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchstart') + '.touchScroll');\n                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchmove') + '.touchScroll');\n                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchend') + '.touchScroll');\n                this.removeHandler($(element), 'touchcancel.touchScroll');\n                $.jqx.mobile.touchScroll(element, self.vScrollInstance.max, function (left, top) {\n                  if (top != null && self.vScrollBar.css('visibility') != 'hidden') {\n                    var oldValue = self.vScrollInstance.value;\n                    self.vScrollInstance.setPosition(top);\n                    self._lastScroll = new Date();\n                  }\n                  if (left != null && self.hScrollBar.css('visibility') != 'hidden') {\n                    var oldValue = self.hScrollInstance.value;\n                    self.hScrollInstance.setPosition(left);\n                    self._lastScroll = new Date();\n                  }\n                }, this.element.id, this.hScrollBar, this.vScrollBar);\n                if (self.vScrollBar.css('visibility') != 'visible' && self.hScrollBar.css('visibility') != 'visible') {\n                  $.jqx.mobile.setTouchScroll(false, this.element.id);\n                } else {\n                  $.jqx.mobile.setTouchScroll(true, this.element.id);\n                }\n                this._arrange();\n              }\n            },\n            isTouchDevice: function () {\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (this.touchMode == true) {\n                if (this.touchDevice) return true;\n                if ($.jqx.browser.msie && $.jqx.browser.version < 9) return false;\n                this.touchDevice = true;\n                isTouchDevice = true;\n                $.jqx.mobile.setMobileSimulator(this.element);\n              } else if (this.touchMode == false) {\n                isTouchDevice = false;\n              }\n              if (isTouchDevice && this.touchModeStyle != false) {\n                this.scrollBarSize = $.jqx.utilities.touchScrollBarSize;\n              }\n              if (isTouchDevice) {\n                this.host.addClass(this.toThemeProperty('jqx-touch'));\n              }\n              return isTouchDevice;\n            },\n            beginUpdate: function () {\n              this.updatingListBox = true;\n            },\n            endUpdate: function () {\n              this.updatingListBox = false;\n              if (this.allowDrag && this._enableDragDrop || this.virtualSize && this.virtualSize.height < 10 + this.host.height()) {\n                this._addItems(true);\n              } else {\n                this._addItems(false);\n              }\n              this._renderItems();\n              if (this.allowDrag && this._enableDragDrop) {\n                this._enableDragDrop();\n              }\n            },\n            beginUpdateLayout: function () {\n              this.updating = true;\n            },\n            resumeUpdateLayout: function () {\n              this.updating = false;\n              this.vScrollInstance.value = 0;\n              this._render(false);\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object._cachedItemHtml = new Array();\n                object.refresh();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (oldvalue == value) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"_renderOnDemand\") {\n                object._render(false, true);\n                if (object.selectedIndex != -1) {\n                  var tmpIndex = object.selectedIndex;\n                  object.selectedIndex = -1;\n                  object._stopEvents = true;\n                  object.selectIndex(tmpIndex, false, true);\n                  if (object.selectedIndex == -1) {\n                    object.selectedIndex = tmpIndex;\n                  }\n                  object._stopEvents = false;\n                }\n              }\n              if (key == \"filterable\") {\n                object.refresh();\n              }\n              if (key == \"filterHeight\") {\n                object._arrange();\n              }\n              if (key == \"filterPlaceHolder\") {\n                object.filterInput.attr('placeholder', value);\n              }\n              if (key == \"renderer\") {\n                object._cachedItemHtml = new Array();\n                object.refresh();\n              }\n              if (key == \"itemHeight\" || key === \"checkboxSize\") {\n                object.refresh();\n              }\n              if (key == 'source' || key == 'checkboxes') {\n                if (value == null && oldvalue && oldvalue.unbindBindingUpdate) {\n                  oldvalue.unbindBindingUpdate(object.element.id);\n                  oldvalue.unbindDownloadComplete(object.element.id);\n                }\n                object.clearSelection();\n                object.refresh();\n              }\n              if (key == 'scrollBarSize' || key == 'equalItemsWidth') {\n                if (value != oldvalue) {\n                  object._updatescrollbars();\n                }\n              }\n              if (key == 'disabled') {\n                object._renderItems();\n                object.vScrollBar.jqxScrollBar({\n                  disabled: value\n                });\n                object.hScrollBar.jqxScrollBar({\n                  disabled: value\n                });\n              }\n              if (key == \"touchMode\" || key == \"rtl\") {\n                object._removeHandlers();\n                object.vScrollBar.jqxScrollBar({\n                  touchMode: value\n                });\n                object.hScrollBar.jqxScrollBar({\n                  touchMode: value\n                });\n                if (key == \"touchMode\") {\n                  if (!($.jqx.browser.msie && $.jqx.browser.version < 9)) {\n                    var overlayContent = $(\"<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\");\n                    object.content.parent().append(overlayContent);\n                    object.overlayContent = object.host.find('.overlay');\n                  }\n                }\n                if (object.filterable && object.filterInput) {\n                  if (key == \"rtl\" && value) {\n                    object.filterInput.addClass(object.toThemeProperty('jqx-rtl'));\n                  } else if (key == \"rtl\" && !value) {\n                    object.filterInput.removeClass(object.toThemeProperty('jqx-rtl'));\n                  }\n                  object._arrange();\n                }\n                object._updateTouchScrolling();\n                object._addHandlers();\n                object._render(false);\n              }\n              if (!this.updating) {\n                if (key == \"width\" || key == \"height\") {\n                  object._updateSize();\n                }\n              }\n              if (key == 'theme') {\n                if (oldvalue != value) {\n                  object.hScrollBar.jqxScrollBar({\n                    theme: object.theme\n                  });\n                  object.vScrollBar.jqxScrollBar({\n                    theme: object.theme\n                  });\n                  object.host.removeClass();\n                  object.host.addClass(object.toThemeProperty(\"jqx-listbox\"));\n                  object.host.addClass(object.toThemeProperty(\"jqx-widget\"));\n                  object.host.addClass(object.toThemeProperty(\"jqx-widget-content\"));\n                  object.host.addClass(object.toThemeProperty(\"jqx-reset\"));\n                  object.host.addClass(object.toThemeProperty(\"jqx-rc-all\"));\n                  object.refresh();\n                }\n              }\n              if (key == 'selectedIndex') {\n                object.clearSelection();\n                object.selectIndex(value, true);\n              }\n              if (key == \"displayMember\" || key == \"valueMember\") {\n                if (oldvalue != value) {\n                  var oldSelectedIndex = object.selectedIndex;\n                  object.refresh();\n                  object.selectedIndex = oldSelectedIndex;\n                  object.selectedIndexes[oldSelectedIndex] = oldSelectedIndex;\n                }\n                object._renderItems();\n              }\n              if (key == 'autoHeight') {\n                if (oldvalue != value) {\n                  object._render(false);\n                } else {\n                  object._updatescrollbars();\n                  object._renderItems();\n                }\n              }\n              if (object._checkForHiddenParent && $.jqx.isHidden(object.host)) {\n                $.jqx.utilities.resize(this.host, function () {\n                  object._updateSize();\n                }, false, object._checkForHiddenParent);\n              }\n            },\n            loadFromSelect: function (id) {\n              if (id == null) return;\n              var searchElementId = '#' + id;\n              var selectElement = $(searchElementId);\n              if (selectElement.length > 0) {\n                var result = $.jqx.parseSourceTag(selectElement[0]);\n                var optionItems = result.items;\n                var selectedOption = result.index;\n                this.source = optionItems;\n                this.fromSelect = true;\n                this.clearSelection();\n                this.selectedIndex = selectedOption;\n                this.selectedIndexes[this.selectedIndex] = this.selectedIndex;\n                this.refresh();\n              }\n            },\n            invalidate: function () {\n              this._cachedItemHtml = [];\n              this._renderItems();\n              this.virtualSize = null;\n              this._updateSize();\n            },\n            refresh: function (initialRefresh) {\n              var me = this;\n              if (this.vScrollBar == undefined) {\n                return;\n              }\n              this.itemHeight = parseInt(this.itemHeight);\n              this._cachedItemHtml = [];\n              this.visibleItems = new Array();\n              var selectInitialItem = function (initialRefresh) {\n                if (initialRefresh == true) {\n                  if (me.selectedIndex != -1) {\n                    var tmpIndex = me.selectedIndex;\n                    me.selectedIndex = -1;\n                    me._stopEvents = true;\n                    me.selectIndex(tmpIndex, false, true);\n                    if (me.selectedIndex == -1) {\n                      me.selectedIndex = tmpIndex;\n                    }\n                    me._stopEvents = false;\n                  }\n                }\n              };\n              if (this.itemswrapper != null) {\n                this.itemswrapper.remove();\n                this.itemswrapper = null;\n              }\n              if ($.jqx.dataAdapter && this.source != null && this.source._source) {\n                this.databind(this.source, initialRefresh);\n                selectInitialItem(initialRefresh);\n                return;\n              }\n              if (this.autoBind || !this.autoBind && !initialRefresh) {\n                if (this.field) {\n                  this.loadSelectTag();\n                }\n                this.items = this.loadItems(this.source);\n              }\n              this._render(false, initialRefresh == true);\n              selectInitialItem(initialRefresh);\n              this._raiseEvent('6');\n            },\n            loadSelectTag: function () {\n              var result = $.jqx.parseSourceTag(this.field);\n              this.source = result.items;\n              if (this.selectedIndex == -1) this.selectedIndex = result.index;\n            },\n            _render: function (ensurevisible, initialRefresh) {\n              if (this._renderOnDemand) {\n                this.visibleItems = new Array();\n                this.renderedVisibleItems = new Array();\n                this._renderItems();\n                return;\n              }\n              this._addItems();\n              this._renderItems();\n              this.vScrollInstance.setPosition(0);\n              this._cachedItemHtml = new Array();\n              if (ensurevisible == undefined || ensurevisible) {\n                if (this.items != undefined && this.items != null) {\n                  if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {\n                    this.selectIndex(this.selectedIndex, true, true, true);\n                  }\n                }\n              }\n              if (this.allowDrag && this._enableDragDrop) {\n                this._enableDragDrop();\n                if (this.isTouchDevice()) {\n                  this._removeHandlers();\n                  if (this.overlayContent) {\n                    this.overlayContent.remove();\n                    this.overlayContent = null;\n                  }\n                  this._updateTouchScrolling();\n                  this._addHandlers();\n                  return;\n                }\n              }\n              this._updateTouchScrolling();\n              if (this.rendered) {\n                this.rendered();\n              }\n              if (this.ready) {\n                this.ready();\n              }\n            },\n            _hitTest: function (hitLeft, hitTop) {\n              if (this.filterable) {\n                hitTop -= this.filterHeight;\n                if (hitTop < 0) hitTop = 0;\n              }\n              var top = parseInt(this.vScrollInstance.value);\n              var firstIndex = this._searchFirstVisibleIndex(hitTop + top, this.renderedVisibleItems);\n              if (this.renderedVisibleItems[firstIndex] != undefined && this.renderedVisibleItems[firstIndex].isGroup) return null;\n              if (this.renderedVisibleItems.length > 0) {\n                var lastItem = this.renderedVisibleItems[this.renderedVisibleItems.length - 1];\n                if (lastItem.height + lastItem.top < hitTop + top) {\n                  return null;\n                }\n              }\n              firstIndex = this._searchFirstVisibleIndex(hitTop + top);\n              return this.visibleItems[firstIndex];\n              return null;\n            },\n            _searchFirstVisibleIndex: function (value, collection) {\n              if (value == undefined) {\n                value = parseInt(this.vScrollInstance.value);\n              }\n              var min = 0;\n              if (collection == undefined || collection == null) {\n                collection = this.visibleItems;\n              }\n              var max = collection.length;\n              while (min <= max) {\n                var mid = parseInt((min + max) / 2);\n                var item = collection[mid];\n                if (item == undefined) break;\n                if (item.initialTop > value && item.initialTop + item.height > value) {\n                  max = mid - 1;\n                } else if (item.initialTop < value && item.initialTop + item.height <= value) {\n                  min = mid + 1;\n                } else {\n                  return mid;\n                  break;\n                }\n              }\n              return 0;\n            },\n            _renderItems: function () {\n              if (this.items == undefined || this.items.length == 0) {\n                this.visibleItems = new Array();\n                return;\n              }\n              if (this.updatingListBox == true) return;\n              var touchDevice = this.isTouchDevice();\n              var vScrollInstance = this.vScrollInstance;\n              var hScrollInstance = this.hScrollInstance;\n              var top = parseInt(vScrollInstance.value);\n              var left = parseInt(hScrollInstance.value);\n              if (this.rtl) {\n                if (this.hScrollBar[0].style.visibility != 'hidden') {\n                  left = hScrollInstance.max - left;\n                }\n              }\n              var itemsLength = this.items.length;\n              var hostWidth = this.host.width();\n              var contentWidth = parseInt(this.content[0].style.width);\n              var width = contentWidth + parseInt(hScrollInstance.max);\n              var vScrollBarWidth = parseInt(this.vScrollBar[0].style.width) + 2;\n              if (this.vScrollBar[0].style.visibility == 'hidden') {\n                vScrollBarWidth = 0;\n              }\n              if (this.hScrollBar[0].style.visibility != 'visible') {\n                width = contentWidth;\n              }\n              var virtualItemsCount = this._getVirtualItemsCount();\n              var renderCollection = new Array();\n              var y = 0;\n              var hostHeight = parseInt(this.element.style.height) + 2;\n              if (this.element.style.height.indexOf('%') != -1) {\n                hostHeight = this.host.outerHeight();\n              }\n              if (isNaN(hostHeight)) {\n                hostHeight = 0;\n              }\n              var maxWidth = 0;\n              var visibleIndex = 0;\n              var renderIndex = 0;\n              if (vScrollInstance.value == 0 || this.visibleItems.length == 0) {\n                for (var indx = 0; indx < this.items.length; indx++) {\n                  var item = this.items[indx];\n                  if (item.visible) {\n                    item.top = -top;\n                    item.initialTop = -top;\n                    if (!item.isGroup && item.visible) {\n                      this.visibleItems[visibleIndex++] = item;\n                      item.visibleIndex = visibleIndex - 1;\n                    }\n                    this.renderedVisibleItems[renderIndex++] = item;\n                    item.left = -left;\n                    var bottom = item.top + item.height;\n                    if (bottom >= 0 && item.top - item.height <= hostHeight) {\n                      renderCollection[y++] = {\n                        index: indx,\n                        item: item\n                      };\n                    }\n                    top -= item.height;\n                    top--;\n                  }\n                }\n              }\n              var firstIndex = top > 0 ? this._searchFirstVisibleIndex(this.vScrollInstance.value, this.renderedVisibleItems) : 0;\n              var initialHeight = 0;\n              y = 0;\n              var scrollValue = this.vScrollInstance.value;\n              var iterations = 0;\n              while (initialHeight < 100 + hostHeight) {\n                var item = this.renderedVisibleItems[firstIndex];\n                if (item == undefined) break;\n                if (item.visible) {\n                  item.left = -left;\n                  var bottom = item.top + item.height - scrollValue;\n                  if (bottom >= 0 && item.initialTop - scrollValue - item.height <= 2 * hostHeight) {\n                    renderCollection[y++] = {\n                      index: firstIndex,\n                      item: item\n                    };\n                  }\n                }\n                firstIndex++;\n                if (item.visible) {\n                  initialHeight += item.initialTop - scrollValue + item.height - initialHeight;\n                }\n                iterations++;\n                if (iterations > this.items.length - 1) break;\n              }\n              if (this._renderOnDemand) {\n                return;\n              }\n              var listItemNormalClass = this.toThemeProperty('jqx-listitem-state-normal') + ' ' + this.toThemeProperty('jqx-item');\n              var listItemGroupClass = this.toThemeProperty('jqx-listitem-state-group');\n              var listItemDisabledClass = this.toThemeProperty('jqx-listitem-state-disabled') + ' ' + this.toThemeProperty('jqx-fill-state-disabled');\n              if (this.checkboxes) {\n                listItemNormalClass += ' ' + 'checkboxes';\n              }\n              var middle = 0;\n              var me = this;\n              for (var indx = 0; indx < this.visualItems.length; indx++) {\n                var itemElement = this.visualItems[indx];\n                var hideItem = function () {\n                  var spanElement = itemElement[0].firstChild; // itemElement.find('#spanElement');\n                  if (me.checkboxes) {\n                    spanElement = itemElement[0].lastChild;\n                  }\n                  if (spanElement != null) {\n                    spanElement.style.visibility = 'hidden';\n                    spanElement.className = \"\";\n                  }\n                  if (me.checkboxes) {\n                    var checkbox = itemElement[0].firstChild;\n                    checkbox.style.visibility = \"hidden\";\n                  }\n                };\n                if (indx < renderCollection.length) {\n                  var item = renderCollection[indx].item;\n                  if (item.initialTop - scrollValue >= hostHeight) {\n                    hideItem();\n                    continue;\n                  }\n                  var spanElement = $(itemElement[0].firstChild); // itemElement.find('#spanElement');\n                  if (this.checkboxes) {\n                    spanElement = $(itemElement[0].lastChild);\n                  }\n                  if (spanElement.length == 0) continue;\n                  if (spanElement[0] == null) continue;\n                  spanElement[0].className = \"\";\n                  spanElement[0].style.display = \"block\";\n                  spanElement[0].style.visibility = \"inherit\";\n                  var classNameBuilder = \"\";\n                  //                    spanElement.css({ 'display': 'block', 'visibility': 'inherit' });\n\n                  if (!item.isGroup && !this.selectedIndexes[item.index] >= 0) {\n                    classNameBuilder = listItemNormalClass;\n                    //spanElement.addClass(listItemNormalClass);\n                  } else {\n                    classNameBuilder = listItemGroupClass;\n                    //spanElement.addClass(listItemGroupClass);\n                  }\n                  if (item.disabled || this.disabled) {\n                    classNameBuilder += \" \" + listItemDisabledClass;\n                    //spanElement.addClass(listItemDisabledClass);\n                  }\n                  if (this.roundedcorners) {\n                    classNameBuilder += \" \" + this.toThemeProperty('jqx-rc-all');\n                    //spanElement.addClass(this.toThemeProperty('jqx-rc-all'));\n                  }\n                  if (touchDevice) {\n                    classNameBuilder += \" \" + this.toThemeProperty('jqx-listitem-state-normal-touch');\n                  }\n                  spanElement[0].className = classNameBuilder;\n                  if (this.renderer) {\n                    if (!item.key) item.key = this.generatekey();\n                    if (!this._cachedItemHtml) this._cachedItemHtml = new Array();\n                    if (this._cachedItemHtml[item.key]) {\n                      if (spanElement[0].innerHTML != this._cachedItemHtml[item.key]) {\n                        spanElement[0].innerHTML = this._cachedItemHtml[item.key];\n                      }\n                    } else {\n                      var html = this.renderer(item.index, item.label, item.value);\n                      spanElement[0].innerHTML = html;\n                      this._cachedItemHtml[item.key] = spanElement[0].innerHTML;\n                    }\n                  } else {\n                    if (this.itemHeight !== -1) {\n                      var paddingAndBorder = 2 + 2 * parseInt(spanElement.css('padding-top'));\n                      spanElement[0].style.lineHeight = item.height - paddingAndBorder + 'px';\n                      spanElement.css('vertical-align', 'middle');\n                    }\n                    if (item.html != null && item.html.toString().length > 0) {\n                      spanElement[0].innerHTML = item.html;\n                    } else if (item.label != null || item.value != null) {\n                      if (item.label != null) {\n                        if (spanElement[0].innerHTML !== item.label) {\n                          spanElement[0].innerHTML = item.label;\n                        }\n                        if ($.trim(item.label) == \"\") {\n                          spanElement[0].innerHTML = this.emptyString;\n                          if (this.emptyString == \"\") {\n                            spanElement[0].style.height = item.height - 8 + 'px';\n                          }\n                        }\n                        if (!this.incrementalSearch && !item.disabled) {\n                          if (this.searchString != undefined && this.searchString != \"\") {\n                            spanElement[0].innerHTML = this._highlight(item.label.toString(), this.searchString);\n                          }\n                        }\n                      } else if (item.label === null) {\n                        spanElement[0].innerHTML = this.emptyString;\n                        if (this.emptyString == \"\") {\n                          spanElement[0].style.height = item.height - 8 + 'px';\n                        }\n                      } else {\n                        if (spanElement[0].innerHTML !== item.value) {\n                          spanElement[0].innerHTML = item.value;\n                        } else if (item.label == \"\") {\n                          spanElement[0].innerHTML = \" \";\n                        }\n                      }\n                    } else if (item.label == \"\" || item.label == null) {\n                      spanElement[0].innerHTML = \"\";\n                      spanElement[0].style.height = item.height - 8 + 'px';\n                    }\n                  }\n                  itemElement[0].style.left = item.left + 'px';\n                  itemElement[0].style.top = item.initialTop - scrollValue + 'px';\n                  item.element = spanElement[0];\n                  if (this.isMaterialized() && !this.renderer) {\n                    if (this._checkForHiddenParent) {\n                      $(item.element).addClass('ripple');\n                      $.jqx.ripple($(item.element));\n                    }\n                  }\n\n                  //  $.data(spanElement[0], 'item', item);\n                  if (item.title) {\n                    spanElement[0].title = item.title;\n                  }\n                  if (this.equalItemsWidth && !item.isGroup) {\n                    if (maxWidth == 0) {\n                      var itemWidth = parseInt(width);\n                      var diff = parseInt(spanElement.outerWidth()) - parseInt(spanElement.width());\n                      itemWidth -= diff;\n                      var borderSize = 1;\n                      if (borderSize != null) {\n                        borderSize = parseInt(borderSize);\n                      } else borderSize = 0;\n                      if (this.host.css('box-sizing') === 'border-box') {\n                        itemWidth -= 2;\n                      }\n                      //     itemWidth -= 2 * borderSize;\n                      maxWidth = itemWidth;\n                      if (this.checkboxes && this.hScrollBar[0].style.visibility == 'hidden') {\n                        maxWidth -= this.checkboxSize + 13;\n                      }\n                    }\n                    if (contentWidth > this.virtualSize.width) {\n                      spanElement[0].style.width = maxWidth + 'px';\n                      item.width = maxWidth;\n                    } else {\n                      spanElement[0].style.width = -4 + this.virtualSize.width + 'px';\n                      item.width = this.virtualSize.width - 4;\n                    }\n                  } else {\n                    if (spanElement.width() < this.host.width()) {\n                      spanElement.width(this.host.width() - 2);\n                    }\n                  }\n                  if (this.rtl) {\n                    spanElement[0].style.textAlign = 'right';\n                  }\n                  if (this.autoItemsHeight) {\n                    spanElement[0].style.whiteSpace = 'pre-line';\n                    spanElement.width(maxWidth);\n                    item.width = maxWidth;\n                  }\n                  middle = 0;\n                  if (this.checkboxes && !item.isGroup) {\n                    if (middle == 0) {\n                      middle = (item.height - this.checkboxSize - 3) / 2;\n                      middle = parseInt(middle);\n                      middle++;\n                    }\n                    var checkbox = $(itemElement.children()[0]);\n                    checkbox[0].item = item;\n                    if (!this.rtl) {\n                      var checkSize = this.checkboxSize + 9;\n                      if (spanElement[0].style.left != checkSize + 'px') {\n                        spanElement[0].style.left = checkSize + 'px';\n                      }\n                    } else {\n                      if (spanElement[0].style.left != '0px') {\n                        spanElement[0].style.left = '0px';\n                      }\n                    }\n                    if (this.rtl) {\n                      checkbox.css('left', 8 + item.width + 'px');\n                    }\n                    checkbox[0].style.top = middle + 'px';\n                    checkbox[0].style.display = 'block';\n                    checkbox[0].style.visibility = 'inherit';\n                    var checked = item.checked;\n                    var checkClass = item.checked ? \" \" + this.toThemeProperty(\"jqx-checkbox-check-checked\") : \"\";\n                    checkbox[0].setAttribute('checked', item.checked);\n                    if (checkbox[0].firstChild && checkbox[0].firstChild.firstChild && checkbox[0].firstChild.firstChild.firstChild) {\n                      if (checkbox[0].firstChild.firstChild) {\n                        if (checked) {\n                          checkbox[0].firstChild.firstChild.firstChild.className = checkClass;\n                        } else if (checked === false) {\n                          checkbox[0].firstChild.firstChild.firstChild.className = \"\";\n                        } else if (checked === null) {\n                          checkbox[0].firstChild.firstChild.firstChild.className = this.toThemeProperty(\"jqx-checkbox-check-indeterminate\");\n                        }\n                      }\n                    }\n                    if ($.jqx.ariaEnabled) {\n                      if (checked) {\n                        itemElement[0].setAttribute('aria-selected', true);\n                      } else {\n                        itemElement[0].removeAttribute('aria-selected');\n                      }\n                    }\n                  } else if (this.checkboxes) {\n                    var checkbox = $(itemElement.children()[0]);\n                    checkbox.css({\n                      'display': 'none',\n                      'visibility': 'inherit'\n                    });\n                  }\n                  if (!item.disabled && (!this.filterable && this.selectedIndexes[item.visibleIndex] >= 0 || item.selected && this.filterable)) {\n                    spanElement.addClass(this.toThemeProperty('jqx-listitem-state-selected'));\n                    spanElement.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                    if ($.jqx.ariaEnabled) {\n                      itemElement[0].setAttribute('aria-selected', true);\n                      this._activeElement = itemElement[0];\n                    }\n                  } else if (!this.checkboxes) {\n                    if ($.jqx.ariaEnabled) {\n                      itemElement[0].removeAttribute('aria-selected');\n                    }\n                  }\n                } else {\n                  hideItem();\n                }\n              }\n            },\n            escapeHTML: function (value) {\n              var entityMap = {\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                '\"': '&quot;',\n                '\\'': '&#39;',\n                '/': '&#x2F;',\n                '`': '&#x60;',\n                '=': '&#x3D;'\n              };\n              return String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n                return entityMap[s];\n              });\n            },\n            sanitizeHTML: function (value) {\n              var that = this;\n              var regExp = new RegExp('<\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)[^>]*>(.*?)<\\s*/\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)>', 'ig');\n              var result = String(value).replace(regExp, function (s) {\n                return that.escapeHTML(s);\n              });\n              return result;\n            },\n            escape_HTML: function (html_str) {\n              html_str = '' + html_str;\n              if (html_str && (html_str.indexOf('onclick') >= 0 || html_str.indexOf('onload') >= 0 || html_str.indexOf('onerror') >= 0)) {\n                return this.escapeHTML(html_str);\n              }\n              var sanitized = this.sanitizeHTML(html_str);\n              return sanitized;\n            },\n            generatekey: function () {\n              var S4 = function () {\n                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n              };\n              return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n            },\n            _calculateVirtualSize: function (ownerHeight) {\n              if (this._renderOnDemand) return;\n              var width = 0;\n              var height = 2;\n              var currentItem = 0;\n              var spanElement = document.createElement('span');\n              if (this.equalItemsWidth) {\n                $(spanElement).css('float', 'left');\n              }\n              spanElement.style.whiteSpace = \"pre\";\n              var itemsPerPage = 0;\n              var hostHeight = undefined === ownerHeight ? this.host.outerHeight() : ownerHeight + 2;\n              document.body.appendChild(spanElement);\n              var length = this.items.length;\n              var w = this.host.width();\n              if (this.autoItemsHeight) {\n                w -= 10;\n                if (this.vScrollBar.css('visibility') != 'hidden') w -= 20;\n              }\n              if (this.autoItemsHeight || this.renderer || this.groups.length >= 1 || length > 0 && this.items[0].html != null && this.items[0].html != \"\") {\n                for (var currentItem = 0; currentItem < length; currentItem++) {\n                  var item = this.items[currentItem];\n                  if (item.isGroup && item.label == '' && item.html == '') {\n                    continue;\n                  }\n                  if (!item.visible) continue;\n                  var className = \"\";\n                  if (!item.isGroup) {\n                    className += this.toThemeProperty('jqx-widget jqx-listitem-state-normal jqx-rc-all');\n                  } else {\n                    className += this.toThemeProperty('jqx-listitem-state-group jqx-rc-all');\n                  }\n                  className += \" \" + this.toThemeProperty('jqx-fill-state-normal');\n                  if (this.isTouchDevice()) {\n                    className += \" \" + this.toThemeProperty('jqx-touch');\n                  }\n                  spanElement.className = className;\n                  if (this.autoItemsHeight) {\n                    spanElement.style.whiteSpace = 'pre-line';\n                    var checkSize = this.checkboxSize + 9;\n                    var checkWidth = this.checkboxes ? -checkSize : 0;\n                    spanElement.style.width = checkWidth + w + 'px';\n                  }\n                  if (this.renderer) {\n                    var html = this.renderer(item.index, item.label, item.value);\n                    spanElement.innerHTML = html;\n                  } else {\n                    if (item.html != null && item.html.toString().length > 0) {\n                      spanElement.innerHTML = item.html;\n                    } else if (item.label != null || item.value != null) {\n                      if (item.label != null) {\n                        spanElement.innerHTML = this.escape_HTML(item.label);\n                        if (item.label == \"\") spanElement.innerHTML = \"Empty\";\n                      } else spanElement.innerHTML = this.escape_HTML(item.value);\n                    }\n                  }\n                  var spanHeight = spanElement.offsetHeight;\n                  var spanWidth = spanElement.offsetWidth;\n                  if (this.itemHeight > -1) {\n                    spanHeight = this.itemHeight;\n                  }\n                  item.height = spanHeight;\n                  item.width = spanWidth;\n                  spanHeight++;\n                  height += spanHeight;\n                  width = Math.max(width, spanWidth);\n                  if (height <= hostHeight) {\n                    itemsPerPage++;\n                  }\n                }\n              } else {\n                var height = 0;\n                var elementHeight = 0;\n                var maxText = \"\";\n                var maxTextLength = 0;\n                var oldMaxTextLength = 0;\n                var firstvisibleitem = -1;\n                for (var currentItem = 0; currentItem < length; currentItem++) {\n                  var item = this.items[currentItem];\n                  if (item.isGroup && item.label == '' && item.html == '') {\n                    continue;\n                  }\n                  if (!item.visible) continue;\n                  firstvisibleitem++;\n                  var className = \"\";\n                  if (firstvisibleitem == 0) {\n                    className += this.toThemeProperty('jqx-listitem-state-normal jqx-rc-all');\n                    className += \" \" + this.toThemeProperty('jqx-fill-state-normal');\n                    className += \" \" + this.toThemeProperty('jqx-widget');\n                    className += \" \" + this.toThemeProperty('jqx-listbox');\n                    className += \" \" + this.toThemeProperty('jqx-widget-content');\n                    if (this.isTouchDevice()) {\n                      className += \" \" + this.toThemeProperty('jqx-touch');\n                      className += \" \" + this.toThemeProperty('jqx-listitem-state-normal-touch');\n                    }\n                    spanElement.className = className;\n                    if (this.autoItemsHeight) {\n                      spanElement.style.whiteSpace = 'pre-line';\n                      var checkSize = this.checkboxSize + 9;\n                      var checkWidth = this.checkboxes ? -checkSize : 0;\n                      spanElement.style.width = checkWidth + w + 'px';\n                    }\n                    if (item.html == null || item.label == \"\" || item.label == null) {\n                      spanElement.innerHTML = \"Item\";\n                    } else {\n                      if (item.html != null && item.html.toString().length > 0) {\n                        spanElement.innerHTML = item.html;\n                      } else if (item.label != null || item.value != null) {\n                        if (item.label != null) {\n                          if (item.label.toString().match(new RegExp(\"\\\\w\")) != null || item.label.toString().match(new RegExp(\"\\\\d\")) != null) {\n                            spanElement.innerHTML = item.label;\n                          } else {\n                            spanElement.innerHTML = \"Item\";\n                          }\n                        } else spanElement.innerHTML = item.value;\n                      }\n                    }\n                    var spanHeight = 1 + spanElement.offsetHeight;\n                    if (this.itemHeight > -1) {\n                      spanHeight = this.itemHeight;\n                    }\n                    elementHeight = spanHeight;\n                  }\n                  if (maxTextLength != undefined) {\n                    oldMaxTextLength = maxTextLength;\n                  }\n                  if (item.html != null && item.html.toString().length > 0) {\n                    maxTextLength = Math.max(maxTextLength, item.html.toString().length);\n                    if (oldMaxTextLength != maxTextLength) {\n                      maxText = item.html;\n                    }\n                  } else if (item.label != null) {\n                    maxTextLength = Math.max(maxTextLength, item.label.length);\n                    if (oldMaxTextLength != maxTextLength) {\n                      maxText = item.label;\n                    }\n                  } else if (item.value != null) {\n                    maxTextLength = Math.max(maxTextLength, item.value.length);\n                    if (oldMaxTextLength != maxTextLength) {\n                      maxText = item.value;\n                    }\n                  }\n                  item.height = elementHeight;\n                  height += elementHeight;\n                  height++;\n                  if (height <= hostHeight) {\n                    itemsPerPage++;\n                  }\n                }\n                spanElement.innerHTML = maxText;\n                width = spanElement.offsetWidth;\n              }\n              height += 2;\n              if (itemsPerPage < 10) itemsPerPage = 10;\n              if (this.filterable) {\n                height += this.filterHeight;\n              }\n              height -= 4;\n              spanElement.parentNode.removeChild(spanElement);\n              return {\n                width: width,\n                height: height,\n                itemsPerPage: itemsPerPage\n              };\n            },\n            _getVirtualItemsCount: function () {\n              if (this.virtualItemsCount == 0) {\n                var virtualItemsCount = parseInt(this.host.height()) / 5;\n                if (virtualItemsCount > this.items.length) {\n                  virtualItemsCount = this.items.length;\n                }\n                return virtualItemsCount;\n              } else return this.virtualItemsCount;\n            },\n            _addItems: function (refreshUIItems) {\n              if (this._renderOnDemand) return;\n              var me = this;\n              if (me.updatingListBox == true) return;\n              if (me.items == undefined || me.items.length == 0) {\n                me.virtualSize = {\n                  width: 0,\n                  height: 0,\n                  itemsPerPage: 0\n                };\n                me._updatescrollbars();\n                me.renderedVisibleItems = new Array();\n                if (me.itemswrapper) {\n                  me.itemswrapper.children().remove();\n                }\n                return;\n              }\n              var hostHeight = me.host.height();\n              if (refreshUIItems == false) {\n                var virtualSize = me._calculateVirtualSize(hostHeight);\n                var virtualItemsCount = virtualSize.itemsPerPage * 2;\n                if (me.autoHeight) {\n                  virtualItemsCount = me.items.length;\n                }\n                me.virtualItemsCount = Math.min(virtualItemsCount, me.items.length);\n                var virtualWidth = virtualSize.width;\n                me.virtualSize = virtualSize;\n                me._updatescrollbars();\n                return;\n              }\n              var self = this;\n              var top = 0;\n              me.visibleItems = new Array();\n              me.renderedVisibleItems = new Array();\n              me._removeHandlers();\n              if (me.allowDrag && me._enableDragDrop) {\n                me.itemswrapper = null;\n              }\n              if (me.itemswrapper == null) {\n                me.content[0].innerHTML = '';\n                me.itemswrapper = $('<div style=\"outline: 0 none; overflow:hidden; width:100%; position: relative;\"></div>');\n                me.itemswrapper[0].style.height = 2 * hostHeight + \"px\";\n                me.content[0].appendChild(me.itemswrapper[0]);\n              }\n              var virtualSize = me._calculateVirtualSize(hostHeight);\n              var virtualItemsCount = virtualSize.itemsPerPage * 2;\n              if (me.autoHeight) {\n                virtualItemsCount = me.items.length;\n              }\n              me.virtualItemsCount = Math.min(virtualItemsCount, me.items.length);\n              var me = this;\n              var virtualWidth = virtualSize.width;\n              me.virtualSize = virtualSize;\n              var wrapperWidth = Math.max(me.host.width(), 17 + virtualSize.width);\n              me.itemswrapper[0].style.width = wrapperWidth + \"px\";\n              var startIndex = 0;\n              var html = \"\";\n              var oldIE = $.jqx.browser.msie && $.jqx.browser.version < 9;\n              var oldIEAttribute = oldIE ? ' unselectable=\"on\"' : '';\n              for (var virtualItemIndex = startIndex; virtualItemIndex < me.virtualItemsCount; virtualItemIndex++) {\n                var item = me.items[virtualItemIndex];\n                var id = 'listitem' + virtualItemIndex + me.element.id;\n                if (me.theme != \"\") {\n                  html += \"<div\" + oldIEAttribute + \" role='option' id='\" + id + \"' class='jqx-listitem-element jqx-listitem-element-\" + me.theme + \"'>\";\n                } else {\n                  html += \"<div\" + oldIEAttribute + \" role='option' id='\" + id + \"' class='jqx-listitem-element'>\";\n                }\n                if (me.checkboxes) {\n                  var checkSize = this.checkboxSize + 8;\n                  html += '<div style=\"background-color: transparent; padding: 0; margin: 0; overflow:hidden; position: absolute; float: left; width: ' + checkSize + 'px; height:  ' + checkSize + 'px;\" class=\"' + me.toThemeProperty(\"jqx-checkbox\") + ' ' + 'chkbox\">';\n                  var checkBoxContent = '<div class=\"' + me.toThemeProperty(\"jqx-checkbox-default\") + ' ' + me.toThemeProperty(\"jqx-fill-state-normal\") + ' ' + me.toThemeProperty(\"jqx-rc-all\") + '\"><div style=\"cursor: pointer; width:  ' + this.checkboxSize + 'px; height:  ' + this.checkboxSize + 'px;\">';\n                  var checkClass = item.checked ? \" \" + me.toThemeProperty(\"jqx-checkbox-check-checked\") : \"\";\n                  checkBoxContent += '<span style=\"width: ' + this.checkboxSize + 'px; height:  ' + this.checkboxSize + 'px;\" class=\"checkBoxCheck' + checkClass + '\"></span>';\n                  checkBoxContent += '</div></div>';\n                  html += checkBoxContent;\n                  html += '</div>';\n                }\n                html += \"<span\" + oldIEAttribute + \" style='white-space: pre; -ms-touch-action: none;'></span></div>\";\n              }\n              if (self.WinJS) {\n                me.itemswrapper.html(html);\n              } else {\n                me.itemswrapper[0].innerHTML = html;\n              }\n              var children = me.itemswrapper.children();\n              for (var virtualItemIndex = startIndex; virtualItemIndex < me.virtualItemsCount; virtualItemIndex++) {\n                var item = me.items[virtualItemIndex];\n                var itemElement = $(children[virtualItemIndex]);\n                if (me.allowDrag && me._enableDragDrop) {\n                  itemElement.addClass('draggable');\n                }\n                if (me.checkboxes) {\n                  var checkbox = $(itemElement.children()[0]);\n                  itemElement.css('float', 'left');\n                  var spanElement = $(itemElement[0].firstChild);\n                  spanElement.css('float', 'left');\n                }\n                itemElement[0].style.height = item.height + 'px';\n                itemElement[0].style.top = top + 'px';\n                top += item.height + 1;\n                me.visualItems[virtualItemIndex] = itemElement;\n              }\n              ;\n              me._addHandlers();\n              me._updatescrollbars();\n              if (me.autoItemsHeight) {\n                var virtualSize = me._calculateVirtualSize(hostHeight);\n                var virtualItemsCount = virtualSize.itemsPerPage * 2;\n                if (me.autoHeight) {\n                  virtualItemsCount = me.items.length;\n                }\n                me.virtualItemsCount = Math.min(virtualItemsCount, me.items.length);\n                var me = this;\n                var virtualWidth = virtualSize.width;\n                me.virtualSize = virtualSize;\n                me._updatescrollbars();\n              }\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                me.host.attr('hideFocus', true);\n                me.host.find('div').attr('hideFocus', true);\n              }\n            },\n            _updatescrollbars: function () {\n              var me = this;\n              if (!me.virtualSize) {\n                return;\n              }\n              var virtualHeight = me.virtualSize.height;\n              var virtualWidth = me.virtualSize.width;\n              var vScrollInstance = me.vScrollInstance;\n              var hScrollInstance = me.hScrollInstance;\n              me._arrange(false);\n              var hasChange = false;\n              var outerWidth = me.host.outerWidth();\n              var outerHeight = me.host.outerHeight();\n              var hScrollOffset = 0;\n              if (virtualWidth > outerWidth) {\n                hScrollOffset = me.hScrollBar.outerHeight() + 2;\n              }\n              if (virtualHeight + hScrollOffset > outerHeight) {\n                var oldmax = vScrollInstance.max;\n                vScrollInstance.max = 2 + parseInt(virtualHeight) + hScrollOffset - parseInt(outerHeight - 2);\n                if (me.vScrollBar[0].style.visibility != 'inherit') {\n                  me.vScrollBar[0].style.visibility = 'inherit';\n                  hasChange = true;\n                }\n                if (oldmax != vScrollInstance.max) {\n                  vScrollInstance._arrange();\n                }\n              } else {\n                if (me.vScrollBar[0].style.visibility != 'hidden') {\n                  me.vScrollBar[0].style.visibility = 'hidden';\n                  hasChange = true;\n                  vScrollInstance.setPosition(0);\n                }\n              }\n              var scrollOffset = 0;\n              if (me.vScrollBar[0].style.visibility != 'hidden') {\n                scrollOffset = me.scrollBarSize + 6;\n              }\n              var checkboxes = me.checkboxes ? this.checkboxSize + 6 : 0;\n              if (me.autoItemsHeight) {\n                me.hScrollBar[0].style.visibility = 'hidden';\n              } else {\n                if (virtualWidth >= outerWidth - scrollOffset - checkboxes) {\n                  var changedMax = hScrollInstance.max;\n                  if (me.vScrollBar[0].style.visibility == 'inherit') {\n                    hScrollInstance.max = checkboxes + scrollOffset + parseInt(virtualWidth) - me.host.width() + 2;\n                  } else {\n                    hScrollInstance.max = checkboxes + parseInt(virtualWidth) - me.host.width() + 4;\n                  }\n                  if (me.hScrollBar[0].style.visibility != 'inherit') {\n                    me.hScrollBar[0].style.visibility = 'inherit';\n                    hasChange = true;\n                  }\n                  if (changedMax != hScrollInstance.max) {\n                    hScrollInstance._arrange();\n                  }\n                  if (me.vScrollBar[0].style.visibility == 'inherit') {\n                    vScrollInstance.max = 2 + parseInt(virtualHeight) + me.hScrollBar.outerHeight() + 2 - parseInt(me.host.height());\n                  }\n                } else {\n                  if (me.hScrollBar[0].style.visibility != 'hidden') {\n                    me.hScrollBar[0].style.visibility = 'hidden';\n                    hasChange = true;\n                  }\n                }\n              }\n              hScrollInstance.setPosition(0);\n              if (hasChange) {\n                me._arrange();\n              }\n              if (me.itemswrapper) {\n                me.itemswrapper[0].style.width = Math.max(0, Math.max(outerWidth - 2, 17 + virtualWidth)) + 'px';\n                var wrapperWidth = Math.max(me.content.width(), 17 + me.virtualSize.width);\n                me.itemswrapper[0].style.width = wrapperWidth + \"px\";\n                me.itemswrapper[0].style.height = Math.max(0, 2 * outerHeight) + 'px';\n              }\n              var isTouchDevice = me.isTouchDevice();\n              if (isTouchDevice) {\n                if (me.vScrollBar.css('visibility') != 'visible' && me.hScrollBar.css('visibility') != 'visible') {\n                  $.jqx.mobile.setTouchScroll(false, me.element.id);\n                } else {\n                  $.jqx.mobile.setTouchScroll(true, me.element.id);\n                }\n              }\n            },\n            clear: function () {\n              this.source = null;\n              this.visibleItems = new Array();\n              this.renderedVisibleItems = new Array();\n              this.itemsByValue = new Array();\n              this.clearSelection();\n              this.refresh();\n            },\n            // clears the selection.\n            clearSelection: function (render) {\n              for (var indx = 0; indx < this.selectedIndexes.length; indx++) {\n                if (this.selectedIndexes[indx] && this.selectedIndexes[indx] != -1) {\n                  this._raiseEvent('1', {\n                    index: indx,\n                    type: 'api',\n                    item: this.getVisibleItem(indx),\n                    originalEvent: null\n                  });\n                }\n                this.selectedIndexes[indx] = -1;\n              }\n              this.selectedIndex = -1;\n              this.selectedValue = null;\n              this.selectedValues = new Array();\n              if (render != false) {\n                this._renderItems();\n              }\n            },\n            // unselects item by index.\n            unselectIndex: function (index, render) {\n              if (isNaN(index)) return;\n              this.selectedIndexes[index] = -1;\n              var hasIndexes = false;\n              for (var indx = 0; indx < this.selectedIndexes.length; indx++) {\n                var sindex = this.selectedIndexes[indx];\n                if (sindex != -1 && sindex != undefined) {\n                  hasIndexes = true;\n                }\n              }\n              if (!hasIndexes) {\n                this.selectedValue = null;\n                this.selectedIndex = -1;\n                var visibleItem = this.getVisibleItem(index);\n                if (visibleItem) {\n                  if (this.selectedValues[visibleItem.value]) {\n                    this.selectedValues[visibleItem.value] = null;\n                  }\n                }\n              }\n              if (render == undefined || render == true) {\n                this._renderItems();\n                this._raiseEvent('1', {\n                  index: index,\n                  type: 'api',\n                  item: this.getVisibleItem(index),\n                  originalEvent: null\n                });\n              }\n              this._updateInputSelection();\n              this._raiseEvent('2', {\n                index: index,\n                type: 'api',\n                item: this.getItem(index)\n              });\n            },\n            getInfo: function () {\n              var that = this;\n              var items = this.getItems();\n              var visibleItems = this.getVisibleItems();\n              var renderedItems = function () {\n                var scrollValue = that.vScrollInstance.value;\n                if (that.filterable) scrollValue -= that.filterHeight;\n                var rendered = new Array();\n                for (var i = 0; i < visibleItems.length; i++) {\n                  var item = visibleItems[i];\n                  if (item) {\n                    var itemTop = item.initialTop;\n                    var itemHeight = item.height;\n                    var visible = true;\n                    if (itemTop + itemHeight - scrollValue < 0 || itemTop - scrollValue >= that.host.height()) {\n                      visible = false;\n                    }\n                    if (visible) {\n                      rendered.push(item);\n                    }\n                  }\n                }\n                return rendered;\n              }();\n              return {\n                items: items,\n                visibleItems: visibleItems,\n                viewItems: renderedItems\n              };\n            },\n            // gets item's instance.\n            getItem: function (index) {\n              if (index == -1 || isNaN(index) || typeof index === \"string\") {\n                if (index === -1) {\n                  return null;\n                }\n                return this.getItemByValue(index);\n              }\n              var result = null;\n              var item = $.each(this.items, function () {\n                if (this.index == index) {\n                  result = this;\n                  return false;\n                }\n              });\n              return result;\n            },\n            getVisibleItem: function (index) {\n              if (index == -1 || isNaN(index) || typeof index === \"string\") {\n                if (index === -1) {\n                  return null;\n                }\n                return this.getItemByValue(index);\n              }\n              return this.visibleItems[index];\n            },\n            getVisibleItems: function () {\n              return this.visibleItems;\n            },\n            // checks a specific item by its index.\n            checkIndex: function (index, render, raiseEvent) {\n              if (!this.checkboxes) {\n                return;\n              }\n              if (isNaN(index)) return;\n              if (index < 0 || index >= this.visibleItems.length) return;\n              if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {\n                return;\n              }\n              if (this.disabled) return;\n              var item = this.getItem(index);\n              if (this.groups.length > 0 || this.filterable) {\n                var item = this.getVisibleItem(index);\n              }\n              if (item != null) {\n                var checkbox = $(item.checkBoxElement);\n                item.checked = true;\n                if (render == undefined || render == true) {\n                  this._updateCheckedItems();\n                }\n              }\n              if (raiseEvent == undefined || raiseEvent == true) {\n                this._raiseEvent(3, {\n                  label: item.label,\n                  value: item.value,\n                  checked: true,\n                  item: item\n                });\n              }\n            },\n            getCheckedItems: function () {\n              if (!this.checkboxes) {\n                return null;\n              }\n              var checkedItems = new Array();\n              if (this.items == undefined) return;\n              $.each(this.items, function () {\n                if (this.checked) {\n                  checkedItems[checkedItems.length] = this;\n                }\n              });\n              return checkedItems;\n            },\n            checkAll: function (raiseEvents) {\n              if (!this.checkboxes) {\n                return;\n              }\n              if (this.disabled) return;\n              var me = this;\n              $.each(this.items, function () {\n                var item = this;\n                var itemChecked = item.checked;\n                this.checked = true;\n                if (raiseEvents !== false && itemChecked !== true) {\n                  me._raiseEvent(3, {\n                    label: item.label,\n                    value: item.value,\n                    checked: true,\n                    item: item\n                  });\n                }\n              });\n              this._updateCheckedItems();\n            },\n            uncheckAll: function (raiseEvents) {\n              if (!this.checkboxes) {\n                return;\n              }\n              if (this.disabled) return;\n              var me = this;\n              $.each(this.items, function () {\n                var item = this;\n                var itemChecked = item.checked;\n                this.checked = false;\n                if (raiseEvents !== false && itemChecked !== false) {\n                  this.checked = false;\n                  me._raiseEvent(3, {\n                    label: item.label,\n                    value: item.value,\n                    checked: false,\n                    item: item\n                  });\n                }\n              });\n              this._updateCheckedItems();\n            },\n            // unchecks a specific item by its index.\n            uncheckIndex: function (index, render, raiseEvent) {\n              if (!this.checkboxes) {\n                return;\n              }\n              if (isNaN(index)) return;\n              if (index < 0 || index >= this.visibleItems.length) return;\n              if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {\n                return;\n              }\n              if (this.disabled) return;\n              var item = this.getItem(index);\n              if (this.groups.length > 0 || this.filterable) {\n                var item = this.getVisibleItem(index);\n              }\n              if (item != null) {\n                var checkbox = $(item.checkBoxElement);\n                item.checked = false;\n                if (render == undefined || render == true) {\n                  this._updateCheckedItems();\n                }\n              }\n              if (raiseEvent == undefined || raiseEvent == true) {\n                this._raiseEvent(3, {\n                  label: item.label,\n                  value: item.value,\n                  checked: false,\n                  item: item\n                });\n              }\n            },\n            // sets a specific item's checked property to null.\n            indeterminateIndex: function (index, render, raiseEvent) {\n              if (!this.checkboxes) {\n                return;\n              }\n              if (isNaN(index)) return;\n              if (index < 0 || index >= this.visibleItems.length) return;\n              if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {\n                return;\n              }\n              if (this.disabled) return;\n              var item = this.getItem(index);\n              if (this.groups.length > 0 || this.filterable) {\n                var item = this.getVisibleItem(index);\n              }\n              if (item != null) {\n                var checkbox = $(item.checkBoxElement);\n                item.checked = null;\n                if (render == undefined || render == true) {\n                  this._updateCheckedItems();\n                }\n              }\n              if (raiseEvent == undefined || raiseEvent == true) {\n                this._raiseEvent(3, {\n                  checked: null\n                });\n              }\n            },\n            // gets the selected index.\n            getSelectedIndex: function () {\n              return this.selectedIndex;\n            },\n            // gets all selected items.\n            getSelectedItems: function () {\n              var visibleitems = this.getVisibleItems();\n              var items = this.getItems();\n              if (visibleitems && visibleitems.length !== items.length) {\n                items = visibleitems;\n              }\n              var selectedIndexes = this.selectedIndexes;\n              var selectedItems = [];\n              // get selected items.\n              for (var index in selectedIndexes) {\n                if (selectedIndexes[index] != -1) {\n                  selectedItems[selectedItems.length] = items[index];\n                }\n              }\n              return selectedItems;\n            },\n            // gets the selected item.\n            getSelectedItem: function () {\n              var items = this.getSelectedItems();\n              if (items && items.length > 0) {\n                return items[0];\n              }\n              return null;\n            },\n            _updateCheckedItems: function () {\n              var selectedIndex = this.selectedIndex;\n              this.clearSelection(false);\n              var items = this.getCheckedItems();\n              this.selectedIndex = selectedIndex;\n              this._renderItems();\n              var selectedElement = $.data(this.element, 'hoveredItem');\n              if (selectedElement != null) {\n                $(selectedElement).addClass(this.toThemeProperty('jqx-listitem-state-hover'));\n                $(selectedElement).addClass(this.toThemeProperty('jqx-fill-state-hover'));\n              }\n              this._updateInputSelection();\n            },\n            getItemByValue: function (value) {\n              if (this.visibleItems == null) {\n                return;\n              }\n              if (value && value.value) {\n                value = value.value;\n              }\n              if (this.itemsByValue) {\n                return this.itemsByValue[$.trim(value).split(\" \").join(\"?\")];\n              }\n              var items = this.visibleItems;\n              for (var i = 0; i < items.length; i++) {\n                if (items[i].value == value) {\n                  return items[i];\n                  break;\n                }\n              }\n            },\n            checkItem: function (item) {\n              if (item != null) {\n                var newItem = this._getItemByParam(item);\n                return this.checkIndex(newItem.visibleIndex, true);\n              }\n              return false;\n            },\n            uncheckItem: function (item) {\n              if (item != null) {\n                var newItem = this._getItemByParam(item);\n                return this.uncheckIndex(newItem.visibleIndex, true);\n              }\n              return false;\n            },\n            indeterminateItem: function (item) {\n              if (item != null) {\n                var newItem = this._getItemByParam(item);\n                return this.indeterminateIndex(newItem.visibleIndex, true);\n              }\n              return false;\n            },\n            val: function (value) {\n              if (!this.input) return;\n              var isEmpty = function (obj) {\n                for (var key in obj) {\n                  if (obj.hasOwnProperty(key)) return false;\n                }\n                if (typeof value == \"number\") return false;\n                if (typeof value == \"date\") return false;\n                if (typeof value == \"boolean\") return false;\n                if (typeof value == \"string\") return false;\n                return true;\n              };\n              if (isEmpty(value) || arguments.length == 0) {\n                return this.input.val();\n              }\n              var item = this.getItemByValue(value);\n              if (item != null) {\n                this.selectItem(item);\n              }\n              if (this.input) {\n                return this.input.val();\n              }\n            },\n            selectItem: function (item) {\n              if (item != null) {\n                if (item.index == undefined) {\n                  var newItem = this.getItemByValue(item);\n                  if (newItem) item = newItem;\n                }\n                return this.selectIndex(item.visibleIndex, true);\n              } else this.clearSelection();\n              return false;\n            },\n            unselectItem: function (item) {\n              if (item != null) {\n                if (item.index == undefined) {\n                  var newItem = this.getItemByValue(item);\n                  if (newItem) item = newItem;\n                }\n                return this.unselectIndex(item.visibleIndex, true);\n              }\n              return false;\n            },\n            // selects an item.\n            selectIndex: function (index, ensureVisible, render, forceSelect, type, originalEvent) {\n              if (isNaN(index)) return;\n              var tempSelectedIndex = this.selectedIndex;\n              if (this.filterable) {\n                this.selectedIndex = -1;\n              }\n              if (index < -1 || index >= this.visibleItems.length) return;\n              if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {\n                return;\n              }\n              if (this.disabled) return;\n              if (!this.multiple && !this.multipleextended && this.selectedIndex == index && !forceSelect && !this.checkboxes) {\n                if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) {\n                  newItem = this.getVisibleItem(index);\n                  if (newItem) {\n                    this.selectedValue = newItem.value;\n                    this.selectedValues[newItem.value] = newItem.value;\n                  }\n                }\n                return;\n              }\n              if (this.checkboxes) {\n                this._updateCheckedItems();\n                var oldIndex = tempSelectedIndex;\n                if (this.selectedIndex == index && !this.multiple) {\n                  oldIndex = -1;\n                }\n                if (type == undefined) {\n                  type = 'none';\n                }\n                var newItem = this.getItem(index);\n                var oldItem = this.getItem(oldIndex);\n                if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) {\n                  newItem = this.getVisibleItem(index);\n                  oldItem = this.getVisibleItem(oldIndex);\n                }\n                this._raiseEvent('1', {\n                  index: oldIndex,\n                  type: type,\n                  item: oldItem,\n                  originalEvent: originalEvent\n                });\n                this.selectedIndex = index;\n                this.selectedIndexes[oldIndex] = -1;\n                this.selectedIndexes[index] = index;\n                if (newItem) {\n                  this.selectedValue = newItem.value;\n                  this.selectedValues[newItem.value] = newItem.value;\n                }\n                this._raiseEvent('0', {\n                  index: index,\n                  type: type,\n                  item: newItem,\n                  originalEvent: originalEvent\n                });\n                this._renderItems();\n                return;\n              }\n              this.focused = true;\n              var newSelection = false;\n              if (this.selectedIndex != index) newSelection = true;\n              var oldIndex = tempSelectedIndex;\n              if (this.selectedIndex == index && !this.multiple) {\n                oldIndex = -1;\n              }\n              if (type == undefined) {\n                type = 'none';\n              }\n              var newItem = this.getItem(index);\n              var oldItem = this.getItem(oldIndex);\n              if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) {\n                newItem = this.getVisibleItem(index);\n                oldItem = this.getVisibleItem(oldIndex);\n              }\n              if (forceSelect != undefined && forceSelect) {\n                this._raiseEvent('1', {\n                  index: oldIndex,\n                  type: type,\n                  item: oldItem,\n                  originalEvent: originalEvent\n                });\n                this.selectedIndex = index;\n                this.selectedIndexes[oldIndex] = -1;\n                this.selectedIndexes[index] = index;\n                if (newItem) {\n                  this.selectedValue = newItem.value;\n                  this.selectedValues[newItem.value] = newItem.value;\n                }\n                this._raiseEvent('0', {\n                  index: index,\n                  type: type,\n                  item: newItem,\n                  originalEvent: originalEvent\n                });\n              } else {\n                var me = this;\n                var singleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {\n                  me._raiseEvent('1', {\n                    index: oldIndex,\n                    type: type,\n                    item: oldItem,\n                    originalEvent: originalEvent\n                  });\n                  me.selectedIndex = index;\n                  me.selectedIndexes = [];\n                  oldIndex = index;\n                  me.selectedIndexes[index] = index;\n                  me.selectedValues = new Array();\n                  if (newItem) {\n                    me.selectedValues[newItem.value] = newItem.value;\n                  }\n                  me._raiseEvent('0', {\n                    index: index,\n                    type: type,\n                    item: newItem,\n                    originalEvent: originalEvent\n                  });\n                };\n                var multipleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {\n                  if (me.selectedIndexes[index] == undefined || me.selectedIndexes[index] == -1) {\n                    me.selectedIndexes[index] = index;\n                    me.selectedIndex = index;\n                    if (newItem) {\n                      me.selectedValues[newItem.value] = newItem.value;\n                      me._raiseEvent('0', {\n                        index: index,\n                        type: type,\n                        item: newItem,\n                        originalEvent: originalEvent\n                      });\n                    }\n                  } else {\n                    oldIndex = me.selectedIndexes[index];\n                    oldItem = me.getVisibleItem(oldIndex);\n                    if (oldItem) {\n                      me.selectedValues[oldItem.value] = null;\n                    }\n                    me.selectedIndexes[index] = -1;\n                    me.selectedIndex = -1;\n                    me._raiseEvent('1', {\n                      index: oldIndex,\n                      type: type,\n                      item: oldItem,\n                      originalEvent: originalEvent\n                    });\n                  }\n                };\n                if (this.multipleextended) {\n                  if (!this._shiftKey && !this._ctrlKey) {\n                    if (type != 'keyboard' && type != 'mouse') {\n                      multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);\n                      me._clickedIndex = index;\n                    } else {\n                      this.clearSelection(false);\n                      me._clickedIndex = index;\n                      singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);\n                    }\n                  } else if (this._ctrlKey) {\n                    if (type == 'keyboard') {\n                      this.clearSelection(false);\n                      me._clickedIndex = index;\n                    }\n                    multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);\n                  } else if (this._shiftKey) {\n                    if (me._clickedIndex == undefined) me._clickedIndex = oldIndex;\n                    var min = Math.min(me._clickedIndex, index);\n                    var max = Math.max(me._clickedIndex, index);\n                    this.clearSelection(false);\n                    for (var i = min; i <= max; i++) {\n                      me.selectedIndexes[i] = i;\n                      me.selectedValues[me.getVisibleItem(i).value] = me.getVisibleItem(i).value;\n                      me._raiseEvent('0', {\n                        index: i,\n                        type: type,\n                        item: this.getVisibleItem(i),\n                        originalEvent: originalEvent\n                      });\n                    }\n                    if (type != 'keyboard') {\n                      me.selectedIndex = me._clickedIndex;\n                    } else {\n                      me.selectedIndex = index;\n                    }\n                  }\n                } else if (this.multiple) {\n                  multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);\n                } else {\n                  if (newItem) {\n                    this.selectedValue = newItem.value;\n                  }\n                  singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);\n                }\n              }\n              if (render == undefined || render == true) {\n                this._renderItems();\n              }\n              if (ensureVisible != undefined && ensureVisible != null && ensureVisible == true) {\n                this.ensureVisible(index);\n              }\n              this._raiseEvent('2', {\n                index: index,\n                item: newItem,\n                oldItem: oldItem,\n                type: type,\n                originalEvent: originalEvent\n              });\n              this._updateInputSelection();\n              return newSelection;\n            },\n            _updateInputSelection: function () {\n              this._syncSelection();\n              var selectedValues = new Array();\n              if (this.input) {\n                if (this.selectedIndex == -1) {\n                  this.input.val(\"\");\n                } else {\n                  if (this.items) {\n                    if (this.items[this.selectedIndex] != undefined) {\n                      this.input.val(this.items[this.selectedIndex].value);\n                      selectedValues.push(this.items[this.selectedIndex].value);\n                    }\n                  }\n                }\n                if (this.multiple || this.multipleextended || this.checkboxes) {\n                  var items = !this.checkboxes ? this.getSelectedItems() : this.getCheckedItems();\n                  var str = \"\";\n                  if (items) {\n                    for (var i = 0; i < items.length; i++) {\n                      if (undefined != items[i]) {\n                        if (i == items.length - 1) {\n                          str += items[i].value;\n                        } else {\n                          str += items[i].value + \",\";\n                        }\n                        selectedValues.push(items[i].value);\n                      }\n                    }\n                    this.input.val(str);\n                  }\n                }\n              }\n              if (this.field && this.input) {\n                if (this.field.nodeName.toLowerCase() == \"select\") {\n                  $.each(this.field, function (index, value) {\n                    $(this).removeAttr('selected');\n                    this.selected = selectedValues.indexOf(this.value) >= 0;\n                    if (this.selected) {\n                      $(this).attr('selected', true);\n                    }\n                  });\n                } else {\n                  $.each(this.items, function (index, value) {\n                    $(this.originalItem.originalItem).removeAttr('data-selected');\n                    this.selected = selectedValues.indexOf(this.value) >= 0;\n                    if (this.selected) {\n                      $(this.originalItem.originalItem).attr('data-selected', true);\n                    }\n                  });\n                }\n              }\n            },\n            // checks whether an item is in the visible view.\n            isIndexInView: function (index) {\n              if (isNaN(index)) {\n                return false;\n              }\n              if (!this.items) return false;\n              if (index < 0 || index >= this.items.length) {\n                return false;\n              }\n              var scrollValue = this.vScrollInstance.value;\n              var filterHeight = 0;\n              if (this.filterable) filterHeight = this.filterHeight;\n              var item = this.visibleItems[index];\n              if (item == undefined) return true;\n              var itemTop = item.initialTop;\n              var itemHeight = item.height;\n              if (itemTop - scrollValue < filterHeight || itemTop - scrollValue + filterHeight + itemHeight >= this.host.outerHeight()) {\n                return false;\n              }\n              return true;\n            },\n            //[optimize]\n            _itemsInPage: function () {\n              var itemsCount = 0;\n              var me = this;\n              if (this.items) {\n                $.each(this.items, function () {\n                  if (this.initialTop + this.height >= me.content.height()) {\n                    return false;\n                  }\n                  itemsCount++;\n                });\n              }\n              return itemsCount;\n            },\n            _firstItemIndex: function () {\n              if (this.visibleItems != null) {\n                if (this.visibleItems[0]) {\n                  if (this.visibleItems[0].isGroup) {\n                    return this._nextItemIndex(0);\n                  } else return 0;\n                } else return 0;\n              }\n              return -1;\n            },\n            _lastItemIndex: function () {\n              if (this.visibleItems != null) {\n                if (this.visibleItems[this.visibleItems.length - 1]) {\n                  if (this.visibleItems[this.visibleItems.length - 1].isGroup) {\n                    return this._prevItemIndex(this.visibleItems.length - 1);\n                  } else return this.visibleItems.length - 1;\n                } else return this.visibleItems.length - 1;\n              }\n              return -1;\n            },\n            _nextItemIndex: function (index) {\n              for (var indx = index + 1; indx < this.visibleItems.length; indx++) {\n                if (this.visibleItems[indx]) {\n                  if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {\n                    return indx;\n                  }\n                }\n              }\n              return -1;\n            },\n            _prevItemIndex: function (index) {\n              for (var indx = index - 1; indx >= 0; indx--) {\n                if (this.visibleItems[indx]) {\n                  if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {\n                    return indx;\n                  }\n                }\n              }\n              return -1;\n            },\n            clearFilter: function () {\n              this.filterInput.val(\"\");\n              this._updateItemsVisibility(\"\");\n            },\n            _search: function (event) {\n              var that = this;\n              var value = that.filterInput.val();\n              if (event.keyCode == 9) return;\n              if (that.searchMode == 'none' || that.searchMode == null || that.searchMode == 'undefined') {\n                return;\n              }\n              if (event.keyCode == 16 || event.keyCode == 17 || event.keyCode == 20) return;\n              if (event.keyCode == 37 || event.keyCode == 39) return false;\n              if (event.altKey || event.keyCode == 18) return;\n              if (event.keyCode >= 33 && event.keyCode <= 40) {\n                return;\n              }\n              if (event.ctrlKey || event.metaKey || that.ctrlKey) {\n                if (event.keyCode != 88 && event.keyCode != 86) {\n                  return;\n                }\n              }\n              if (value === that.searchString) {\n                return;\n              }\n              that._updateItemsVisibility(value);\n            },\n            _updateItemsVisibility: function (value) {\n              var items = this.getItems();\n              if (items == undefined) {\n                return {\n                  index: -1,\n                  matchItem: new Array()\n                };\n              }\n              var me = this;\n              var index = -1;\n              var matchItems = new Array();\n              var newItemsIndex = 0;\n              $.each(items, function (i) {\n                var itemValue = '';\n                if (!this.isGroup) {\n                  if (this.searchLabel) {\n                    itemValue = this.searchLabel;\n                  } else if (this.label) {\n                    itemValue = this.label;\n                  } else if (this.value) {\n                    itemValue = this.value;\n                  } else if (this.title) {\n                    itemValue = this.title;\n                  } else itemValue = 'jqxItem';\n                  itemValue = itemValue.toString();\n                  var matches = false;\n                  switch (me.searchMode) {\n                    case 'containsignorecase':\n                      matches = $.jqx.string.containsIgnoreCase(itemValue, value);\n                      break;\n                    case 'contains':\n                      matches = $.jqx.string.contains(itemValue, value);\n                      break;\n                    case 'equals':\n                      matches = $.jqx.string.equals(itemValue, value);\n                      break;\n                    case 'equalsignorecase':\n                      matches = $.jqx.string.equalsIgnoreCase(itemValue, value);\n                      break;\n                    case 'startswith':\n                      matches = $.jqx.string.startsWith(itemValue, value);\n                      break;\n                    case 'startswithignorecase':\n                      matches = $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                      break;\n                    case 'endswith':\n                      matches = $.jqx.string.endsWith(itemValue, value);\n                      break;\n                    case 'endswithignorecase':\n                      matches = $.jqx.string.endsWithIgnoreCase(itemValue, value);\n                      break;\n                  }\n                  if (!matches) {\n                    this.visible = false;\n                  }\n                  if (matches) {\n                    matchItems[newItemsIndex++] = this;\n                    this.visible = true;\n                    index = this.visibleIndex;\n                  }\n                  if (value == '') {\n                    this.visible = true;\n                    matches = false;\n                  }\n                }\n              });\n              me.renderedVisibleItems = new Array();\n              me.visibleItems = new Array();\n              me.vScrollInstance.setPosition(0, true);\n              me._addItems(false);\n              me._renderItems();\n              for (var indx = 0; indx < me.items.length; indx++) {\n                me.selectedIndexes[indx] = -1;\n              }\n              me.selectedIndex = -1;\n              for (var selectedValue in me.selectedValues) {\n                var value = me.selectedValues[selectedValue];\n                var item = me.getItemByValue(value);\n                if (item) {\n                  if (item.visible) {\n                    me.selectedIndex = item.visibleIndex;\n                    me.selectedIndexes[item.visibleIndex] = item.visibleIndex;\n                  }\n                }\n              }\n              me._syncSelection();\n              if (me.filterChange) {\n                me.filterChange(value);\n              }\n            },\n            // get all matches of a searched value.\n            _getMatches: function (value, startindex) {\n              if (value == undefined || value.length == 0) return -1;\n              if (startindex == undefined) startindex = 0;\n              var items = this.getItems();\n              var me = this;\n              var index = -1;\n              var newItemsIndex = 0;\n              $.each(items, function (i) {\n                var itemValue = '';\n                if (!this.isGroup) {\n                  if (this.searchLabel) {\n                    itemValue = this.searchLabel.toString();\n                  } else if (this.label) {\n                    itemValue = this.label.toString();\n                  } else if (this.value) {\n                    itemValue = this.value.toString();\n                  } else if (this.title) {\n                    itemValue = this.title.toString();\n                  } else itemValue = 'jqxItem';\n                  var mathes = false;\n                  switch (me.searchMode) {\n                    case 'containsignorecase':\n                      mathes = $.jqx.string.containsIgnoreCase(itemValue, value);\n                      break;\n                    case 'contains':\n                      mathes = $.jqx.string.contains(itemValue, value);\n                      break;\n                    case 'equals':\n                      mathes = $.jqx.string.equals(itemValue, value);\n                      break;\n                    case 'equalsignorecase':\n                      mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);\n                      break;\n                    case 'startswith':\n                      mathes = $.jqx.string.startsWith(itemValue, value);\n                      break;\n                    case 'startswithignorecase':\n                      mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                      break;\n                    case 'endswith':\n                      mathes = $.jqx.string.endsWith(itemValue, value);\n                      break;\n                    case 'endswithignorecase':\n                      mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);\n                      break;\n                  }\n                  if (mathes && this.visibleIndex >= startindex) {\n                    index = this.visibleIndex;\n                    return false;\n                  }\n                }\n              });\n              return index;\n            },\n            // gets all items that match to a search value.\n            findItems: function (value) {\n              var items = this.getItems();\n              var me = this;\n              var index = 0;\n              var matchItems = new Array();\n              $.each(items, function (i) {\n                var itemValue = '';\n                if (!this.isGroup) {\n                  if (this.label) {\n                    itemValue = this.label;\n                  } else if (this.value) {\n                    itemValue = this.value;\n                  } else if (this.title) {\n                    itemValue = this.title;\n                  } else itemValue = 'jqxItem';\n                  var mathes = false;\n                  switch (me.searchMode) {\n                    case 'containsignorecase':\n                      mathes = $.jqx.string.containsIgnoreCase(itemValue, value);\n                      break;\n                    case 'contains':\n                      mathes = $.jqx.string.contains(itemValue, value);\n                      break;\n                    case 'equals':\n                      mathes = $.jqx.string.equals(itemValue, value);\n                      break;\n                    case 'equalsignorecase':\n                      mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);\n                      break;\n                    case 'startswith':\n                      mathes = $.jqx.string.startsWith(itemValue, value);\n                      break;\n                    case 'startswithignorecase':\n                      mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);\n                      break;\n                    case 'endswith':\n                      mathes = $.jqx.string.endsWith(itemValue, value);\n                      break;\n                    case 'endswithignorecase':\n                      mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);\n                      break;\n                  }\n                  if (mathes) {\n                    matchItems[index++] = this;\n                  }\n                }\n              });\n              return matchItems;\n            },\n            _syncSelection: function () {\n              var that = this;\n              if (that.filterable) {\n                if (that.items) {\n                  for (var i = 0; i < that.items.length; i++) {\n                    var item = that.items[i];\n                    item.selected = false;\n                  }\n                }\n                for (var i = 0; i < that.visibleItems.length; i++) {\n                  var item = that.visibleItems[i];\n                  if (that.selectedIndexes && that.selectedIndexes[i] == item.visibleIndex) {\n                    item.selected = true;\n                  }\n                }\n                if (that.itemswrapper) {\n                  that._renderItems();\n                }\n              }\n            },\n            _handleKeyDown: function (event) {\n              var key = event.keyCode;\n              var self = this;\n              var index = self.selectedIndex;\n              var selectedIndex = self.selectedIndex;\n              var newSelection = false;\n              if (!this.keyboardNavigation || !this.enableSelection) return;\n              if (this.filterInput && event.target == this.filterInput[0]) {\n                return;\n              }\n              if (event.target instanceof HTMLInputElement && $(event.target).ischildof(this.host)) {\n                return;\n              }\n              var doClear = function () {\n                if (self.multiple || self.checkboxes) {\n                  self.clearSelection(false);\n                }\n              };\n              if (event.altKey) key = -1;\n              if (key == 32 && this.checkboxes) {\n                var checkItem = this.getItem(index);\n                if (checkItem != null) {\n                  self._updateItemCheck(checkItem, index);\n                  event.preventDefault();\n                }\n                self._searchString = \"\";\n                self.selectIndex(checkItem.visibleIndex, false, true, true, 'keyboard', event);\n                self._renderItems();\n                return;\n              }\n              if (self.incrementalSearch) {\n                var matchindex = -1;\n                if (!self._searchString) {\n                  self._searchString = \"\";\n                }\n                if ((key == 8 || key == 46) && self._searchString.length >= 1) {\n                  self._searchString = self._searchString.substr(0, self._searchString.length - 1);\n                }\n                var letter = String.fromCharCode(key);\n                if (event.key) {\n                  letter = event.key;\n                }\n                var isDigit = !isNaN(parseInt(letter));\n                var toReturn = false;\n                if (key >= 65 && key <= 97 || isDigit || key == 8 || key == 32 || key == 46) {\n                  if (!event.shiftKey) {\n                    letter = letter.toLocaleLowerCase();\n                  }\n                  var startIndex = 1 + self.selectedIndex;\n                  if (key != 8 && key != 32 && key != 46) {\n                    if (self._searchString.length > 0 && self._searchString.substr(0, 1) == letter) {\n                      startIndex = 1 + self.selectedIndex;\n                      self._searchString += letter;\n                    } else {\n                      self._searchString += letter;\n                    }\n                  }\n                  if (key == 32) {\n                    self._searchString += \" \";\n                  }\n                  var matches = this._getMatches(self._searchString, startIndex);\n                  matchindex = matches;\n                  if (matchindex == self._lastMatchIndex || matchindex == -1) {\n                    var matches = this._getMatches(self._searchString, 0);\n                    matchindex = matches;\n                  }\n                  self._lastMatchIndex = matchindex;\n                  if (matchindex >= 0) {\n                    var toSelect = function () {\n                      doClear();\n                      self.selectIndex(matchindex, false, false, false, 'keyboard', event);\n                      var isInView = self.isIndexInView(matchindex);\n                      if (!isInView) {\n                        self.ensureVisible(matchindex);\n                      } else {\n                        self._renderItems();\n                      }\n                    };\n                    if (self._toSelectTimer) clearTimeout(self._toSelectTimer);\n                    self._toSelectTimer = setTimeout(function () {\n                      toSelect();\n                    }, self.incrementalSearchKeyDownDelay);\n                  }\n                  toReturn = true;\n                }\n                if (self._searchTimer != undefined) {\n                  clearTimeout(self._searchTimer);\n                }\n                if (key == 27 || key == 13) {\n                  self._searchString = \"\";\n                }\n                self._searchTimer = setTimeout(function () {\n                  self._searchString = \"\";\n                  self._renderItems();\n                }, self.incrementalSearchDelay);\n                if (matchindex >= 0) {\n                  return;\n                }\n                if (toReturn) return false;\n              }\n              if (key == 33) {\n                var itemsInPage = self._itemsInPage();\n                if (self.selectedIndex - itemsInPage >= 0) {\n                  doClear();\n                  self.selectIndex(selectedIndex - itemsInPage, false, false, false, 'keyboard', event);\n                } else {\n                  doClear();\n                  self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);\n                }\n                self._searchString = \"\";\n              }\n              if (key == 32 && this.checkboxes) {\n                var checkItem = this.getItem(index);\n                if (checkItem != null) {\n                  self._updateItemCheck(checkItem, index);\n                  event.preventDefault();\n                }\n                self._searchString = \"\";\n              }\n              if (key == 36) {\n                doClear();\n                self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);\n                self._searchString = \"\";\n              }\n              if (key == 35) {\n                doClear();\n                self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);\n                self._searchString = \"\";\n              }\n              if (key == 34) {\n                var itemsInPage = self._itemsInPage();\n                if (self.selectedIndex + itemsInPage < self.visibleItems.length) {\n                  doClear();\n                  self.selectIndex(selectedIndex + itemsInPage, false, false, false, 'keyboard', event);\n                } else {\n                  doClear();\n                  self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);\n                }\n                self._searchString = \"\";\n              }\n              if (key == 38) {\n                self._searchString = \"\";\n                if (self.selectedIndex > 0) {\n                  var newIndex = self._prevItemIndex(self.selectedIndex);\n                  if (newIndex != self.selectedIndex && newIndex != -1) {\n                    doClear();\n                    self.selectIndex(newIndex, false, false, false, 'keyboard', event);\n                  } else return true;\n                } else return false;\n              } else if (key == 40) {\n                self._searchString = \"\";\n                if (self.selectedIndex + 1 < self.visibleItems.length) {\n                  var newIndex = self._nextItemIndex(self.selectedIndex);\n                  if (newIndex != self.selectedIndex && newIndex != -1) {\n                    doClear();\n                    self.selectIndex(newIndex, false, false, false, 'keyboard', event);\n                  } else return true;\n                } else return false;\n              }\n              if (key == 35 || key == 36 || key == 38 || key == 40 || key == 34 || key == 33) {\n                var isInView = self.isIndexInView(self.selectedIndex);\n                if (!isInView) {\n                  self.ensureVisible(self.selectedIndex);\n                } else {\n                  self._renderItems();\n                }\n                return false;\n              }\n              return true;\n            },\n            _updateItemCheck: function (checkItem, index) {\n              if (this.disabled) return;\n              if (checkItem.checked == true) {\n                checkItem.checked = checkItem.hasThreeStates && this.hasThreeStates ? null : false;\n              } else {\n                checkItem.checked = checkItem.checked != null;\n              }\n              switch (checkItem.checked) {\n                case true:\n                  this.checkIndex(index);\n                  break;\n                case false:\n                  this.uncheckIndex(index);\n                  break;\n                default:\n                  this.indeterminateIndex(index);\n                  break;\n              }\n            },\n            // performs mouse wheel.\n            wheel: function (event, self) {\n              if (self.autoHeight || !self.enableMouseWheel) {\n                event.returnValue = true;\n                return true;\n              }\n              if (self.disabled) return true;\n              var delta = 0;\n              if (!event) /* For IE. */\n                event = window.event;\n              if (event.originalEvent && event.originalEvent.wheelDelta) {\n                event.wheelDelta = event.originalEvent.wheelDelta;\n              }\n              if (event.wheelDelta) {\n                /* IE/Opera. */\n                delta = event.wheelDelta / 120;\n              } else if (event.detail) {\n                /** Mozilla case. */\n                delta = -event.detail / 3;\n              }\n              if (delta) {\n                var result = self._handleDelta(delta);\n                if (result) {\n                  if (event.preventDefault) event.preventDefault();\n                  if (event.originalEvent != null) {\n                    event.originalEvent.mouseHandled = true;\n                  }\n                  if (event.stopPropagation != undefined) {\n                    event.stopPropagation();\n                  }\n                }\n                if (result) {\n                  result = false;\n                  event.returnValue = result;\n                  return result;\n                } else {\n                  return false;\n                }\n              }\n              if (event.preventDefault) event.preventDefault();\n              event.returnValue = false;\n            },\n            _handleDelta: function (delta) {\n              var oldvalue = this.vScrollInstance.value;\n              if (delta < 0) {\n                this.scrollDown();\n              } else this.scrollUp();\n              var newvalue = this.vScrollInstance.value;\n              if (oldvalue != newvalue) {\n                return true;\n              }\n              return false;\n            },\n            focus: function () {\n              try {\n                this.focused = true;\n                this.host.focus();\n                var me = this;\n                setTimeout(function () {\n                  me.host.focus();\n                }, 25);\n              } catch (error) {}\n            },\n            _removeHandlers: function () {\n              var self = this;\n              this.removeHandler($(document), 'keydown.listbox' + this.element.id);\n              this.removeHandler($(document), 'keyup.listbox' + this.element.id);\n              this.removeHandler(this.vScrollBar, 'valueChanged');\n              this.removeHandler(this.hScrollBar, 'valueChanged');\n              if (this._mousewheelfunc) {\n                this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              } else {\n                this.removeHandler(this.host, 'mousewheel');\n              }\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.content, 'mouseleave');\n              this.removeHandler(this.content, 'focus');\n              this.removeHandler(this.content, 'blur');\n              this.removeHandler(this.host, 'focus');\n              this.removeHandler(this.host, 'blur');\n              this.removeHandler(this.content, 'mouseenter');\n              this.removeHandler(this.content, 'mouseup');\n              this.removeHandler(this.content, 'mousedown');\n              this.removeHandler(this.content, 'touchend');\n              if (this._mousemovefunc) {\n                this.removeHandler(this.content, 'mousemove', this._mousemovefunc);\n              } else {\n                this.removeHandler(this.content, 'mousemove');\n              }\n              this.removeHandler(this.content, 'selectstart');\n              if (this.overlayContent) {\n                this.removeHandler(this.overlayContent, $.jqx.mobile.getTouchEventName('touchend'));\n              }\n            },\n            _updateSize: function () {\n              if (!this.virtualSize) {\n                this._oldheight = null;\n                this.virtualSize = this._calculateVirtualSize();\n              }\n              var self = this;\n              self._arrange();\n              if (self.host.height() != self._oldheight || self.host.width() != self._oldwidth) {\n                var changedWidth = self.host.width() != self._oldwidth;\n                if (self.autoItemsHeight) {\n                  self._render(false);\n                } else {\n                  if (self.items) {\n                    if (self.items.length > 0 && self.virtualItemsCount * self.items[0].height < self._oldheight - 2) {\n                      self._render(false);\n                    } else {\n                      var _oldScrollValue = self.vScrollInstance.value;\n                      self._updatescrollbars();\n                      self._renderItems();\n                      if (_oldScrollValue < self.vScrollInstance.max) {\n                        self.vScrollInstance.setPosition(_oldScrollValue);\n                      } else {\n                        self.vScrollInstance.setPosition(self.vScrollInstance.max);\n                      }\n                    }\n                  }\n                }\n                self._oldwidth = self.host.width();\n                self._oldheight = self.host.height();\n              }\n            },\n            _addHandlers: function () {\n              var self = this;\n              this.focused = false;\n              var animating = false;\n              var prevValue = 0;\n              var object = null;\n              var prevValue = 0;\n              var newValue = 0;\n              var lastScroll = new Date();\n              var isTouchDevice = this.isTouchDevice();\n              this.addHandler(this.vScrollBar, 'valueChanged', function (event) {\n                if ($.jqx.browser.msie && $.jqx.browser.version > 9) {\n                  setTimeout(function () {\n                    self._renderItems();\n                  }, 1);\n                } else self._renderItems();\n              });\n              this.addHandler(this.hScrollBar, 'valueChanged', function () {\n                self._renderItems();\n              });\n              if (this._mousewheelfunc) {\n                this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              }\n              this._mousewheelfunc = function (event) {\n                self.wheel(event, self);\n              };\n              this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              this.addHandler($(document), 'keydown.listbox' + this.element.id, function (event) {\n                self._ctrlKey = event.ctrlKey || event.metaKey;\n                self._shiftKey = event.shiftKey;\n              });\n              this.addHandler($(document), 'keyup.listbox' + this.element.id, function (event) {\n                self._ctrlKey = event.ctrlKey || event.metaKey;\n                self._shiftKey = event.shiftKey;\n              });\n              this.addHandler(this.host, 'keydown', function (event) {\n                return self._handleKeyDown(event);\n              });\n              this.addHandler(this.content, 'mouseleave', function (event) {\n                self.focused = false;\n                var hoveredItem = $.data(self.element, 'hoveredItem');\n                if (hoveredItem != null) {\n                  $(hoveredItem).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));\n                  $(hoveredItem).removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                  $.data(self.element, 'hoveredItem', null);\n                }\n              });\n              this.addHandler(this.content, 'focus', function (event) {\n                if (!self.disabled) {\n                  self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));\n                  self.focused = true;\n                }\n              });\n              this.addHandler(this.content, 'blur', function (event) {\n                self.focused = false;\n                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));\n              });\n              this.addHandler(this.host, 'focus', function (event) {\n                if (!self.disabled) {\n                  self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));\n                  self.focused = true;\n                }\n              });\n              this.addHandler(this.host, 'blur', function (event) {\n                if ($.jqx.browser.msie && $.jqx.browser.version < 9 && self.focused) {\n                  return;\n                }\n                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));\n                self.focused = false;\n              });\n              this.addHandler(this.content, 'mouseenter', function (event) {\n                self.focused = true;\n              });\n              var hasTransform = $.jqx.utilities.hasTransform(this.host);\n              var isTouch = self.isTouchDevice() && this.touchMode !== true;\n              var eventName = !isTouch ? 'mousedown' : 'touchend';\n              var upEventName = !isTouch ? 'mouseup' : 'touchend';\n              if (this.overlayContent) {\n                this.addHandler(this.overlayContent, $.jqx.mobile.getTouchEventName('touchend'), function (event) {\n                  if (!self.enableSelection) {\n                    return true;\n                  }\n                  if (isTouch) {\n                    self._newScroll = new Date();\n                    if (self._newScroll - self._lastScroll < 500) {\n                      return true;\n                    }\n                  }\n                  var touches = $.jqx.mobile.getTouches(event);\n                  var touch = touches[0];\n                  if (touch != undefined) {\n                    var selfOffset = self.host.offset();\n                    var left = parseInt(touch.pageX);\n                    var top = parseInt(touch.pageY);\n                    if (self.touchMode == true) {\n                      if (touch._pageX != undefined) {\n                        left = parseInt(touch._pageX);\n                        top = parseInt(touch._pageY);\n                      }\n                    }\n                    left = left - selfOffset.left;\n                    top = top - selfOffset.top;\n                    var item = self._hitTest(left, top);\n                    if (item != null && !item.isGroup) {\n                      self._newScroll = new Date();\n                      if (self._newScroll - self._lastScroll < 500) {\n                        return false;\n                      }\n                      if (self.checkboxes) {\n                        self._updateItemCheck(item, item.visibleIndex);\n                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                        return;\n                      }\n                      if (item.html.indexOf('href') != -1) {\n                        setTimeout(function () {\n                          self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                          self.content.trigger('click');\n                          return false;\n                        }, 100);\n                      } else {\n                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                        if (event.preventDefault) event.preventDefault();\n                        self.content.trigger('click');\n                        return false;\n                      }\n                    }\n                  }\n                });\n              } else {\n                var isMouseDown = false;\n                this.addHandler(this.content, eventName, function (event) {\n                  if (!self.enableSelection) {\n                    return true;\n                  }\n                  isMouseDown = true;\n                  if (isTouch) {\n                    self._newScroll = new Date();\n                    if (self._newScroll - self._lastScroll < 500) {\n                      return false;\n                    }\n                  }\n                  self.focused = true;\n                  if (!self.isTouchDevice() && self.focusable) {\n                    self.host.focus();\n                  }\n                  if (event.target.id != 'listBoxContent' + self.element.id && self.itemswrapper[0] != event.target) {\n                    var target = event.target;\n                    var targetOffset = $(target).offset();\n                    var selfOffset = self.host.offset();\n                    if (hasTransform) {\n                      var left = $.jqx.mobile.getLeftPos(target);\n                      var top = $.jqx.mobile.getTopPos(target);\n                      targetOffset.left = left;\n                      targetOffset.top = top;\n                      left = $.jqx.mobile.getLeftPos(self.element);\n                      top = $.jqx.mobile.getTopPos(self.element);\n                      selfOffset.left = left;\n                      selfOffset.top = top;\n                    }\n                    var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);\n                    var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);\n                    var item = self._hitTest(x, y);\n                    if (item != null && !item.isGroup) {\n                      var doSelection = function (item, event) {\n                        if (!self._shiftKey) self._clickedIndex = item.visibleIndex;\n                        if (!self.checkboxes) {\n                          self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                        } else {\n                          x = 20 + event.pageX - targetOffset.left;\n                          if (self.rtl) {\n                            var hscroll = self.hScrollBar.css('visibility') != 'hidden' ? self.hScrollInstance.max : self.host.width();\n                            if (x <= self.host.width() - 20) {\n                              if (!self.allowDrag) {\n                                self._updateItemCheck(item, item.visibleIndex);\n                                self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                              } else {\n                                setTimeout(function () {\n                                  if (!self._dragItem) {\n                                    if (!isMouseDown) {\n                                      self._updateItemCheck(item, item.visibleIndex);\n                                      self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                                    }\n                                  }\n                                }, 200);\n                              }\n                            }\n                          } else {\n                            if (x + self.hScrollInstance.value >= 20) {\n                              if (!self.allowDrag) {\n                                self._updateItemCheck(item, item.visibleIndex);\n                                self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                              } else {\n                                setTimeout(function () {\n                                  if (!self._dragItem) {\n                                    if (!isMouseDown) {\n                                      self._updateItemCheck(item, item.visibleIndex);\n                                      self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);\n                                    }\n                                  }\n                                }, 200);\n                              }\n                            }\n                          }\n                        }\n                      };\n                      if (!item.disabled) {\n                        if (item.html.indexOf('href') != -1) {\n                          setTimeout(function () {\n                            doSelection(item, event);\n                          }, 100);\n                        } else {\n                          doSelection(item, event);\n                        }\n                      }\n                    }\n                    if (eventName == 'mousedown') {\n                      var rightclick = false;\n                      if (event.which) rightclick = event.which == 3;else if (event.button) rightclick = event.button == 2;\n                      if (rightclick) return true;\n                      //     return false;\n                    }\n                  }\n                  return true;\n                });\n              }\n              this.addHandler(this.content, 'mouseup', function (event) {\n                self.vScrollInstance.handlemouseup(self, event);\n                isMouseDown = false;\n              });\n              if ($.jqx.browser.msie) {\n                this.addHandler(this.content, 'selectstart', function (event) {\n                  return false;\n                });\n              }\n\n              // hover behavior.\n              var isTouchDevice = this.isTouchDevice();\n              if (this.enableHover && !isTouchDevice) {\n                this._mousemovefunc = function (event) {\n                  if (isTouchDevice) return true;\n                  if (!self.enableHover) return true;\n                  var which = $.jqx.browser.msie == true && $.jqx.browser.version < 9 ? 0 : 1;\n                  if (event.target == null) return true;\n                  if (self.disabled) return true;\n                  self.focused = true;\n                  var scrolling = self.vScrollInstance.isScrolling();\n                  if (!scrolling && event.target.id != 'listBoxContent' + self.element.id) {\n                    if (self.itemswrapper[0] != event.target) {\n                      var target = event.target;\n                      var targetOffset = $(target).offset();\n                      var selfOffset = self.host.offset();\n                      if (hasTransform) {\n                        var left = $.jqx.mobile.getLeftPos(target);\n                        var top = $.jqx.mobile.getTopPos(target);\n                        targetOffset.left = left;\n                        targetOffset.top = top;\n                        left = $.jqx.mobile.getLeftPos(self.element);\n                        top = $.jqx.mobile.getTopPos(self.element);\n                        selfOffset.left = left;\n                        selfOffset.top = top;\n                      }\n                      var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);\n                      var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);\n                      var item = self._hitTest(x, y);\n                      if (item != null && !item.isGroup && !item.disabled) {\n                        var selectedElement = $.data(self.element, 'hoveredItem');\n                        if (selectedElement != null) {\n                          $(selectedElement).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));\n                          $(selectedElement).removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                        }\n                        $.data(self.element, 'hoveredItem', item.element);\n                        var $element = $(item.element);\n                        $element.addClass(self.toThemeProperty('jqx-listitem-state-hover'));\n                        $element.addClass(self.toThemeProperty('jqx-fill-state-hover'));\n                      }\n                    }\n                  }\n                };\n                this.addHandler(this.content, 'mousemove', this._mousemovefunc);\n              }\n            },\n            _arrange: function (arrangeScrollbars) {\n              if (arrangeScrollbars == undefined) arrangeScrollbars = true;\n              var me = this;\n              var width = null;\n              var height = null;\n              var filterHeight = me.filterable ? me.filterHeight : 0;\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (this.element.offsetWidth === 0) {\n                borderSize = 2;\n              }\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              var _setHostHeight = function (height) {\n                height = me.host.height() - borderSize;\n                if (height == 0) {\n                  height = 200;\n                  me.host.height(height);\n                }\n                return height;\n              };\n              if (me.width != null && me.width.toString().indexOf(\"px\") != -1) {\n                width = me.width;\n              } else if (me.width != undefined && !isNaN(me.width)) {\n                width = me.width;\n              }\n              ;\n              if (me.height != null && me.height.toString().indexOf(\"px\") != -1) {\n                height = me.height;\n              } else if (me.height != undefined && !isNaN(me.height)) {\n                height = me.height;\n              }\n              ;\n              if (me.width != null && me.width.toString().indexOf(\"%\") != -1) {\n                me.host.css(\"width\", me.width);\n                width = me.host.width();\n              }\n              if (me.height != null && me.height.toString().indexOf(\"%\") != -1) {\n                me.host.css(\"height\", me.height);\n                height = _setHostHeight(height);\n              }\n              if (width != null) {\n                width = parseInt(width) - borderSize;\n                if (parseInt(me.element.style.width) != parseInt(me.width)) {\n                  me.element.style.width = parseInt(width) + \"px\";\n                }\n              }\n              if (!me.autoHeight) {\n                if (height != null) {\n                  height = parseInt(height);\n                  if (parseInt(me.element.style.height) != parseInt(me.height)) {\n                    me.host.height(me.height);\n                    _setHostHeight(height);\n                  }\n                }\n              } else {\n                if (me.virtualSize) {\n                  if (me.hScrollBar.css('visibility') != 'hidden') {\n                    me.host.height(me.virtualSize.height + parseInt(me.scrollBarSize) + 3);\n                    me.height = me.virtualSize.height + parseInt(me.scrollBarSize) + 3;\n                    height = me.height;\n                  } else {\n                    me.host.height(me.virtualSize.height);\n                    me.height = me.virtualSize.height;\n                    height = me.virtualSize.height;\n                  }\n                }\n              }\n\n              // scrollbar Size.\n              var scrollSize = me.scrollBarSize;\n              if (isNaN(scrollSize)) {\n                scrollSize = parseInt(scrollSize);\n                if (isNaN(scrollSize)) {\n                  scrollSize = '17px';\n                } else scrollSize = scrollSize + 'px';\n              }\n              scrollSize = parseInt(scrollSize);\n              var scrollOffset = 4;\n              var bottomSizeOffset = 2;\n              var rightSizeOffset = 1;\n              // right scroll offset.\n              if (me.vScrollBar) {\n                if (me.vScrollBar[0].style.visibility != 'hidden') {\n                  rightSizeOffset = scrollSize + scrollOffset;\n                } else {\n                  rightSizeOffset = 0;\n                  me.vScrollInstance.setPosition(0);\n                }\n              } else return;\n              if (scrollSize == 0) {\n                rightSizeOffset = 0;\n                bottomSizeOffset = 0;\n              }\n              if (me.hScrollBar) {\n                // bottom scroll offset.\n                if (me.hScrollBar[0].style.visibility != 'hidden') {\n                  bottomSizeOffset = scrollSize + scrollOffset;\n                } else {\n                  me.hScrollInstance.setPosition(0);\n                  bottomSizeOffset = 0;\n                }\n              } else return;\n              if (me.autoItemsHeight) {\n                me.hScrollBar[0].style.visibility = 'hidden';\n                bottomSizeOffset = 0;\n              }\n              if (height == null) height = 0;\n              var hScrollTop = parseInt(height) - scrollOffset - scrollSize;\n              if (hScrollTop < 0) hScrollTop = 0;\n              if (parseInt(me.hScrollBar[0].style.height) != scrollSize) {\n                if (parseInt(scrollSize) < 0) {\n                  scrollSize = 0;\n                }\n                me.hScrollBar[0].style.height = parseInt(scrollSize) + 'px';\n              }\n              if (me.hScrollBar[0].style.top != hScrollTop + 'px') {\n                me.hScrollBar[0].style.top = hScrollTop + 'px';\n                me.hScrollBar[0].style.left = '0px';\n              }\n              var hscrollwidth = width - scrollSize - scrollOffset;\n              if (hscrollwidth < 0) hscrollwidth = 0;\n              var hScrollWidth = hscrollwidth + 'px';\n              if (me.hScrollBar[0].style.width != hScrollWidth) {\n                me.hScrollBar[0].style.width = hScrollWidth;\n              }\n              if (rightSizeOffset <= 1) {\n                if (width >= 2) {\n                  me.hScrollBar[0].style.width = parseInt(width - 2) + 'px';\n                }\n              }\n              if (scrollSize != parseInt(me.vScrollBar[0].style.width)) {\n                me.vScrollBar[0].style.width = parseInt(scrollSize) + 'px';\n              }\n              if (parseInt(height) - bottomSizeOffset != parseInt(me.vScrollBar[0].style.height)) {\n                var scrollHeight = parseInt(height) - bottomSizeOffset;\n                if (scrollHeight < 0) scrollHeight = 0;\n                me.vScrollBar[0].style.height = scrollHeight + 'px';\n              }\n              if (width == null) width = 0;\n              var vScrollLeft = parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px';\n              if (this.host.css('box-sizing') === \"border-box\") {\n                vScrollLeft = parseInt(vScrollLeft) - 2 + 'px';\n              }\n              if (vScrollLeft != me.vScrollBar[0].style.left) {\n                if (parseInt(vScrollLeft) >= 0) {\n                  me.vScrollBar[0].style.left = vScrollLeft;\n                }\n                me.vScrollBar[0].style.top = '0px';\n              }\n              var vScrollInstance = me.vScrollInstance;\n              vScrollInstance.disabled = me.disabled;\n              if (arrangeScrollbars) {\n                vScrollInstance._arrange();\n              }\n              var hScrollInstance = me.hScrollInstance;\n              hScrollInstance.disabled = me.disabled;\n              if (arrangeScrollbars) {\n                hScrollInstance._arrange();\n              }\n              if (me.vScrollBar[0].style.visibility != 'hidden' && me.hScrollBar[0].style.visibility != 'hidden') {\n                me.bottomRight[0].style.visibility = 'inherit';\n                me.bottomRight[0].style.left = 1 + parseInt(me.vScrollBar[0].style.left) + 'px';\n                me.bottomRight[0].style.top = 1 + parseInt(me.hScrollBar[0].style.top) + 'px';\n                if (me.rtl) {\n                  me.bottomRight.css({\n                    left: 0\n                  });\n                }\n                me.bottomRight[0].style.width = parseInt(scrollSize) + 3 + 'px';\n                me.bottomRight[0].style.height = parseInt(scrollSize) + 3 + 'px';\n              } else {\n                me.bottomRight[0].style.visibility = 'hidden';\n              }\n              if (parseInt(me.content[0].style.width) != parseInt(width) - rightSizeOffset) {\n                var w = parseInt(width) - rightSizeOffset;\n                if (w < 0) w = 0;\n                me.content[0].style.width = w + 'px';\n              }\n              if (me.rtl) {\n                me.vScrollBar.css({\n                  left: 0 + 'px',\n                  top: '0px'\n                });\n                me.hScrollBar.css({\n                  left: me.vScrollBar.width() + 2 + 'px'\n                });\n                if (me.vScrollBar[0].style.visibility != 'hidden') {\n                  me.content.css('margin-left', 4 + me.vScrollBar.width());\n                } else {\n                  me.content.css('margin-left', 0);\n                  me.hScrollBar.css({\n                    left: '0px'\n                  });\n                }\n                if (me.filterable && me.filterInput) {\n                  me.filterInput.css({\n                    left: me.vScrollBar.width() + 6 + 'px'\n                  });\n                }\n              }\n              if (parseInt(me.content[0].style.height) != parseInt(height) - bottomSizeOffset) {\n                var h = parseInt(height) - bottomSizeOffset;\n                if (h < 0) h = 0;\n                me.content[0].style.height = h + 'px';\n                me.content[0].style.top = '0px';\n              }\n              if (filterHeight > 0) {\n                me.content[0].style.top = filterHeight + 'px';\n                me.content[0].style.height = parseInt(me.content[0].style.height) - filterHeight + 'px';\n              }\n              if (me.filterable) {\n                me.filterInput[0].style.height = filterHeight - 6 + 'px';\n                me.filterInput[0].style.top = '3px';\n                if (!me.rtl) {\n                  me.filterInput[0].style.left = parseInt(me.content.css('left')) + 3 + 'px';\n                }\n                me.filterInput[0].style.width = parseInt(me.content.css('width')) - 7 + 'px';\n                me.filter[0].style.display = \"block\";\n              } else {\n                me.filter[0].style.display = \"none\";\n              }\n              if (me.overlayContent) {\n                me.overlayContent.width(parseInt(width) - rightSizeOffset);\n                me.overlayContent.height(parseInt(height) - bottomSizeOffset);\n              }\n            },\n            // scrolls to a list box item.\n            ensureVisible: function (index, topItem) {\n              if (isNaN(index)) {\n                var item = this.getItemByValue(index);\n                if (item) {\n                  index = item.index;\n                }\n              }\n              var isInView = this.isIndexInView(index);\n              if (!isInView) {\n                if (index < 0) return;\n                if (this.autoHeight) {\n                  var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n                  vScrollInstance.setPosition(0);\n                } else {\n                  for (var indx = 0; indx < this.visibleItems.length; indx++) {\n                    var item = this.visibleItems[indx];\n                    if (item.visibleIndex == index && !item.isGroup) {\n                      var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n                      var value = vScrollInstance.value;\n                      var filterHeight = !this.filterable ? 0 : this.filterHeight + 2;\n                      var hScrollVisible = this.hScrollBar.css('visibility') === 'hidden';\n                      var hScrollOffset = hScrollVisible ? 0 : this.scrollBarSize + 4;\n                      if (item.initialTop < value) {\n                        vScrollInstance.setPosition(item.initialTop);\n                        if (indx == 0) {\n                          vScrollInstance.setPosition(0);\n                        }\n                      } else if (item.initialTop + item.height > value + this.host.height() - filterHeight) {\n                        var hostHeight = this.host.height();\n                        if (this.filterable) {\n                          vScrollInstance.setPosition(this.filterHeight + 2 + item.initialTop + item.height + 2 - hostHeight + hScrollOffset);\n                        } else {\n                          vScrollInstance.setPosition(item.initialTop + item.height + 2 - hostHeight + hScrollOffset);\n                          if (indx === this.visibleItems.length - 1) {\n                            vScrollInstance.setPosition(vScrollInstance.max);\n                          }\n                        }\n                        if (topItem) {\n                          var value = vScrollInstance.value;\n                          var desiredItemPosition = item.initialTop;\n                          if (this.filterable) {\n                            desiredItemPosition = this.filterHeight + 2 + item.initialTop;\n                          }\n                          if (value + hostHeight < vScrollInstance.max) {\n                            vScrollInstance.setPosition(desiredItemPosition);\n                          }\n                        }\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else {\n                if (topItem) {\n                  for (var indx = 0; indx < this.visibleItems.length; indx++) {\n                    var item = this.visibleItems[indx];\n                    if (item.visibleIndex == index && !item.isGroup) {\n                      var value = this.vScrollInstance.value;\n                      var desiredItemPosition = item.initialTop;\n                      if (this.filterable) {\n                        desiredItemPosition = this.filterHeight + 2 + item.initialTop;\n                      }\n                      if (value + this.host.height() < this.vScrollInstance.max) {\n                        this.vScrollInstance.setPosition(desiredItemPosition);\n                      }\n                    }\n                  }\n                }\n              }\n              this._renderItems();\n            },\n            scrollTo: function (left, top) {\n              if (this.vScrollBar.css('visibility') != 'hidden') {\n                this.vScrollInstance.setPosition(top);\n              }\n              if (this.hScrollBar.css('visibility') != 'hidden') {\n                this.hScrollInstance.setPosition(left);\n              }\n            },\n            // scrolls down.\n            scrollDown: function () {\n              if (this.vScrollBar.css('visibility') == 'hidden') return false;\n              var vScrollInstance = this.vScrollInstance;\n              if (vScrollInstance.value + vScrollInstance.largestep <= vScrollInstance.max) {\n                vScrollInstance.setPosition(vScrollInstance.value + vScrollInstance.largestep);\n                return true;\n              } else {\n                vScrollInstance.setPosition(vScrollInstance.max);\n                return true;\n              }\n              return false;\n            },\n            // scrolls up.\n            scrollUp: function () {\n              if (this.vScrollBar.css('visibility') == 'hidden') return false;\n              var vScrollInstance = this.vScrollInstance;\n              if (vScrollInstance.value - vScrollInstance.largestep >= vScrollInstance.min) {\n                vScrollInstance.setPosition(vScrollInstance.value - vScrollInstance.largestep);\n                return true;\n              } else {\n                if (vScrollInstance.value != vScrollInstance.min) {\n                  vScrollInstance.setPosition(vScrollInstance.min);\n                  return true;\n                }\n              }\n              return false;\n            },\n            databind: function (source, initialRefresh) {\n              this.records = new Array();\n              var isdataadapter = source._source ? true : false;\n              var dataadapter = new $.jqx.dataAdapter(source, {\n                autoBind: false\n              });\n              if (isdataadapter) {\n                dataadapter = source;\n                source = source._source;\n              }\n              var initadapter = function (me) {\n                if (source.type != undefined) {\n                  dataadapter._options.type = source.type;\n                }\n                if (source.formatdata != undefined) {\n                  dataadapter._options.formatData = source.formatdata;\n                }\n                if (source.contenttype != undefined) {\n                  dataadapter._options.contentType = source.contenttype;\n                }\n                if (source.async != undefined) {\n                  dataadapter._options.async = source.async;\n                }\n              };\n              var updatefromadapter = function (me, type) {\n                var getItem = function (record) {\n                  var search = null;\n                  if (typeof record === 'string') {\n                    var label = record;\n                    var value = record;\n                    var group = '';\n                  } else if (me.displayMember != undefined && me.displayMember != \"\") {\n                    var value = record[me.valueMember];\n                    var label = record[me.displayMember];\n                  }\n                  var group = '';\n                  if (me.groupMember) {\n                    group = record[me.groupMember];\n                  } else if (record && record.group != undefined) {\n                    group = record.group;\n                  }\n                  if (me.searchMember) {\n                    search = record[me.searchMember];\n                  } else if (record && record.searchLabel != undefined) {\n                    search = record.searchLabel;\n                  }\n                  if (!me.valueMember && !me.displayMember) {\n                    if ($.type(record) == \"string\") {\n                      label = value = record.toString();\n                    }\n                  }\n                  if (record && record.label != undefined) {\n                    var label = record.label;\n                  }\n                  if (record && record.value != undefined) {\n                    var value = record.value;\n                  }\n                  var checked = false;\n                  if (record && record.checked != undefined) {\n                    checked = record.checked;\n                  }\n                  var html = '';\n                  if (record && record.html != undefined) {\n                    html = record.html;\n                  }\n                  var visible = true;\n                  if (record && record.visible != undefined) {\n                    visible = record.visible;\n                  }\n                  var disabled = false;\n                  if (record && record.disabled != undefined) {\n                    disabled = record.disabled;\n                  }\n                  var hasThreeStates = false;\n                  if (record && record.hasThreeStates != undefined) {\n                    hasThreeStates = record.hasThreeStates;\n                  }\n                  var listBoxItem = {};\n                  listBoxItem.label = label;\n                  listBoxItem.value = value;\n                  listBoxItem.searchLabel = search;\n                  listBoxItem.html = html;\n                  listBoxItem.visible = visible;\n                  listBoxItem.originalItem = record;\n                  listBoxItem.group = group;\n                  listBoxItem.groupHtml = '';\n                  listBoxItem.disabled = disabled;\n                  listBoxItem.checked = checked;\n                  listBoxItem.hasThreeStates = hasThreeStates;\n                  return listBoxItem;\n                };\n                if (type != undefined) {\n                  var dataItem = dataadapter._changedrecords[0];\n                  if (dataItem) {\n                    $.each(dataadapter._changedrecords, function () {\n                      var index = this.index;\n                      var item = this.record;\n                      if (type != 'remove') {\n                        var mapItem = getItem(item);\n                      }\n                      switch (type) {\n                        case \"update\":\n                          me.updateAt(mapItem, index);\n                          break;\n                        case \"add\":\n                          me.insertAt(mapItem, index);\n                          break;\n                        case \"remove\":\n                          me.removeAt(index);\n                          break;\n                      }\n                    });\n                    return;\n                  }\n                }\n                me.records = dataadapter.records;\n                var recordslength = me.records.length;\n                var items = new Array();\n                for (var i = 0; i < recordslength; i++) {\n                  var record = me.records[i];\n                  var listBoxItem = getItem(record);\n                  listBoxItem.index = i;\n                  items[i] = listBoxItem;\n                }\n                me.items = me.loadItems(items, true);\n                me._render();\n                me._raiseEvent('6');\n              };\n              initadapter(this);\n              var me = this;\n              switch (source.datatype) {\n                case \"local\":\n                case \"array\":\n                default:\n                  if (source.localdata != null || $.isArray(source)) {\n                    dataadapter.unbindBindingUpdate(this.element.id);\n                    if (this.autoBind || !this.autoBind && !initialRefresh) {\n                      dataadapter.dataBind();\n                    }\n                    updatefromadapter(this);\n                    dataadapter.bindBindingUpdate(this.element.id, function (updatetype) {\n                      updatefromadapter(me, updatetype);\n                    });\n                  }\n                  break;\n                case \"json\":\n                case \"jsonp\":\n                case \"xml\":\n                case \"xhtml\":\n                case \"script\":\n                case \"text\":\n                case \"csv\":\n                case \"tab\":\n                  {\n                    if (source.localdata != null) {\n                      dataadapter.unbindBindingUpdate(this.element.id);\n                      if (this.autoBind || !this.autoBind && !initialRefresh) {\n                        dataadapter.dataBind();\n                      }\n                      updatefromadapter(this);\n                      dataadapter.bindBindingUpdate(this.element.id, function () {\n                        updatefromadapter(me);\n                      });\n                      return;\n                    }\n                    var postdata = {};\n                    if (dataadapter._options.data) {\n                      $.extend(dataadapter._options.data, postdata);\n                    } else {\n                      if (source.data) {\n                        $.extend(postdata, source.data);\n                      }\n                      dataadapter._options.data = postdata;\n                    }\n                    var updateFunc = function () {\n                      updatefromadapter(me);\n                    };\n                    dataadapter.unbindDownloadComplete(me.element.id);\n                    dataadapter.bindDownloadComplete(me.element.id, updateFunc);\n                    if (this.autoBind || !this.autoBind && !initialRefresh) {\n                      dataadapter.dataBind();\n                    }\n                  }\n              }\n            },\n            loadItems: function (items, adapter) {\n              if (items == null) {\n                this.groups = new Array();\n                this.items = new Array();\n                this.visualItems = new Array();\n                return;\n              }\n              var self = this;\n              var index = 0;\n              var length = 0;\n              var itemIndex = 0;\n              this.groups = new Array();\n              this.items = new Array();\n              this.visualItems = new Array();\n              var listItems = new Array();\n              this.itemsByValue = new Array();\n              $.map(items, function (item) {\n                if (item == undefined) return null;\n                var listBoxItem = new $.jqx._jqxListBox.item();\n                var group = item.group;\n                var groupHtml = item.groupHtml;\n                var title = item.title;\n                var search = null;\n                if (self.searchMember) {\n                  search = item[self.searchMember];\n                } else if (item && item.searchLabel != undefined) {\n                  search = item.searchLabel;\n                }\n                if (title == null || title == undefined) {\n                  title = '';\n                }\n                if (group == null || group == undefined) {\n                  group = '';\n                }\n                if (self.groupMember) {\n                  group = item[self.groupMember];\n                }\n                if (groupHtml == null || groupHtml == undefined) {\n                  groupHtml = '';\n                }\n                if (!self.groups[group]) {\n                  self.groups[group] = {\n                    items: new Array(),\n                    index: -1,\n                    caption: group,\n                    captionHtml: groupHtml\n                  };\n                  index++;\n                  var groupID = index + 'jqxGroup';\n                  self.groups[groupID] = self.groups[group];\n                  length++;\n                  self.groups.length = length;\n                }\n                var uniqueGroup = self.groups[group];\n                uniqueGroup.index++;\n                uniqueGroup.items[uniqueGroup.index] = listBoxItem;\n                if (typeof item === \"string\") {\n                  listBoxItem.label = item;\n                  listBoxItem.value = item;\n                  if (arguments.length > 1 && arguments[1] && $.type(arguments[1]) == \"string\") {\n                    listBoxItem.label = item;\n                    listBoxItem.value = arguments[1];\n                  }\n                } else if (item.label == null && item.value == null && item.html == null && item.group == null && item.groupHtml == null) {\n                  listBoxItem.label = item.toString();\n                  listBoxItem.value = item.toString();\n                } else {\n                  listBoxItem.label = item.label;\n                  listBoxItem.value = item.value;\n                  if (listBoxItem.label === undefined) listBoxItem.label = item.value;\n                  if (listBoxItem.value === undefined) listBoxItem.value = item.label;\n                }\n                if (typeof item != \"string\") {\n                  if (item.label === undefined) {\n                    if (self.displayMember != \"\") {\n                      if (item[self.displayMember] != undefined) {\n                        listBoxItem.label = item[self.displayMember];\n                      } else listBoxItem.label = \"\";\n                    }\n                  }\n                  if (item.value === undefined) {\n                    if (self.valueMember != \"\") {\n                      listBoxItem.value = item[self.valueMember];\n                    }\n                  }\n                }\n                listBoxItem.hasThreeStates = item.hasThreeStates != undefined ? item.hasThreeStates : true;\n                listBoxItem.originalItem = item;\n                if (adapter) {\n                  listBoxItem.originalItem = item.originalItem;\n                }\n                listBoxItem.title = title;\n                if (title && listBoxItem.value === undefined && listBoxItem.label === undefined) {\n                  listBoxItem.value = listBoxItem.label = title;\n                }\n                listBoxItem.html = item.html || '';\n                if (item.html && item.html != '') {\n                  //     listBoxItem.label = listBoxItem.value = item.html;\n                  if (title && title != '') {\n                    //           listBoxItem.label = listBoxItem.value = title;\n                  }\n                }\n                if (typeof listBoxItem.label === \"string\") {\n                  //          listBoxItem.label = listBoxItem.label.replace(/</g, '&lt;');\n                  //        listBoxItem.label = listBoxItem.label.replace(/>/g, '&gt;');\n                }\n                listBoxItem.group = group;\n                listBoxItem.checked = item.checked || false;\n                listBoxItem.groupHtml = item.groupHtml || '';\n                listBoxItem.disabled = item.disabled || false;\n                listBoxItem.visible = item.visible != undefined ? item.visible : true;\n                listBoxItem.searchLabel = search;\n                listBoxItem.index = itemIndex;\n                listItems[itemIndex] = listBoxItem;\n                itemIndex++;\n                return listBoxItem;\n              });\n              var itemsArray = new Array();\n              var uniqueItemIndex = 0;\n              if (this.fromSelect == undefined || this.fromSelect == false) {\n                for (var indx = 0; indx < length; indx++) {\n                  var index = indx + 1;\n                  var groupID = index + 'jqxGroup';\n                  var group = this.groups[groupID];\n                  if (group == undefined || group == null) break;\n                  if (indx == 0 && group.caption == '' && group.captionHtml == '' && length <= 1) {\n                    for (var i = 0; i < group.items.length; i++) {\n                      var key = group.items[i].value;\n                      if (group.items[i].value == undefined || group.items[i].value == null) key = i;\n                      this.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = group.items[i];\n                    }\n                    return group.items;\n                  } else {\n                    var listBoxItem = new $.jqx._jqxListBox.item();\n                    listBoxItem.isGroup = true;\n                    listBoxItem.label = group.caption;\n                    if (group.caption == '' && group.captionHtml == '') {\n                      group.caption = this.emptyGroupText;\n                      listBoxItem.label = group.caption;\n                    }\n                    listBoxItem.html = group.captionHtml;\n                    itemsArray[uniqueItemIndex] = listBoxItem;\n                    uniqueItemIndex++;\n                  }\n                  for (var j = 0; j < group.items.length; j++) {\n                    itemsArray[uniqueItemIndex] = group.items[j];\n                    var key = group.items[j].value;\n                    if (group.items[j].value == \"\" || group.items[j].value == null) key = uniqueItemIndex;\n                    self.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = group.items[j];\n                    uniqueItemIndex++;\n                  }\n                }\n              } else {\n                var uniqueItemIndex = 0;\n                var checkedGroups = new Array();\n                $.each(listItems, function () {\n                  if (!checkedGroups[this.group]) {\n                    if (this.group != '') {\n                      var listBoxItem = new $.jqx._jqxListBox.item();\n                      listBoxItem.isGroup = true;\n                      listBoxItem.label = this.group;\n                      itemsArray[uniqueItemIndex] = listBoxItem;\n                      uniqueItemIndex++;\n                      checkedGroups[this.group] = true;\n                    }\n                  }\n                  itemsArray[uniqueItemIndex] = this;\n                  var key = this.value;\n                  if (this.value == \"\" || this.value == null) key = uniqueItemIndex - 1;\n                  self.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = this;\n                  uniqueItemIndex++;\n                });\n              }\n              return itemsArray;\n            },\n            _mapItem: function (item) {\n              var listBoxItem = new $.jqx._jqxListBox.item();\n              if (this.displayMember) {\n                if (item.label == undefined) {\n                  item.label = item[this.displayMember];\n                }\n                if (item.value == undefined) {\n                  item.value = item[this.valueMember];\n                }\n              }\n              if (typeof item === \"string\") {\n                listBoxItem.label = item;\n                listBoxItem.value = item;\n              } else if (typeof item === 'number') {\n                listBoxItem.label = item.toString();\n                listBoxItem.value = item.toString();\n              } else {\n                listBoxItem.label = item.label !== undefined ? item.label : item.value;\n                listBoxItem.value = item.value !== undefined ? item.value : item.label;\n              }\n              if (listBoxItem.label == undefined && listBoxItem.value == undefined && listBoxItem.html == undefined) {\n                listBoxItem.label = listBoxItem.value = item;\n              }\n              listBoxItem.html = item.html || '';\n              listBoxItem.group = item.group || '';\n              listBoxItem.checked = item.checked || false;\n              listBoxItem.title = item.title || '';\n              listBoxItem.groupHtml = item.groupHtml || '';\n              listBoxItem.disabled = item.disabled || false;\n              listBoxItem.visible = item.visible || true;\n              return listBoxItem;\n            },\n            // adds a new item.\n            addItem: function (item) {\n              return this.insertAt(item, this.items ? this.items.length : 0);\n            },\n            _getItemByParam: function (item) {\n              if (item != null) {\n                if (item.index == undefined) {\n                  var newItem = this.getItemByValue(item);\n                  if (newItem) item = newItem;\n                }\n              }\n              return item;\n            },\n            insertItem: function (item, index) {\n              var newItem = this._getItemByParam(item);\n              return this.insertAt(newItem, index);\n            },\n            updateItem: function (item, oldItem) {\n              var oldItemIndx = this._getItemByParam(oldItem);\n              if (oldItemIndx && oldItemIndx.index != undefined) {\n                return this.updateAt(item, oldItemIndx.index);\n              }\n              return false;\n            },\n            updateAt: function (item, index) {\n              if (item != null) {\n                var listBoxItem = this._mapItem(item);\n                this.itemsByValue[$.trim(listBoxItem.value).split(\" \").join(\"?\")] = this.items[index];\n                this.items[index].value = listBoxItem.value;\n                this.items[index].label = listBoxItem.label;\n                this.items[index].html = listBoxItem.html;\n                this.items[index].disabled = listBoxItem.disabled;\n                this._raiseEvent('9', {\n                  item: this.items[index]\n                });\n              }\n              this._cachedItemHtml = [];\n              this._renderItems();\n              if (this.rendered) {\n                this.rendered();\n              }\n            },\n            // inserts an item at a specific position.\n            insertAt: function (item, index) {\n              if (item == null) return false;\n              this._cachedItemHtml = [];\n              if (this.items == undefined || this.items.length == 0) {\n                this.source = new Array();\n                this.refresh();\n                var listBoxItem = this._mapItem(item);\n                listBoxItem.index = 0;\n                this.items[this.items.length] = listBoxItem;\n                this._addItems(true);\n                this._renderItems();\n                if (this.rendered) {\n                  this.rendered();\n                }\n                if (this.allowDrag && this._enableDragDrop) {\n                  this._enableDragDrop();\n                }\n                var key = listBoxItem.value;\n                if (listBoxItem.value == \"\" || listBoxItem.value == null) key = index;\n                this.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = listBoxItem;\n                return false;\n              }\n              var listBoxItem = this._mapItem(item);\n              if (index == -1 || index == undefined || index == null || index >= this.items.length) {\n                listBoxItem.index = this.items.length;\n                this.items[this.items.length] = listBoxItem;\n              } else {\n                var itemsArray = new Array();\n                var currentItemIndex = 0;\n                var inserted = false;\n                var visualItemIndex = 0;\n                for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {\n                  if (this.items[itemIndex].isGroup == false) {\n                    if (visualItemIndex >= index && !inserted) {\n                      itemsArray[currentItemIndex++] = listBoxItem;\n                      listBoxItem.index = index;\n                      visualItemIndex++;\n                      inserted = true;\n                    }\n                  }\n                  itemsArray[currentItemIndex] = this.items[itemIndex];\n                  if (!this.items[itemIndex].isGroup) {\n                    itemsArray[currentItemIndex].index = visualItemIndex;\n                    visualItemIndex++;\n                  }\n                  currentItemIndex++;\n                }\n                this.items = itemsArray;\n              }\n              var key = listBoxItem.value;\n              if (listBoxItem.value == \"\" || listBoxItem.value == null) key = index;\n              this.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = listBoxItem;\n              this.visibleItems = new Array();\n              this.renderedVisibleItems = new Array();\n              var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n              var value = vScrollInstance.value;\n              vScrollInstance.setPosition(0);\n              if (this.allowDrag && this._enableDragDrop || this.virtualSize && this.virtualSize.height < 10 + this.host.height()) {\n                this._addItems(true);\n              } else {\n                this._addItems(false);\n              }\n              if (this.groups.length > 1) {}\n              this._renderItems();\n              if (this.allowDrag && this._enableDragDrop) {\n                this._enableDragDrop();\n              }\n              vScrollInstance.setPosition(value);\n              this._raiseEvent('7', {\n                item: listBoxItem\n              });\n              if (this.rendered) {\n                this.rendered();\n              }\n              return true;\n            },\n            // removes an item from a specific position.\n            removeAt: function (index) {\n              if (index < 0 || index > this.items.length - 1) return false;\n              if (index == undefined) return false;\n              var itemHeight = this.items[index].height;\n              var key = this.items[index].value;\n              if (key == \"\" || key == null) key = index;\n              this.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = null;\n              var listBoxItem = this.items[index];\n              if (this.groups.length > 1) {\n                var nonGroups = new Array();\n                for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {\n                  if (!this.items[itemIndex].isGroup) {\n                    nonGroups.push({\n                      item: this.items[itemIndex],\n                      key: itemIndex\n                    });\n                  }\n                }\n                if (nonGroups[index]) {\n                  this.items.splice(nonGroups[index].key, 1);\n                } else return false;\n              } else {\n                this.items.splice(index, 1);\n              }\n              var itemsInGroup = 0;\n              var groupIndex = -1;\n              for (var i = 0; i < this.items.length; i++) {\n                var item = this.items[i];\n                if (item.isGroup) {\n                  itemsInGroup = 0;\n                  groupIndex = i;\n                } else if (groupIndex >= 0) {\n                  itemsInGroup++;\n                }\n              }\n              if (itemsInGroup === 0 && groupIndex >= 0) {\n                this.items.splice(groupIndex, 1);\n              }\n              var itemsArray = new Array();\n              var currentItemIndex = 0;\n              var inserted = false;\n              var visualItemIndex = 0;\n              for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {\n                itemsArray[currentItemIndex] = this.items[itemIndex];\n                if (!this.items[itemIndex].isGroup) {\n                  itemsArray[currentItemIndex].index = visualItemIndex;\n                  visualItemIndex++;\n                }\n                currentItemIndex++;\n              }\n              this.items = itemsArray;\n              var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n              var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n              var value = vScrollInstance.value;\n              vScrollInstance.setPosition(0);\n              this.visibleItems = new Array();\n              this.renderedVisibleItems = new Array();\n              if (this.items.length > 0) {\n                if (this.virtualSize) {\n                  this.virtualSize.height -= itemHeight;\n                  var virtualItemsCount = this.virtualSize.itemsPerPage * 2;\n                  if (this.autoHeight) {\n                    virtualItemsCount = this.items.length;\n                  }\n                  this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);\n                }\n                this._updatescrollbars();\n              } else {\n                this._addItems();\n              }\n              this._renderItems();\n              if (this.allowDrag && this._enableDragDrop) {\n                this._enableDragDrop();\n              }\n              if (this.vScrollBar.css('visibility') != 'hidden') {\n                vScrollInstance.setPosition(value);\n              } else {\n                vScrollInstance.setPosition(0);\n              }\n              this.itemsByValue = new Array();\n              for (var i = 0; i < this.items.length; i++) {\n                var key = this.items[i].value;\n                if (this.items[i].value == \"\" || this.items[i].value == null) key = i;\n                this.itemsByValue[$.trim(key).split(\" \").join(\"?\")] = this.items[i];\n              }\n              this._raiseEvent('8', {\n                item: listBoxItem\n              });\n              if (this.items.length === 0) {\n                this.selectedIndex = -1;\n                this.selectedValue = null;\n                this._updateInputSelection();\n              }\n              if (this.rendered) {\n                this.rendered();\n              }\n              return true;\n            },\n            removeItem: function (item, removed) {\n              var newItem = this._getItemByParam(item);\n              var index = -1;\n              if (newItem && newItem.index != undefined && removed !== true) {\n                for (var i = 0; i < this.items.length; i++) {\n                  if (this.items[i].label == newItem.label && this.items[i].value == newItem.value) {\n                    index = i;\n                    break;\n                  }\n                }\n                if (index != -1) {\n                  return this.removeAt(index);\n                }\n              }\n              if (index == -1) {\n                return this.removeAt(newItem.index);\n              }\n            },\n            // gets all items.\n            getItems: function () {\n              return this.items;\n            },\n            disableItem: function (item) {\n              var newItem = this._getItemByParam(item);\n              this.disableAt(newItem.index);\n            },\n            enableItem: function (item) {\n              var newItem = this._getItemByParam(item);\n              this.enableAt(newItem.index);\n            },\n            // disables an item at position.\n            disableAt: function (index) {\n              if (!this.items) return false;\n              if (index < 0 || index > this.items.length - 1) return false;\n              this.items[index].disabled = true;\n              this._renderItems();\n              return true;\n            },\n            // enables an item at position.\n            enableAt: function (index) {\n              if (!this.items) return false;\n              if (index < 0 || index > this.items.length - 1) return false;\n              this.items[index].disabled = false;\n              this._renderItems();\n              return true;\n            },\n            destroy: function () {\n              if (this.source && this.source.unbindBindingUpdate) {\n                this.source.unbindBindingUpdate(this.element.id);\n              }\n              this._removeHandlers();\n              this.vScrollBar.jqxScrollBar('destroy');\n              this.hScrollBar.jqxScrollBar('destroy');\n              this.vScrollBar.remove();\n              this.hScrollBar.remove();\n              this.content.remove();\n              $.jqx.utilities.resize(this.host, null, true);\n              var vars = $.data(this.element, \"jqxListBox\");\n              delete this.hScrollInstance;\n              delete this.vScrollInstance;\n              delete this.vScrollBar;\n              delete this.hScrollBar;\n              delete this.content;\n              delete this.bottomRight;\n              delete this.itemswrapper;\n              delete this.visualItems;\n              delete this.visibleItems;\n              delete this.items;\n              delete this.groups;\n              delete this.renderedVisibleItems;\n              delete this._mousewheelfunc;\n              delete this._mousemovefunc;\n              delete this._cachedItemHtml;\n              delete this.itemsByValue;\n              delete this._activeElement;\n              delete this.source;\n              delete this.events;\n              if (this.input) {\n                this.input.remove();\n                delete this.input;\n              }\n              if (vars) {\n                delete vars.instance;\n              }\n              this.host.removeData();\n              this.host.removeClass();\n              this.host.remove();\n              this.element = null;\n              delete this.element;\n              this.host = null;\n              delete this.set;\n              delete this.get;\n              delete this.call;\n              delete this.host;\n            },\n            _raiseEvent: function (id, arg) {\n              if (this._stopEvents == true) return true;\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg;\n              args.owner = this;\n              this._updateInputSelection();\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              if (this.host != null) {\n                var result = this.host.trigger(event);\n              }\n              return result;\n            }\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          $.jqx.parseSourceTag = function (field) {\n            var items = new Array();\n            var options = $(field).find('option');\n            var groups = $(field).find('optgroup');\n            var ul = false;\n            if (options.length === 0) {\n              options = $(field).find('li');\n              if (options.length > 0) {\n                ul = true;\n              }\n            }\n            if (options.length === 0) {\n              var data = [];\n\n              // select rows.\n              var rows = $(field).find(\"tr\");\n              // select columns.\n              var columns = $(field).find(\"th\");\n              var rowOffset = 0;\n              if (columns.length === 0 && rows.length > 0) {\n                columns = $(rows[0]).find(\"td\");\n                rowOffset = 1;\n              }\n              var sourceColumns = [];\n              var dataFields = [];\n              var data = [];\n              for (var i = 0; i < rows.length; i++) {\n                var row = rows[i];\n                var datarow = {};\n                if (i === rowOffset + 1) {\n                  dataFields = [];\n                }\n                for (var j = 0; j < columns.length; j++) {\n                  // get column's title.\n                  var columnName = $.trim($(columns[j]).text());\n                  // select cell.\n                  var cell = $(row).find('td:eq(' + j + ')');\n                  datarow[columnName] = $.trim(cell.text());\n                  if (i === rowOffset) {\n                    sourceColumns.push({\n                      text: columnName,\n                      dataField: columnName\n                    });\n                    dataFields.push({\n                      name: columnName\n                    });\n                  }\n                  if (i === rowOffset + 1) {\n                    var type = typeof datarow[columnName];\n                    var format = '';\n                    if (type === \"string\") {\n                      if (datarow[columnName] === \"true\" || datarow[columnName] === \"false\") {\n                        type = \"bool\";\n                      } else if (!isNaN(parseFloat(datarow[columnName])) && datarow[columnName].indexOf('-') === -1 && datarow[columnName].indexOf('/') === -1) {\n                        type = \"number\";\n                        if (datarow[columnName].indexOf('.') >= 0) {\n                          format = \"f\";\n                        } else {\n                          format = \"n\";\n                        }\n                      } else if (datarow[columnName].indexOf('$') >= 0 || datarow[columnName].indexOf('%') >= 0) {\n                        type = \"number\";\n                        if (datarow[columnName].indexOf('$') >= 0) {\n                          format = \"c\";\n                        }\n                        if (datarow[columnName].indexOf('%') >= 0) {\n                          format = \"p\";\n                        }\n                        datarow[columnName] = datarow[columnName].replace('%', '').replace('$', '');\n                      } else if (new Date(datarow[columnName]).toString() !== \"Invalid Date\") {\n                        type = \"date\";\n                        format = \"d\";\n                      }\n                    }\n                    sourceColumns[j].cellsformat = format;\n                    if (type === \"number\") {\n                      sourceColumns[j].cellsalign = \"right\";\n                      sourceColumns[j].align = \"right\";\n                    }\n                    dataFields.push({\n                      name: columnName,\n                      type: type\n                    });\n                  }\n                }\n                if (i >= 1) {\n                  data[data.length] = datarow;\n                }\n              }\n              var source = {\n                localdata: data,\n                datatype: \"array\",\n                datafields: dataFields\n              };\n              return {\n                source: new $.jqx.dataAdapter(source),\n                columns: sourceColumns\n              };\n            }\n            var selectedOption = null;\n            var index = 0;\n            var selectedOption = -1;\n            var that = this;\n            var groupsArray = new Array();\n            $.each(options, function (index) {\n              var hasGroup = groups.find(this).length > 0;\n              var group = null;\n              if (this.text != null && (this.label == null || this.label == '')) {\n                this.label = this.text;\n              }\n              if (ul === true) {\n                this.label = $(this).text().trim();\n                this.selected = $(this).attr('data-selected');\n                this.checked = this.selected;\n                this.value = $(this).attr('data-value') || index;\n                this.disabled = $(this).attr('disabled');\n              }\n              var item = {\n                style: this.style.cssText,\n                selected: this.selected,\n                html: this.innerHTML.trim(),\n                classes: this.className,\n                disabled: this.disabled,\n                value: this.value,\n                label: this.label,\n                title: this.title,\n                originalItem: this\n              };\n              var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n              if (ie7 && !ul) {\n                if (item.value == '' && this.text != null && this.text.length > 0) {\n                  item.value = this.text;\n                }\n              }\n              if (hasGroup) {\n                group = groups.find(this).parent()[0].label;\n                item.group = group;\n                if (!groupsArray[group]) {\n                  groupsArray[group] = new Array();\n                  groupsArray.length++;\n                }\n                groupsArray[group].push(item);\n              }\n              if (this.selected) {\n                selectedOption = index;\n              }\n              item.checked = this.selected;\n              if (item.label !== undefined) {\n                items.push(item);\n              }\n            });\n            if (groupsArray.length > 0) {\n              var groupItems = new Array();\n              for (var obj in groupsArray) {\n                if (obj === \"indexOf\") continue;\n                var originalItem = null;\n                for (var i = 0; i < groups.length; i++) {\n                  if (obj === groups[i].label || groups[i].text) {\n                    originalItem = groups[i];\n                    break;\n                  }\n                }\n                $.each(groupsArray[obj], function (index, value) {\n                  if (this.label !== undefined) {\n                    groupItems.push(this);\n                  }\n                });\n              }\n              ;\n            }\n            if (groupItems && groupItems.length > 0) {\n              return {\n                items: groupItems,\n                index: selectedOption\n              };\n            } else {\n              return {\n                items: items,\n                index: selectedOption\n              };\n            }\n          };\n          $.jqx._jqxListBox.item = function () {\n            var result = {\n              group: '',\n              groupHtml: '',\n              selected: false,\n              isGroup: false,\n              highlighted: false,\n              value: null,\n              label: '',\n              html: null,\n              visible: true,\n              disabled: false,\n              element: null,\n              width: null,\n              height: null,\n              initialTop: null,\n              top: null,\n              left: null,\n              title: '',\n              index: -1,\n              checkBoxElement: null,\n              originalItem: null,\n              checked: false,\n              visibleIndex: -1\n            };\n            return result;\n          };\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/1610: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxMenu\", \"\", {});\n          $.extend($.jqx._jqxMenu.prototype, {\n            defineInstance: function () {\n              var settings = {\n                //Type: Array\n                //Gets the menu's items.\n                items: new Array(),\n                //Type: String.\n                //Default: 'horizontal'.\n                //Gets or sets the menu's display mode.\n                //Possible Values: 'horizontal', 'vertical', 'popup', 'simple'\n                mode: 'horizontal',\n                //Type: Number.\n                //Default: null.\n                //Sets the width.\n                width: null,\n                //Type: Number.\n                //Default: null.\n                //Sets the height.\n                height: null,\n                //Type: Number.\n                //Default: 'auto'.\n                //Sets the height.\n                minimizeWidth: 'auto',\n                //Type: String.\n                //Default: easeInOutSine.\n                //Gets or sets the animation's easing to one of the JQuery's supported easings.\n                easing: 'easeInOutSine',\n                //Type: Number.\n                //Default: 500.\n                //Gets or sets the duration of the show animation.\n                animationShowDuration: 200,\n                //Type: Number.\n                //Default: 'fast'.\n                //Gets or sets the duration of the hide animation.\n                animationHideDuration: 200,\n                // Type: Number\n                // Default: 0\n                // Gets or sets whether the menu is automatically closed after a period of time.\n                autoCloseInterval: 0,\n                //Type: Number.\n                //Default: 500.\n                //Gets or sets the delay before the start of the hide animation.\n                animationHideDelay: 100,\n                //Type: Number.\n                //Default: 200.\n                //Gets or sets the delay before the start of the show animation.\n                animationShowDelay: 10,\n                //Type: Array.\n                menuElements: new Array(),\n                //Type: Boolean.\n                //Default: true.\n                //Auto-Sizes the Menu's main items when the menu's mode is 'horizontal'.\n                autoSizeMainItems: false,\n                //Type: Boolean.\n                //Default: true.\n                //Automatically closes the opened popups after a click.\n                autoCloseOnClick: true,\n                //Type: Boolean.\n                //Default: true.\n                //Automatically closes the opened popups after mouse leave.\n                autoCloseOnMouseLeave: true,\n                //Type: Boolean.\n                //Default: true.\n                //Enables or disables the rounded corners.\n                enableRoundedCorners: true,\n                //Type: Boolean.\n                //Default: true.\n                //Enables or disables the Menu.\n                disabled: false,\n                //Type: Boolean.\n                //Default: true.\n                //Opens the Context Menu when the right-mouse button is pressed.\n                //When this property is set to false, the Open and Close functions can be used to open and close\n                //the Context Menu.\n                autoOpenPopup: true,\n                // Type: Boolean\n                // Default: true\n                // enables or disables the hover state.\n                enableHover: true,\n                // Type: Boolean\n                // Default: true\n                // opens the top level menu items when the user hovers them.\n                autoOpen: true,\n                // Type: Boolean\n                // Default: false\n                // When this property is true, the menu is auto generated using all of ul and li tags inside the host.\n                autoGenerate: true,\n                // Type: Boolean\n                // Default: false\n                // opens an item after a click by the user.\n                clickToOpen: false,\n                // Type: Boolean\n                // Default: false\n                // shows the top-level item arrows in the default horizontal menu mode.\n                showTopLevelArrows: false,\n                // Sets whether the menu is on touch device.\n                touchMode: 'auto',\n                // Sets menu's source.\n                source: null,\n                popupZIndex: 1000,\n                rtl: false,\n                keyboardNavigation: false,\n                lockFocus: false,\n                title: \"\",\n                // Menu events.\n                events: ['shown', 'closed', 'itemclick', 'initialized', 'open', 'close']\n              };\n              if (this === $.jqx._jqxMenu.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var self = this;\n              this.host.attr('role', 'menubar');\n              $.jqx.utilities.resize(this.host, function () {\n                self.refresh();\n              }, false, this.mode != \"popup\");\n              if (this.minimizeWidth != \"auto\" && this.minimizeWidth != null && this.width && this.width.toString().indexOf('%') == -1) {\n                $(window).resize(function () {\n                  self.refresh();\n                });\n              }\n              if (self.isMaterialized()) {\n                var elementStyle = window.getComputedStyle(this.element);\n                var animation = elementStyle.getPropertyValue('--jqx-dropdown-animation');\n                if (animation) {\n                  this.animationType = animation.trim();\n                  if (this.animationType === \"transform\") {\n                    this.animationShowDuration = 0;\n                    this.animationHideDuration = 0;\n                    this.animationShowDelay = 0;\n                  }\n                }\n              }\n              this.host.css('outline', 'none');\n              if (this.source) {\n                if (this.source != null) {\n                  var html = this.loadItems(this.source);\n                  this.element.innerHTML = html;\n                }\n              }\n              this._tmpHTML = this.element.innerHTML;\n              if (this.element.innerHTML.indexOf('UL')) {\n                var innerElement = this.host.find('ul:first');\n                if (innerElement.length > 0) {\n                  this._createMenu(innerElement[0]);\n                }\n              }\n              this.host.data('autoclose', {});\n              this._render();\n              this._setSize();\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                this.host.attr('hideFocus', true);\n              }\n            },\n            focus: function () {\n              try {\n                if (this.mode === \"popup\" && this.keyboardNavigation) {\n                  var $popupElementparent = this.host.closest('div.jqx-menu-wrapper');\n                  $popupElementparent.focus();\n                }\n                if (this.keyboardNavigation) {\n                  this.host.focus();\n                  var that = this;\n                  var setActiveItem = function () {\n                    if (!$.jqx.isHidden($(that.items[0].element))) {\n                      $(that.items[0].element).addClass(that.toThemeProperty('jqx-fill-state-focus'));\n                      that.activeItem = that.items[0];\n                    } else {\n                      var item = that._nextVisibleItem(that.items[0], 0);\n                      if (item) {\n                        $(item.element).addClass(that.toThemeProperty('jqx-fill-state-focus'));\n                        that.activeItem = item;\n                      }\n                    }\n                  };\n                  if (!this.activeItem) {\n                    setActiveItem();\n                  } else {\n                    if (!$.jqx.isHidden($(this.activeItem.element))) {\n                      $(this.activeItem.element).addClass(this.toThemeProperty('jqx-fill-state-focus'));\n                    } else {\n                      $(this.activeItem.element).removeClass(this.toThemeProperty('jqx-fill-state-focus'));\n                      setActiveItem();\n                    }\n                  }\n                }\n              } catch (error) {}\n            },\n            loadItems: function (items, subMenuWidth) {\n              if (items == null) {\n                return;\n              }\n              if (items.length == 0) return \"\";\n              var self = this;\n              this.items = new Array();\n              var html = '<ul class=\"jqx-menu-ul\">';\n              if (subMenuWidth) {\n                html = '<ul class=\"jqx-menu-ul\" style=\"width:' + subMenuWidth + ';\">';\n              }\n              $.map(items, function (item) {\n                if (item == undefined) return null;\n                html += self._parseItem(item);\n              });\n              html += '</ul>';\n              return html;\n            },\n            _parseItem: function (item) {\n              var html = \"\";\n              if (item == undefined) return null;\n              var label = item.label;\n              if (!item.label && item.html) {\n                label = item.html;\n              }\n              if (!label) {\n                label = \"Item\";\n              }\n              if (typeof item === 'string') {\n                label = item;\n              }\n              var selected = false;\n              if (item.selected != undefined && item.selected) {\n                selected = true;\n              }\n              var disabled = false;\n              if (item.disabled != undefined && item.disabled) {\n                disabled = true;\n              }\n              html += '<li';\n              if (disabled) {\n                html += ' item-disabled=\"true\" ';\n              }\n              if (item.label && !item.html) {\n                html += ' item-label=\"' + label + '\" ';\n              }\n              if (item.value != null) {\n                html += ' item-value=\"' + item.value + '\" ';\n              }\n              if (item.id != undefined) {\n                html += ' id=\"' + item.id + '\" ';\n              }\n              html += '>' + label;\n              if (item.items) {\n                if (item.subMenuWidth) {\n                  html += this.loadItems(item.items, item.subMenuWidth);\n                } else {\n                  html += this.loadItems(item.items);\n                }\n              }\n              html += '</li>';\n              return html;\n            },\n            _setSize: function () {\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.host.width(this.width);\n              }\n              ;\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.host.height(this.height);\n              }\n              ;\n              if (this.height === null) {\n                this.host.height('auto');\n              }\n              var me = this;\n              if (this.minimizeWidth != null && this.mode != \"popup\") {\n                var windowWidth = $(window).width();\n                if (!$.jqx.response) {\n                  var isDesktop = false;\n                  if (navigator.userAgent.match(/Windows|Linux|MacOS/)) {\n                    var isWP = navigator.userAgent.indexOf('Windows Phone') >= 0 || navigator.userAgent.indexOf('WPDesktop') >= 0 || navigator.userAgent.indexOf('IEMobile') >= 0 || navigator.userAgent.indexOf('ZuneWP7') >= 0;\n                    if (!isWP) {\n                      isDesktop = true;\n                    }\n                  }\n                  var w = this.minimizeWidth;\n                  if (isDesktop && this.minimizeWidth == 'auto') {\n                    return;\n                  }\n                }\n                if (this.minimizeWidth == 'auto' && $.jqx.response) {\n                  var response = new $.jqx.response();\n                  if (response.device.type == \"Phone\" || response.device.type == \"Tablet\") {\n                    if (!this.minimized) {\n                      this.minimize();\n                    }\n                  }\n                } else {\n                  if (windowWidth < w && !this.minimized) {\n                    this.minimize();\n                  } else if (this.minimized && windowWidth >= w) {\n                    this.restore();\n                  }\n                }\n              }\n            },\n            minimize: function () {\n              if (this.minimized) return;\n              var me = this;\n              this.host.addClass(this.toThemeProperty('jqx-menu-minimized'));\n              this.minimized = true;\n              this._tmpMode = this.mode;\n              this.mode = \"simple\";\n              var wrapper = this.host.closest('div.jqx-menu-wrapper');\n              wrapper.remove();\n              $(\"#menuWrapper\" + this.element.id).remove();\n              $.each(this.items, function () {\n                var item = this;\n                var $menuElement = $(item.element);\n                var $submenu = $(item.subMenuElement);\n                var $popupElement = $submenu.closest('div.jqx-menu-popup');\n                $popupElement.remove();\n              });\n              if (this.source) {\n                var html = this.loadItems(this.source);\n                this.element.innerHTML = html;\n                this._tmpHTML = this.element.innerHTML;\n              }\n              this.element.innerHTML = this._tmpHTML;\n              if (this.element.innerHTML.indexOf('UL')) {\n                var innerElement = this.host.find('ul:first');\n                if (innerElement.length > 0) {\n                  this._createMenu(innerElement[0]);\n                }\n              }\n              this._render();\n              var ul = this.host.find('ul:first');\n              ul.wrap('<div class=\"jqx-menu-wrapper\" style=\"z-index:' + this.popupZIndex + '; padding: 0px; display: none; margin: 0px; height: auto; width: auto; position: absolute; top: 0; left: 0; display: block; visibility: visible;\"></div>');\n              var wrapper = ul.closest('div.jqx-menu-wrapper');\n              wrapper[0].id = \"menuWrapper\" + this.element.id;\n              wrapper.detach();\n              wrapper.appendTo($(document.body));\n              wrapper.addClass(this.toThemeProperty('jqx-widget'));\n              wrapper.addClass(this.toThemeProperty('jqx-menu'));\n              wrapper.addClass(this.toThemeProperty('jqx-menu-minimized'));\n              wrapper.addClass(this.toThemeProperty('jqx-widget-header'));\n              ul.children().hide();\n              wrapper.hide();\n              wrapper.find('ul').addClass(this.toThemeProperty('jqx-menu-ul-minimized'));\n              this.minimizedItem = $(\"<div></div>\");\n              this.minimizedItem.addClass(this.toThemeProperty('jqx-item'));\n              this.minimizedItem.addClass(this.toThemeProperty('jqx-menu-item-top'));\n              this.addHandler(wrapper, 'keydown', function (event) {\n                return me.handleKeyDown(event);\n              });\n              this.minimizedItem.addClass(this.toThemeProperty('jqx-menu-minimized-button'));\n              this.minimizedItem.prependTo(this.host);\n              this.titleElement = $(\"<div>\" + this.title + \"</div>\");\n              this.titleElement.addClass(this.toThemeProperty('jqx-item'));\n              this.titleElement.addClass(this.toThemeProperty('jqx-menu-title'));\n              this.titleElement.prependTo(this.host);\n              $(\"<div style='clear:both;'></div>\").insertAfter(this.minimizedItem);\n              me.minimizedHidden = true;\n              var hideMenu = function (e) {\n                me.minimizedHidden = true;\n                me.minimizedItem.show();\n                var fromRight = false;\n                if (me.minimizedItem.css('float') == 'right') {\n                  fromRight = true;\n                }\n                wrapper.animate({\n                  left: !fromRight ? -wrapper.outerWidth() : me.host.coord().left + me.host.width() + wrapper.width(),\n                  opacity: 0\n                }, me.animationHideDuration, function () {\n                  wrapper.find('ul:first').children().hide();\n                  wrapper.hide();\n                });\n              };\n              var toggleMenu = function (e) {\n                if (me.minimizedHidden) {\n                  wrapper.find('ul:first').children().show();\n                  me.minimizedHidden = false;\n                  wrapper.show();\n                  wrapper.css('opacity', 0);\n                  wrapper.css('left', -wrapper.outerWidth());\n                  var fromRight = false;\n                  var wrapperWidth = wrapper.width();\n                  if (me.minimizedItem.css('float') == 'right') {\n                    wrapper.css('left', me.host.coord().left + me.host.width() + wrapperWidth);\n                    fromRight = true;\n                  }\n                  wrapper.css('top', me.host.coord().top + me.host.height());\n                  wrapper.animate({\n                    left: !fromRight ? me.host.coord().left : me.host.coord().left + me.host.width() - wrapperWidth,\n                    opacity: 0.95\n                  }, me.animationShowDuration, function () {});\n                } else {\n                  hideMenu(e);\n                }\n                me._raiseEvent('2', {\n                  type: \"mouse\",\n                  item: me.minimizedItem[0],\n                  event: e\n                });\n                me._setSize();\n              };\n              this.addHandler($(window), 'orientationchange.jqxmenu' + this.element.id, function (e) {\n                setTimeout(function () {\n                  if (!me.minimizedHidden) {\n                    var wrapperWidth = wrapper.width();\n                    var fromRight = false;\n                    var wrapperWidth = wrapper.width();\n                    if (me.minimizedItem.css('float') == 'right') {\n                      fromRight = true;\n                    }\n                    wrapper.css('top', me.host.coord().top + me.host.height());\n                    wrapper.css({\n                      left: !fromRight ? me.host.coord().left : me.host.coord().left + me.host.width() - wrapperWidth\n                    });\n                  }\n                }, 25);\n              });\n              this.addHandler(this.minimizedItem, 'click', function (e) {\n                toggleMenu(e);\n              });\n            },\n            restore: function () {\n              if (!this.minimized) return;\n              this.host.find('ul').removeClass(this.toThemeProperty('jqx-menu-ul-minimized'));\n              this.host.removeClass(this.toThemeProperty('jqx-menu-minimized'));\n              this.minimized = false;\n              this.mode = this._tmpMode;\n              if (this.minimizedItem) this.minimizedItem.remove();\n              var wrapper = $(\"#menuWrapper\" + this.element.id);\n              wrapper.remove();\n              if (this.source) {\n                var html = this.loadItems(this.source);\n                this.element.innerHTML = html;\n                this._tmpHTML = html;\n              }\n              this.element.innerHTML = this._tmpHTML;\n              if (this.element.innerHTML.indexOf('UL')) {\n                var innerElement = this.host.find('ul:first');\n                if (innerElement.length > 0) {\n                  this._createMenu(innerElement[0]);\n                }\n              }\n              this._setSize();\n              this._render();\n            },\n            isTouchDevice: function () {\n              if (this._isTouchDevice != undefined) return this._isTouchDevice;\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (this.touchMode == true) {\n                isTouchDevice = true;\n              } else if (this.touchMode == false) {\n                isTouchDevice = false;\n              }\n              if (isTouchDevice) {\n                this.host.addClass(this.toThemeProperty('jqx-touch'));\n                $(\".jqx-menu-item\").addClass(this.toThemeProperty('jqx-touch'));\n              }\n              this._isTouchDevice = isTouchDevice;\n              return isTouchDevice;\n            },\n            refresh: function (initialRefresh) {\n              if (!initialRefresh) {\n                this._setSize();\n              }\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this.refresh();\n            },\n            _closeAll: function (e) {\n              var me = e != null ? e.data : this;\n              var items = me.items;\n              $.each(items, function () {\n                var item = this;\n                if (item.hasItems == true) {\n                  if (item.isOpen) {\n                    me._closeItem(me, item);\n                  }\n                }\n              });\n              if (me.mode == 'popup') {\n                if (e != null) {\n                  var rightclick = me._isRightClick(e);\n                  if (!rightclick) {\n                    me.close();\n                  }\n                }\n              }\n            },\n            // @param id\n            // closes a menu item by id.\n            closeItem: function (id) {\n              if (id == null) return false;\n              var theId = id;\n              var element = document.getElementById(theId);\n              var me = this;\n              $.each(me.items, function () {\n                var item = this;\n                if (item.isOpen == true && item.element == element) {\n                  me._closeItem(me, item);\n                  if (item.parentId) {\n                    //        me.closeItem(item.parentId);\n                  }\n                }\n              });\n              return true;\n            },\n            // @param id\n            // opens a menu item by id.\n            openItem: function (id) {\n              if (id == null) return false;\n              var theId = id;\n              var element = document.getElementById(theId);\n              var me = this;\n              $.each(me.items, function () {\n                var item = this;\n                if (item.isOpen == false && item.element == element) {\n                  me._openItem(me, item);\n                  if (item.parentId) {\n                    me.openItem(item.parentId);\n                  }\n                }\n              });\n              return true;\n            },\n            _getClosedSubMenuOffset: function (item) {\n              var $submenu = $(item.subMenuElement);\n              var top = -$submenu.outerHeight();\n              var left = -$submenu.outerWidth();\n              var isTopItem = item.level == 0 && this.mode == 'horizontal';\n              if (isTopItem) {\n                left = 0;\n              } else {\n                top = 0;\n              }\n              switch (item['openVerticalDirection']) {\n                case 'up':\n                case 'center':\n                  top = $submenu.outerHeight();\n                  break;\n              }\n              switch (item['openHorizontalDirection']) {\n                case this._getDir('left'):\n                  if (isTopItem) {\n                    left = 0;\n                  } else {\n                    left = $submenu.outerWidth();\n                  }\n                  break;\n                case 'center':\n                  if (isTopItem) {\n                    left = 0;\n                  } else {\n                    left = $submenu.outerWidth();\n                  }\n                  break;\n              }\n              return {\n                left: left,\n                top: top\n              };\n            },\n            _closeItem: function (me, item, subs, force) {\n              if (me == null || item == null) return false;\n              var $submenu = $(item.subMenuElement);\n              var isTopItem = item.level == 0 && this.mode == 'horizontal';\n              var subMenuOffset = this._getClosedSubMenuOffset(item);\n              var top = subMenuOffset.top;\n              var left = subMenuOffset.left;\n              var $menuElement = $(item.element);\n              var $popupElement = $submenu.closest('div.jqx-menu-popup');\n              if ($popupElement != null) {\n                $popupElement.removeClass('show');\n                var delay = me.animationHideDelay;\n                if (force == true) {\n                  //     clearTimeout($submenu.data('timer').hide);\n                  delay = 0;\n                }\n                if ($submenu.data('timer') && $submenu.data('timer').show != null) {\n                  clearTimeout($submenu.data('timer').show);\n                  $submenu.data('timer').show = null;\n                }\n                var hideFunc = function () {\n                  item.isOpen = false;\n                  if (isTopItem) {\n                    $submenu.stop().animate({\n                      top: top\n                    }, me.animationHideDuration, function () {\n                      $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                      $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));\n                      $(item.element).removeClass(me.toThemeProperty('jqx-rc-b-expanded'));\n                      $popupElement.removeClass(me.toThemeProperty('jqx-rc-t-expanded'));\n                      var $arrowSpan = $(item.arrow);\n                      if ($arrowSpan.length > 0 && me.showTopLevelArrows) {\n                        $arrowSpan.removeClass();\n                        if (item.openVerticalDirection == 'down') {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));\n                        } else {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));\n                        }\n                      }\n                      $.jqx.aria($(item.element), 'aria-expanded', false);\n                      $popupElement.css({\n                        display: 'none'\n                      });\n                      if (me.animationHideDuration == 0) {\n                        $submenu.css({\n                          top: top\n                        });\n                      }\n                      me._raiseEvent('1', item);\n                    });\n                  } else {\n                    if (!$.jqx.browser.msie) {\n                      //       $popupElement.stop().animate({ opacity: 0 }, me.animationHideDuration, function () {\n                      //         });\n                    }\n                    $submenu.stop().animate({\n                      left: left\n                    }, me.animationHideDuration, function () {\n                      if (me.animationHideDuration == 0) {\n                        $submenu.css({\n                          left: left\n                        });\n                      }\n                      if (item.level > 0) {\n                        $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                        $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-selected'));\n                        var $arrowSpan = $(item.arrow);\n                        if ($arrowSpan.length > 0) {\n                          $arrowSpan.removeClass();\n                          if (item.openHorizontalDirection != 'left') {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                          } else {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left')));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));\n                          }\n                        }\n                      } else {\n                        $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                        $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));\n                        var $arrowSpan = $(item.arrow);\n                        if ($arrowSpan.length > 0) {\n                          $arrowSpan.removeClass();\n                          if (item.openHorizontalDirection != 'left') {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('right')));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                          } else {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('left')));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));\n                          }\n                        }\n                      }\n                      $.jqx.aria($(item.element), 'aria-expanded', false);\n                      $popupElement.css({\n                        display: 'none'\n                      });\n                      me._raiseEvent('1', item);\n                    });\n                  }\n                };\n                if (delay > 0) {\n                  if ($submenu.data('timer')) {\n                    $submenu.data('timer').hide = setTimeout(function () {\n                      hideFunc();\n                    }, delay);\n                  }\n                } else {\n                  hideFunc();\n                }\n                if (subs != undefined && subs) {\n                  var children = $submenu.children(); // find('.' + me.toThemeProperty('jqx-menu-item'));\n                  $.each(children, function () {\n                    if (me.menuElements[this.id] && me.menuElements[this.id].isOpen) {\n                      var $submenu = $(me.menuElements[this.id].subMenuElement);\n                      me._closeItem(me, me.menuElements[this.id], true, true);\n                    }\n                  });\n                }\n              }\n            },\n            // @param id\n            // @param array.\n            // get menu item's sub items.\n            getSubItems: function (id, array) {\n              if (id == null) return false;\n              var me = this;\n              var subItems = new Array();\n              if (array != null) {\n                $.extend(subItems, array);\n              }\n              var theId = id;\n              var item = this.menuElements[theId];\n              var $submenu = $(item.subMenuElement);\n              var children = $submenu.find('.jqx-menu-item');\n              $.each(children, function () {\n                subItems[this.id] = me.menuElements[this.id];\n                var innerArray = me.getSubItems(this.id, subItems);\n                $.extend(subItems, innerArray);\n              });\n              return subItems;\n            },\n            // disables a menu item.\n            // @param id\n            // @param Boolean\n            disable: function (id, disable) {\n              if (id == null) return;\n              var theId = id;\n              var me = this;\n              if (this.menuElements[theId]) {\n                var item = this.menuElements[theId];\n                item.disabled = disable;\n                var $element = $(item.element);\n                item.element.disabled = disable;\n                $.each($element.children(), function () {\n                  this.disabled = disable;\n                });\n                if (disable) {\n                  $element.addClass(me.toThemeProperty('jqx-menu-item-disabled'));\n                  $element.addClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                } else {\n                  $element.removeClass(me.toThemeProperty('jqx-menu-item-disabled'));\n                  $element.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                }\n              }\n            },\n            getItem: function (id) {\n              if (this.menuElements[id]) {\n                var item = this.menuElements[id];\n                return item;\n              }\n              return null;\n            },\n            disableItem: function (id) {\n              this.disable(id, true);\n            },\n            hideItem: function (id) {\n              if (this.menuElements[id]) {\n                var item = this.menuElements[id];\n                $(item.element).hide();\n              }\n            },\n            showItem: function (id) {\n              if (this.menuElements[id]) {\n                var item = this.menuElements[id];\n                $(item.element).show();\n              }\n            },\n            enableItem: function (id) {\n              this.disable(id, false);\n            },\n            _setItemProperty: function (id, propertyname, value) {\n              if (id == null) return;\n              var theId = id;\n              var me = this;\n              if (this.menuElements[theId]) {\n                var item = this.menuElements[theId];\n                if (item[propertyname]) {\n                  item[propertyname] = value;\n                }\n              }\n            },\n            // sets the open direction of an item.\n            // @param id\n            // @param String\n            // @param String\n            setItemOpenDirection: function (id, horizontal, vertical) {\n              if (id == null) return;\n              var theId = id;\n              var me = this;\n              var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n              if (this.menuElements[theId]) {\n                var item = this.menuElements[theId];\n                if (horizontal != null) {\n                  item['openHorizontalDirection'] = horizontal;\n                  if (item.hasItems && item.level > 0) {\n                    var $element = $(item.element);\n                    if ($element != undefined) {\n                      var $arrowSpan = $(item.arrow);\n                      if (item.arrow == null) {\n                        $arrowSpan = $('<span id=\"arrow' + $element[0].id + '\"></span>');\n                        if (!ie7) {\n                          $arrowSpan.prependTo($element);\n                        } else {\n                          $arrowSpan.appendTo($element);\n                        }\n                        item.arrow = $arrowSpan[0];\n                      }\n                      $arrowSpan.removeClass();\n                      if (item.openHorizontalDirection == 'left') {\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left')));\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));\n                      } else {\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                      }\n                      $arrowSpan.css('visibility', 'inherit');\n                      if (!ie7) {\n                        $arrowSpan.css('display', 'block');\n                        $arrowSpan.css('float', 'right');\n                      } else {\n                        $arrowSpan.css('display', 'inline-block');\n                        $arrowSpan.css('float', 'none');\n                      }\n                    }\n                  }\n                }\n                if (vertical != null) {\n                  item['openVerticalDirection'] = vertical;\n                  var $arrowSpan = $(item.arrow);\n                  var $element = $(item.element);\n                  if (!me.showTopLevelArrows) {\n                    return;\n                  }\n                  if ($element != undefined) {\n                    if (item.arrow == null) {\n                      $arrowSpan = $('<span id=\"arrow' + $element[0].id + '\"></span>');\n                      if (!ie7) {\n                        $arrowSpan.prependTo($element);\n                      } else {\n                        $arrowSpan.appendTo($element);\n                      }\n                      item.arrow = $arrowSpan[0];\n                    }\n                    $arrowSpan.removeClass();\n                    if (item.openVerticalDirection == 'down') {\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));\n                    } else {\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));\n                    }\n                    $arrowSpan.css('visibility', 'inherit');\n                    if (!ie7) {\n                      $arrowSpan.css('display', 'block');\n                      $arrowSpan.css('float', 'right');\n                    } else {\n                      $arrowSpan.css('display', 'inline-block');\n                      $arrowSpan.css('float', 'none');\n                    }\n                  }\n                }\n              }\n            },\n            _getSiblings: function (item) {\n              var siblings = new Array();\n              var index = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i] == item) continue;\n                if (this.items[i].parentId == item.parentId && this.items[i].hasItems) {\n                  siblings[index++] = this.items[i];\n                }\n              }\n              return siblings;\n            },\n            _openItem: function (me, item, zIndex) {\n              if (me == null || item == null) return false;\n              if (item.isOpen) return false;\n              if (item.disabled) return false;\n              if (me.disabled) return false;\n              var zIndx = me.popupZIndex;\n              if (zIndex != undefined) {\n                zIndx = zIndex;\n              }\n              var hideDuration = me.animationHideDuration;\n              me.animationHideDuration = 0;\n              me._closeItem(me, item, true, true);\n              me.animationHideDuration = hideDuration;\n              $(item.element).focus();\n\n              //  this.host.focus();\n\n              var popupElementoffset = [5, 5];\n              var $submenu = $(item.subMenuElement);\n              if ($submenu != null) {\n                $submenu.stop();\n              }\n              // stop hiding process.\n              if ($submenu.data('timer') && $submenu.data('timer').hide != null) {\n                clearTimeout($submenu.data('timer').hide);\n                //      $submenu.data('timer').hide = null;\n              }\n              var $popupElement = $submenu.closest('div.jqx-menu-popup');\n              var $menuElement = $(item.element);\n              var offset = item.level == 0 ? this._getOffset(item.element) : $menuElement.position();\n              if (item.level > 0 && this.hasTransform) {\n                var topTransform = parseInt($menuElement.coord().top) - parseInt(this._getOffset(item.element).top);\n                offset.top += topTransform;\n              }\n              if (item.level == 0 && this.mode == 'popup') {\n                offset = $menuElement.coord();\n              }\n              var isTopItem = item.level == 0 && this.mode == 'horizontal';\n              var menuItemLeftOffset = isTopItem ? offset.left : this.menuElements[item.parentId] != null && this.menuElements[item.parentId].subMenuElement != null ? parseInt($($(this.menuElements[item.parentId].subMenuElement).closest('div.jqx-menu-popup')).outerWidth()) - popupElementoffset[0] : parseInt($submenu.outerWidth());\n              $popupElement.css({\n                visibility: 'visible',\n                display: 'block',\n                left: menuItemLeftOffset,\n                top: isTopItem ? offset.top + $menuElement.outerHeight() : offset.top,\n                zIndex: zIndx\n              });\n              $submenu.css('display', 'block');\n              if (this.mode != 'horizontal' && item.level == 0) {\n                var hostOffset = this._getOffset(this.element);\n                $popupElement.css('left', -1 + hostOffset.left + this.host.outerWidth());\n\n                //          $popupElement.css('left', -2 + offset.left + this.host.width() - popupElementoffset[0]);\n                $submenu.css('left', -$submenu.outerWidth());\n              } else {\n                var subMenuOffset = this._getClosedSubMenuOffset(item);\n                $submenu.css('left', subMenuOffset.left);\n                $submenu.css('top', subMenuOffset.top);\n              }\n              $popupElement.css({\n                height: parseInt($submenu.outerHeight()) + parseInt(popupElementoffset[1]) + 'px'\n              });\n              var top = 0;\n              var left = 0;\n              switch (item['openVerticalDirection']) {\n                case 'up':\n                  if (isTopItem) {\n                    $submenu.css('top', $submenu.outerHeight());\n                    top = popupElementoffset[1];\n                    var paddingBottom = parseInt($submenu.parent().css('padding-bottom'));\n                    if (isNaN(paddingBottom)) paddingBottom = 0;\n                    if (paddingBottom > 0) {\n                      $popupElement.addClass(this.toThemeProperty('jqx-menu-popup-clear'));\n                    }\n                    $submenu.css('top', $submenu.outerHeight() - paddingBottom);\n                    $popupElement.css({\n                      display: 'block',\n                      top: offset.top - $popupElement.outerHeight(),\n                      zIndex: zIndx\n                    });\n                  } else {\n                    top = popupElementoffset[1];\n                    $submenu.css('top', $submenu.outerHeight());\n                    $popupElement.css({\n                      display: 'block',\n                      top: offset.top - $popupElement.outerHeight() + popupElementoffset[1] + $menuElement.outerHeight(),\n                      zIndex: zIndx\n                    });\n                  }\n                  break;\n                case 'center':\n                  if (isTopItem) {\n                    $submenu.css('top', 0);\n                    $popupElement.css({\n                      display: 'block',\n                      top: offset.top - $popupElement.outerHeight() / 2 + popupElementoffset[1],\n                      zIndex: zIndx\n                    });\n                  } else {\n                    $submenu.css('top', 0);\n                    $popupElement.css({\n                      display: 'block',\n                      top: offset.top + $menuElement.outerHeight() / 2 - $popupElement.outerHeight() / 2 + popupElementoffset[1],\n                      zIndex: zIndx\n                    });\n                  }\n                  break;\n              }\n              switch (item['openHorizontalDirection']) {\n                case this._getDir('left'):\n                  if (isTopItem) {\n                    $popupElement.css({\n                      left: offset.left - ($popupElement.outerWidth() - $menuElement.outerWidth() - popupElementoffset[0])\n                    });\n                  } else {\n                    left = 0;\n                    $submenu.css('left', $popupElement.outerWidth());\n                    $popupElement.css({\n                      left: offset.left - $popupElement.outerWidth() + 2 * item.level\n                    });\n                  }\n                  break;\n                case 'center':\n                  if (isTopItem) {\n                    $popupElement.css({\n                      left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2)\n                    });\n                  } else {\n                    $popupElement.css({\n                      left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2)\n                    });\n                    $submenu.css('left', $popupElement.outerWidth());\n                  }\n                  break;\n              }\n              if (isTopItem) {\n                if (parseInt($submenu.css('top')) == top) {\n                  item.isOpen = true;\n                  return;\n                }\n              } else if (parseInt($submenu.css('left')) == left) {\n                item.isOpen == true;\n                return;\n              }\n              $.each(me._getSiblings(item), function () {\n                me._closeItem(me, this, true, true);\n              });\n              var hideDelay = $.data(me.element, 'animationHideDelay');\n              me.animationHideDelay = hideDelay;\n              if (this.autoCloseInterval > 0) {\n                if (this.host.data('autoclose') != null && this.host.data('autoclose').close != null) {\n                  clearTimeout(this.host.data('autoclose').close);\n                }\n                if (this.host.data('autoclose') != null) {\n                  this.host.data('autoclose').close = setTimeout(function () {\n                    me._closeAll();\n                  }, this.autoCloseInterval);\n                }\n              }\n              if ($submenu.data('timer')) {\n                $submenu.data('timer').show = setTimeout(function () {\n                  if ($popupElement != null) {\n                    if (isTopItem) {\n                      $submenu.stop();\n                      $submenu.css('left', left);\n                      if (!$.jqx.browser.msie) {\n                        //      $popupElement.css('opacity', 0.0);\n                      }\n                      $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                      $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));\n                      if (item.openVerticalDirection == \"down\") {\n                        $(item.element).addClass(me.toThemeProperty('jqx-rc-b-expanded'));\n                        $popupElement.addClass(me.toThemeProperty('jqx-rc-t-expanded'));\n                        $popupElement.addClass(me.toThemeProperty('show'));\n                      } else {\n                        $(item.element).addClass(me.toThemeProperty('jqx-rc-t-expanded'));\n                        $popupElement.addClass(me.toThemeProperty('jqx-rc-b-expanded'));\n                        $popupElement.addClass(me.toThemeProperty('show'));\n                      }\n                      var $arrowSpan = $(item.arrow);\n                      if ($arrowSpan.length > 0 && me.showTopLevelArrows) {\n                        $arrowSpan.removeClass();\n                        if (item.openVerticalDirection == 'down') {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down-selected'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));\n                        } else {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up-selected'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));\n                        }\n                      }\n                      if (me.animationShowDuration == 0) {\n                        $submenu.css({\n                          top: top\n                        });\n                        item.isOpen = true;\n                        me._raiseEvent('0', item);\n                        $.jqx.aria($(item.element), 'aria-expanded', true);\n                      } else {\n                        $submenu.animate({\n                          top: top\n                        }, me.animationShowDuration, me.easing, function () {\n                          item.isOpen = true;\n                          $.jqx.aria($(item.element), 'aria-expanded', true);\n                          me._raiseEvent('0', item);\n                        }); //animate submenu into view\n                      }\n                    } else {\n                      $submenu.stop();\n                      $submenu.css('top', top);\n                      $popupElement.addClass(me.toThemeProperty('show'));\n                      if (!$.jqx.browser.msie) {\n                        //     $popupElement.css('opacity', 0.0);\n                      }\n                      if (item.level > 0) {\n                        $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                        $menuElement.addClass(me.toThemeProperty('jqx-menu-item-selected'));\n                        var $arrowSpan = $(item.arrow);\n                        if ($arrowSpan.length > 0) {\n                          $arrowSpan.removeClass();\n                          if (item.openHorizontalDirection != 'left') {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right') + '-selected'));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                          } else {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left') + '-selected'));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));\n                          }\n                        }\n                      } else {\n                        $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                        $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));\n                        var $arrowSpan = $(item.arrow);\n                        if ($arrowSpan.length > 0) {\n                          $arrowSpan.removeClass();\n                          if (item.openHorizontalDirection != 'left') {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right') + '-selected'));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                          } else {\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left') + '-selected'));\n                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));\n                          }\n                        }\n                      }\n                      if (!$.jqx.browser.msie) {\n                        //      $popupElement.animate({ opacity: 1 }, 2 * me.animationShowDuration, me.easing,\n                        //   function () {\n\n                        // })\n                      }\n                      if (me.animationShowDuration == 0) {\n                        $submenu.css({\n                          left: left\n                        });\n                        me._raiseEvent('0', item);\n                        item.isOpen = true;\n                        $.jqx.aria($(item.element), 'aria-expanded', true);\n                      } else {\n                        $submenu.animate({\n                          left: left\n                        }, me.animationShowDuration, me.easing, function () {\n                          me._raiseEvent('0', item);\n                          item.isOpen = true;\n                          $.jqx.aria($(item.element), 'aria-expanded', true);\n                        }); //animate submenu into view\n                      }\n                    }\n                  }\n                }, this.animationShowDelay);\n              }\n            },\n            _getDir: function (dir) {\n              switch (dir) {\n                case 'left':\n                  return !this.rtl ? 'left' : 'right';\n                case 'right':\n                  return this.rtl ? 'left' : 'right';\n              }\n              return 'left';\n            },\n            _applyOrientation: function (mode, oldmode) {\n              var me = this;\n              var maxHeight = 0;\n              me.host.removeClass(me.toThemeProperty('jqx-menu-horizontal'));\n              me.host.removeClass(me.toThemeProperty('jqx-menu-vertical'));\n              me.host.removeClass(me.toThemeProperty('jqx-menu'));\n              me.host.removeClass(me.toThemeProperty('jqx-widget'));\n              me.host.addClass(me.toThemeProperty('jqx-widget'));\n              me.host.addClass(me.toThemeProperty('jqx-menu'));\n              if (mode != undefined && oldmode != undefined && oldmode == 'popup') {\n                if (me.host.parent().length > 0 && me.host.parent().parent().length > 0 && me.host.parent().parent()[0] == document.body) {\n                  var oldHost = $.data(document.body, 'jqxMenuOldHost' + me.element.id);\n                  if (oldHost != null) {\n                    var $popupElementparent = me.host.closest('div.jqx-menu-wrapper');\n                    $popupElementparent.remove();\n                    $popupElementparent.appendTo(oldHost);\n                    me.host.css('display', 'block');\n                    me.host.css('visibility', 'visible');\n                    $popupElementparent.css('display', 'block');\n                    $popupElementparent.css('visibility', 'visible');\n                  }\n                }\n              } else if (mode == undefined && oldmode == undefined) {\n                $.data(document.body, 'jqxMenuOldHost' + me.element.id, me.host.parent()[0]);\n              }\n              if (me.autoOpenPopup) {\n                if (me.mode == 'popup') {\n                  me.addHandler($(document), 'contextmenu.' + me.element.id, function (e) {\n                    return false;\n                  });\n                  me.addHandler($(document), 'mousedown.menu' + me.element.id, function (event) {\n                    me._openContextMenu(event);\n                  });\n                } else {\n                  me.removeHandler($(document), 'contextmenu.' + me.element.id);\n                  me.removeHandler($(document), 'mousedown.menu' + me.element.id);\n                }\n              } else {\n                me.removeHandler($(document), 'contextmenu.' + me.element.id);\n                me.removeHandler($(document), 'mousedown.menu' + me.element.id);\n                me.addHandler($(document), 'contextmenu.' + me.element.id, function (e) {\n                  if (e.target && e.target.className.indexOf && e.target.className.indexOf('jqx-menu') >= 0) {\n                    return false;\n                  }\n                });\n              }\n              if (me.rtl) {\n                me.host.addClass(me.toThemeProperty('jqx-rtl'));\n              }\n              switch (me.mode) {\n                case 'horizontal':\n                  me.host.addClass(me.toThemeProperty('jqx-widget-header'));\n                  me.host.addClass(me.toThemeProperty('jqx-menu-horizontal'));\n                  $.each(me.items, function () {\n                    var item = this;\n                    var $element = $(item.element);\n                    var $arrowSpan = $(item.arrow);\n                    $arrowSpan.removeClass();\n                    if (item.hasItems && item.level > 0) {\n                      var $arrowSpan = $('<span style=\"border: none; background-color: transparent;\" id=\"arrow' + $element[0].id + '\"></span>');\n                      $arrowSpan.prependTo($element);\n                      $arrowSpan.css('float', me._getDir('right'));\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));\n                      $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                      item.arrow = $arrowSpan[0];\n                    }\n                    if (item.level == 0) {\n                      $(item.element).css('float', me._getDir('left'));\n                      if (!item.ignoretheme && item.hasItems && me.showTopLevelArrows) {\n                        var $arrowSpan = $('<span style=\"border: none; background-color: transparent;\" id=\"arrow' + $element[0].id + '\"></span>');\n                        var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n                        if (item.arrow == null) {\n                          if (!ie7) {\n                            $arrowSpan.prependTo($element);\n                          } else {\n                            $arrowSpan.appendTo($element);\n                          }\n                        } else {\n                          $arrowSpan = $(item.arrow);\n                        }\n                        if (item.openVerticalDirection == 'down') {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));\n                        } else {\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));\n                          $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));\n                        }\n                        $arrowSpan.css('visibility', 'inherit');\n                        if (!ie7) {\n                          $arrowSpan.css('display', 'block');\n                          $arrowSpan.css('float', 'right');\n                        } else {\n                          $arrowSpan.css('display', 'inline-block');\n                        }\n                        item.arrow = $arrowSpan[0];\n                      } else if (!item.ignoretheme && item.hasItems && !me.showTopLevelArrows) {\n                        if (item.arrow != null) {\n                          var $arrowSpan = $(item.arrow);\n                          $arrowSpan.remove();\n                          item.arrow = null;\n                        }\n                      }\n                      maxHeight = Math.max(maxHeight, $element.height());\n                    }\n                  });\n                  break;\n                case 'vertical':\n                case 'popup':\n                case 'simple':\n                  me.host.addClass(me.toThemeProperty('jqx-menu-vertical'));\n                  $.each(me.items, function () {\n                    var item = this;\n                    var $element = $(item.element);\n                    if (item.hasItems && !item.ignoretheme) {\n                      if (item.arrow) {\n                        $(item.arrow).remove();\n                      }\n                      if (me.mode == 'simple') return true;\n                      var $arrowSpan = $('<span style=\"border: none; background-color: transparent;\" id=\"arrow' + $element[0].id + '\"></span>');\n                      $arrowSpan.prependTo($element);\n                      $arrowSpan.css('float', 'right');\n                      if (item.level == 0) {\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('right')));\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                      } else {\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));\n                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));\n                      }\n                      item.arrow = $arrowSpan[0];\n                    }\n                    $element.css('float', 'none');\n                  });\n                  if (me.mode == 'popup') {\n                    me.host.addClass(me.toThemeProperty('jqx-widget-content'));\n                    me.host.wrap('<div tabindex=0 class=\"jqx-menu-wrapper\" style=\"z-index:' + me.popupZIndex + '; border: none; background-color: transparent; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: visible;\"></div>');\n                    var $popupElementparent = me.host.closest('div.jqx-menu-wrapper');\n                    me.host.addClass(me.toThemeProperty('jqx-popup'));\n                    $popupElementparent[0].id = \"menuWrapper\" + me.element.id;\n                    $popupElementparent.appendTo($(document.body));\n                    me.addHandler($popupElementparent, 'keydown', function (event) {\n                      return me.handleKeyDown(event);\n                    });\n                  } else {\n                    me.host.addClass(me.toThemeProperty('jqx-widget-header'));\n                  }\n                  if (me.mode == 'popup') {\n                    var height = me.host.height();\n                    me.host.css('position', 'absolute');\n                    me.host.css('top', '0');\n                    me.host.css('left', '0');\n                    if (me.mode != \"simple\") {\n                      me.host.height(height);\n                      me.host.css('display', 'none');\n                    }\n                  }\n                  break;\n              }\n              var isTouchDevice = me.isTouchDevice();\n              if (me.autoCloseOnClick) {\n                me.removeHandler($(document), 'mousedown.menu' + me.element.id, me._closeAfterClick);\n                me.addHandler($(document), 'mousedown.menu' + me.element.id, me._closeAfterClick, me);\n                if (isTouchDevice) {\n                  me.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + me.element.id, me._closeAfterClick, me);\n                  me.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + me.element.id, me._closeAfterClick, me);\n                }\n              }\n            },\n            _getBodyOffset: function () {\n              var top = 0;\n              var left = 0;\n              if ($('body').css('border-top-width') != '0px') {\n                top = parseInt($('body').css('border-top-width'));\n                if (isNaN(top)) top = 0;\n              }\n              if ($('body').css('border-left-width') != '0px') {\n                left = parseInt($('body').css('border-left-width'));\n                if (isNaN(left)) left = 0;\n              }\n              return {\n                left: left,\n                top: top\n              };\n            },\n            _getOffset: function (object) {\n              //       var scrollTop = $(window).scrollTop();\n              //       var scrollLeft = $(window).scrollLeft();\n              var isSafari = $.jqx.mobile.isSafariMobileBrowser();\n              var offset = $(object).coord(true);\n              var top = offset.top;\n              var left = offset.left;\n              if ($('body').css('border-top-width') != '0px') {\n                top = parseInt(top) + this._getBodyOffset().top;\n              }\n              if ($('body').css('border-left-width') != '0px') {\n                left = parseInt(left) + this._getBodyOffset().left;\n              }\n              var windowsPhone = $.jqx.mobile.isWindowsPhone();\n              var touchDevice = $.jqx.mobile.isTouchDevice();\n              if (this.hasTransform || isSafari != null && isSafari || windowsPhone || touchDevice) {\n                var point = {\n                  left: $.jqx.mobile.getLeftPos(object),\n                  top: $.jqx.mobile.getTopPos(object)\n                };\n                return point;\n              } else return {\n                left: left,\n                top: top\n              };\n            },\n            _isRightClick: function (e) {\n              var rightclick;\n              if (!e) var e = window.event;\n              if (e.which) rightclick = e.which == 3;else if (e.button) rightclick = e.button == 2;\n              return rightclick;\n            },\n            _openContextMenu: function (e) {\n              var me = this;\n              var rightclick = me._isRightClick(e);\n              if (rightclick) {\n                me.open(parseInt(e.clientX) + 5, parseInt(e.clientY) + 5);\n              }\n            },\n            // closes a context menu.\n            close: function () {\n              var me = this;\n              if (!this.element) {\n                return;\n              }\n              var opened = $.data(this.element, 'contextMenuOpened' + this.element.id);\n              if (opened) {\n                var host = this.host;\n                me.host.removeClass('jqx-popup-show');\n                $.each(me.items, function () {\n                  var item = this;\n                  if (item.hasItems) {\n                    me._closeItem(me, item);\n                  }\n                });\n                $.each(me.items, function () {\n                  var item = this;\n                  if (item.isOpen == true) {\n                    var $submenu = $(item.subMenuElement);\n                    var $popupElement = $submenu.closest('div.jqx-menu-popup');\n                    $popupElement.hide(this.animationHideDuration);\n                  }\n                });\n                this.host.hide(this.animationHideDuration);\n                $.data(me.element, 'contextMenuOpened' + this.element.id, false);\n                me._raiseEvent('1', me);\n                me._raiseEvent('5');\n              }\n            },\n            // @param String. Horizontal offset\n            // @param String. Vertical Offset\n            // opens a context menu.\n            open: function (left, top) {\n              if (this.mode == 'popup') {\n                var duration = 0;\n                if (this.host.css('display') == 'block') {\n                  this.close();\n                  duration = this.animationHideDuration;\n                }\n                var me = this;\n                if (left == undefined || left == null) left = 0;\n                if (top == undefined || top == null) top = 0;\n                setTimeout(function () {\n                  me.host.show(me.animationShowDuration);\n                  me.host.css('visibility', 'visible');\n                  me.host.addClass('jqx-popup-show');\n                  $.data(me.element, 'contextMenuOpened' + me.element.id, true);\n                  me._raiseEvent('0', me);\n                  me._raiseEvent('4', {\n                    left: left,\n                    top: top\n                  });\n                  me.host.css('z-index', me.popupZIndex);\n                  if (left != undefined && top != undefined) {\n                    me.host.css({\n                      'left': left,\n                      'top': top\n                    });\n                  }\n                  me.focus();\n                }, duration);\n              }\n            },\n            _renderHover: function ($menuElement, item, isTouchDevice) {\n              var me = this;\n              if (!item.ignoretheme) {\n                this.addHandler($menuElement, 'mouseenter', function () {\n                  me.hoveredItem = item;\n                  if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {\n                    if (item.level > 0) {\n                      $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      $menuElement.addClass(me.toThemeProperty('jqx-menu-item-hover'));\n                    } else {\n                      $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-hover'));\n                    }\n                  }\n                });\n                this.addHandler($menuElement, 'mouseleave', function () {\n                  if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {\n                    if (item.level > 0) {\n                      $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-hover'));\n                    } else {\n                      $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                      $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-top-hover'));\n                    }\n                  }\n                });\n              }\n            },\n            _closeAfterClick: function (event) {\n              var me = event != null ? event.data : this;\n              var matches = false;\n              if (me.autoCloseOnClick) {\n                $.each($(event.target).parents(), function () {\n                  if (this.className.indexOf) {\n                    if (this.className.indexOf('jqx-menu') != -1) {\n                      matches = true;\n                      return false;\n                    }\n                  }\n                });\n                if (!matches) {\n                  event.data = me;\n                  me._closeAll(event);\n                }\n              }\n            },\n            _autoSizeHorizontalMenuItems: function () {\n              var me = this;\n              if (me.autoSizeMainItems && this.mode == \"horizontal\") {\n                var maxHeight = this.maxHeight;\n                if (parseInt(maxHeight) > parseInt(this.host.height())) {\n                  maxHeight = parseInt(this.host.height());\n                }\n                maxHeight = parseInt(this.host.height());\n\n                // align vertically the items.\n                $.each(this.items, function () {\n                  var item = this;\n                  var $element = $(item.element);\n                  if (item.level == 0 && maxHeight > 0) {\n                    var childrenHeight = $element.children().length > 0 ? parseInt($element.children().height()) : $element.height();\n                    // vertically align content.\n                    var $ul = me.host.find('ul:first');\n                    var paddingOffset = parseInt($ul.css('padding-top'));\n                    var marginOffset = parseInt($ul.css('margin-top'));\n                    //   var borderOffset = parseInt(me.host.css('border-top-width'));\n                    var height = maxHeight - 2 * (marginOffset + paddingOffset);\n                    var newPadding = parseInt(height) / 2 - childrenHeight / 2;\n                    var topPadding = parseInt(newPadding);\n                    var bottomPadding = parseInt(newPadding);\n                    $element.css('padding-top', topPadding);\n                    $element.css('padding-bottom', bottomPadding);\n                    if (parseInt($element.outerHeight()) > height) {\n                      var offset = 1;\n                      $element.css('padding-top', topPadding - offset);\n                      topPadding = topPadding - offset;\n                    }\n                  }\n                });\n              }\n              $.each(this.items, function () {\n                var item = this;\n                var $element = $(item.element);\n                if (item.hasItems && item.level > 0) {\n                  if (item.arrow) {\n                    var $arrowSpan = $(item.arrow);\n                    var height = $(item.element).height();\n                    if (height > 15) {\n                      $arrowSpan.css('margin-top', (height - 15) / 2);\n                    }\n                  }\n                }\n              });\n            },\n            _nextVisibleItem: function (item, level) {\n              if (item == null || item == undefined) return null;\n              var currentItem = item;\n              while (currentItem != null) {\n                currentItem = currentItem.nextItem;\n                if (this._isVisible(currentItem) && !currentItem.disabled && currentItem.type !== \"separator\") {\n                  if (this.minimized) {\n                    return currentItem;\n                  }\n                  if (level != undefined) {\n                    if (currentItem && currentItem.level != level) continue;\n                  }\n                  return currentItem;\n                }\n              }\n              return null;\n            },\n            _prevVisibleItem: function (item, level) {\n              if (item == null || item == undefined) return null;\n              var currentItem = item;\n              while (currentItem != null) {\n                currentItem = currentItem.prevItem;\n                if (this._isVisible(currentItem) && !currentItem.disabled && currentItem.type !== \"separator\") {\n                  if (this.minimized) {\n                    return currentItem;\n                  }\n                  if (level != undefined) {\n                    if (currentItem && currentItem.level != level) continue;\n                  }\n                  return currentItem;\n                }\n              }\n              return null;\n            },\n            _parentItem: function (item) {\n              if (item == null || item == undefined) return null;\n              var parent = item.parentElement;\n              if (!parent) return null;\n              var parentItem = null;\n              $.each(this.items, function () {\n                if (this.element == parent) {\n                  parentItem = this;\n                  return false;\n                }\n              });\n              return parentItem;\n            },\n            _isElementVisible: function (element) {\n              if (element == null) return false;\n              if ($(element).css('display') != 'none' && $(element).css('visibility') != 'hidden') {\n                return true;\n              }\n              return false;\n            },\n            _isVisible: function (item) {\n              if (item == null || item == undefined) return false;\n              if (!this._isElementVisible(item.element)) return false;\n              var currentItem = this._parentItem(item);\n              if (currentItem == null) return true;\n              if (this.minimized) return true;\n              if (currentItem != null) {\n                if (!this._isElementVisible(currentItem.element)) {\n                  return false;\n                }\n                if (currentItem.isOpen || this.minimized) {\n                  while (currentItem != null) {\n                    currentItem = this._parentItem(currentItem);\n                    if (currentItem != null && !this._isElementVisible(currentItem.element)) {\n                      return false;\n                    }\n                    if (currentItem != null && !currentItem.isOpen) return false;\n                  }\n                } else {\n                  return false;\n                }\n              }\n              return true;\n            },\n            _render: function (mode, oldMode) {\n              if (this.disabled) {\n                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                this.host.addClass(this.toThemeProperty('jqx-menu-disabled'));\n              }\n              if (this.host.attr('tabindex') == undefined) {\n                this.host.attr('tabindex', 0);\n              }\n              var zIndex = this.popupZIndex;\n              var popupElementoffset = [5, 5];\n              var me = this;\n              $.data(me.element, 'animationHideDelay', me.animationHideDelay);\n              var isTouchDevice = this.isTouchDevice();\n              var WP = isTouchDevice && ($.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf('Touch') >= 0);\n              var WPTablet = false;\n              if (navigator.platform.toLowerCase().indexOf('win') != -1) {\n                if (navigator.userAgent.indexOf('Windows Phone') >= 0 || navigator.userAgent.indexOf('WPDesktop') >= 0 || navigator.userAgent.indexOf('IEMobile') >= 0 || navigator.userAgent.indexOf('ZuneWP7') >= 0) {\n                  this.touchDevice = true;\n                } else {\n                  if (navigator.userAgent.indexOf('Touch') >= 0) {\n                    var supported = ('MSPointerDown' in window);\n                    if (supported || $.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf('ARM') >= 0) {\n                      WPTablet = true;\n                      WP = true;\n                      me.clickToOpen = true;\n                      me.autoCloseOnClick = false;\n                      me.enableHover = false;\n                    }\n                  }\n                }\n              }\n              $.data(document.body, 'menuel', this);\n              this.hasTransform = $.jqx.utilities.hasTransform(this.host);\n              this._applyOrientation(mode, oldMode);\n              this.removeHandler(this.host, 'blur');\n              this.removeHandler(this.host, 'focus');\n              this.addHandler(this.host, 'blur', function (event) {\n                if (me.keyboardNavigation) {\n                  if (me.activeItem) {\n                    if (me.mode === \"popup\") {\n                      if (document.activeElement && document.activeElement.className.indexOf('jqx-menu-wrapper') >= 0) {\n                        return;\n                      }\n                    }\n                    $(me.activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    me.activeItem = null;\n                  }\n                }\n              });\n              this.addHandler(this.host, 'focus', function (event) {\n                if (me.keyboardNavigation) {\n                  if (!me.activeItem) {\n                    if (me.hoveredItem) {\n                      $(me.hoveredItem.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                      me.activeItem = me.hoveredItem;\n                    } else {\n                      var setActiveItem = function () {\n                        if (!$.jqx.isHidden($(me.items[0].element))) {\n                          $(me.items[0].element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = me.items[0];\n                        } else {\n                          var item = me._nextVisibleItem(me.items[0], 0);\n                          if (item) {\n                            $(item.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                            me.activeItem = item;\n                          }\n                        }\n                      };\n                      if (!me.activeItem) {\n                        setActiveItem();\n                      } else {\n                        if (!$.jqx.isHidden($(me.activeItem.element))) {\n                          $(me.activeItem.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        } else {\n                          $(me.activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          setActiveItem();\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n              this.removeHandler(this.host, 'keydown.menu' + this.element.id);\n              me.handleKeyDown = function (event) {\n                if (me.keyboardNavigation) {\n                  if (event.target.nodeName.toLowerCase() === \"input\") {\n                    return true;\n                  }\n                  var activeItem = null;\n                  var selectedItem = null;\n                  $.each(me.items, function () {\n                    var item = this;\n                    if (this.disabled) return true;\n                    if (this.element.className.indexOf('pressed') >= 0) {\n                      selectedItem = this;\n                    }\n                    if (this.element.className.indexOf('focus') >= 0) {\n                      activeItem = this;\n                      return false;\n                    }\n                  });\n                  if (!activeItem && selectedItem) {\n                    activeItem = selectedItem;\n                    return false;\n                  }\n                  if (!activeItem) {\n                    $(me.items[0].element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    me.activeItem = me.items[0];\n                    activeItem = me.activeItem;\n                    return false;\n                  }\n                  var handled = false;\n                  if (event.keyCode == 27) {\n                    event.data = me;\n                    me._closeAll(event);\n                    if (activeItem) {\n                      var item = activeItem;\n                      while (item != null) {\n                        if (item.parentItem) {\n                          item = item.parentItem;\n                        } else {\n                          $(me.activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = item;\n                          $(me.activeItem.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          item = item.parentItem;\n                        }\n                      }\n                    }\n                    handled = true;\n                  }\n                  if (event.keyCode == 13) {\n                    if (activeItem) {\n                      handled = true;\n                      me._raiseEvent('2', {\n                        item: activeItem.element,\n                        event: event,\n                        type: \"keyboard\"\n                      });\n                      var anchor = activeItem.anchor != null ? $(activeItem.anchor) : null;\n                      if (anchor != null && anchor.length > 0) {\n                        var href = anchor.attr('href');\n                        var target = anchor.attr('target');\n                        if (href != null) {\n                          if (target != null) {\n                            window.open(href, target);\n                          } else {\n                            window.location = href;\n                          }\n                        }\n                      }\n                      event.preventDefault();\n                      event.stopPropagation();\n                      $(activeItem.element).focus();\n                    }\n                  }\n                  var getSiblings = function (activeItem) {\n                    if (activeItem == null) return new Array();\n                    var siblings = new Array();\n                    var index = 0;\n                    for (var i = 0; i < me.items.length; i++) {\n                      if (me.items[i].parentId == activeItem.parentId) {\n                        siblings[index++] = me.items[i];\n                      }\n                    }\n                    return siblings;\n                  };\n                  var arrowKey = \"\";\n                  switch (event.keyCode) {\n                    case 40:\n                      arrowKey = \"down\";\n                      break;\n                    case 38:\n                      arrowKey = \"up\";\n                      break;\n                    case 39:\n                      arrowKey = \"right\";\n                      break;\n                    case 37:\n                      arrowKey = \"left\";\n                      break;\n                  }\n                  if (activeItem && activeItem.openHorizontalDirection === \"left\" && arrowKey === \"left\") {\n                    arrowKey = \"right\";\n                  }\n                  if (activeItem && activeItem.openHorizontalDirection === \"left\" && arrowKey === \"right\") {\n                    arrowKey = \"left\";\n                  }\n                  if (activeItem && activeItem.openVerticalDirection === \"top\" && arrowKey === \"top\") {\n                    arrowKey = \"bottom\";\n                  }\n                  if (activeItem && activeItem.openVerticalDirection === \"top\" && arrowKey === \"bottom\") {\n                    arrowKey = \"top\";\n                  }\n                  if (me.rtl) {\n                    if (arrowKey === \"right\") arrowKey = \"left\";else if (arrowKey === \"left\") arrowKey = \"right\";\n                  }\n                  if (arrowKey === \"right\" && !me.minimized) {\n                    if (event.altKey && (activeItem.level != 0 && activeItem.hasItems || me.mode != \"horizontal\")) {\n                      me._openItem(me, activeItem);\n                    } else {\n                      var itemToFocus = me._nextVisibleItem(activeItem, 0);\n                      var subItem = me._nextVisibleItem(activeItem);\n                      var siblings = getSiblings(subItem);\n                      if (!itemToFocus) {\n                        itemToFocus = subItem;\n                      }\n                      if (itemToFocus && (itemToFocus.parentId === activeItem.parentId && itemToFocus.level == 0 && me.mode == \"horizontal\" || subItem.id == siblings[0].id && subItem.level != 0)) {\n                        if (subItem.id == siblings[0].id && (activeItem.level != 0 || activeItem.level == 0 && me.mode != \"horizontal\")) {\n                          itemToFocus = subItem;\n                        }\n                        $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = itemToFocus;\n                      }\n                    }\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }\n                  if (arrowKey === \"left\" && !me.minimized) {\n                    if (event.altKey && (activeItem.level != 0 && me.mode !== \"horizontal\" || activeItem.level > 1 && me.mode === \"horizontal\" || activeItem.level == 1 && activeItem.hasItems && me.mode === \"horizontal\")) {\n                      if (activeItem.hasItems) {\n                        me._closeItem(me, activeItem);\n                      } else {\n                        if (activeItem.parentItem) {\n                          me._closeItem(me, activeItem.parentItem);\n                          $(activeItem.parentItem.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = activeItem.parentItem;\n                        }\n                      }\n                    } else {\n                      var itemToFocus = me._prevVisibleItem(activeItem, 0);\n                      var currentItemToFocus = activeItem.parentItem;\n                      if (itemToFocus && itemToFocus.parentId === activeItem.parentId && itemToFocus.level == 0 && me.mode == \"horizontal\") {\n                        $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = itemToFocus;\n                      } else if (!(currentItemToFocus && currentItemToFocus.level == 0 && me.mode == \"horizontal\") && currentItemToFocus && currentItemToFocus.level == activeItem.level - 1) {\n                        $(currentItemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = currentItemToFocus;\n                      }\n                    }\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }\n                  if (arrowKey === \"down\") {\n                    if (event.altKey) {\n                      if (activeItem.level == 0 && activeItem.hasItems) {\n                        me._openItem(me, activeItem);\n                      }\n                      if (me.minimized) {\n                        if (me.minimizedHidden) {\n                          me.minimizedItem.trigger('click');\n                        }\n                      }\n                    } else {\n                      var itemToFocus = me._nextVisibleItem(activeItem, activeItem.level);\n                      var siblings = getSiblings(itemToFocus);\n                      if (me.minimized && itemToFocus) {\n                        $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = itemToFocus;\n                      } else {\n                        if (itemToFocus && (itemToFocus.parentId === activeItem.parentId || itemToFocus.id == siblings[0].id && me.mode == \"horizontal\")) {\n                          if (!(itemToFocus.level == 0 && me.mode == \"horizontal\")) {\n                            $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                            $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                            me.activeItem = itemToFocus;\n                          }\n                        }\n                        if (me.mode === \"horizontal\" && activeItem.level === 0 && activeItem.isOpen && activeItem.hasItems) {\n                          var itemToFocus = me._nextVisibleItem(activeItem);\n                          $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = itemToFocus;\n                        }\n                      }\n                    }\n                    event.preventDefault();\n                    event.stopPropagation();\n                  } else if (arrowKey === \"up\") {\n                    if (event.altKey) {\n                      if (activeItem.parentItem && activeItem.parentItem.level == 0) {\n                        me._closeItem(me, activeItem.parentItem);\n                        $(activeItem.parentItem.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = activeItem.parentItem;\n                      } else if (activeItem.parentItem === null && activeItem.level === 0 && me.mode === \"horizontal\") {\n                        me._closeItem(me, activeItem);\n                      }\n                      if (me.minimized) {\n                        if (!me.minimizedHidden) {\n                          me.minimizedItem.trigger('click');\n                        }\n                      }\n                    } else {\n                      var itemToFocus = me._prevVisibleItem(activeItem, activeItem.level);\n                      var siblings = getSiblings(activeItem);\n                      if (me.minimized && itemToFocus) {\n                        $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                        me.activeItem = itemToFocus;\n                      } else {\n                        if (itemToFocus && (itemToFocus.parentId === activeItem.parentId || itemToFocus.id == activeItem.parentId && itemToFocus.level == 0 && me.mode == \"horizontal\")) {\n                          if (!(itemToFocus.level == 0 && me.mode === \"horizontal\" && activeItem.level === 0)) {\n                            $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                            $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                            me.activeItem = itemToFocus;\n                          }\n                        } else if (activeItem && activeItem.id == siblings[0].id && activeItem.parentItem && activeItem.parentItem.level === 0 && me.mode === \"horizontal\") {\n                          var itemToFocus = activeItem.parentItem;\n                          $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = itemToFocus;\n                        }\n                      }\n                    }\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }\n                  if (event.keyCode == 9) {\n                    var itemToFocus = event.shiftKey ? me._prevVisibleItem(activeItem) : me._nextVisibleItem(activeItem);\n                    if (itemToFocus) {\n                      $(itemToFocus.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                      $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                      me.activeItem = itemToFocus;\n                      event.preventDefault();\n                      event.stopPropagation();\n                    } else if (me.lockFocus) {\n                      var siblings = new Array();\n                      var index = 0;\n                      for (var i = 0; i < me.items.length; i++) {\n                        if (me.items[i] == activeItem) continue;\n                        if (me.items[i].parentId == activeItem.parentId) {\n                          siblings[index++] = me.items[i];\n                        }\n                      }\n                      if (siblings.length > 0) {\n                        if (event.shiftKey) {\n                          $(siblings[siblings.length - 1].element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = siblings[siblings.length - 1];\n                        } else {\n                          $(siblings[0].element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                          me.activeItem = siblings[0];\n                        }\n                        $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                      }\n                      event.preventDefault();\n                      event.stopPropagation();\n                    } else if (activeItem) {\n                      $(activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                      me.activeItem = null;\n                    }\n                  }\n                } else {\n                  return true;\n                }\n              };\n              this.addHandler(this.host, 'keydown.menu' + this.element.id, function (event) {\n                me.handleKeyDown(event);\n              });\n              if (me.enableRoundedCorners) {\n                this.host.addClass(me.toThemeProperty('jqx-rc-all'));\n              }\n              $.each(this.items, function () {\n                var item = this;\n                var $menuElement = $(item.element);\n                $menuElement.attr('role', 'menuitem');\n                if (me.enableRoundedCorners) {\n                  $menuElement.addClass(me.toThemeProperty('jqx-rc-all'));\n                }\n                me.removeHandler($menuElement, 'click');\n                me.addHandler($menuElement, 'click', function (e) {\n                  if (item.disabled) return;\n                  if (me.disabled) return;\n                  if (me.keyboardNavigation) {\n                    if (me.activeItem) {\n                      $(me.activeItem.element).removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    }\n                    me.activeItem = item;\n                    $(item.element).addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                    if (me.minimized) {\n                      e.stopPropagation();\n                    }\n                  }\n                  me._raiseEvent('2', {\n                    type: \"mouse\",\n                    item: item.element,\n                    event: e\n                  });\n                  if (!me.autoOpen) {\n                    if (item.level > 0) {\n                      if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {\n                        e.data = me;\n                        me._closeAll(e);\n                      }\n                    }\n                  } else if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {\n                    if (item.closeOnClick) {\n                      e.data = me;\n                      me._closeAll(e);\n                    }\n                  }\n                  if (isTouchDevice && me.autoCloseOnClick) {\n                    e.data = me;\n                    if (!item.hasItems) {\n                      me._closeAll(e);\n                    }\n                  }\n                  if (e.target.tagName != 'A' && e.target.tagName != 'a') {\n                    var anchor = item.anchor != null ? $(item.anchor) : null;\n                    if (anchor != null && anchor.length > 0) {\n                      var href = anchor.attr('href');\n                      var target = anchor.attr('target');\n                      if (href != null) {\n                        if (target != null) {\n                          window.open(href, target);\n                        } else {\n                          window.location = href;\n                        }\n                      }\n                    }\n                  }\n                });\n                me.removeHandler($menuElement, 'mouseenter');\n                me.removeHandler($menuElement, 'mouseleave');\n                if (!WP && me.mode != 'simple') {\n                  me._renderHover($menuElement, item, isTouchDevice);\n                }\n                if (item.subMenuElement != null) {\n                  var $submenu = $(item.subMenuElement);\n                  if (me.mode == 'simple') {\n                    $submenu.show();\n                    return true;\n                  }\n                  $submenu.wrap('<div class=\"jqx-menu-popup ' + me.toThemeProperty('jqx-menu-popup') + '\" style=\"border: none; background-color: transparent; z-index:' + zIndex + '; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: hidden;\"><div style=\"background-color: transparent; border: none; position:absolute; overflow:hidden; left: 0; top: 0; right: 0; width: 100%; height: 100%;\"></div></div>');\n                  $submenu.css({\n                    overflow: 'hidden',\n                    position: 'absolute',\n                    left: 0,\n                    display: 'inherit',\n                    top: -$submenu.outerHeight()\n                  });\n                  $submenu.data('timer', {});\n                  if (item.level > 0) {\n                    $submenu.css('left', -$submenu.outerWidth());\n                  } else if (me.mode == 'horizontal') {\n                    $submenu.css('left', 0);\n                  }\n                  zIndex++;\n                  var $popupElement = $(item.subMenuElement).closest('div.jqx-menu-popup').css({\n                    width: parseInt($(item.subMenuElement).outerWidth()) + parseInt(popupElementoffset[0]) + 'px',\n                    height: parseInt($(item.subMenuElement).outerHeight()) + parseInt(popupElementoffset[1]) + 'px'\n                  });\n                  var $popupElementparent = $menuElement.closest('div.jqx-menu-popup');\n                  if ($popupElementparent.length > 0) {\n                    var oldsubleftmargin = $submenu.css('margin-left');\n                    var oldsubrightmargin = $submenu.css('margin-right');\n                    var oldsubleftpadding = $submenu.css('padding-left');\n                    var oldsubrightpadding = $submenu.css('padding-right');\n                    $popupElement.addClass('horizontal');\n                    $popupElement.appendTo($popupElementparent);\n                    $submenu.css('margin-left', oldsubleftmargin);\n                    $submenu.css('margin-right', oldsubrightmargin);\n                    $submenu.css('padding-left', oldsubleftpadding);\n                    $submenu.css('padding-right', oldsubrightpadding);\n                  } else {\n                    var oldsubleftmargin = $submenu.css('margin-left');\n                    var oldsubrightmargin = $submenu.css('margin-right');\n                    var oldsubleftpadding = $submenu.css('padding-left');\n                    var oldsubrightpadding = $submenu.css('padding-right');\n                    if (me.mode === 'horizontal') {\n                      $popupElement.addClass('top');\n                    } else {\n                      $popupElement.addClass('horizontal');\n                    }\n                    $popupElement.appendTo($(document.body));\n                    $submenu.css('margin-left', oldsubleftmargin);\n                    $submenu.css('margin-right', oldsubrightmargin);\n                    $submenu.css('padding-left', oldsubleftpadding);\n                    $submenu.css('padding-right', oldsubrightpadding);\n                  }\n                  if (!me.clickToOpen) {\n                    if (isTouchDevice || WP) {\n                      me.removeHandler($menuElement, $.jqx.mobile.getTouchEventName('touchstart'));\n                      me.addHandler($menuElement, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {\n                        clearTimeout($submenu.data('timer').hide);\n                        if ($submenu != null) {\n                          $submenu.stop();\n                        }\n                        if (item.level == 0 && !item.isOpen && me.mode != \"popup\") {\n                          event.data = me;\n                          me._closeAll(event);\n                        }\n                        if (!item.isOpen) {\n                          me._openItem(me, item);\n                        } else {\n                          me._closeItem(me, item, true);\n                        }\n                        return false;\n                      });\n                    }\n                    if (!WP) {\n                      me.addHandler($menuElement, 'mouseenter', function () {\n                        if (me.autoOpen || item.level > 0 && !me.autoOpen) {\n                          clearTimeout($submenu.data('timer').hide);\n                        }\n                        if (item.parentId && item.parentId != 0) {\n                          if (me.menuElements[item.parentId]) {\n                            var openedStateOfParent = me.menuElements[item.parentId].isOpen;\n                            if (!openedStateOfParent) {\n                              return;\n                            }\n                          }\n                        }\n                        if (me.autoOpen || item.level > 0 && !me.autoOpen) {\n                          me._openItem(me, item);\n                        }\n                        return false;\n                      });\n                      me.addHandler($menuElement, 'mousedown', function () {\n                        if (!me.autoOpen && item.level == 0) {\n                          clearTimeout($submenu.data('timer').hide);\n                          if ($submenu != null) {\n                            $submenu.stop();\n                          }\n                          if (!item.isOpen) {\n                            me._openItem(me, item);\n                          } else {\n                            me._closeItem(me, item, true);\n                          }\n                        }\n                      });\n                      me.addHandler($menuElement, 'mouseleave', function (event) {\n                        if (me.autoCloseOnMouseLeave) {\n                          clearTimeout($submenu.data('timer').hide);\n                          var $subMenu = $(item.subMenuElement);\n                          var position = {\n                            left: parseInt(event.pageX),\n                            top: parseInt(event.pageY)\n                          };\n                          var subMenuBounds = {\n                            left: parseInt($subMenu.coord().left),\n                            top: parseInt($subMenu.coord().top),\n                            width: parseInt($subMenu.outerWidth()),\n                            height: parseInt($subMenu.outerHeight())\n                          };\n                          var closeItem = true;\n                          if (subMenuBounds.left - 5 <= position.left && position.left <= subMenuBounds.left + subMenuBounds.width + 5) {\n                            if (subMenuBounds.top <= position.top && position.top <= subMenuBounds.top + subMenuBounds.height) {\n                              closeItem = false;\n                            }\n                          }\n                          if (closeItem) {\n                            me._closeItem(me, item, true);\n                          }\n                        }\n                      });\n                      me.removeHandler($popupElement, 'mouseenter');\n                      me.addHandler($popupElement, 'mouseenter', function () {\n                        clearTimeout($submenu.data('timer').hide);\n                      });\n                      me.removeHandler($popupElement, 'mouseleave');\n                      me.addHandler($popupElement, 'mouseleave', function (e) {\n                        if (me.autoCloseOnMouseLeave) {\n                          clearTimeout($submenu.data('timer').hide);\n                          clearTimeout($submenu.data('timer').show);\n                          if ($submenu != null) {\n                            $submenu.stop();\n                          }\n                          me._closeItem(me, item, true);\n                        }\n                      });\n                    }\n                  } else {\n                    me.removeHandler($menuElement, 'mousedown');\n                    me.addHandler($menuElement, 'mousedown', function (event) {\n                      clearTimeout($submenu.data('timer').hide);\n                      if ($submenu != null) {\n                        $submenu.stop();\n                      }\n                      if (item.level == 0 && !item.isOpen) {\n                        event.data = me;\n                        me._closeAll(event);\n                      }\n                      if (!item.isOpen) {\n                        me._openItem(me, item);\n                      } else {\n                        me._closeItem(me, item, true);\n                      }\n                    });\n                  }\n                }\n              });\n              if (this.mode == \"simple\") {\n                this._renderSimpleMode();\n              }\n              this._autoSizeHorizontalMenuItems();\n              this._raiseEvent('3', this);\n            },\n            _renderSimpleMode: function () {\n              this.host.show();\n            },\n            createID: function () {\n              var id = Math.random() + '';\n              id = id.replace('.', '');\n              id = '99' + id;\n              id = id / 1;\n              while (this.items[id]) {\n                id = Math.random() + '';\n                id = id.replace('.', '');\n                id = id / 1;\n              }\n              return 'menuItem' + id;\n            },\n            _createMenu: function (uiObject, refresh) {\n              if (uiObject == null) return;\n              if (refresh == undefined) {\n                refresh = true;\n              }\n              if (refresh == null) {\n                refresh = true;\n              }\n              var self = this;\n              $(uiObject).addClass('jqx-menu-ul');\n              var liTags = $(uiObject).find('li');\n              var k = 0;\n              this.itemMapping = new Array();\n              for (var index = 0; index < liTags.length; index++) {\n                var listItem = liTags[index];\n                var $listItem = $(listItem);\n                if (listItem.className.indexOf('jqx-menu') == -1 && this.autoGenerate == false) continue;\n                var id = listItem.id;\n                if (!id) {\n                  id = this.createID();\n                }\n                if (refresh) {\n                  listItem.id = id;\n                  this.items[k] = new $.jqx._jqxMenu.jqxMenuItem();\n                  this.menuElements[id] = this.items[k];\n                }\n                k += 1;\n                var parentId = 0;\n                var me = this;\n                var children = $listItem.children();\n                children.each(function () {\n                  if (!refresh) {\n                    this.className = \"\";\n                    if (me.autoGenerate) {\n                      $(me.items[k - 1].subMenuElement)[0].className = \"\";\n                      if (!me.minimized) {\n                        $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-widget-content'));\n                      }\n                      $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-menu-dropdown'));\n                      $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-popup'));\n                    }\n                  }\n                  if (this.className.indexOf('jqx-menu-dropdown') != -1) {\n                    if (refresh) {\n                      me.items[k - 1].subMenuElement = this;\n                    }\n                    return false;\n                  } else if (me.autoGenerate && (this.tagName == 'ul' || this.tagName == 'UL')) {\n                    if (refresh) {\n                      me.items[k - 1].subMenuElement = this;\n                    }\n                    this.className = \"\";\n                    if (!me.minimized) {\n                      $(this).addClass(me.toThemeProperty('jqx-widget-content'));\n                    }\n                    $(this).addClass(me.toThemeProperty('jqx-menu-dropdown'));\n                    $(this).addClass(me.toThemeProperty('jqx-popup'));\n                    $(this).attr('role', 'menu');\n                    if (me.rtl) {\n                      $(this).addClass(me.toThemeProperty('jqx-rc-l'));\n                    } else {\n                      $(this).addClass(me.toThemeProperty('jqx-rc-r'));\n                    }\n                    $(this).addClass(me.toThemeProperty('jqx-rc-b'));\n                    return false;\n                  }\n                });\n                var parents = $listItem.parents();\n                parents.each(function () {\n                  if (this.className.indexOf('jqx-menu-item') != -1) {\n                    parentId = this.id;\n                    return false;\n                  } else if (me.autoGenerate && (this.tagName == 'li' || this.tagName == 'LI')) {\n                    parentId = this.id;\n                    return false;\n                  }\n                });\n                var separator = false;\n                var type = listItem.getAttribute('type');\n                var ignoretheme = listItem.getAttribute('ignoretheme') || listItem.getAttribute('data-ignoretheme');\n                if (ignoretheme) {\n                  if (ignoretheme == 'true' || ignoretheme == true) {\n                    ignoretheme = true;\n                  }\n                } else ignoretheme = false;\n                if (!type) {\n                  type = listItem.type;\n                } else {\n                  if (type == 'separator') {\n                    var separator = true;\n                  }\n                }\n                if (!separator) {\n                  if (parentId) {\n                    type = 'sub';\n                  } else type = 'top';\n                }\n                var menuItem = this.items[k - 1];\n                if (refresh) {\n                  menuItem.id = id;\n                  menuItem.parentId = parentId;\n                  menuItem.type = type;\n                  menuItem.separator = separator;\n                  menuItem.element = liTags[index];\n                  var anchor = $listItem.children('a');\n                  menuItem.disabled = listItem.getAttribute('item-disabled') == \"true\" ? true : false;\n                  menuItem.level = $listItem.parents('li').length;\n                  menuItem.anchor = anchor.length > 0 ? anchor : null;\n                  if (menuItem.anchor) {\n                    $(menuItem.anchor).attr('tabindex', -1);\n                  }\n                }\n                menuItem.ignoretheme = ignoretheme;\n                var parentItem = this.menuElements[parentId];\n                if (parentItem != null) {\n                  if (parentItem.ignoretheme) {\n                    menuItem.ignoretheme = parentItem.ignoretheme;\n                    ignoretheme = parentItem.ignoretheme;\n                  }\n                  menuItem.parentItem = parentItem;\n                  menuItem.parentElement = parentItem.element;\n                }\n                if (this.autoGenerate) {\n                  if (type == 'separator') {\n                    $listItem.removeClass();\n                    $listItem.addClass(this.toThemeProperty('jqx-menu-item-separator'));\n                    $listItem.attr('role', 'separator');\n                  } else {\n                    if (!ignoretheme) {\n                      if ($listItem[0].className.indexOf(\"jqx-grid-menu-item-touch\") >= 0) {\n                        $listItem[0].className = this.toThemeProperty('jqx-grid-menu-item-touch');\n                      } else {\n                        $listItem[0].className = \"\";\n                      }\n                      if (this.rtl) {\n                        $listItem.addClass(this.toThemeProperty('jqx-rtl'));\n                      }\n                      if (menuItem.level > 0 && !me.minimized) {\n                        $listItem.addClass(this.toThemeProperty('jqx-item'));\n                        $listItem.addClass(this.toThemeProperty('jqx-menu-item'));\n                      } else {\n                        $listItem.addClass(this.toThemeProperty('jqx-item'));\n                        $listItem.addClass(this.toThemeProperty('jqx-menu-item-top'));\n                      }\n                    }\n                  }\n                }\n                if (menuItem.disabled) {\n                  $listItem.addClass(me.toThemeProperty('jqx-menu-item-disabled'));\n                  $listItem.addClass(me.toThemeProperty('jqx-fill-state-disabled'));\n                }\n                this.itemMapping[index] = {\n                  element: liTags[index],\n                  item: menuItem\n                };\n                this.itemMapping[\"id\" + liTags[index].id] = this.itemMapping[index];\n                if (refresh && !ignoretheme) {\n                  menuItem.hasItems = $listItem.find('li').length > 0;\n                  if (menuItem.hasItems) {\n                    if (menuItem.element) {\n                      $.jqx.aria($(menuItem.element), \"aria-haspopup\", true);\n                      if (!menuItem.subMenuElement.id) menuItem.subMenuElement.id = $.jqx.utilities.createId();\n                      $.jqx.aria($(menuItem.element), \"aria-owns\", menuItem.subMenuElement.id);\n                    }\n                  }\n                }\n              }\n              for (var i = 0; i < liTags.length; i++) {\n                var listTag = liTags[i];\n                if (this.itemMapping[\"id\" + listTag.id]) {\n                  var menuItem = this.itemMapping[\"id\" + listTag.id].item;\n                  if (!menuItem) continue;\n                  menuItem.prevItem = null;\n                  menuItem.nextItem = null;\n                  if (i > 0) {\n                    if (this.itemMapping[\"id\" + liTags[i - 1].id]) {\n                      menuItem.prevItem = this.itemMapping[\"id\" + liTags[i - 1].id].item;\n                    }\n                  }\n                  if (i < liTags.length - 1) {\n                    if (this.itemMapping[\"id\" + liTags[i + 1].id]) {\n                      menuItem.nextItem = this.itemMapping[\"id\" + liTags[i + 1].id].item;\n                    }\n                  }\n                }\n              }\n            },\n            destroy: function () {\n              var me = this;\n              $.jqx.utilities.resize(me.host, null, true);\n              var wrapper = me.host.closest('div.jqx-menu-wrapper');\n              me.removeHandler(wrapper, 'keydown');\n              wrapper.remove();\n              me.removeHandler($(\"#menuWrapper\" + me.element.id), 'keydown');\n              $(\"#menuWrapper\" + me.element.id).remove();\n              me.removeHandler(me.host, 'keydown');\n              me.removeHandler(me.host, 'focus');\n              me.removeHandler(me.host, 'blur');\n              me.removeHandler($(document), 'mousedown.menu' + me.element.id, me._closeAfterClick);\n              me.removeHandler($(document), 'mouseup.menu' + me.element.id, me._closeAfterClick);\n              me.removeHandler($(document), 'contextmenu.' + me.element.id);\n              me.removeHandler(me.host, 'contextmenu.' + me.element.id);\n              $.data(document.body, 'jqxMenuOldHost' + me.element.id, null);\n              if (me.isTouchDevice()) {\n                me.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + me.element.id, me._closeAfterClick, this);\n              }\n              if ($(window).off) {\n                $(window).off('resize.menu' + me.element.id);\n              }\n              $.each(me.items, function () {\n                var item = this;\n                var $menuElement = $(item.element);\n                me.removeHandler($menuElement, 'click');\n                me.removeHandler($menuElement, 'selectstart');\n                me.removeHandler($menuElement, 'mouseenter');\n                me.removeHandler($menuElement, 'mouseleave');\n                me.removeHandler($menuElement, 'mousedown');\n                me.removeHandler($menuElement, 'mouseleave');\n                var $submenu = $(item.subMenuElement);\n                var $popupElement = $submenu.closest('div.jqx-menu-popup');\n                $popupElement.remove();\n                delete this.subMenuElement;\n                delete this.element;\n              });\n              $.data(document.body, 'menuel', null);\n              delete me.menuElements;\n              me.items = new Array();\n              delete me.items;\n              var vars = $.data(me.element, \"jqxMenu\");\n              if (vars) {\n                delete vars.instance;\n              }\n              me.host.removeClass();\n              me.host.remove();\n              delete me.host;\n              delete me.element;\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = this.events[id];\n              var args = arg;\n              args.owner = this;\n              var event = new $.Event(evt);\n              if (id == '2') {\n                args = arg.item;\n                args.owner = this;\n                args.clickType = arg.type;\n                $.extend(event, arg.event);\n                event.type = 'itemclick';\n              }\n              event.owner = this;\n              event.args = args;\n              var result = this.host.trigger(event);\n              return result;\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object._setSize();\n                if (object.mode === \"popup\") {\n                  var $popupElementparent = this.host.closest('div.jqx-menu-wrapper');\n                  $popupElementparent[key](value);\n                  var id = this.host[0].id;\n                  $(\"#\" + id)[key](value);\n                }\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"disabled\") {\n                if (object.disabled) {\n                  object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                  object.host.addClass(object.toThemeProperty('jqx-menu-disabled'));\n                } else {\n                  object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                  object.host.removeClass(object.toThemeProperty('jqx-menu-disabled'));\n                }\n              }\n              if (value == oldvalue) return;\n              if (key == 'touchMode') {\n                this._isTouchDevice = null;\n                object._render(value, oldvalue);\n              }\n              if (key === \"width\" || key === \"height\") {\n                object._setSize();\n                if (object.mode === \"popup\") {\n                  var $popupElementparent = this.host.closest('div.jqx-menu-wrapper');\n                  $popupElementparent[key](value);\n                  var id = this.host[0].id;\n                  $(\"#\" + id)[key](value);\n                }\n                return;\n              }\n              if (key == 'source') {\n                if (object.source != null) {\n                  var html = object.loadItems(object.source);\n                  object.element.innerHTML = html;\n                  var innerElement = object.host.find('ul:first');\n                  if (innerElement.length > 0) {\n                    object.refresh();\n                    object._createMenu(innerElement[0]);\n                    object._render();\n                  }\n                }\n              }\n              if (key == 'autoCloseOnClick') {\n                if (value == false) {\n                  object.removeHandler($(document), 'mousedown.menu' + this.element.id, object._closeAll);\n                } else {\n                  object.addHandler($(document), 'mousedown.menu' + this.element.id, object, object._closeAll);\n                }\n              } else if (key == 'mode' || key == 'width' || key == 'height' || key == 'showTopLevelArrows') {\n                object.refresh();\n                if (key == 'mode') {\n                  object._render(value, oldvalue);\n                } else object._applyOrientation();\n              } else if (key == 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n            }\n          });\n        })(jqxBaseFramework);\n        (function ($) {\n          $.jqx._jqxMenu.jqxMenuItem = function (id, parentId, type) {\n            var menuItem = {\n              // gets the id.\n              id: id,\n              // gets the parent id.\n              parentId: parentId,\n              // gets the parent item instance.\n              parentItem: null,\n              // gets the anchor element.\n              anchor: null,\n              // gets the type\n              type: type,\n              // gets whether the item is disabled.\n              disabled: false,\n              // gets the item's level.\n              level: 0,\n              // gets a value whether the item is opened.\n              isOpen: false,\n              // has sub elements.\n              hasItems: false,\n              // li element\n              element: null,\n              subMenuElement: null,\n              // arrow element.\n              arrow: null,\n              // left, right, center\n              openHorizontalDirection: 'right',\n              // up, down, center\n              openVerticalDirection: 'down',\n              closeOnClick: true\n            };\n            return menuItem;\n          }; //\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/7995: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxNumberInput\", \"\", {});\n          $.extend($.jqx._jqxNumberInput.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: Number\n                // Default: null\n                // Gets or sets the input's value.\n                value: 0,\n                // Type: Number\n                // Default: 0\n                // Gets or sets the input's number.\n                decimal: 0,\n                // Type: Number\n                // Default= 0\n                // Gets or sets the input's minimum value.\n                min: -99999999,\n                // Type: Number\n                // Default: 0\n                // Gets or sets the input's maximum value.\n                max: 99999999,\n                //Type: Number.\n                //Default: 0.\n                //Sets width of the input in pixels. Only positive values have effect.\n                width: 200,\n                //Type: String,\n                //Default: Invalid value.\n                validationMessage: \"Invalid value\",\n                //Type: Number.\n                //Default: 0.\n                //Sets height of the input in pixels.\n                height: 25,\n                // Sets the alignment.\n                textAlign: \"right\",\n                // Type: Bool\n                // Default: false\n                // Sets the readOnly state of the input.\n                readOnly: false,\n                // Type: Char\n                // Default: \"_\"\n                // Sets the prompt char displayed when an editable char is empty.\n                // Possible Values: \"_\", \"?\", \"#\".\n                promptChar: \"_\",\n                // Type: Number\n                // Default: 2\n                // Indicates the number of decimal places to use in numeric values.\n                decimalDigits: 2,\n                // Type= Char\n                // Default: '.'\n                // Gets or sets the char to use as the decimal separator in numeric values.\n                decimalSeparator: \".\",\n                // Type= Char\n                // Default: \",\"\n                // Gets or sets the string that separates groups of digits to the left of the\n                // decimal in numeric values.\n                groupSeparator: \",\",\n                // Type: Number\n                // Default: '3'\n                // Gets or sets the number of digits in each group to the left of the decimal in numeric values.\n                groupSize: 3,\n                // Type: String\n                // Default: empty\n                // Gets or sets the string to use as currency or percentage symbol.\n                symbol: '',\n                // Type: Bool\n                // Default: \"left\"\n                // Gets or sets the position of the symbol in the input.\n                symbolPosition: \"left\",\n                // Type: Number\n                // Default: 8\n                // Gets or sets the digits in the input\n                digits: 8,\n                // Type: Bool\n                // Default: false\n                // Gets or sets whether the decimal is negative.\n                negative: false,\n                // Type: Bool\n                // Default: false\n                // Gets or sets the string to use as negative symbol.\n                negativeSymbol: '-',\n                // Type: Bool\n                // Default: false\n                // Gets or sets whether the widget is disabled.\n                disabled: false,\n                // Type: String\n                // Default: advanced\n                // Gets or sets the input mode. When the mode is simple, the text is formatted after editing. When the mode is advanced, the text is formatted while the user is in edit mode.\n                // Available values: [simple, advanced]\n                inputMode: 'advanced',\n                // Type: Boolean\n                // Default: false\n                // shows the spin buttons.\n                spinButtons: false,\n                // Type: Number\n                // Default: 18\n                // Sets the spin buttons width\n                spinButtonsWidth: 18,\n                // Type: Number\n                // Default: 1\n                // sets the spin button step.\n                spinButtonsStep: 1,\n                // validates the value to be in the min-max range when the user leaves the input.\n                autoValidate: true,\n                // none, advanced or simple\n                spinMode: 'advanced',\n                enableMouseWheel: true,\n                touchMode: \"auto\",\n                allowNull: true,\n                placeHolder: \"\",\n                changeType: null,\n                template: \"\",\n                rtl: false,\n                hint: true,\n                // NumberInput events.\n                events: ['valueChanged', 'textchanged', 'mousedown', 'mouseup', 'keydown', 'keyup', 'keypress', 'change'],\n                aria: {\n                  \"aria-valuenow\": {\n                    name: \"decimal\",\n                    type: \"number\"\n                  },\n                  \"aria-valuemin\": {\n                    name: \"min\",\n                    type: \"number\"\n                  },\n                  \"aria-valuemax\": {\n                    name: \"max\",\n                    type: \"number\"\n                  },\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                invalidArgumentExceptions: ['invalid argument exception']\n              };\n              if (this === $.jqx._jqxNumberInput.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            // creates the number input's instance.\n            createInstance: function (args) {\n              if (this.promptChar === \"\") {\n                this.promptChar = \" \";\n              }\n              var _val = this.host.attr('value');\n              if (_val != undefined) {\n                this.decimal = _val;\n              }\n              if (this.decimal === 0) {\n                if (this.value != null) {\n                  this.decimal = this.value;\n                } else if (this.value === null && this.decimal !== 0) {\n                  this.value = this.decimal;\n                }\n              }\n              var that = this;\n              that._createFromInput(\"jqxNumberInput\");\n              this.render();\n            },\n            _updateHint: function () {\n              var that = this;\n              if (!that.hint) {\n                return;\n              }\n              if (that.isMaterialized()) {\n                setTimeout(function () {\n                  if (that.numberInput[0].value.length === 0) {\n                    that.element.removeAttribute('hint');\n                    if (that.label && that.label[0]) {\n                      that.label[0].innerHTML = that.placeHolder;\n                    }\n                  } else {\n                    that.element.setAttribute('hint', true);\n                  }\n                });\n              }\n            },\n            _createFromInput: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.value) {\n                  that.decimal = parseFloat(that.field.value);\n                }\n                if (that.field.getAttribute('min')) {\n                  var min = that.field.getAttribute('min');\n                  that.min = parseFloat(min);\n                }\n                if (that.field.getAttribute('step')) {\n                  var step = that.field.getAttribute('step');\n                  that.spinButtonsStep = parseFloat(step);\n                }\n                if (that.field.getAttribute('max')) {\n                  var max = that.field.getAttribute('max');\n                  that.max = parseFloat(max);\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                }\n                var wrapper = $(\"<div></div>\", properties);\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width();\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight();\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n            },\n            _doTouchHandling: function () {\n              var me = this;\n              var savedValue = me.savedValue;\n              if (!me.parsing) me.parsing = true;\n              if (me.parsing) {\n                if (me.numberInput.val() && me.numberInput.val().indexOf('-') == 0) {\n                  me.setvalue('negative', true);\n                } else {\n                  me.setvalue('negative', false);\n                }\n                var value = me.numberInput.val();\n                for (var i = 0; i < value.length - 1; i++) {\n                  var ch = value.substring(i, i + 1);\n                  if (isNaN(parseFloat(ch)) && me.symbol.toString().indexOf(ch) === -1 && ch != \"%\" && ch != \"$\" && ch != '.' && ch != ',' && ch != '-') {\n                    me.numberInput[0].value = savedValue;\n                    me.parsing = false;\n                    return;\n                  }\n                }\n                me.ValueString = me.GetValueString(me.numberInput.val(), me.decimalSeparator, me.decimalSeparator != '');\n                //me.ValueString = new Number(me.ValueString).toFixed(me.decimalDigits);\n                me._parseDecimalInSimpleMode();\n                me.decimal = me.ValueString;\n                var isNegative = me.getvalue('negative');\n                if (isNegative) {\n                  me.decimal = \"-\" + me.ValueString;\n                }\n                me.parsing = false;\n              }\n            },\n            render: function () {\n              this.host.attr({\n                role: \"spinbutton\"\n              });\n              this.host.attr('data-role', 'input');\n              $.jqx.aria(this);\n              $.jqx.aria(this, \"aria-multiline\", false);\n              var me = this;\n              if (this.officeMode || this.theme && this.theme.indexOf('office') != -1) {\n                if (this.spinButtonsWidth == 18) this.spinButtonsWidth = 15;\n              }\n              if ($.jqx.mobile.isTouchDevice() || this.touchMode === true) {\n                this.inputMode = 'textbox';\n                this.spinMode = 'simple';\n              }\n              if (this.decimalSeparator == '') this.decimalSeparator = ' ';\n              this.host.addClass(this.toThemeProperty('jqx-input'));\n              this.host.addClass(this.toThemeProperty('jqx-rc-all'));\n              this.host.addClass(this.toThemeProperty('jqx-widget'));\n              this.host.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.host.addClass(this.toThemeProperty('jqx-numberinput'));\n              if (this.spinButtons) {\n                this._spinButtons();\n              } else {\n                this.numberInput = $(\"<input style='border:none;' autocomplete='off' type='textarea'/>\").appendTo(this.host);\n                this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));\n                this.numberInput.addClass(this.toThemeProperty('jqx-widget-content'));\n              }\n              if ($.jqx.mobile.isTouchDevice() || this.touchMode === true) {\n                this.numberInput.attr('inputmode', 'decimal');\n              }\n              if (!this.isMaterialized()) {\n                this.numberInput.attr('placeholder', this.placeHolder);\n              }\n              var name = this.host.attr('name');\n              if (name) {\n                this.numberInput.attr('name', name);\n              }\n              if (this.host.attr('tabindex')) {\n                this.numberInput.attr('tabindex', this.host.attr('tabindex'));\n                this.host.removeAttr('tabindex');\n              }\n              if ($.jqx.mobile.isTouchDevice() || this.touchMode === true || this.inputMode == 'textbox') {\n                var me = this;\n                me.savedValue = \"\";\n\n                //    this.numberInput.attr('type', 'number');\n                this.addHandler(this.numberInput, 'focus', function () {\n                  me.savedValue = me.numberInput[0].value;\n                });\n                this.addHandler(this.numberInput, 'change', function () {\n                  me._doTouchHandling();\n                });\n              }\n              var vars = $.data(this.host[0], 'jqxNumberInput');\n              vars.jqxNumberInput = this;\n              var me = this;\n              if (this.host.parents('form').length > 0) {\n                this.addHandler(this.host.parents('form'), 'reset', function () {\n                  setTimeout(function () {\n                    me.setDecimal(0);\n                  }, 10);\n                });\n              }\n              this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (value) {\n                  instance.numberInput.addClass(self.toThemeProperty('jqx-input-disabled'));\n                  instance.numberInput.attr(\"disabled\", true);\n                } else {\n                  instance.host.removeClass(self.toThemeProperty('jqx-input-disabled'));\n                  instance.numberInput.attr(\"disabled\", false);\n                }\n                if (instance.spinButtons && instance.host.jqxRepeatButton) {\n                  instance.upbutton.jqxRepeatButton({\n                    disabled: value\n                  });\n                  instance.downbutton.jqxRepeatButton({\n                    disabled: value\n                  });\n                }\n              };\n              if (this.disabled) {\n                this.numberInput.addClass(this.toThemeProperty('jqx-input-disabled'));\n                this.numberInput.attr(\"disabled\", true);\n                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              }\n              this.selectedText = \"\";\n              this.decimalSeparatorPosition = -1;\n              var id = this.element.id;\n              var el = this.element;\n              var self = this;\n              this.oldValue = this._value();\n              this.items = new Array();\n              var value = this.value;\n              var decimal = this.decimal;\n              this._initializeLiterals();\n              this._render();\n              this.setDecimal(value !== null ? decimal : null);\n              var me = this;\n              setTimeout(function () {\n                //           me._render(false);\n              }, 100);\n              this._addHandlers();\n              $.jqx.utilities.resize(this.host, function () {\n                me._render();\n              });\n            },\n            refresh: function (initialRefresh) {\n              if (!initialRefresh) {\n                this._render();\n              }\n            },\n            wheel: function (event, self) {\n              if (!self.enableMouseWheel) {\n                return;\n              }\n              self.changeType = \"mouse\";\n              var delta = 0;\n              if (!event) /* For IE. */\n                event = window.event;\n              if (event.originalEvent && event.originalEvent.wheelDelta) {\n                event.wheelDelta = event.originalEvent.wheelDelta;\n              }\n              if (event.wheelDelta) {\n                /* IE/Opera. */\n                delta = event.wheelDelta / 120;\n              } else if (event.detail) {\n                /** Mozilla case. */\n                delta = -event.detail / 3;\n              }\n              if (delta) {\n                var result = self._handleDelta(delta);\n                if (event.preventDefault) event.preventDefault();\n                if (event.originalEvent != null) {\n                  event.originalEvent.mouseHandled = true;\n                }\n                if (event.stopPropagation != undefined) {\n                  event.stopPropagation();\n                }\n                if (result) {\n                  result = false;\n                  event.returnValue = result;\n                  return result;\n                } else {\n                  return false;\n                }\n              }\n              if (event.preventDefault) event.preventDefault();\n              event.returnValue = false;\n            },\n            _handleDelta: function (delta) {\n              if (delta < 0) {\n                this.spinDown();\n              } else this.spinUp();\n              return true;\n            },\n            _addHandlers: function () {\n              var self = this;\n              this.addHandler(this.numberInput, 'paste', function (e) {\n                var selection = self._selection();\n                e.preventDefault();\n                if (e.originalEvent.clipboardData) {\n                  var content = (e.originalEvent || e).clipboardData.getData('text/plain');\n                } else if (window.clipboardData) {\n                  var content = window.clipboardData.getData('Text');\n                }\n                this.selectedText = content;\n                $.data(document.body, \"jqxSelection\", this.selectedText);\n                if (self.inputMode != \"simple\") {\n                  self._pasteSelectedText();\n                } else self.val(content);\n                setTimeout(function () {\n                  self._setSelectionStart(selection.start);\n                });\n              });\n              this.addHandler(this.numberInput, 'mousedown', function (event) {\n                return self._raiseEvent(2, event);\n              });\n              this._mousewheelfunc = this._mousewheelfunc || function (event) {\n                if (!self.editcell) {\n                  self.wheel(event, self);\n                  return false;\n                }\n              };\n              this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              var oldval = \"\";\n              this.addHandler(this.numberInput, 'focus', function (event) {\n                $.data(self.numberInput, \"selectionstart\", self._selection().start);\n                self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));\n                if (self.spincontainer) {\n                  self.spincontainer.addClass(self.toThemeProperty('jqx-numberinput-focus'));\n                }\n                oldval = self.numberInput.val();\n                self._savedValue = self.decimal;\n              });\n              this.addHandler(this.numberInput, 'blur', function (event) {\n                if (self.inputMode == 'simple') {\n                  self._exitSimpleInputMode(event, self, false, oldval);\n                }\n                if (self.autoValidate) {\n                  var val = parseFloat(self.decimal);\n                  var isNegative = self.getvalue('negative');\n                  if (isNegative && self.decimal > 0) {\n                    val = -parseFloat(self.decimal);\n                  }\n                  if (val > self.max) {\n                    self._disableSetSelection = true;\n                    self.setDecimal(self.max);\n                    self._disableSetSelection = false;\n                  }\n                  if (val < self.min) {\n                    self._disableSetSelection = true;\n                    self.setDecimal(self.min);\n                    self._disableSetSelection = false;\n                  }\n                }\n                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));\n                if (self.spincontainer) {\n                  self.spincontainer.removeClass(self.toThemeProperty('jqx-numberinput-focus'));\n                }\n                if (self.numberInput.val() != oldval) {\n                  self._raiseEvent(7, event);\n                  $.jqx.aria(self, \"aria-valuenow\", self.decimal);\n                  self.element.value = self.decimal;\n                }\n                return true;\n              });\n              this.addHandler(this.numberInput, 'mouseup', function (event) {\n                return self._raiseEvent(3, event);\n              });\n              this.addHandler(this.numberInput, 'keydown', function (event) {\n                self.changeType = \"keyboard\";\n                return self._raiseEvent(4, event);\n              });\n              this.addHandler(this.numberInput, 'keyup', function (event) {\n                return self._raiseEvent(5, event);\n              });\n              this.addHandler(this.numberInput, 'keypress', function (event) {\n                return self._raiseEvent(6, event);\n              });\n            },\n            focus: function () {\n              try {\n                this.numberInput.focus();\n              } catch (error) {}\n            },\n            blur: function () {\n              try {\n                this.numberInput.blur();\n              } catch (error) {}\n            },\n            _removeHandlers: function () {\n              var self = this;\n              this.removeHandler(this.numberInput, 'mousedown');\n              var isOperaMini = $.jqx.mobile.isOperaMiniMobileBrowser();\n              if (isOperaMini) {\n                this.removeHandler($(document), 'click.' + this.element.id, self._exitSimpleInputMode, self);\n              }\n              this.removeHandler(this.numberInput, 'paste');\n              this.removeHandler(this.numberInput, 'focus');\n              this.removeHandler(this.numberInput, 'blur');\n              this.removeHandler(this.numberInput, 'mouseup');\n              this.removeHandler(this.numberInput, 'keydown');\n              this.removeHandler(this.numberInput, 'keyup');\n              this.removeHandler(this.numberInput, 'keypress');\n            },\n            //[optimize]\n            _spinButtons: function () {\n              if (this.host.jqxRepeatButton) {\n                if (!this.numberInput) {\n                  this.numberInput = $(\"<input autocomplete='off' style='border: none; position: relative; float: left;' type='textarea'/>\");\n                  this.numberInput.appendTo(this.host);\n                  this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));\n                  this.numberInput.addClass(this.toThemeProperty('jqx-widget-content'));\n                } else {\n                  this.numberInput.css('float', 'left');\n                }\n                if (this.spincontainer) {\n                  if (this.upbutton) {\n                    this.upbutton.jqxRepeatButton('destroy');\n                  }\n                  if (this.downbutton) {\n                    this.downbutton.jqxRepeatButton('destroy');\n                  }\n                  this.spincontainer.remove();\n                }\n                this.spincontainer = $('<div style=\"float: right; height: 100%; overflow: hidden; position: relative;\"></div>');\n                if (this.rtl) {\n                  this.spincontainer.css('float', 'right');\n                  this.numberInput.css('float', 'right');\n                  this.spincontainer.css('left', '-1px');\n                }\n                this.host.append(this.spincontainer);\n                this.upbutton = $('<div style=\"overflow: hidden; padding: 0px; margin-left: -1px; position: relative;\"><div></div></div>');\n                this.spincontainer.append(this.upbutton);\n                this.upbutton.jqxRepeatButton({\n                  overrideTheme: true,\n                  disabled: this.disabled,\n                  roundedCorners: 'top-right'\n                });\n                this.downbutton = $('<div style=\"overflow: hidden; padding: 0px; margin-left: -1px; position: relative;\"><div></div></div>');\n                this.spincontainer.append(this.downbutton);\n                this.downbutton.jqxRepeatButton({\n                  overrideTheme: true,\n                  disabled: this.disabled,\n                  roundedCorners: 'bottom-right'\n                });\n                if (this.template) {\n                  this.upbutton.addClass(this.toThemeProperty(\"jqx-\" + this.template));\n                  this.downbutton.addClass(this.toThemeProperty(\"jqx-\" + this.template));\n                }\n                var me = this;\n                this.downbutton.addClass(this.toThemeProperty('jqx-fill-state-normal jqx-action-button'));\n                this.upbutton.addClass(this.toThemeProperty('jqx-fill-state-normal jqx-action-button'));\n                this.upbutton.addClass(this.toThemeProperty('jqx-rc-tr'));\n                this.downbutton.addClass(this.toThemeProperty('jqx-rc-br'));\n                this.addHandler(this.downbutton, 'mouseup', function (event) {\n                  if (!me.disabled) {\n                    me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                    me._downArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-down-selected'));\n                  }\n                });\n                this.addHandler(this.upbutton, 'mouseup', function (event) {\n                  if (!me.disabled) {\n                    me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                    me._upArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-up-selected'));\n                  }\n                });\n                this.removeHandler($(document), 'mouseup.' + this.element.id);\n                this.addHandler($(document), 'mouseup.' + this.element.id, function (event) {\n                  me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                  me._upArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-up-selected'));\n                  me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                  me._downArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-down-selected'));\n                });\n                this.addHandler(this.downbutton, 'mousedown', function (event) {\n                  if (!me.disabled) {\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                      me._inputSelection = me._selection();\n                    }\n                    me.downbutton.addClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                    me._downArrow.addClass(me.toThemeProperty('jqx-icon-arrow-down-selected'));\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                  }\n                });\n                this.addHandler(this.upbutton, 'mousedown', function (event) {\n                  if (!me.disabled) {\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                      me._inputSelection = me._selection();\n                    }\n                    me.upbutton.addClass(me.toThemeProperty('jqx-fill-state-pressed'));\n                    me._upArrow.addClass(me.toThemeProperty('jqx-icon-arrow-up-selected'));\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                  }\n                });\n                this.addHandler(this.upbutton, 'mouseenter', function (event) {\n                  me.upbutton.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  me._upArrow.addClass(me.toThemeProperty('jqx-icon-arrow-up-hover'));\n                });\n                this.addHandler(this.upbutton, 'mouseleave', function (event) {\n                  me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  me._upArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-up-hover'));\n                });\n                this.addHandler(this.downbutton, 'mouseenter', function (event) {\n                  me.downbutton.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  me._downArrow.addClass(me.toThemeProperty('jqx-icon-arrow-down-hover'));\n                });\n                this.addHandler(this.downbutton, 'mouseleave', function (event) {\n                  me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  me._downArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-down-hover'));\n                });\n                this.upbutton.css('border-width', '0px');\n                this.downbutton.css('border-width', '0px');\n                if (this.disabled) {\n                  this.upbutton[0].disabled = true;\n                  this.downbutton[0].disabled = true;\n                } else {\n                  this.upbutton[0].disabled = false;\n                  this.downbutton[0].disabled = false;\n                }\n                this.spincontainer.addClass(this.toThemeProperty('jqx-input'));\n                this.spincontainer.addClass(this.toThemeProperty('jqx-rc-r'));\n                this.spincontainer.css('border-width', '0px');\n                if (!this.rtl) {\n                  this.spincontainer.css('border-left-width', '1px');\n                } else {\n                  this.spincontainer.css('border-right-width', '1px');\n                }\n                this._upArrow = this.upbutton.find('div');\n                this._downArrow = this.downbutton.find('div');\n                this._upArrow.addClass(this.toThemeProperty('jqx-icon-arrow-up'));\n                this._downArrow.addClass(this.toThemeProperty('jqx-icon-arrow-down'));\n                this._upArrow.addClass(this.toThemeProperty('jqx-input-icon'));\n                this._downArrow.addClass(this.toThemeProperty('jqx-input-icon'));\n                var me = this;\n                this._upArrow.hover(function () {\n                  if (!me.disabled) {\n                    me._upArrow.addClass(me.toThemeProperty('jqx-icon-arrow-up-hover'));\n                  }\n                }, function () {\n                  me._upArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-up-hover'));\n                });\n                this._downArrow.hover(function () {\n                  if (!me.disabled) {\n                    me._downArrow.addClass(me.toThemeProperty('jqx-icon-arrow-down-hover'));\n                  }\n                }, function () {\n                  me._downArrow.removeClass(me.toThemeProperty('jqx-icon-arrow-down-hover'));\n                });\n                var isTouchDevice = $.jqx.mobile.isTouchDevice();\n                var eventname = 'click';\n                if (isTouchDevice) {\n                  eventname = $.jqx.mobile.getTouchEventName('touchstart');\n                }\n                if (isTouchDevice) {\n                  this.addHandler(this.downbutton, 'click', function (event) {\n                    me.spinDown();\n                  });\n                  this.addHandler(this.upbutton, 'click', function (event) {\n                    me.spinUp();\n                  });\n                }\n                this.addHandler(this.downbutton, eventname, function (event) {\n                  if (!isTouchDevice) {\n                    if (me._selection().start == 0) {\n                      me._setSelectionStart(me.numberInput.val().length);\n                    }\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                      me._setSelectionStart(me._inputSelection.start);\n                    }\n                  } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }\n                  me.spinDown();\n                  return false;\n                });\n                this.addHandler(this.upbutton, eventname, function (event) {\n                  if (!isTouchDevice) {\n                    if (me._selection().start == 0) {\n                      me._setSelectionStart(me.numberInput.val().length);\n                    }\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                      me._setSelectionStart(me._inputSelection.start);\n                    }\n                  } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }\n                  me.spinUp();\n                  return false;\n                });\n              } else {\n                throw new Error(\"jqxNumberInput: Missing reference to jqxbuttons.js.\");\n              }\n            },\n            spinDown: function () {\n              var me = this;\n              var oldDecimal = this.decimal;\n              if (me.spinMode == 'none') return;\n              if (this.decimal == null) {\n                this.setDecimal(0);\n                return;\n              }\n              var isNegative = this.getvalue('negative');\n              var negativeOffset = isNegative ? -1 : 0;\n              if ($.jqx.mobile.isTouchDevice() || this.inputMode == 'textbox') {\n                me._doTouchHandling();\n              }\n              if (!me.disabled) {\n                var selection = this._selection();\n                var olddecimal = this.decimal;\n                var decimal = this.getDecimal();\n                if (decimal < this.min) {\n                  decimal = this.min;\n                  this.setDecimal(this.min);\n                  this._setSelectionStart(selection.start);\n                  this.spinDown();\n                  return;\n                } else if (decimal > this.max) {\n                  decimal = this.max;\n                  this.setDecimal(this.max);\n                  this._setSelectionStart(selection.start);\n                  this.spinDown();\n                  return;\n                }\n                if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;\n                var dec = parseInt(me.decimal) - me.spinButtonsStep;\n                dec = dec.toString().length;\n                var validvalue = negativeOffset + dec <= me.digits + me.decimalDigits;\n                if (me.spinMode != 'advanced' || me.decimalDigits === 0) {\n                  if (decimal - me.spinButtonsStep >= me.min && validvalue) {\n                    var multiple = 1;\n                    for (i = 0; i < me.decimalDigits; i++) {\n                      multiple = multiple * 10;\n                    }\n                    var newvalue = multiple * decimal - multiple * me.spinButtonsStep;\n                    newvalue = newvalue / multiple;\n                    newvalue = this._parseDecimalValueToEditorValue(newvalue);\n                    me.setDecimal(newvalue);\n                  }\n                } else {\n                  var values = this._getspindecimal();\n                  var separator = this._getSeparatorPosition();\n                  var decimal = parseFloat(values.decimal);\n                  if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;\n                  var dec = parseInt(decimal) - me.spinButtonsStep;\n                  dec = dec.toString().length;\n                  var validvalue = negativeOffset + dec <= me.digits;\n                  var multiple = 1;\n                  var separatorindex = values.decimal.indexOf(\".\");\n                  if (separatorindex != -1) {\n                    var divide = values.decimal.length - separatorindex - 1;\n                    var multiple = 1;\n                    for (var i = 0; i < divide; i++) {\n                      multiple = multiple * 10;\n                    }\n                    decimal -= new Number(me.spinButtonsStep / multiple);\n                    decimal = decimal.toFixed(divide);\n                    var separatorindex = decimal.toString().indexOf(\".\");\n                    if (separatorindex == -1) {\n                      decimal = decimal.toString() + '.';\n                    }\n                    var result = decimal.toString() + values.afterdecimal;\n                    result = new Number(result);\n                    result = result.toFixed(me.decimalDigits);\n                    if (result >= me.min) {\n                      result = this._parseDecimalValueToEditorValue(result);\n                      me.setDecimal(result);\n                    }\n                  } else {\n                    if (decimal - me.spinButtonsStep >= me.min && validvalue) {\n                      var newvalue = multiple * decimal - multiple * me.spinButtonsStep;\n                      newvalue = newvalue / multiple;\n                      var result = newvalue.toString() + values.afterdecimal;\n                      if (result >= me.min) {\n                        result = this._parseDecimalValueToEditorValue(result);\n                        me.setDecimal(result);\n                      }\n                    }\n                  }\n                }\n                if (result == undefined || this.inputMode != 'simple') {\n                  var isNegative = this.getvalue('negative');\n                  if (negativeOffset == 0 && isNegative) {\n                    this._setSelectionStart(selection.start + 1);\n                  } else {\n                    this._setSelectionStart(selection.start);\n                  }\n                  me.savedValue = me.numberInput[0].value;\n                  if (oldDecimal != this.decimal) {\n                    if ($.jqx.mobile.isTouchDevice()) {\n                      this._raiseEvent(0, {});\n                    }\n                    this._raiseEvent(7, {});\n                  }\n                  $.jqx.aria(this, \"aria-valuenow\", this.decimal);\n                  return;\n                }\n                result = this.decimal.toString();\n                var isNegative = this.getvalue('negative');\n                if (negativeOffset == 0 && isNegative) {\n                  this._setSelectionStart(selection.start + 1);\n                } else {\n                  if (result != undefined && (olddecimal == undefined || olddecimal.toString().length == result.length)) {\n                    this._setSelectionStart(selection.start);\n                  } else {\n                    if (isNegative) {\n                      this._setSelectionStart(selection.start + 1);\n                    } else {\n                      this._setSelectionStart(selection.start - 1);\n                    }\n                  }\n                }\n                if (oldDecimal != this.decimal) {\n                  if ($.jqx.mobile.isTouchDevice()) {\n                    this._raiseEvent(0, {});\n                  }\n                  this._raiseEvent(7, {});\n                }\n                $.jqx.aria(this, \"aria-valuenow\", this.decimal);\n              }\n            },\n            _getspindecimal: function () {\n              var selection = this._selection();\n              var decimalString = \"\";\n              var separatorPosition = this._getSeparatorPosition();\n              var visibleItems = this._getVisibleItems();\n              var prefix = this._getHiddenPrefixCount();\n              var text = this.numberInput.val();\n              if (this.numberInput.val().length == selection.start && selection.length == 0) {\n                this._setSelection(selection.start, selection.start + 1);\n                selection = this._selection();\n              }\n              var issimple = this.inputMode != 'advanced';\n              var selectionStart = selection.start;\n              if (selectionStart === 0) {\n                selectionStart++;\n              }\n              if (selectionStart === 1 && this.symbolPosition === \"left\" && this.symbol !== \"\") {\n                selectionStart += this.symbol.length;\n              }\n              for (var i = 0; i < selectionStart; i++) {\n                if (issimple) {\n                  var literal = text.substring(i, i + 1);\n                  var isDigit = !isNaN(parseInt(literal));\n                  if (isDigit) {\n                    decimalString += literal;\n                  }\n                  if (literal == this.decimalSeparator) {\n                    decimalString += literal;\n                  }\n                  continue;\n                }\n                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                  decimalString += visibleItems[i].character;\n                } else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {\n                  if (decimalString.length == 0) {\n                    decimalString = \"0\";\n                  }\n                  decimalString += visibleItems[i].character;\n                }\n              }\n              var afterdecimal = \"\";\n              for (var i = selectionStart; i < visibleItems.length; i++) {\n                if (issimple) {\n                  var literal = text.substring(i, i + 1);\n                  var isDigit = !isNaN(parseInt(literal));\n                  if (isDigit) {\n                    afterdecimal += literal;\n                  }\n                  if (literal == this.decimalSeparator) {\n                    afterdecimal += literal;\n                  }\n                  continue;\n                }\n                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                  afterdecimal += visibleItems[i].character;\n                } else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {\n                  afterdecimal += visibleItems[i].character;\n                }\n              }\n              var isNegative = this.getvalue('negative');\n              var d = isNegative ? \"-\" + this._parseDecimalValue(decimalString).toString() : this._parseDecimalValue(decimalString).toString();\n              return {\n                decimal: d,\n                afterdecimal: this._parseDecimalValue(afterdecimal)\n              };\n            },\n            _parseDecimalValue: function (number) {\n              if (this.decimalSeparator != '.') {\n                var start = number.toString().indexOf(this.decimalSeparator);\n                if (start >= 0) {\n                  var result = number.toString().substring(0, start) + '.' + number.toString().substring(start + 1);\n                  return result;\n                }\n              }\n              return number;\n            },\n            _parseDecimalValueToEditorValue: function (number) {\n              if (this.decimalSeparator != '.') {\n                var start = number.toString().indexOf(\".\");\n                if (start >= 0) {\n                  var result = number.toString().substring(0, start) + this.decimalSeparator + number.toString().substring(start + 1);\n                  return result;\n                }\n              }\n              return number;\n            },\n            spinUp: function () {\n              var me = this;\n              var oldDecimal = this.decimal;\n              if (me.spinMode == 'none') return;\n              if (this.decimal == null) {\n                this.setDecimal(0);\n                return;\n              }\n              if ($.jqx.mobile.isTouchDevice() || this.inputMode == 'textbox') {\n                me._doTouchHandling();\n              }\n              var isNegative = this.getvalue('negative');\n              var negativeOffset = isNegative ? -1 : 0;\n              if (!me.disabled) {\n                var selection = this._selection();\n                var olddecimal = me.decimal;\n                var decimal = me.getDecimal();\n                if (decimal < this.min) {\n                  decimal = this.min;\n                  this.setDecimal(this.min);\n                  this._setSelectionStart(selection.start);\n                  this.spinUp();\n                  return;\n                } else if (decimal > this.max) {\n                  decimal = this.max;\n                  this.setDecimal(this.max);\n                  this._setSelectionStart(selection.start);\n                  this.spinUp();\n                  return;\n                }\n                if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;\n                var dec = parseInt(me.decimal) + me.spinButtonsStep;\n                dec = dec.toString().length;\n                var validvalue = negativeOffset + dec <= me.digits + me.decimalDigits;\n                if (me.spinMode != 'advanced' || me.decimalDigits === 0) {\n                  if (decimal + me.spinButtonsStep <= me.max && validvalue) {\n                    var multiple = 1;\n                    for (var i = 0; i < me.decimalDigits; i++) {\n                      multiple = multiple * 10;\n                    }\n                    var newvalue = multiple * decimal + multiple * me.spinButtonsStep;\n                    newvalue = newvalue / multiple;\n                    newvalue = this._parseDecimalValueToEditorValue(newvalue);\n                    me.setDecimal(newvalue);\n                  }\n                } else {\n                  var values = this._getspindecimal();\n                  var separator = this._getSeparatorPosition();\n                  var decimal = parseFloat(values.decimal);\n                  if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;\n                  var dec = parseInt(decimal) + me.spinButtonsStep;\n                  dec = dec.toString().length;\n                  var validvalue = negativeOffset + dec <= me.digits;\n                  var multiple = 1;\n                  var separatorindex = values.decimal.indexOf(\".\");\n                  if (separatorindex != -1) {\n                    var divide = values.decimal.length - separatorindex - 1;\n                    var multiple = 1;\n                    for (var i = 0; i < divide; i++) {\n                      multiple = multiple * 10;\n                    }\n                    decimal += new Number(me.spinButtonsStep / multiple);\n                    decimal = decimal.toFixed(divide);\n                    var separatorindex = decimal.toString().indexOf(\".\");\n                    if (separatorindex == -1) {\n                      decimal = decimal.toString() + '.';\n                    }\n                    var result = decimal.toString() + values.afterdecimal;\n                    result = new Number(result);\n                    result = result.toFixed(me.decimalDigits);\n                    var number = new Number(result).toFixed(me.decimalDigits);\n                    if (number <= me.max) {\n                      result = this._parseDecimalValueToEditorValue(result);\n                      me.setDecimal(result);\n                    } else result = undefined;\n                  } else {\n                    if (decimal + me.spinButtonsStep <= me.max && validvalue) {\n                      var newvalue = multiple * decimal + multiple * me.spinButtonsStep;\n                      newvalue = newvalue / multiple;\n                      var result = newvalue.toString() + values.afterdecimal;\n                      var number = new Number(result).toFixed(me.decimalDigits);\n                      if (number <= me.max) {\n                        result = this._parseDecimalValueToEditorValue(result);\n                        if (isNegative && result.indexOf('-') == -1) {\n                          if (values.decimal != '-0') {\n                            result = '-' + result;\n                          }\n                        }\n                        me.setDecimal(result);\n                      } else {\n                        result = undefined;\n                      }\n                    }\n                  }\n                }\n                if (result == undefined || this.inputMode != 'simple') {\n                  this._setSelectionStart(selection.start);\n                  me.savedValue = me.numberInput[0].value;\n                  if (oldDecimal != this.decimal) {\n                    if ($.jqx.mobile.isTouchDevice()) {\n                      this._raiseEvent(0, {});\n                    }\n                    this._raiseEvent(7, {});\n                  }\n                  $.jqx.aria(this, \"aria-valuenow\", this.decimal);\n                  return;\n                }\n                result = this.decimal.toString();\n                var isNegative = this.getvalue('negative');\n                if (negativeOffset == -1 && !isNegative) {\n                  this._setSelectionStart(-1 + selection.start);\n                } else {\n                  if (result != undefined && (olddecimal == undefined || olddecimal.toString().length == result.length)) {\n                    this._setSelectionStart(selection.start);\n                  } else {\n                    if (isNegative) {\n                      this._setSelectionStart(selection.start);\n                    } else {\n                      this._setSelectionStart(1 + selection.start);\n                    }\n                  }\n                }\n                if (oldDecimal != this.decimal) {\n                  if ($.jqx.mobile.isTouchDevice()) {\n                    this._raiseEvent(0, {});\n                  }\n                  this._raiseEvent(7, {});\n                }\n                $.jqx.aria(this, \"aria-valuenow\", this.decimal);\n              }\n            },\n            _exitSimpleInputMode: function (event, self, checkbounds, oldvalue) {\n              if (self == undefined) {\n                self = event.data;\n              }\n              if (self == null) return;\n              if (checkbounds == undefined) {\n                if (event.target != null && self.element != null) {\n                  if (event.target.id != undefined && event.target.id.toString().length > 0 && self.host.find('#' + event.target.id).length > 0 || event.target == self.element) {\n                    return;\n                  }\n                }\n                var offset = self.host.offset();\n                var left = offset.left;\n                var top = offset.top;\n                var width = self.host.width();\n                var height = self.host.height();\n                var targetOffset = $(event.target).offset();\n                if (targetOffset.left >= left && targetOffset.left <= left + width) if (targetOffset.top >= top && targetOffset.top <= top + height) {\n                  return;\n                }\n              }\n              if ($.jqx.mobile.isOperaMiniBrowser()) {\n                self.numberInput.attr(\"readonly\", true);\n              }\n              if (self.disabled || self.readOnly) return;\n              var enteredMode = $.data(self.numberInput, \"simpleInputMode\");\n              if (enteredMode == null) return;\n              $.data(self.numberInput, \"simpleInputMode\", null);\n              this._parseDecimalInSimpleMode();\n              return false;\n            },\n            _getDecimalInSimpleMode: function () {\n              var val = this.decimal;\n              if (this.decimalSeparator != '.') {\n                var indx = val.toString().indexOf(this.decimalSeparator);\n                if (indx > 0) {\n                  var prefix = val.toString().substring(0, indx);\n                  var val = prefix + \".\" + val.toString().substring(indx + 1);\n                }\n              }\n              return val;\n            },\n            _parseDecimalInSimpleMode: function (refreshValue) {\n              var self = this;\n              var isNegative = self.getvalue('negative');\n              var decimal = this.ValueString;\n              if (decimal == undefined) {\n                decimal = this.GetValueString(this.numberInput.val(), this.decimalSeparator, this.decimalSeparator != \"\");\n              }\n              if (this.decimalSeparator != '.') {\n                var indx = decimal.toString().indexOf(\".\");\n                if (indx > 0) {\n                  var prefix = decimal.toString().substring(0, indx);\n                  var val = prefix + this.decimalSeparator + decimal.toString().substring(indx + 1);\n                  decimal = val;\n                }\n              }\n              var string = isNegative ? \"-\" : '';\n              if (this.symbolPosition == 'left') {\n                string += this.symbol;\n              }\n              var leadingDigitsCount = this.digits % this.groupSize;\n              if (leadingDigitsCount == 0) {\n                leadingDigitsCount = this.groupSize;\n              }\n              var decimalString = decimal.toString();\n              if (decimalString.indexOf('-') >= 0) {\n                decimalString = decimalString.substring(decimalString.indexOf('-') + 1);\n              }\n              string += decimalString;\n              if (this.symbolPosition == 'right') {\n                string += this.symbol;\n              }\n              if (refreshValue != false) {\n                self.numberInput.val(string);\n              }\n            },\n            //[optimize]\n            _enterSimpleInputMode: function (event, self) {\n              if (self == undefined) {\n                self = event.data;\n              }\n              var selection = this._selection();\n              if (self == null) return;\n              var isNegative = self.getvalue('negative');\n              var decimal = self.decimal;\n              if (isNegative) {\n                if (decimal > 0) decimal = -decimal;\n              }\n              self.numberInput.val(decimal);\n              $.data(self.numberInput, \"simpleInputMode\", true);\n              if ($.jqx.mobile.isOperaMiniBrowser()) {\n                self.numberInput.attr(\"readonly\", false);\n              }\n              this._parseDecimalInSimpleMode();\n              this._setSelectionStart(selection.start);\n            },\n            setvalue: function (name, value) {\n              if (this[name] !== undefined) {\n                if (name == 'decimal') {\n                  this._setDecimal(value);\n                } else {\n                  this[name] = value;\n                  this.propertyChangedHandler(this, name, value, value);\n                }\n              }\n            },\n            getvalue: function (name) {\n              if (name == 'decimal') {\n                if (this.negative != undefined && this.negative == true) {\n                  if (this.decimal.toString().indexOf(',')) {\n                    return -Math.abs(this.decimal.toString().replace(/,/, '.'));\n                  }\n                  return -Math.abs(this[name]);\n                }\n              }\n              if (name in this) {\n                return this[name];\n              }\n              return null;\n            },\n            // gets the intput's value.\n            _getString: function () {\n              var s = \"\";\n              for (var i = 0; i < this.items.length; i++) {\n                var character = this.items[i].character;\n                s += character;\n              }\n              return s;\n            },\n            //[optimize]\n            _literal: function (letter, regExpression, editable, separator) {\n              return {\n                character: letter,\n                regex: regExpression,\n                canEdit: editable,\n                isSeparator: separator\n              };\n            },\n            //[optimize]\n            _initializeLiterals: function () {\n              if (this.inputMode == 'textbox') return;\n              // add the negative symbol.\n              var index = 0;\n              var negativeSymbolLength = this.negativeSymbol.length;\n              for (var i = 0; i < negativeSymbolLength; i++) {\n                var character = this.negativeSymbol.substring(i, i + 1);\n                var regex = \"\";\n                var canEdit = false;\n                var literal = null;\n                if (this.negative) {\n                  literal = this._literal(character, regex, canEdit, false);\n                } else {\n                  literal = this._literal('', regex, canEdit, false);\n                }\n                this.items[index] = literal;\n                index++;\n              }\n\n              // add the currency or percentage symbol.\n              var symbolLength = this.symbol.length;\n              if (this.symbolPosition == 'left') {\n                for (i = 0; i < symbolLength; i++) {\n                  var character = this.symbol.substring(i, i + 1);\n                  var regex = \"\";\n                  var canEdit = false;\n                  var literal = this._literal(character, regex, canEdit, false);\n                  this.items[index] = literal;\n                  index++;\n                }\n              }\n              var leadingDigitsCount = this.digits % this.groupSize;\n              if (leadingDigitsCount == 0) {\n                leadingDigitsCount = this.groupSize;\n              }\n\n              // add the digits and group separators.\n              for (var i = 0; i < this.digits; i++) {\n                var character = this.promptChar;\n                var regex = \"\\\\d\";\n                var canEdit = true;\n                var literal = this._literal(character, regex, canEdit, false);\n                this.items[index] = literal;\n                index++;\n                if (i < this.digits - 1 && this.groupSeparator != undefined && this.groupSeparator.length > 0) {\n                  leadingDigitsCount--;\n                  if (leadingDigitsCount == 0) {\n                    leadingDigitsCount = this.groupSize;\n                    var separatorLiteral = this._literal(this.groupSeparator, \"\", false, false);\n                    this.items[index] = separatorLiteral;\n                    index++;\n                  }\n                } else if (i == this.digits - 1) {\n                  literal.character = 0;\n                }\n              }\n              this.decimalSeparatorPosition = -1;\n\n              // add the digits decimal separator and the decimal digits.\n              if (this.decimalDigits != undefined && this.decimalDigits > 0) {\n                var character = this.decimalSeparator;\n                if (character.length == 0) {\n                  character = \".\";\n                }\n                var literal = this._literal(character, \"\", false, true);\n                this.items[index] = literal;\n                this.decimalSeparatorPosition = index;\n                index++;\n                for (var i = 0; i < this.decimalDigits; i++) {\n                  var decimalCharacter = 0;\n                  var regex = \"\\\\d\";\n                  var decimalDigit = this._literal(decimalCharacter, regex, true, false);\n                  this.items[index] = decimalDigit;\n                  index++;\n                }\n              }\n\n              // add the currency or percentage symbol.\n              if (this.symbolPosition == 'right') {\n                for (var i = 0; i < symbolLength; i++) {\n                  var character = this.symbol.substring(i, i + 1);\n                  var regex = \"\";\n                  var canEdit = false;\n                  var literal = this._literal(character, regex, canEdit);\n                  this.items[index] = literal;\n                  index++;\n                }\n              }\n            },\n            //[optimize]\n            _match: function (character, regex) {\n              var regExpr = new RegExp(regex, \"i\");\n              return regExpr.test(character);\n            },\n            //[optimize]\n            _raiseEvent: function (id, arg) {\n              var evt = this.events[id];\n              var args = {};\n              args.owner = this;\n              if (this.host.css('display') == 'none') {\n                return true;\n              }\n              var key = arg.charCode ? arg.charCode : arg.keyCode ? arg.keyCode : 0;\n              var result = true;\n              var isreadOnly = this.readOnly;\n              var me = this;\n              if (id == 3 || id == 2) {\n                if (!this.disabled) {\n                  if (this.inputMode != 'simple' && this.inputMode != 'textbox') {\n                    this._handleMouse(arg);\n                  } else {\n                    //       this._enterSimpleInputMode(null, me);\n                    return true;\n                  }\n                }\n              }\n              if (id == 0) {\n                var decimalValue = this.getvalue('decimal');\n                if (this.max < decimalValue || this.min > decimalValue) {\n                  this.host.addClass(this.toThemeProperty(\"jqx-input-invalid\"));\n                } else {\n                  this.host.removeClass(this.toThemeProperty(\"jqx-input-invalid\"));\n                  this.host.addClass(this.toThemeProperty(\"jqx-input\"));\n                  this.host.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n                }\n              }\n              var event = new $.Event(evt);\n              event.owner = this;\n              args.value = this.getvalue('decimal');\n              args.text = this.numberInput.val();\n              event.args = args;\n              if (id == 7) {\n                args.type = this.changeType;\n                this.changeType = null;\n              }\n              if (evt != undefined) {\n                if (id != 4 && id != 5 && id != 6) {\n                  result = this.host.trigger(event);\n                }\n              }\n              var me = this;\n              // key down\n              if (this.inputMode == 'textbox') return result;\n              if (this.inputMode != 'simple') {\n                if (id == 4) {\n                  if (isreadOnly || this.disabled) {\n                    return false;\n                  }\n                  result = me._handleKeyDown(arg, key);\n                }\n                // key up\n                else if (id == 5) {\n                  if (isreadOnly || this.disabled) {\n                    result = false;\n                  }\n                } else if (id == 6) {\n                  if (isreadOnly || this.disabled) {\n                    return false;\n                  }\n                  result = me._handleKeyPress(arg, key);\n                }\n              } else {\n                if (id == 4 || id == 5 || id == 6) {\n                  if ($.jqx.mobile.isTouchDevice() || this.touchMode === true) {\n                    return true;\n                  }\n                  if (isreadOnly || this.disabled) {\n                    return false;\n                  }\n                  var letter = String.fromCharCode(key);\n                  var digit = parseInt(letter);\n                  var allowInput = true;\n                  if (!arg.ctrlKey && !arg.shiftKey && !arg.metaKey) {\n                    if (key >= 65 && key <= 90) {\n                      allowInput = false;\n                    }\n                  }\n                  if (id == 6 && $.jqx.browser.opera != undefined) {\n                    if (key == 8) return false;\n                  }\n                  if (allowInput) {\n                    if (id == 4) {\n                      allowInput = me._handleSimpleKeyDown(arg, key);\n                    }\n                    if (key == 107) {\n                      var isNegative = me.getvalue('negative');\n                      if (isNegative) {\n                        me.setvalue('negative', false);\n                        me.decimal = me.ValueString;\n                        me._parseDecimalInSimpleMode();\n                        me._setSelectionStart(selection.start + 1);\n                        me._raiseEvent(0, me.value);\n                        me._raiseEvent(1, me.numberInput.val());\n                      }\n                    }\n                    if (key == 189 || key == 45 || key == 109 || key == 173) {\n                      var selection = me._selection();\n                      if (id == 4) {\n                        var isNegative = me.getvalue('negative');\n                        if (isNegative == false) {\n                          me.setvalue('negative', true);\n                        } else {\n                          me.setvalue('negative', false);\n                        }\n                        me.decimal = me.ValueString;\n                        me._parseDecimalInSimpleMode();\n                        if (!isNegative) {\n                          me._setSelectionStart(selection.start + 1);\n                        } else {\n                          me._setSelectionStart(selection.start - 1);\n                        }\n                        allowInput = false;\n                        me._raiseEvent(0, me.value);\n                        me._raiseEvent(1, me.numberInput.val());\n                      }\n                    }\n                    var ctrlKey = args.ctrlKey || args.metaKey;\n                    if (!$.jqx.browser.msie) {\n                      var e = arg;\n                      if (ctrlKey && key == 99 /* firefox */ || ctrlKey && key == 67 /* opera */ || ctrlKey && key == 122 /* firefox */ || ctrlKey && key == 90 /* opera */ || ctrlKey && key == 118 /* firefox */ || ctrlKey && key == 86 /* opera */ || e.shiftKey && key == 45) {\n                        if ($.jqx.browser.webkit || $.jqx.browser.chrome) {\n                          me._handleSimpleKeyDown(arg, key);\n                        }\n                        if (key == 67) return true;\n                        return false;\n                      }\n                    }\n                    if (ctrlKey && key == 97 /* firefox */ || ctrlKey && key == 65 /* opera */) {\n                      return true;\n                    }\n                    if (id == 6 && allowInput) {\n                      var specialKey = this._isSpecialKey(key);\n                      return specialKey;\n                    }\n                  }\n                  return allowInput;\n                }\n              }\n              return result;\n            },\n            GetSelectionInValue: function (selectionPosition, text, separator, hasSeparator) {\n              var selectionInValue = 0;\n              for (var i = 0; i < text.length; i++) {\n                if (i >= selectionPosition) break;\n                var literal = text.substring(i, i + 1);\n                var isDigit = !isNaN(parseInt(literal));\n                if (isDigit || hasSeparator && text.substring(i, i + 1) == separator) {\n                  selectionInValue++;\n                }\n              }\n              return selectionInValue;\n            },\n            GetSelectionLengthInValue: function (selectionPosition, selectionLength, text, separator) {\n              var selectionInValue = 0;\n              for (var i = 0; i < text.length; i++) {\n                if (i >= selectionPosition + selectionLength) break;\n                var literal = text.substring(i, i + 1);\n                var isDigit = !isNaN(parseInt(literal));\n                if (selectionLength > 0 && i >= selectionPosition && isDigit || i >= selectionPosition && text[i].toString() == separator) {\n                  selectionInValue++;\n                }\n              }\n              return selectionInValue;\n            },\n            GetInsertTypeByPositionInValue: function (positionInValue, separator, text, hasSeparator) {\n              var insertType = \"before\";\n              var valueString = this.GetValueString(text, separator, hasSeparator);\n              var digitsToSeparator = this.GetDigitsToSeparator(0, valueString, separator);\n              if (positionInValue > digitsToSeparator) {\n                insertType = 'after';\n              }\n              return insertType;\n            },\n            RemoveRange: function (start, length, text, separatorChar, updateText, insert) {\n              var decimalPossibleChars = this.digits;\n              var selectionStart = start;\n              var selectionLength = length;\n              var removedDigits = 0;\n              var value = this.decimal;\n              var selection = this._selection();\n              //   var text = this.numberInput.val();\n              var separatorChar = this.decimalSeparator;\n              var hasSeparator = separatorChar != '';\n              if (selectionLength == 0 && this.ValueString.length < this.decimalPossibleChars - 1) return removedDigits;\n              var separatorPosition = this.GetSeparatorPositionInText(separatorChar, text);\n              if (!updateText) {\n                separatorPosition = this.GetSeparatorPositionInText(separatorChar, text);\n              }\n              if (separatorPosition < 0 && !hasSeparator && text.length > 1) {\n                separatorPosition = text.length;\n              }\n              if (separatorPosition == -1) separatorPosition = text.length;\n              var separatorOffset = hasSeparator ? 1 : 0;\n              if (length < 2 && insert == true) {\n                var valueDigits = this.ValueString.length - this.decimalDigits - separatorOffset;\n                if (valueDigits == decimalPossibleChars && start + length < separatorPosition) {\n                  selectionLength++;\n                }\n              }\n              var newTextString = \"\";\n              for (var i = 0; i < text.length; i++) {\n                if (i < selectionStart || i >= selectionStart + selectionLength) {\n                  newTextString += text.substring(i, i + 1);\n                  continue;\n                } else {\n                  var literal = text.substring(i, i + 1);\n                  if (literal == separatorChar) {\n                    newTextString += separatorChar;\n                    continue;\n                  } else {\n                    var literal = text.substring(i, i + 1);\n                    if (this.symbol && this.symbol != \"\" && this.symbol.indexOf(literal) >= 0) continue;\n                    if (i > separatorPosition) {\n                      newTextString += \"0\";\n                      continue;\n                    }\n                  }\n                }\n                var literal = text.substring(i, i + 1);\n                var isDigit = !isNaN(parseInt(literal));\n                if (isDigit) {\n                  removedDigits++;\n                }\n              }\n              if (newTextString.length == 0) {\n                newTextString = \"0\";\n              }\n              if (updateText) {\n                this.numberInput.val(newTextString);\n              } else {\n                this.ValueString = newTextString;\n              }\n              var ch = newTextString.substring(0, 1);\n              if (ch == separatorChar && isNaN(parseInt(ch))) {\n                var res = '0' + newTextString;\n                newTextString = res;\n              }\n              this.ValueString = this.GetValueString(newTextString, separatorChar, hasSeparator);\n              this.decimal = this.ValueString;\n              this._parseDecimalInSimpleMode();\n              this._setSelectionStart(selectionStart);\n              return removedDigits;\n            },\n            InsertDigit: function (digit, position) {\n              if (typeof this.digits != 'number') {\n                this.digits = parseInt(this.digits);\n              }\n              if (typeof this.decimalDigits != 'number') {\n                this.decimalDigits = parseInt(this.decimalDigits);\n              }\n              var decimalPossibleChars = 1 + this.digits;\n              var selection = this._selection();\n              var isNegative = this.getvalue('negative');\n              var increased = false;\n              if (selection.start == 0 && this.symbol != '' && this.symbolPosition == 'left') {\n                this._setSelectionStart(selection.start + 1);\n                selection = this._selection();\n                increased = true;\n              }\n              if (isNegative && increased || isNegative && !increased && selection.start == 0) {\n                this._setSelectionStart(selection.start + 1);\n                selection = this._selection();\n              }\n              var selectionChar = this.numberInput.val().substring(selection.start, selection.start + 1);\n              var text = this.numberInput.val();\n              var separatorChar = this.decimalSeparator;\n              var hasSeparator = separatorChar != '' && this.decimalDigits > 0;\n              if (selectionChar == this.symbol && this.symbolPosition == 'right') {\n                if (this.decimalDigits == 0) {\n                  this.ValueString = this.GetValueString(text, separatorChar, hasSeparator);\n                  if (this.ValueString.length >= decimalPossibleChars) return;\n                } else {\n                  return;\n                }\n              }\n              this.ValueString = this.GetValueString(text, separatorChar, hasSeparator);\n              if (this.ValueString == \"\") {\n                this.ValueString = new Number(0).toFixed(this.decimalDigits);\n              }\n              var value = this.ValueString;\n              if (this.decimalDigits > 0 && position >= value.length) {\n                position = value.length - 1;\n              }\n              var valueChar = '';\n              if (position < value.length) {\n                valueChar = value.substring(position, position + 1);\n              }\n              var shouldReplace = false;\n              var decrementedPosition = false;\n              var type = this.GetInsertTypeByPositionInValue(position, separatorChar, text, hasSeparator);\n              if (type == 'after') {\n                shouldReplace = true;\n              }\n              var separatorOffset = hasSeparator ? 1 : 0;\n              if (valueChar != separatorChar && this.ValueString.length - this.decimalDigits - separatorOffset >= decimalPossibleChars - 1) {\n                shouldReplace = true;\n              }\n              if (valueChar === \"0\" && this.ValueString.length === 1 && this.decimalDigits === 0) {\n                shouldReplace = true;\n              }\n              var isdecimal = false;\n              var separatoroffset = hasSeparator ? 1 : 0;\n              if (!shouldReplace && this.ValueString && this.ValueString.length >= this.digits + this.decimalDigits + separatoroffset) {\n                return;\n              }\n              if (shouldReplace && valueChar != separatorChar) {\n                if (isdecimal) position++;\n                var before = value.substring(0, position);\n                if (before.length == value.length) {\n                  if (this.ValueString.length >= this.digits + this.decimalDigits + separatoroffset) return;\n                }\n                var current = digit;\n                var after = \"\";\n                if (position + 1 < value.length) {\n                  after = value.substring(position + 1);\n                }\n                var result = before + current + after;\n                this.ValueString = result;\n              } else {\n                var before = value.substring(0, position);\n                var current = digit;\n                var after = value.substring(position);\n                var result = before + current + after;\n                if (value.substring(0, 1) == '0' && value.substring(1, 2) == separatorChar) {\n                  result = current + value.substring(1);\n                  if (valueChar == separatorChar) {\n                    this._setSelectionStart(selection.start - 1);\n                    selection = this._selection();\n                  }\n                }\n                this.ValueString = result;\n              }\n              if (isNegative) {\n                this.decimal = \"-\" + this.ValueString;\n              } else this.decimal = this.ValueString;\n              this._parseDecimalInSimpleMode();\n              var start = selection.start;\n              start += 1;\n              this._setSelectionStart(start);\n              this.value = this.decimal;\n              this._raiseEvent(0, this.value);\n              this._raiseEvent(1, this.numberInput.val());\n            },\n            GetStringToSeparator: function (text, separator, hasSeparator) {\n              var res = \"\";\n              var pointSeparator = separator;\n              var separatorInText = this.GetSeparatorPositionInText(separator, text);\n              var newString = text.subString(0, separatorInText);\n              res = this.GetValueString(newString, separator, hasSeparator);\n              return res;\n            },\n            GetSeparatorPositionInText: function (separator, text) {\n              var decimalPointPos = -1;\n              for (var i = 0; i < text.length; i++) {\n                if (text.substring(i, i + 1) == separator) {\n                  decimalPointPos = i;\n                  break;\n                }\n              }\n              return decimalPointPos;\n            },\n            GetValueString: function (text, separator, hasSeparator) {\n              var res = \"\";\n              for (var i = 0; i < text.length; i++) {\n                var literal = text.substring(i, i + 1);\n                var isDigit = !isNaN(parseInt(literal));\n                if (isDigit) {\n                  res += literal;\n                }\n                if (literal == separator) {\n                  res += separator;\n                }\n              }\n              return res;\n            },\n            Backspace: function () {\n              var selection = this._selection();\n              var initialselection = this._selection();\n              var text = this.numberInput.val();\n              if (selection.start == 0 && selection.length == 0) return;\n              this.isBackSpace = true;\n              var literal = text.substring[(selection.start, selection.start + 1)];\n              var isDigit = !isNaN(parseInt(literal));\n              if (selection.start > 0 && selection.length == 0) {\n                this._setSelectionStart(selection.start - 1);\n                var selection = this._selection();\n              }\n              this.Delete();\n              this._setSelectionStart(initialselection.start - 1);\n              this.isBackSpace = false;\n            },\n            Delete: function (deleteWithoutSelection) {\n              var selection = this._selection();\n              var text = this.numberInput.val();\n              if (selection.start === 0 && text.substring(0, 1) == \"-\") {\n                this.setvalue('negative', false);\n                var selection = this._selection();\n                var text = this.numberInput.val();\n              }\n              var selectionStart = selection.start;\n              if (selection.start > 0 && text.substring(0, 1) == \"-\") {\n                selectionStart--;\n                selection.start = selectionStart;\n              }\n              var selectionLength = selection.length;\n              selectionLength = Math.max(selectionLength, 1);\n              this.ValueString = this.GetValueString(text, this.decimalSeparator, this.decimalSeparator != '');\n              if (selectionStart > this.ValueString.indexOf(this.decimalSeparator) && this.decimalDigits > 0) {\n                selectionStart++;\n              }\n              var offset = 0;\n              if (this.symbol) {\n                if (this.symbolPosition == \"left\") {\n                  offset--;\n                }\n                if (this.negative) offset--;\n              }\n              this.RemoveRange(selection.start + offset, selectionLength, this.ValueString, \".\", false);\n              var literal = this.ValueString.substring(0, 1);\n              var isDigit = !isNaN(parseInt(literal));\n              if (!isDigit) {\n                this.ValueString = '0' + this.ValueString;\n              }\n              this.decimal = this.ValueString;\n              this._parseDecimalInSimpleMode();\n              this._setSelectionStart(selectionStart);\n              this.value = this.decimal;\n              this._raiseEvent(0, this.value);\n              this._raiseEvent(1, this.numberInput.val());\n            },\n            insertsimple: function (insertion) {\n              var selection = this._selection();\n              var text = this.numberInput.val();\n              if (selection.start == text.length && this.decimal != null && this.decimalDigits > 0) return;\n              var oldValue = this.decimal;\n              var separatorChar = this.decimalSeparator;\n              this.ValueString = this.GetValueString(text, separatorChar, separatorChar != '');\n              var positionInValue = this.GetSelectionInValue(selection.start, text, separatorChar, separatorChar != '');\n              var lengthInValue = this.GetSelectionLengthInValue(selection.start, selection.length, text, separatorChar);\n              var digitsToSeparator = this.GetDigitsToSeparator(0, this.ValueString, separatorChar);\n              var decrementPositionInValue = false;\n              if (this.decimalDigits > 0 && positionInValue >= this.ValueString.length) {\n                positionInValue--;\n              }\n              if (this.ValueString == \"\") {\n                this.ValueString = new Number(0).toFixed(this.decimalDigits);\n                this.ValueString = this.ValueString.replace(\".\", separatorChar);\n                this.RemoveRange(selection.start, lengthInValue, this.ValueString, separatorChar, false, true);\n                this.InsertDigit(insertion, 0, selection);\n                return;\n              }\n              this.RemoveRange(selection.start, lengthInValue, this.ValueString, separatorChar, false, true);\n              this.InsertDigit(insertion, positionInValue, selection);\n            },\n            GetDigitsToSeparator: function (digitsToSeparator, valueString, separator) {\n              if (separator == undefined) separator = '.';\n              if (valueString.indexOf(separator) < 0) {\n                return valueString.length;\n              }\n              for (var i = 0; i < valueString.length; i++) {\n                if (valueString.substring(i, i + 1) == separator) {\n                  digitsToSeparator = i;\n                  break;\n                }\n              }\n              return digitsToSeparator;\n            },\n            _handleSimpleKeyDown: function (e, key) {\n              var selection = this._selection();\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if ((key == 8 || key == 46) && ctrlKey) {\n                this.setDecimal(null);\n                return false;\n              }\n              if (selection.start >= 0 && selection.start < this.items.length) {\n                var letter = String.fromCharCode(key);\n              }\n              if (key === 27) {\n                this.setDecimal(this._savedValue);\n                var position = this.GetSeparatorPositionInText(this.decimalSeparator, this.numberInput.val());\n                if (position != -1) {\n                  this._setSelectionStart(position);\n                }\n                e.preventDefault();\n              }\n              if (this.rtl && key == 37) {\n                var shift = e.shiftKey;\n                var offset = shift ? 1 : 0;\n                if (shift) {\n                  this._setSelection(selection.start + 1 - offset, selection.start + selection.length + 1);\n                } else {\n                  this._setSelection(selection.start + 1 - offset, selection.start + 1);\n                }\n                return false;\n              } else if (this.rtl && key == 39) {\n                var shift = e.shiftKey;\n                var offset = shift ? 1 : 0;\n                if (shift) {\n                  this._setSelection(selection.start - 1, selection.length + offset + selection.start - 1);\n                } else {\n                  this._setSelection(selection.start - 1, selection.start - 1);\n                }\n                return false;\n              }\n\n              // handle backspace.\n              if (key == 8) {\n                this.Backspace();\n                return false;\n              }\n              if (key == 190 || key == 110) {\n                var position = this.GetSeparatorPositionInText(this.decimalSeparator, this.numberInput.val());\n                if (position != -1) {\n                  this._setSelectionStart(position + 1);\n                }\n                return false;\n              }\n              if (key == 188 && this.groupSeparator === ',') {\n                var value = this.numberInput.val();\n                for (i = selection.start; i < value.length; i++) {\n                  if (value[i] == this.groupSeparator) {\n                    this._setSelectionStart(1 + i);\n                    break;\n                  }\n                }\n                return false;\n              }\n\n              // allow Ctrl+C (copy)\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if (ctrlKey && key == 99 /* firefox */ || ctrlKey && key == 67 /* opera */) {\n                var selection = this._selection();\n                var text = \"\";\n                var input = this.numberInput.val();\n                if (selection.start > 0 || selection.length > 0) {\n                  for (var i = selection.start; i < selection.end; i++) {\n                    text += input.substring(i, i + 1);\n                  }\n                }\n                $.data(document.body, \"jqxSelection\", text);\n                if ($.jqx.browser.msie) {\n                  window.clipboardData.setData(\"Text\", text);\n                } else {\n                  var me = this;\n                  var copyFrom = $('<textarea style=\"position: absolute; left: -1000px; top: -1000px;\"/>');\n                  copyFrom.val(text);\n                  $('body').append(copyFrom);\n                  copyFrom.select();\n                  setTimeout(function () {\n                    document.designMode = 'off';\n                    copyFrom.select();\n                    copyFrom.remove();\n                    me.focus();\n                  }, 100);\n                }\n                this.savedText = text;\n                return true;\n              }\n              // allow Ctrl+Z (undo)\n              if (ctrlKey && key == 122 /* firefox */ || ctrlKey && key == 90 /* opera */) return false;\n              // allow or deny Ctrl+V (paste), Shift+Ins\n              if (ctrlKey && key == 118 /* firefox */ || ctrlKey && key == 86 /* opera */ || e.shiftKey && key == 45) {\n                if ($.jqx.browser.msie && !this.savedText) {\n                  this.savedText = window.clipboardData.getData(\"Text\");\n                }\n                if (this.savedText != null && this.savedText.length > 0) {\n                  this.val(this.savedText);\n                  //for (var i = 0; i < this.savedText.length; i++) {\n                  //    var digit = parseInt(this.savedText.substring(i, i + 1));\n                  //    if (!isNaN(digit)) {\n                  //        this.insertsimple(digit);\n                  //    }\n                  //}\n                } else {\n                  this.val($.data(document.body, \"jqxSelection\"));\n                }\n                return false;\n              }\n              var letter = String.fromCharCode(key);\n              var digit = parseInt(letter);\n              if (key >= 96 && key <= 105) {\n                digit = key - 96;\n                key = key - 48;\n              }\n              if (!isNaN(digit)) {\n                var me = this;\n                this.insertsimple(digit);\n                return false;\n              }\n\n              // handle del.\n              if (key == 46) {\n                this.Delete();\n                return false;\n              }\n              if (key == 38) {\n                this.spinUp();\n                return false;\n              } else if (key == 40) {\n                this.spinDown();\n                return false;\n              }\n              var specialKey = this._isSpecialKey(key);\n              if (!$.jqx.browser.mozilla) return true;\n              return specialKey;\n            },\n            //[optimize]\n            _getEditRange: function () {\n              var start = 0;\n              var end = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i].canEdit) {\n                  start = i;\n                  break;\n                }\n              }\n              for (i = this.items.length - 1; i >= 0; i--) {\n                if (this.items[i].canEdit) {\n                  end = i;\n                  break;\n                }\n              }\n              return {\n                start: start,\n                end: end\n              };\n            },\n            //[optimize]\n            _getVisibleItems: function () {\n              var visibleItems = new Array();\n              var k = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i].character.toString().length > 0) {\n                  visibleItems[k] = this.items[i];\n                  k++;\n                }\n              }\n              return visibleItems;\n            },\n            //[optimize]\n            _hasEmptyVisibleItems: function () {\n              var visibleItems = this._getVisibleItems();\n              for (var i = 0; i < visibleItems.length; i++) {\n                if (visibleItems[i].canEdit && visibleItems[i].character == this.promptChar) {\n                  return true;\n                }\n              }\n              return false;\n            },\n            //[optimize]\n            _getFirstVisibleNonEmptyIndex: function () {\n              var visibleItems = this._getVisibleItems();\n              for (var i = 0; i < visibleItems.length; i++) {\n                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                  return i;\n                }\n              }\n            },\n            //[optimize]\n            _handleMouse: function (e, args) {\n              var selection = this._selection();\n              if (selection.length <= 1) {\n                var firstItemIndex = this._getFirstVisibleNonEmptyIndex();\n                if (selection.start < firstItemIndex) {\n                  this._setSelectionStart(firstItemIndex);\n                }\n              }\n            },\n            _insertKey: function (key) {\n              this.numberInput[0].focus();\n              var letter = String.fromCharCode(key);\n              var charDigit = parseInt(letter);\n              if (isNaN(charDigit)) return;\n              var emptyDigits = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i].character.length == 0) {\n                  emptyDigits++;\n                }\n              }\n              var selection = this._selection();\n              var rootElement = this;\n              if (selection.start >= 0 && selection.start <= this.items.length) {\n                var selectedTextDeleted = false;\n                var firstItemIndex = this._getFirstVisibleNonEmptyIndex();\n                if (selection.start < firstItemIndex && selection.length == 0) {\n                  if (!isNaN(letter) || letter == ' ') {\n                    this._setSelectionStart(firstItemIndex);\n                    selection = this._selection();\n                  }\n                }\n                var firstEditableIndex = this._getFirstEditableItemIndex();\n                var lastEditableIndex = this._getLastEditableItemIndex();\n                if (this.value === null) {\n                  firstEditableIndex = lastEditableIndex = 0;\n                }\n                var visibleItems = this._getVisibleItems();\n                $.each(visibleItems, function (i, value) {\n                  if (selection.start > i && i != visibleItems.length - 1) return;\n                  var item = visibleItems[i];\n                  if (i > lastEditableIndex) {\n                    item = visibleItems[lastEditableIndex];\n                  }\n                  if (isNaN(letter) || letter == ' ' || letter == '' || !item) return;\n                  if (!item.canEdit) {\n                    return;\n                  }\n                  var separatorPosition = rootElement._getSeparatorPosition();\n                  if (rootElement._match(letter, item.regex)) {\n                    if (!selectedTextDeleted && selection.length > 0) {\n                      for (var j = selection.start + emptyDigits; j < selection.end + emptyDigits; j++) {\n                        if (rootElement.items[j].canEdit) {\n                          if (j > separatorPosition) {\n                            rootElement.items[j].character = '0';\n                          } else {\n                            rootElement.items[j].character = rootElement.promptChar;\n                          }\n                        }\n                      }\n                      var text = rootElement._getString();\n                      //           rootElement.inputValue(text);\n                      selectedTextDeleted = true;\n                    }\n                    var separatorPosition = rootElement._getSeparatorPosition();\n                    var hasEmptyItems = rootElement._hasEmptyVisibleItems();\n                    if (rootElement.decimal == null) {\n                      selection.start = separatorPosition - 1;\n                      if (selection.start < 0) selection.start = 0;\n                      selection.end = selection.start;\n                    }\n                    if (selection.start <= separatorPosition && hasEmptyItems) {\n                      var limit = i;\n                      if (rootElement.decimalSeparatorPosition == -1 && selection.start == separatorPosition) {\n                        limit = i + 1;\n                      }\n                      if (rootElement.decimal == null) {\n                        limit = selection.start;\n                      }\n                      var numberString = \"\";\n                      for (var p = 0; p < limit; p++) {\n                        if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {\n                          numberString += visibleItems[p].character;\n                        }\n                      }\n                      numberString += letter;\n                      var offset = rootElement.decimal < 1 ? 1 : 0;\n                      if (selection.start == separatorPosition && rootElement.decimalSeparatorPosition != -1) {\n                        numberString += rootElement.decimalSeparator;\n                        offset = 0;\n                      }\n                      for (var p = limit + offset; p < visibleItems.length; p++) {\n                        if (visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {\n                          numberString += visibleItems[p].character;\n                        } else if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {\n                          numberString += visibleItems[p].character;\n                        }\n                      }\n                      if (rootElement.decimalSeparator != '.') {\n                        numberString = rootElement._parseDecimalValue(numberString);\n                      }\n                      numberString = parseFloat(numberString).toString();\n                      numberString = new Number(numberString);\n                      numberString = numberString.toFixed(rootElement.decimalDigits);\n                      if (rootElement.decimalSeparator != '.') {\n                        numberString = rootElement._parseDecimalValueToEditorValue(numberString);\n                      }\n                      rootElement.setvalue('decimal', numberString);\n                      var text = rootElement._getString();\n                      if (selection.end < separatorPosition) {\n                        rootElement._setSelectionStart(selection.end + offset);\n                      } else {\n                        rootElement._setSelectionStart(selection.end);\n                      }\n                      if (selection.length >= 1) {\n                        rootElement._setSelectionStart(selection.end);\n                      }\n                      if (selection.length == rootElement.numberInput.val().length) {\n                        var selectBeforeSeparator = rootElement._moveCaretToDecimalSeparator();\n                        var separatorOffset = rootElement.decimalSeparatorPosition >= 0 ? 1 : 0;\n                        rootElement._setSelectionStart(selectBeforeSeparator - separatorOffset);\n                      }\n                    } else {\n                      if (selection.start < separatorPosition || selection.start > separatorPosition) {\n                        if (rootElement.numberInput.val().length == selection.start && rootElement.decimalSeparatorPosition != -1) {\n                          return false;\n                        } else if (rootElement.numberInput.val().length == selection.start && rootElement.decimalSeparatorPosition == -1 && !hasEmptyItems) {\n                          return false;\n                        }\n                        var numberString = \"\";\n                        var addedSeparator = false;\n                        for (var p = 0; p < i; p++) {\n                          if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {\n                            numberString += visibleItems[p].character;\n                          }\n                          if (visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {\n                            numberString += visibleItems[p].character;\n                            addedSeparator = true;\n                          }\n                        }\n                        numberString += letter;\n                        var offset = rootElement.decimal < 1 ? 1 : 0;\n                        if (!addedSeparator && selection.start == separatorPosition - 1) {\n                          numberString += rootElement.decimalSeparator;\n                          addedSeparator = true;\n                        }\n                        for (var p = i + 1; p < visibleItems.length; p++) {\n                          if (!addedSeparator && visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {\n                            numberString += visibleItems[p].character;\n                          } else if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {\n                            numberString += visibleItems[p].character;\n                          }\n                        }\n                        rootElement.setvalue('decimal', numberString);\n                        var text = rootElement._getString();\n                        if (rootElement.decimalSeparatorPosition < 0 && item == visibleItems[lastEditableIndex]) {\n                          rootElement._setSelectionStart(i);\n                          return false;\n                        }\n                        var symbolstartposition = text.indexOf(rootElement.symbol);\n                        var sel = !rootElement.getvalue('negative') ? 0 : 1;\n                        if (symbolstartposition <= sel) symbolstartposition = text.length;\n\n                        // Do not move caret, if it's after the symbol.\n                        if (selection.start < symbolstartposition) {\n                          rootElement._setSelectionStart(i + 1);\n                        } else rootElement._setSelectionStart(i);\n                        if (selection.length >= 1) {\n                          //             rootElement._setSelectionStart(selection.end);\n                        }\n                        if (selection.length == rootElement.numberInput.val().length) {\n                          var selectBeforeSeparator = rootElement._moveCaretToDecimalSeparator();\n                          rootElement._setSelectionStart(selectBeforeSeparator - 1);\n                        }\n                      }\n                    }\n                    return false;\n                  }\n                });\n              }\n            },\n            //[optimize]\n            _handleKeyPress: function (e, key) {\n              var selection = this._selection();\n              var rootElement = this;\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if (ctrlKey && key == 97 /* firefox */ || ctrlKey && key == 65 /* opera */) {\n                return true;\n              }\n              if (key == 8) {\n                if (selection.start > 0) {\n                  rootElement._setSelectionStart(selection.start);\n                }\n                return false;\n              }\n              if (key == 46) {\n                if (selection.start < this.items.length) {\n                  rootElement._setSelectionStart(selection.start);\n                }\n                return false;\n              }\n              if (!$.jqx.browser.mozilla) {\n                if (key == 45 || key == 173 || key == 109 || key == 189) {\n                  var isNegative = this.getvalue('negative');\n                  if (isNegative == false) {\n                    this.setvalue('negative', true);\n                  } else {\n                    this.setvalue('negative', false);\n                  }\n                }\n              }\n              if ($.jqx.browser.msie) {\n                this._insertKey(key);\n              }\n              var specialKey = this._isSpecialKey(key);\n              return specialKey;\n            },\n            //[optimize]\n            _deleteSelectedText: function () {\n              var selection = this._selection();\n              var decimalString = \"\";\n              var separatorPosition = this._getSeparatorPosition();\n              var visibleItems = this._getVisibleItems();\n              var prefix = this._getHiddenPrefixCount();\n              if (this.numberInput.val().length == selection.start && selection.length == 0) {\n                this._setSelection(selection.start, selection.start + 1);\n                selection = this._selection();\n              }\n              for (var i = 0; i < selection.start; i++) {\n                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                  decimalString += visibleItems[i].character;\n                } else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {\n                  if (decimalString.length == 0) {\n                    decimalString = \"0\";\n                  }\n                  decimalString += visibleItems[i].character;\n                }\n              }\n              for (var i = selection.start; i < selection.end; i++) {\n                if (i > separatorPosition && this.decimalSeparatorPosition != -1) {\n                  if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                    decimalString += \"0\";\n                  }\n                } else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {\n                  if (decimalString.length == 0) {\n                    decimalString = \"0\";\n                  }\n                  decimalString += visibleItems[i].character;\n                }\n              }\n              for (var i = selection.end; i < visibleItems.length; i++) {\n                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                  decimalString += visibleItems[i].character;\n                } else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {\n                  if (decimalString.length == 0) {\n                    decimalString = \"0\";\n                  }\n                  decimalString += visibleItems[i].character;\n                }\n              }\n              this.setvalue('decimal', decimalString);\n              return selection.length > 0;\n            },\n            _restoreInitialState: function () {\n              var suffix = parseInt(this.decimalDigits);\n\n              // add the first digit + the decimal separator.\n              if (suffix > 0) {\n                suffix += 2;\n              }\n              for (var k = this.items.length - 1; k > this.items.length - 1 - suffix; k--) {\n                if (!this.items[k]) {\n                  break;\n                }\n                if (this.items[k].canEdit && this.items[k].character == this.promptChar) {\n                  this.items[k].character = 0;\n                }\n              }\n            },\n            clear: function () {\n              this.setDecimal(0);\n            },\n            // clears the decimal value.\n            clearDecimal: function () {\n              if (this.inputMode == 'textbox') {\n                this.numberInput.val();\n                return;\n              }\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i].canEdit) {\n                  this.items[i].character = this.promptChar;\n                }\n              }\n              this._restoreInitialState();\n            },\n            //[optimize]\n            _saveSelectedText: function () {\n              var selection = this._selection();\n              var text = \"\";\n              var visibleItems = this._getVisibleItems();\n              if (selection.start > 0 || selection.length > 0) {\n                for (var i = selection.start; i < selection.end; i++) {\n                  if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {\n                    text += visibleItems[i].character;\n                  } else if (visibleItems[i].isSeparator) {\n                    text += visibleItems[i].character;\n                  }\n                }\n              }\n              if ($.jqx.browser.msie) {\n                window.clipboardData.setData(\"Text\", text);\n              }\n              return text;\n            },\n            _pasteSelectedText: function () {\n              var selection = this._selection();\n              var text = \"\";\n              var k = 0;\n              this.selectedText = $.data(document.body, \"jqxSelection\");\n              if (window.clipboardData) {\n                var clipboardText = window.clipboardData.getData(\"Text\");\n                if (clipboardText != this.selectedText && clipboardText.length > 0) {\n                  this.selectedText = window.clipboardData.getData(\"Text\");\n                  if (this.selectedText == null || this.selectedText == undefined) return;\n                }\n              }\n              var newSelection = selection.start;\n              var visibleItems = this._getVisibleItems();\n              if (this.selectedText != null) {\n                for (var t = 0; t < this.selectedText.length; t++) {\n                  var number = parseInt(this.selectedText[t]);\n                  if (!isNaN(number)) {\n                    var numberCode = 48 + number;\n                    this._insertKey(numberCode);\n                  }\n                }\n              }\n            },\n            _getHiddenPrefixCount: function () {\n              var length = 0;\n              if (!this.negative) {\n                length++;\n              }\n              if (this.symbolPosition == \"left\") {\n                for (var i = 0; i < this.symbol.length; i++) {\n                  if (this.symbol.substring(i, i + 1) == '') {\n                    length++;\n                  }\n                }\n              }\n              return length;\n            },\n            //[optimize]\n            _getEditableItem: function () {\n              var selection = this._selection();\n              for (var i = 0; i < this.items.length; i++) {\n                if (i < selection.start) {\n                  if (this.items[i].canEdit && this.items[i].character != this.promptChar) {\n                    return this.items[i];\n                  }\n                }\n              }\n              return null;\n            },\n            //[optimize]\n            _getEditableItems: function () {\n              var editableItems = new Array();\n              var k = 0;\n              for (var i = 0; i < this.items.length; i++) {\n                if (this.items[i].canEdit) {\n                  editableItems[k] = this.items[i];\n                  k++;\n                }\n              }\n              return editableItems;\n            },\n            //[optimize]\n            _getValidSelectionStart: function (selectionStart) {\n              for (var i = this.items.length - 1; i >= 0; i--) {\n                if (this.items[i].canEdit && this.items[i].character != this.promptChar) {\n                  return i;\n                }\n              }\n              return -1;\n            },\n            //[optimize]\n            _getEditableItemIndex: function (afterCaret) {\n              var selection = this._selection();\n              var prefix = this._getHiddenPrefixCount();\n              var visibleItems = this._getVisibleItems();\n              var index = selection.start;\n              var editableIndex = -1;\n              for (var i = 0; i < index; i++) {\n                if (i < visibleItems.length && visibleItems[i].canEdit) {\n                  editableIndex = i + prefix;\n                }\n              }\n              if (editableIndex == -1 && selection.length > 0) {\n                index = selection.end;\n                for (i = 0; i < index; i++) {\n                  if (i < visibleItems.length && visibleItems[i].canEdit) {\n                    editableIndex = i + prefix;\n                    break;\n                  }\n                }\n              }\n              return editableIndex;\n            },\n            //[optimize]\n            _getEditableItemByIndex: function (index) {\n              for (var k = 0; k < this.items.length; k++) {\n                if (k > index) {\n                  if (this.items[k].canEdit && this.items[k].character != this.promptChar) {\n                    return k;\n                  }\n                }\n              }\n              return -1;\n            },\n            //[optimize]\n            _getFirstEditableItemIndex: function () {\n              var visibleItems = this._getVisibleItems();\n              for (var m = 0; m < visibleItems.length; m++) {\n                if (visibleItems[m].character != this.promptChar && visibleItems[m].canEdit && visibleItems[m].character != '0') return m;\n              }\n              return -1;\n            },\n            //[optimize]\n            _getLastEditableItemIndex: function () {\n              var visibleItems = this._getVisibleItems();\n              for (var m = visibleItems.length - 1; m >= 0; m--) {\n                if (visibleItems[m].character != this.promptChar && visibleItems[m].canEdit) return m;\n              }\n              return -1;\n            },\n            //[optimize]\n            _moveCaretToDecimalSeparator: function () {\n              for (var i = this.items.length - 1; i >= 0; i--) {\n                if (this.items[i].character == this.decimalSeparator && this.items[i].isSeparator) {\n                  if (!this.negative) {\n                    this._setSelectionStart(i);\n                    return i;\n                  } else {\n                    this._setSelectionStart(i + 1);\n                    return i;\n                  }\n                  break;\n                }\n              }\n              return this.numberInput.val().length;\n            },\n            //[optimize]\n            _handleBackspace: function () {\n              var selection = this._selection();\n              var prefix = this._getHiddenPrefixCount();\n              var editableItemIndex = this._getEditableItemIndex() - prefix;\n              var firstItemIndex = this._getFirstVisibleNonEmptyIndex();\n              var negative = false;\n              if (this.negative) {\n                negative = true;\n                if (firstItemIndex >= editableItemIndex + 1 || selection.start == 0) {\n                  this.setvalue(\"negative\", false);\n                  if (selection.length == 0) {\n                    this._setSelectionStart(selection.start - 1);\n                    var selection = this._selection();\n                  }\n                }\n              }\n              if (editableItemIndex >= 0) {\n                if (selection.length == 0 && editableItemIndex != -1) {\n                  this._setSelection(editableItemIndex, editableItemIndex + 1);\n                }\n                var deleteAfterSeparator = selection.start > this._getSeparatorPosition() + 1 && this.decimalSeparatorPosition > 0;\n                if (deleteAfterSeparator) {\n                  selection = this._selection();\n                }\n                var deletedText = this._deleteSelectedText();\n                if (selection.length < 1 || deleteAfterSeparator) {\n                  this._setSelectionStart(selection.start);\n                } else if (selection.length >= 1) {\n                  this._setSelectionStart(selection.end);\n                }\n                if (selection.length == this.numberInput.val().length || negative) {\n                  var selectBeforeSeparator = this._moveCaretToDecimalSeparator();\n                  this._setSelectionStart(selectBeforeSeparator - 1);\n                  if (negative) {\n                    this._setSelectionStart(selection.start);\n                  }\n                }\n              } else {\n                this._setSelectionStart(selection.start);\n              }\n            },\n            //[optimize]\n            _handleKeyDown: function (e, key) {\n              var selection = this._selection();\n              var ctrlKey = e.ctrlKey || e.metaKey;\n              if ((key == 8 || key == 46) && ctrlKey) {\n                this.setDecimal(null);\n                return false;\n              }\n              if (this.rtl && key == 37) {\n                var shift = e.shiftKey;\n                var offset = shift ? 1 : 0;\n                if (shift) {\n                  this._setSelection(selection.start + 1 - offset, selection.start + selection.length + 1);\n                } else {\n                  this._setSelection(selection.start + 1 - offset, selection.start + 1);\n                }\n                return false;\n              } else if (this.rtl && key == 39) {\n                var shift = e.shiftKey;\n                var offset = shift ? 1 : 0;\n                if (shift) {\n                  this._setSelection(selection.start - 1, selection.length + offset + selection.start - 1);\n                } else {\n                  this._setSelection(selection.start - 1, selection.start - 1);\n                }\n                return false;\n              }\n              if (ctrlKey && key == 97 /* firefox */ || ctrlKey && key == 65 /* opera */) {\n                return true;\n              } // allow Ctrl+X (cut)\n              if (ctrlKey && key == 120 /* firefox */ || ctrlKey && key == 88 /* opera */) {\n                this.selectedText = this._saveSelectedText(e);\n                $.data(document.body, \"jqxSelection\", this.selectedText);\n                this._handleBackspace();\n                return false;\n              }\n              // allow Ctrl+C (copy)\n              if (ctrlKey && key == 99 /* firefox */ || ctrlKey && key == 67 /* opera */) {\n                this.selectedText = this._saveSelectedText(e);\n                $.data(document.body, \"jqxSelection\", this.selectedText);\n                return false;\n              }\n              // allow Ctrl+Z (undo)\n              if (ctrlKey && key == 122 /* firefox */ || ctrlKey && key == 90 /* opera */) return false;\n              // allow or deny Ctrl+V (paste), Shift+Ins\n              if (ctrlKey && key == 118 /* firefox */ || ctrlKey && key == 86 /* opera */ || e.shiftKey && key == 45) {\n                this._pasteSelectedText();\n                return false;\n              }\n              if (selection.start >= 0 && selection.start < this.items.length) {\n                var letter = String.fromCharCode(key);\n                var item = this.items[selection.start];\n              }\n\n              // handle backspace.\n              if (key == 8) {\n                this._handleBackspace();\n                return false;\n              }\n              if (key == 190 || key == 110) {\n                this._moveCaretToDecimalSeparator();\n                return false;\n              }\n              if (key === 188 && this.decimalSeparator === ',') {\n                this._moveCaretToDecimalSeparator();\n                return false;\n              }\n              if (key == 188 && this.groupSeparator === ',') {\n                var value = this.numberInput.val();\n                for (var i = selection.start; i < value.length; i++) {\n                  if (value[i] == this.groupSeparator) {\n                    this._setSelectionStart(1 + i);\n                    break;\n                  }\n                }\n                return false;\n              }\n              if ($.jqx.browser.msie == null) {\n                var letter = String.fromCharCode(key);\n                var digit = parseInt(letter);\n                if (key >= 96 && key <= 105) {\n                  digit = key - 96;\n                  key = key - 48;\n                }\n                if (!isNaN(digit)) {\n                  var me = this;\n                  me._insertKey(key);\n                  return false;\n                }\n              }\n\n              // handle del.\n              if (key == 46) {\n                var visibleItems = this._getVisibleItems();\n                if (selection.start < visibleItems.length) {\n                  var offset = visibleItems[selection.start].canEdit == false ? 2 : 1;\n                  if (selection.start == 0) {\n                    if (this.negative) {\n                      this.setvalue(\"negative\", false);\n                      if (selection.length == 0) {\n                        this._setSelectionStart(0);\n                      }\n                      var selection = this._selection();\n                      if (selection.length == 0) {\n                        return false;\n                      }\n                    }\n                  }\n                  if (selection.length == 0) {\n                    this._setSelection(selection.start + offset, selection.start + offset + selection.length);\n                  }\n                  this._handleBackspace();\n                  if (new Number(this.decimal) < 1 || selection.start > this._getSeparatorPosition()) {\n                    this._setSelectionStart(selection.end + offset);\n                  } else if (selection.start + 1 < this.decimalSeparatorPosition) {\n                    this._setSelectionStart(selection.end + offset);\n                  }\n                }\n                return false;\n              }\n              if (key == 38) {\n                this.spinUp();\n                return false;\n              } else if (key == 40) {\n                this.spinDown();\n                return false;\n              }\n              if (key === 27) {\n                this.setDecimal(this._savedValue);\n                this._setSelectionStart(selection.end);\n                e.preventDefault();\n              }\n              var specialKey = this._isSpecialKey(key);\n              if ($.jqx.browser.mozilla) {\n                if (key == 45 || key == 173 || key == 109 || key == 189) {\n                  var isNegative = this.getvalue('negative');\n                  if (isNegative == false) {\n                    this.setvalue('negative', true);\n                  } else {\n                    this.setvalue('negative', false);\n                  }\n                }\n              }\n              if (!$.jqx.browser.mozilla) return true;\n              return specialKey;\n            },\n            _isSpecialKey: function (key) {\n              if (key != 8 /* backspace */ && key != 9 /* tab */ && key != 13 /* enter */ && key != 35 /* end */ && key != 36 /* home */ && key != 37 /* left */ && key != 39 /* right */ && key != 27 /* right */ && key != 46 /* del */) {\n                return false;\n              }\n              return true;\n            },\n            //[optimize]\n            _selection: function () {\n              try {\n                if ('selectionStart' in this.numberInput[0]) {\n                  var e = this.numberInput[0];\n                  var selectionLength = e.selectionEnd - e.selectionStart;\n                  return {\n                    start: e.selectionStart,\n                    end: e.selectionEnd,\n                    length: selectionLength,\n                    text: e.value\n                  };\n                } else {\n                  var r = document.selection.createRange();\n                  if (r == null) {\n                    return {\n                      start: 0,\n                      end: e.value.length,\n                      length: 0\n                    };\n                  }\n                  var re = this.numberInput[0].createTextRange();\n                  var rc = re.duplicate();\n                  re.moveToBookmark(r.getBookmark());\n                  rc.setEndPoint('EndToStart', re);\n                  var selectionLength = r.text.length;\n                  return {\n                    start: rc.text.length,\n                    end: rc.text.length + r.text.length,\n                    length: selectionLength,\n                    text: r.text\n                  };\n                }\n              } catch (error) {\n                return {\n                  start: 0,\n                  end: 0,\n                  length: 0\n                };\n              }\n            },\n            selectAll: function () {\n              var textbox = this.numberInput;\n              setTimeout(function () {\n                if ('selectionStart' in textbox[0]) {\n                  textbox[0].focus();\n                  textbox[0].setSelectionRange(0, textbox[0].value.length);\n                } else {\n                  var range = textbox[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', textbox[0].value.length);\n                  range.moveStart('character', 0);\n                  range.select();\n                }\n              }, 10);\n            },\n            _setSelection: function (start, end) {\n              if (this._disableSetSelection == true) return;\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (isTouchDevice || this.touchMode == true) return;\n              try {\n                if ('selectionStart' in this.numberInput[0]) {\n                  this.numberInput[0].focus();\n                  this.numberInput[0].setSelectionRange(start, end);\n                } else {\n                  var range = this.numberInput[0].createTextRange();\n                  range.collapse(true);\n                  range.moveEnd('character', end);\n                  range.moveStart('character', start);\n                  range.select();\n                }\n              } catch (error) {}\n            },\n            _setSelectionStart: function (start) {\n              this._setSelection(start, start);\n              $.data(this.numberInput, \"selectionstart\", start);\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._render(false);\n            },\n            _render: function (refreshValue) {\n              var leftBorder = parseInt(this.host.css(\"border-left-width\"));\n              var rightBorder = parseInt(this.host.css(\"border-left-width\"));\n              var topBorder = parseInt(this.host.css(\"border-left-width\"));\n              var bottomBorder = parseInt(this.host.css(\"border-left-width\"));\n              this.numberInput.css(\"padding-top\", '0px');\n              this.numberInput.css(\"padding-bottom\", '0px');\n              var computedStyle = window.getComputedStyle(this.element);\n              var borderSize = parseInt(computedStyle.borderLeftWidth) * 2;\n              var boxSizing = computedStyle.boxSizing;\n              if (boxSizing === 'border-box' || isNaN(borderSize)) {\n                borderSize = 0;\n              }\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.element.style.width = parseInt(this.width) - borderSize + 'px';\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.element.style.height = parseInt(this.height) - borderSize + 'px';\n              }\n              ;\n              var width = this.host.width();\n              var height = this.host.height();\n              this.numberInput.css({\n                \"border-left-width\": 0,\n                \"border-right-width\": 0,\n                \"border-bottom-width\": 0,\n                \"border-top-width\": 0\n              });\n              if (isNaN(topBorder)) topBorder = 1;\n              if (isNaN(rightBorder)) rightBorder = 1;\n              if (isNaN(bottomBorder)) bottomBorder = 1;\n              if (isNaN(leftBorder)) leftBorder = 1;\n              this.numberInput.css(\"text-align\", this.textAlign);\n              var fontSize = this.numberInput.css(\"font-size\");\n              if (\"\" == fontSize) fontSize = 13;\n              this.numberInput.css('height', parseInt(fontSize) + 4 + 'px');\n              this.numberInput.css('width', width - 2);\n              var top = height - 2 * topBorder - parseInt(fontSize) - 2;\n              if (isNaN(top)) top = 0;\n              if (top < 0) top = 0;\n              if (this.spinButtons && this.spincontainer) {\n                width -= parseInt(this.spinButtonsWidth - 2);\n                var touchDevice = $.jqx.mobile.isTouchDevice();\n                if (!touchDevice && this.touchMode !== true) {\n                  this.spincontainer.width(this.spinButtonsWidth);\n                  this.upbutton.width(this.spinButtonsWidth + 2);\n                  this.downbutton.width(this.spinButtonsWidth + 2);\n                  this.upbutton.height('50%');\n                  this.downbutton.height('50%');\n                  this.spincontainer.width(this.spinButtonsWidth);\n                } else {\n                  this.spincontainer.width(2 * this.spinButtonsWidth);\n                  width -= this.spinButtonsWidth;\n                  this.upbutton.height('100%');\n                  this.downbutton.height('100%');\n                  this.downbutton.css('float', 'left');\n                  this.upbutton.css('float', 'right');\n                  this.upbutton.width(this.spinButtonsWidth);\n                  this.downbutton.width(1 + this.spinButtonsWidth);\n                }\n                this._upArrow.height('100%');\n                this._downArrow.height('100%');\n                this.numberInput.css('width', width - 6);\n                this.numberInput.css('margin-right', '2px');\n              }\n              var topPadding = top / 2;\n\n              // fix for MSIE 6 and 7. These browsers double the top padding for some reason...\n              if ($.jqx.browser.msie && $.jqx.browser.version < 8) {\n                topPadding = top / 4;\n              }\n              this.numberInput.css(\"padding-left\", '0px');\n              this.numberInput.css(\"padding-right\", '0px');\n              this.numberInput.css(\"padding-top\", Math.round(topPadding) + 'px');\n              this.numberInput.css(\"padding-bottom\", Math.round(topPadding) + 'px');\n              if (refreshValue == undefined || refreshValue == true) {\n                this.numberInput.val(this._getString());\n                if (this.inputMode != 'advanced') {\n                  this._parseDecimalInSimpleMode();\n                }\n              }\n              this._addBarAndLabel(this.numberInput);\n              this._updateHint();\n            },\n            _addBarAndLabel: function (host) {\n              var that = this;\n              if (that.bar !== null || that.label !== null) {\n                return;\n              }\n              var label = $(\"<label></label\");\n              if (this.hint) {\n                label[0].innerHTML = this.placeHolder;\n              }\n              label.addClass(that.toThemeProperty('jqx-input-label'));\n              host.after(label);\n              that.label = label;\n              var bar = $(\"<span></span>\");\n              host.after(bar);\n              bar.addClass(that.toThemeProperty('jqx-input-bar'));\n              if (that.spinButtons) {\n                bar.css('top', that.host.height());\n              } else {\n                bar.css('top', '0px');\n              }\n              that.bar = bar;\n              if (that.template) {\n                that.bar.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n                that.label.addClass(that.toThemeProperty(\"jqx-\" + that.template));\n              }\n            },\n            destroy: function () {\n              this._removeHandlers();\n              this.host.remove();\n            },\n            // gets or sets the input's text value including the formatting characters.\n            inputValue: function (newValue) {\n              if (newValue === undefined) {\n                return this._value();\n              }\n              this.propertyChangedHandler(this, \"value\", this._value, newValue);\n              this._refreshValue();\n              return this;\n            },\n            // gets the input's value.\n            _value: function () {\n              var value = this.numberInput.val();\n              return value;\n            },\n            val: function (decimal) {\n              if (decimal !== undefined && typeof decimal != 'object' || decimal === null) {\n                if (decimal === null) {\n                  this.setDecimal(null);\n                  return;\n                } else {\n                  var value = decimal;\n                  if (value < 0) {\n                    this.setDecimal(value);\n                    return;\n                  } else {\n                    this.setvalue('negative', false);\n                  }\n                  value = value.toString();\n                  if (value.indexOf(this.symbol) > -1) {\n                    // remove currency symbol\n                    value = value.replace(this.symbol, \"\");\n                  }\n                  var replaceAll = function (text, stringToFind, stringToReplace) {\n                    var temp = text;\n                    if (stringToFind == stringToReplace) return text;\n                    var index = temp.indexOf(stringToFind);\n                    while (index != -1) {\n                      temp = temp.replace(stringToFind, stringToReplace);\n                      index = temp.indexOf(stringToFind);\n                    }\n                    return temp;\n                  };\n                  value = value.replace(this.decimalSeparator, \".\");\n                  value = replaceAll(value, this.groupSeparator, \"\");\n                  var val = \"\";\n                  for (var t = 0; t < value.length; t++) {\n                    var ch = value.substring(t, t + 1);\n                    if (ch === \"-\") val += \"-\";\n                    if (ch === \".\") val += \".\";\n                    if (ch.match(/^[0-9]+$/) != null) {\n                      val += ch;\n                    }\n                  }\n                  value = val;\n                  value = value.replace(/ /g, \"\");\n                  value = value.replace('.', this.decimalSeparator);\n                  this._setDecimal(value);\n                }\n              } else return this.getDecimal();\n            },\n            getDecimal: function () {\n              if (this.decimal == null) return null;\n              if (this.inputMode == 'simple') {\n                this._parseDecimalInSimpleMode(false);\n                this.decimal = this._getDecimalInSimpleMode(this.decimal);\n              }\n              if (this.decimal == \"\") return 0;\n              var isNegative = this.getvalue('negative');\n              if (isNegative && this.decimal > 0) {\n                return -parseFloat(this.decimal);\n              }\n              return parseFloat(this.decimal);\n            },\n            setDecimal: function (value) {\n              var currentValue = value;\n              if (this.decimalSeparator != '.') {\n                if (value === null) {\n                  this._setDecimal(value);\n                } else {\n                  var decimalValue = value;\n                  if (typeof value != \"number\") {\n                    value = value.toString();\n                    var separatorIndex = value.indexOf('.');\n                    if (separatorIndex != -1) {\n                      var prefix = value.substring(0, separatorIndex);\n                      var suffix = value.substring(separatorIndex + 1);\n                      decimalValue = prefix + \".\" + suffix;\n                      if (prefix.indexOf('-') != -1) prefix = prefix.substring(1);\n                      if (this.inputMode != \"advanced\") value = prefix + \".\" + suffix;else value = prefix + this.decimalSeparator + suffix;\n                    } else {\n                      var separatorIndex = value.indexOf(this.decimalSeparator);\n                      if (separatorIndex != -1) {\n                        var prefix = value.substring(0, separatorIndex);\n                        var suffix = value.substring(separatorIndex + 1);\n                        decimalValue = prefix + \".\" + suffix;\n                        if (prefix.indexOf('-') != -1) prefix = prefix.substring(1);\n                        if (this.inputMode != \"advanced\") value = prefix + \".\" + suffix;else value = prefix + this.decimalSeparator + suffix;\n                      }\n                    }\n                  }\n                  if (decimalValue < 0) this.setvalue('negative', true);else {\n                    this.setvalue('negative', false);\n                  }\n                  if (value === null) {\n                    this._setDecimal(value);\n                  } else {\n                    this._setDecimal(Math.abs(value));\n                  }\n                }\n              } else {\n                if (value < 0) this.setvalue('negative', true);else {\n                  this.setvalue('negative', false);\n                }\n                if (value === null) {\n                  this._setDecimal(value);\n                } else {\n                  this._setDecimal(Math.abs(value));\n                }\n              }\n              if (currentValue == null) {\n                this.numberInput.val(\"\");\n              }\n              this._updateHint();\n            },\n            // sets the input's decimal value.\n            _setDecimal: function (value) {\n              if (!this.allowNull && value == null) {\n                this.decimal = 0;\n                value = 0;\n              }\n              if (value == null) {\n                this.decimal = null;\n                this.value = null;\n                this.clearDecimal();\n                this._refreshValue();\n                this.decimal = null;\n                this.value = null;\n                this.ValueString = \"\";\n                return;\n              }\n              if (value.toString().indexOf('e') != -1) {\n                value = new Number(value).toFixed(this.decimalDigits).toString();\n              }\n              this.clearDecimal();\n              var decimalString = value.toString();\n              var numberPartString = \"\";\n              var decimalPartString = \"\";\n              var addToNumberPart = true;\n              if (decimalString.length == 0) {\n                decimalString = \"0\";\n              }\n              for (var i = 0; i < decimalString.length; i++) {\n                if (typeof value == \"number\") {\n                  if (decimalString.substring(i, i + 1) == \".\") {\n                    addToNumberPart = false;\n                    continue;\n                  }\n                } else {\n                  if (decimalString.substring(i, i + 1) == this.decimalSeparator) {\n                    addToNumberPart = false;\n                    continue;\n                  }\n                }\n                if (addToNumberPart) {\n                  numberPartString += decimalString.substring(i, i + 1);\n                } else {\n                  decimalPartString += decimalString.substring(i, i + 1);\n                }\n              }\n              if (numberPartString.length > 0) {\n                numberPartString = parseFloat(numberPartString).toString();\n              }\n              var digitsBeforeSeparator = this.digits;\n              if (digitsBeforeSeparator < numberPartString.length) {\n                numberPartString = numberPartString.substr(0, digitsBeforeSeparator);\n              }\n              var k = 0;\n              var separatorPosition = this._getSeparatorPosition();\n              var hiddenTextLength = this._getHiddenPrefixCount();\n              separatorPosition = separatorPosition + hiddenTextLength;\n              for (var i = separatorPosition; i >= 0; i--) {\n                if (i < this.items.length && this.items[i].canEdit) {\n                  if (k < numberPartString.length) {\n                    this.items[i].character = numberPartString.substring(numberPartString.length - k - 1, numberPartString.length - k);\n                    k++;\n                  }\n                }\n              }\n              k = 0;\n              for (var i = separatorPosition; i < this.items.length; i++) {\n                if (this.items[i].canEdit) {\n                  if (k < decimalPartString.length) {\n                    this.items[i].character = decimalPartString.substring(k, k + 1);\n                    k++;\n                  }\n                }\n              }\n              this._refreshValue();\n              if (this.decimalSeparator == '.') {\n                this.ValueString = new Number(value).toFixed(this.decimalDigits);\n              } else {\n                var indx = value.toString().indexOf(this.decimalSeparator);\n                if (indx > 0) {\n                  var prefix = value.toString().substring(0, indx);\n                  var val = prefix + \".\" + value.toString().substring(indx + 1);\n                  this.ValueString = new Number(val).toFixed(this.decimalDigits);\n                } else {\n                  this.ValueString = new Number(value).toFixed(this.decimalDigits);\n                }\n              }\n              if (this.inputMode != 'advanced') {\n                this._parseDecimalInSimpleMode();\n                this._raiseEvent(1, this.ValueString);\n              }\n              if (this.inputMode == 'textbox') {\n                this.decimal = this.ValueString;\n                var isNegative = this.getvalue('negative');\n                if (isNegative) {\n                  this.decimal = \"-\" + this.ValueString;\n                }\n              }\n              var value = this.val();\n              if (value < this.min || value > this.max) {\n                this.host.addClass('jqx-input-invalid');\n              } else {\n                this.host.removeClass('jqx-input-invalid');\n              }\n              this._updateHint();\n            },\n            //[optimize]\n            _getSeparatorPosition: function () {\n              var hiddenTextLength = this._getHiddenPrefixCount();\n              if (this.decimalSeparatorPosition > 0) return this.decimalSeparatorPosition - hiddenTextLength;\n              return this.items.length - hiddenTextLength;\n            },\n            _setTheme: function () {\n              this.host.removeClass();\n              this.host.addClass(this.toThemeProperty('jqx-input'));\n              this.host.addClass(this.toThemeProperty('jqx-rc-all'));\n              this.host.addClass(this.toThemeProperty('jqx-widget'));\n              this.host.addClass(this.toThemeProperty('jqx-widget-content'));\n              this.host.addClass(this.toThemeProperty('jqx-numberinput'));\n              if (this.spinButtons) {\n                this.downbutton.removeClass();\n                this.upbutton.removeClass();\n                this.downbutton.addClass(this.toThemeProperty('jqx-scrollbar-button-state-normal'));\n                this.upbutton.addClass(this.toThemeProperty('jqx-scrollbar-button-state-normal'));\n                this._upArrow.removeClass();\n                this._downArrow.removeClass();\n                this._upArrow.addClass(this.toThemeProperty('jqx-icon-arrow-up'));\n                this._downArrow.addClass(this.toThemeProperty('jqx-icon-arrow-down'));\n              }\n              this.numberInput.removeClass();\n              this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));\n            },\n            propertiesChangedHandler: function (object, oldValues, newValues) {\n              if (newValues && newValues.width && newValues.height && Object.keys(newValues).length == 2) {\n                object._render();\n              }\n            },\n            // sets a property.\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == \"template\") {\n                object.upbutton.removeClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.downbutton.removeClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.upbutton.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n                object.downbutton.addClass(object.toThemeProperty(\"jqx-\" + object.template));\n              }\n              if (key == 'digits' || key == 'groupSize' || key == 'decimalDigits') {\n                if (value < 0) {\n                  throw new Exception(this.invalidArgumentExceptions[0]);\n                }\n              }\n              if (key == \"placeHolder\") {\n                if (!object.isMaterialized()) {\n                  object.numberInput.attr('placeholder', object.placeHolder);\n                } else if (object.hint) {\n                  object.label[0].innerHTML = object.placeHolder;\n                }\n              }\n              if (key === 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, object.host);\n              }\n              if (key == \"digits\") {\n                if (value != oldvalue) {\n                  object.digits = parseInt(value);\n                }\n              }\n              if (key == \"min\" || key == \"max\") {\n                $.jqx.aria(object, \"aria-value\" + key, value.toString());\n                object._refreshValue();\n              }\n              if (key == \"decimalDigits\") {\n                if (value != oldvalue) {\n                  object.decimalDigits = parseInt(value);\n                }\n              }\n              if (key == \"decimalSeparator\" || key == \"digits\" || key == \"symbol\" || key == \"symbolPosition\" || key == \"groupSize\" || key == \"groupSeparator\" || key == \"decimalDigits\" || key == \"negativeSymbol\") {\n                var decimal = object.decimal;\n                if (key == 'decimalSeparator' && value == '') {\n                  value = ' ';\n                }\n                if (oldvalue != value) {\n                  var selection = object._selection();\n                  object.items = new Array();\n                  object._initializeLiterals();\n                  object.value = object._getString();\n                  object._refreshValue();\n                  object._setDecimal(decimal);\n                }\n              }\n              if (key == \"rtl\") {\n                if (object.rtl) {\n                  if (object.spincontainer) {\n                    object.spincontainer.css('float', 'right');\n                    object.spincontainer.css('border-right-width', '1px');\n                  }\n                  object.numberInput.css('float', 'right');\n                } else {\n                  if (object.spincontainer) {\n                    object.spincontainer.css('float', 'right');\n                    object.spincontainer.css('border-right-width', '1px');\n                  }\n                  object.numberInput.css('float', 'left');\n                }\n              }\n              if (key == \"spinButtons\") {\n                if (object.spincontainer) {\n                  if (!value) {\n                    object.spincontainer.css('display', 'none');\n                  } else {\n                    object.spincontainer.css('display', 'block');\n                  }\n                  object._render();\n                } else {\n                  object._spinButtons();\n                }\n              }\n              if (key === \"touchMode\") {\n                object.inputMode = 'textbox';\n                object.spinMode = 'simple';\n                object.render();\n              }\n              if (key == \"negative\" && object.inputMode == 'advanced') {\n                var selection = object._selection();\n                var offset = 0;\n                if (value) {\n                  object.items[0].character = object.negativeSymbol[0];\n                  offset = 1;\n                } else {\n                  object.items[0].character = \"\";\n                  offset = -1;\n                }\n                object._refreshValue();\n                if (object.isInitialized) {\n                  object._setSelection(selection.start + offset, selection.end + offset);\n                }\n              }\n              if (key == \"decimal\") {\n                object.value = value;\n                object.setDecimal(value);\n              }\n              if (key === \"value\") {\n                object.value = value;\n                object.setDecimal(value);\n                object._raiseEvent(1, value);\n              }\n              if (key == \"textAlign\") {\n                object.textAlign = value;\n                object._render();\n              }\n              if (key == \"disabled\") {\n                object.numberInput.attr(\"disabled\", value);\n                if (object.disabled) {\n                  object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                } else {\n                  object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));\n                }\n                $.jqx.aria(object, \"aria-disabled\", value.toString());\n              }\n              if (key == \"readOnly\") {\n                object.readOnly = value;\n              }\n              if (key == \"promptChar\") {\n                for (var i = 0; i < object.items.length; i++) {\n                  if (object.items[i].character == object.promptChar) {\n                    object.items[i].character = value;\n                  }\n                }\n                object.promptChar = value;\n              }\n              if (key == \"width\") {\n                object.width = value;\n                object._render();\n              } else if (key == \"height\") {\n                object.height = value;\n                object._render();\n              }\n            },\n            _value: function () {\n              var val = this.value;\n              return val;\n            },\n            _refreshValue: function () {\n              var value = this.value;\n              var k = 0;\n              if (this.inputMode === 'textbox') {\n                return;\n              }\n              this.value = this._getString();\n              value = this.value;\n              var decimalValue = \"\";\n              for (var i = 0; i < this.items.length; i++) {\n                var item = this.items[i];\n                if (item.canEdit && item.character != this.promptChar) {\n                  decimalValue += item.character;\n                }\n                if (i == this.decimalSeparatorPosition) {\n                  decimalValue += \".\";\n                }\n              }\n              this.decimal = decimalValue;\n              var hasChange = false;\n              if (this.oldValue !== value) {\n                this.oldValue = value;\n                this._raiseEvent(0, value);\n                hasChange = true;\n              }\n              if (this.inputMode != 'simple') {\n                this.numberInput.val(value);\n                if (hasChange) {\n                  this._raiseEvent(1, value);\n                }\n              }\n              if (value == null) {\n                this.numberInput.val(\"\");\n              }\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/6826: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxRadioButton\", \"\", {});\n          $.extend($.jqx._jqxRadioButton.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: Number\n                // Default: 250\n                // Gets or sets the delay of the fade animation when the RadioButton is going to be opened.\n                animationShowDelay: 300,\n                // Type: Number\n                // Default: 300\n                // Gets or sets the delay of the fade animation when the RadioButton is going to be closed. \n                animationHideDelay: 300,\n                // Type: Number.\n                // Default: null.\n                // Sets the width.\n                width: null,\n                // Type: Number.\n                // Default: null.\n                // Sets the height.\n                height: null,\n                // Type: String\n                // Default: '16px'\n                // Gets or sets the radiobutton's size.\n                boxSize: '16px',\n                // Type: Bool and Null\n                // Default: false\n                // Gets or sets the ckeck state.\n                // Possible Values: true, false and null.\n                checked: false,\n                // Type: Bool\n                // Default: false\n                // Gets or sets whether the radiobutton has 3 states - checked, unchecked and indeterminate.\n                hasThreeStates: false,\n                // Type: Bool\n                // Default: false\n                // Gets whether the radiobutton is disabled.\n                disabled: false,\n                // Type: Bool\n                // Default: true\n                // Gets or sets whether the clicks on the container are handled as clicks on the check box.\n                enableContainerClick: true,\n                // Type: Bool\n                // Default: true\n                // Gets or sets whether the radiobutton is locked. In this mode the user is not allowed to check/uncheck the radio button.\n                locked: false,\n                // Type: String\n                // Default: ''\n                // Gets or sets the group name. When this property is set, the buttons in the same group behave as radio buttons.\n                groupName: '',\n                rtl: false,\n                changeType: null,\n                _canFocus: true,\n                aria: {\n                  \"aria-checked\": {\n                    name: \"checked\",\n                    type: \"boolean\"\n                  },\n                  \"aria-disabled\": {\n                    name: \"disabled\",\n                    type: \"boolean\"\n                  }\n                },\n                // 'checked' is triggered when the radiobutton is checked.\n                // 'unchecked' is triggered when the radiobutton is unchecked.\n                // 'indeterminate' is triggered when the radiobutton's ckecked property is going to be null.\n                // 'change' is triggered when the radiobutton's state is changed.\n                events: ['checked', 'unchecked', 'indeterminate', 'change']\n              };\n              if (this === $.jqx._jqxRadioButton.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              var that = this;\n              that._createFromInput(\"RadioButton\");\n              that.render();\n            },\n            _createFromInput: function (name) {\n              var that = this;\n              if (that.element.nodeName.toLowerCase() == \"input\") {\n                that.field = that.element;\n                if (that.field.className) {\n                  that._className = that.field.className;\n                }\n                var properties = {\n                  'title': that.field.title\n                };\n                if (that.field.value) {\n                  properties.value = that.field.value;\n                }\n                if (that.field.checked) {\n                  properties.checked = true;\n                }\n                if (that.field.id.length) {\n                  properties.id = that.field.id.replace(/[^\\w]/g, '_') + \"_\" + name;\n                } else {\n                  properties.id = $.jqx.utilities.createId() + \"_\" + name;\n                }\n                var textField = that.element.nextSibling;\n                var hasTextField = false;\n                if (textField && (textField.nodeName == \"#text\" || textField.nodeName == \"span\")) {\n                  hasTextField = true;\n                }\n                var offsetWidth = 0;\n                var wrapper = $(\"<div></div>\", properties);\n                if (hasTextField) {\n                  wrapper.append(textField);\n                  var f = $(\"<span>\" + $(textField).text() + \"</span>\");\n                  f.appendTo($(document.body));\n                  offsetWidth += f.width();\n                  f.remove();\n                }\n                wrapper[0].style.cssText = that.field.style.cssText;\n                if (!that.width) {\n                  that.width = $(that.field).width() + offsetWidth + 10;\n                }\n                if (!that.height) {\n                  that.height = $(that.field).outerHeight() + 10;\n                }\n                $(that.field).hide().after(wrapper);\n                var data = that.host.data();\n                that.host = wrapper;\n                that.host.data(data);\n                that.element = wrapper[0];\n                that.element.id = that.field.id;\n                that.field.id = properties.id;\n                if (that._className) {\n                  that.host.addClass(that._className);\n                  $(that.field).removeClass(that._className);\n                }\n                if (that.field.tabIndex) {\n                  var tabIndex = that.field.tabIndex;\n                  that.field.tabIndex = -1;\n                  that.element.tabIndex = tabIndex;\n                }\n              }\n            },\n            render: function () {\n              this.setSize();\n              var me = this;\n              this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {\n                me.setSize();\n              };\n              this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {\n                me.setSize();\n              };\n              if (this.radiobutton) {\n                this.radiobutton.remove();\n              }\n              if (!this.width) this.host.css('overflow-x', 'visible');\n              if (!this.height) this.host.css('overflow-y', 'visible');\n              if (this.boxSize == null) this.boxSize = 16;\n              var boxSize = parseInt(this.boxSize) + 'px';\n              var checkSize = \"16px\";\n              var ml = Math.floor((parseInt(this.boxSize) - 16) / 2);\n              var mt = ml;\n              ml += \"px\";\n              mt += \"px\";\n              var size = parseInt(this.boxSize) / 2 + \"px\";\n              if (this.boxSize != \"16px\") {\n                this.radiobutton = $('<div><div style=\"width: ' + boxSize + '; height: ' + boxSize + ';\"><span style=\"position: relative; left: ' + ml + '; top: ' + mt + '; width: ' + checkSize + '; height: ' + checkSize + ';\"></span></div></div>');\n              } else {\n                this.radiobutton = $('<div><div style=\"width: ' + boxSize + '; height: ' + boxSize + ';\"><span style=\"width: ' + size + '; height: ' + size + ';\"></span></div></div>');\n              }\n              this.host.attr('role', 'radio');\n              this.host.prepend(this.radiobutton);\n              if (!this.disabledContainer) {\n                if (!this.host.attr('tabIndex')) {\n                  this.host.attr('tabIndex', 0);\n                }\n                this.clear = $('<div style=\"clear: both;\"></div>');\n                this.host.append(this.clear);\n              }\n              this.checkMark = $(this.radiobutton[0].firstChild.firstChild); //$(this.radiobutton).find('span');\n              this.box = this.radiobutton;\n              this._supportsRC = true;\n              if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                this._supportsRC = false;\n              }\n              this.box.addClass(this.toThemeProperty('jqx-fill-state-normal'));\n              this.box.addClass(this.toThemeProperty('jqx-radiobutton-default'));\n              this.host.addClass(this.toThemeProperty('jqx-widget'));\n              if (this.disabled) {\n                this.disable();\n              }\n              this.host.addClass(this.toThemeProperty('jqx-radiobutton'));\n              if (this.locked) {\n                this.host.css('cursor', 'auto');\n              }\n              var checked = this.element.getAttribute('checked');\n              if (checked == 'checked' || checked == 'true' || checked == true) {\n                this.checked = true;\n              }\n              this._addInput();\n              this._render();\n              this._addHandlers();\n              $.jqx.aria(this);\n              this._centerBox();\n              if (this.isMaterialized()) {\n                $(this.radiobutton).addClass('ripple');\n                $.jqx.ripple($(this.radiobutton), this.host, \"radiobutton\");\n              }\n            },\n            _centerBox: function () {\n              if (this.height && this.height.toString().indexOf(\"%\") == -1 && this.box) {\n                var hostHeight = parseInt(this.height);\n                this.host.css('line-height', hostHeight + \"px\");\n                var top = hostHeight - parseInt(this.boxSize) - 1;\n                top /= 2;\n                this.box.css('margin-top', parseInt(top));\n              }\n            },\n            _addInput: function () {\n              var name = this.host.attr('name');\n              this.input = $(\"<input type='hidden'/>\");\n              this.host.append(this.input);\n              if (name) this.input.attr('name', name);\n            },\n            refresh: function (initialRefresh) {\n              if (!initialRefresh) {\n                this.setSize();\n                this._render();\n              }\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this.setSize();\n            },\n            setSize: function () {\n              if (this.width != null && this.width.toString().indexOf(\"px\") != -1) {\n                this.host.width(this.width);\n              } else if (this.width != undefined && !isNaN(this.width)) {\n                this.host.width(this.width);\n              } else if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.element.style.width = this.width;\n              }\n              if (this.height != null && this.height.toString().indexOf(\"px\") != -1) {\n                this.host.height(this.height);\n              } else if (this.height != undefined && !isNaN(this.height)) {\n                this.host.height(this.height);\n              } else if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.element.style.height = this.height;\n              }\n              this._centerBox();\n            },\n            _addHandlers: function () {\n              var me = this;\n              this.addHandler(this.box, 'click', function (event) {\n                if (!me.disabled && !me.enableContainerClick) {\n                  me.changeType = \"mouse\";\n                  me.toggle('click');\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.host, 'keydown', function (event) {\n                if (!me.disabled && !me.locked) {\n                  if (event.keyCode == 32) {\n                    if (!me._canFocus) {\n                      return true;\n                    }\n                    me.changeType = \"keyboard\";\n                    me.toggle('click');\n                    event.preventDefault();\n                    return false;\n                  }\n                }\n              });\n              this.addHandler(this.host, 'mousedown', function (event) {\n                if (!me.disabled && me.enableContainerClick) {\n                  me.clickTime = new Date();\n                  me.changeType = \"mouse\";\n                  me.toggle('click');\n                  if (me._canFocus) {\n                    me.focus();\n                  }\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.host, 'selectstart', function (event) {\n                if (!me.disabled && me.enableContainerClick) {\n                  event.preventDefault();\n                }\n              });\n              this.addHandler(this.host, 'mouseup', function (event) {\n                if (!me.disabled && me.enableContainerClick) {\n                  event.preventDefault();\n                }\n              });\n              this.addHandler(this.host, 'focus', function (event) {\n                if (!me.disabled && me.enableContainerClick && !me.locked) {\n                  $(me.radiobutton).removeClass('active');\n                  if (!me.clickTime || me.clickTime && new Date() - me.clickTime > 300) {\n                    $(me.radiobutton).addClass('active');\n                  }\n                  me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.addClass(me.toThemeProperty('jqx-fill-state-focus'));\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.host, 'blur', function (event) {\n                $(me.radiobutton).removeClass('active');\n                if (!me.disabled && me.enableContainerClick && !me.locked) {\n                  me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.removeClass(me.toThemeProperty('jqx-fill-state-focus'));\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.host, 'mouseenter', function (event) {\n                if (!me.disabled && me.enableContainerClick && !me.locked) {\n                  me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.host, 'mouseleave', function (event) {\n                if (!me.disabled && me.enableContainerClick && !me.locked) {\n                  me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                  event.preventDefault();\n                  return false;\n                }\n              });\n              this.addHandler(this.box, 'mouseenter', function () {\n                if (!me.disabled && !me.enableContainerClick) {\n                  me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));\n                }\n              });\n              this.addHandler(this.box, 'mouseleave', function () {\n                if (!me.disabled && !me.enableContainerClick) {\n                  me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));\n                  me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));\n                }\n              });\n            },\n            focus: function () {\n              try {\n                this.host.focus();\n              } catch (error) {}\n            },\n            _removeHandlers: function () {\n              this.removeHandler(this.box, 'click');\n              this.removeHandler(this.box, 'mouseenter');\n              this.removeHandler(this.box, 'mouseleave');\n              this.removeHandler(this.host, 'click');\n              this.removeHandler(this.host, 'mouseup');\n              this.removeHandler(this.host, 'mousedown');\n              this.removeHandler(this.host, 'selectstart');\n              this.removeHandler(this.host, 'mouseenter');\n              this.removeHandler(this.host, 'mouseleave');\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this.host, 'focus');\n              this.removeHandler(this.host, 'blur');\n            },\n            _render: function () {\n              if (this.boxSize == null) this.boxSize = 13;\n              this.box.width(this.boxSize);\n              this.box.height(this.boxSize);\n              if (!this.disabled) {\n                if (this.enableContainerClick) {\n                  this.host.css('cursor', 'pointer');\n                } else this.host.css('cursor', 'auto');\n              } else {\n                this.disable();\n              }\n              if (this.rtl) {\n                this.box.addClass(this.toThemeProperty('jqx-radiobutton-rtl'));\n                this.host.addClass(this.toThemeProperty('jqx-rtl'));\n              }\n              this.updateStates();\n            },\n            val: function (value) {\n              if (arguments.length == 0 || typeof value == \"object\") {\n                return this.checked;\n              }\n              if (typeof value == \"string\") {\n                if (value == \"true\") this.check('api');\n                if (value == \"false\") this.uncheck('api');\n                if (value == \"\") this.indeterminate('api');\n              } else {\n                if (value == true) this.check('api');\n                if (value == false) this.uncheck('api');\n                if (value == null) this.indeterminate('api');\n              }\n              return this.checked;\n            },\n            // checks the ckeckbox.\n            check: function (type) {\n              this.checked = true;\n              var me = this;\n              this.checkMark.removeClass();\n              this.checkMark.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              if ($.jqx.browser.msie) {\n                if (!this.disabled) {\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));\n                } else {\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));\n                }\n              } else {\n                if (!this.disabled) {\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));\n                } else {\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));\n                  this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));\n                }\n                this.checkMark.css('opacity', 0);\n                this.checkMark.stop().animate({\n                  opacity: 1\n                }, this.animationShowDelay, function () {});\n              }\n              var buttons = $.find('.jqx-radiobutton');\n              if (this.groupName == null) this.groupName = '';\n              $.each(buttons, function () {\n                var groupName = $(this).jqxRadioButton('groupName');\n                if (groupName == me.groupName && this != me.element) {\n                  $(this).jqxRadioButton('uncheck', 'api');\n                }\n              });\n              var changeType = this.changeType;\n              this._raiseEvent('0');\n              this.changeType = changeType;\n              this._raiseEvent('3', {\n                type: type,\n                checked: true\n              });\n              if (this.checkMark.height() == 0) {\n                var size = parseInt(this.boxSize) / 2;\n                this.checkMark.height(size);\n                this.checkMark.width(size);\n              } else if (this.boxSize != '13px') {\n                var size = parseInt(this.boxSize) / 2;\n                this.checkMark.height(size);\n                this.checkMark.width(size);\n                this.checkMark.css('margin-left', 1 + size / 4);\n                this.checkMark.css('margin-top', 1 + size / 4);\n              }\n              this.input.val(this.checked);\n              $.jqx.aria(this, \"aria-checked\", this.checked);\n              this.host.attr(\"checked\", this.checked);\n            },\n            // unchecks the radiobutton.\n            uncheck: function (type) {\n              var oldCheck = this.checked;\n              this.checked = false;\n              var me = this;\n              if ($.jqx.browser.msie) {\n                me.checkMark.removeClass();\n              } else {\n                this.checkMark.css('opacity', 1);\n                this.checkMark.stop().animate({\n                  opacity: 0\n                }, this.animationHideDelay, function () {\n                  me.checkMark.removeClass();\n                });\n              }\n              if (oldCheck) {\n                var changeType = this.changeType;\n                this._raiseEvent('1');\n                this.changeType = changeType;\n                this._raiseEvent('3', {\n                  type: type,\n                  checked: false\n                });\n              }\n              this.input.val(this.checked);\n              $.jqx.aria(this, \"aria-checked\", this.checked);\n              this.host.attr(\"checked\", this.checked);\n            },\n            // sets the indeterminate state.\n            indeterminate: function (type) {\n              var oldCheck = this.checked;\n              this.checked = null;\n              this.checkMark.removeClass();\n              if ($.jqx.browser.msie) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate'));\n              } else {\n                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate'));\n                this.checkMark.css('opacity', 0);\n                this.checkMark.stop().animate({\n                  opacity: 1\n                }, this.animationShowDelay, function () {});\n              }\n              if (oldCheck != null) {\n                var changeType = this.changeType;\n                this._raiseEvent('2');\n                this.changeType = changeType;\n                this._raiseEvent('3', {\n                  type: type,\n                  checked: null\n                });\n              }\n              this.input.val(this.checked);\n              $.jqx.aria(this, \"aria-checked\", \"undefined\");\n              this.host.attr(\"checked\", \"undefined\");\n            },\n            // toggles the check state.\n            toggle: function (type) {\n              if (this.disabled) return;\n              if (this.locked) return;\n              var oldChecked = this.checked;\n              if (this.checked == true) {\n                this.checked = this.hasTreeStates ? null : true;\n              } else {\n                this.checked = true;\n              }\n              if (oldChecked != this.checked) {\n                this.updateStates(type);\n              }\n              this.input.val(this.checked);\n            },\n            // updates check states depending on the value of the 'checked' property.\n            updateStates: function (type) {\n              if (this.checked) {\n                this.check(type);\n              } else if (this.checked == false) {\n                this.uncheck(type);\n              } else if (this.checked == null) {\n                this.indeterminate(type);\n              }\n            },\n            // disables the radiobutton.\n            disable: function () {\n              this.disabled = true;\n              if (this.checked == true) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));\n              } else if (this.checked == null) {\n                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate-disabled'));\n              }\n              this.box.addClass(this.toThemeProperty('jqx-radiobutton-disabled'));\n              this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              $.jqx.aria(this, \"aria-disabled\", this.disabled);\n            },\n            // enables the radiobutton.\n            enable: function () {\n              this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              if (this.checked == true) {\n                this.checkMark.removeClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));\n              } else if (this.checked == null) {\n                this.checkMark.removeClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate-disabled'));\n              }\n              this.box.removeClass(this.toThemeProperty('jqx-radiobutton-disabled'));\n              this.disabled = false;\n              $.jqx.aria(this, \"aria-disabled\", this.disabled);\n            },\n            destroy: function () {\n              this._removeHandlers();\n              this.host.remove();\n            },\n            _raiseEvent: function (id, args) {\n              var evt = this.events[id];\n              var event = new $.Event(evt);\n              event.owner = this;\n              if (!args) args = {};\n              args.type = this.changeType;\n              this.changeType = null;\n              event.args = args;\n              try {\n                var result = this.host.trigger(event);\n              } catch (error) {}\n              return result;\n            },\n            propertiesChangedHandler: function (object, key, value) {\n              if (value.width && value.height && Object.keys(value).length == 2) {\n                object.setSize();\n              }\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (key == this.enableContainerClick && !this.disabled && !this.locked) {\n                if (value) {\n                  this.host.css('cursor', 'pointer');\n                } else this.host.css('cursor', 'auto');\n              }\n              if (key == \"rtl\") {\n                if (value) {\n                  object.box.addClass(object.toThemeProperty('jqx-radiobutton-rtl'));\n                  object.host.addClass(object.toThemeProperty('jqx-rtl'));\n                } else {\n                  object.box.removeClass(object.toThemeProperty('jqx-radiobutton-rtl'));\n                  object.host.removeClass(object.toThemeProperty('jqx-rtl'));\n                }\n              }\n              if (key == \"boxSize\") {\n                object.render();\n              }\n              if (key == 'checked') {\n                switch (value) {\n                  case true:\n                    this.check('api');\n                    break;\n                  case false:\n                    this.uncheck('api');\n                    break;\n                  case null:\n                    this.indeterminate();\n                    break;\n                }\n              }\n              if (key == 'theme') {\n                $.jqx.utilities.setTheme(oldvalue, value, this.host);\n              }\n              if (key == 'disabled') {\n                if (value) {\n                  this.disable();\n                } else this.enable();\n              }\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/2536: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          if (!$.jqx.scheduler) {\n            $.jqx.scheduler = {};\n          }\n          $.jqx.scheduler.utilities = {\n            weekDays: {\n              Sunday: 0,\n              Monday: 1,\n              Tuesday: 2,\n              Wednesday: 3,\n              Thursday: 4,\n              Friday: 5,\n              Saturday: 6\n            },\n            guid: function () {\n              function s4() {\n                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n              }\n              return s4() + s4();\n            },\n            areWeekDaysIncluded: function (days, day) {\n              var result = false;\n              $.each(days, function (index, value) {\n                if (value === day) {\n                  result = true;\n                  return false;\n                }\n              });\n              return result;\n            },\n            getStartOfDay: function (date) {\n              var newDate = new $.jqx.date(date.year(), date.month(), date.day(), 0, 0, 0);\n              newDate.timeZone = date.timeZone;\n              return newDate;\n            },\n            getEndOfDay: function (date) {\n              var newDate = new $.jqx.date(date.year(), date.month(), date.day(), 23, 59, 59);\n              newDate.timeZone = date.timeZone;\n              return newDate;\n            },\n            getDaysCount: function (from, to) {\n              var daysCount = 1;\n              while (from < to) {\n                if (from.day() != to.day()) {\n                  daysCount++;\n                }\n                from = from.addDays(1);\n              }\n              return daysCount;\n            },\n            getStartOfWeek: function (date, calendar) {\n              var dayOfWeek = date.dayOfWeek();\n              var firstDayOfWeek = calendar.firstDay;\n              if (dayOfWeek < firstDayOfWeek) {\n                dayOfWeek += 7;\n              }\n              var daysToSubtract = dayOfWeek - firstDayOfWeek;\n              var startOfWeekDate = date.addDays(-daysToSubtract);\n              return startOfWeekDate.date();\n            },\n            getEndOfWeek: function (date, calendar, weekStart) {\n              var that = this;\n              var daysPerWeek = 7;\n              var startOfWeek = that.getStartOfWeek(date, calendar, weekStart);\n              return startOfWeek.addDays(daysPerWeek);\n            },\n            getEndOfMonth: function (date, calendar) {\n              var daysInMonth = date.daysInMonth();\n              var newDate = new $.jqx.date(date.year(), date.month(), daysInMonth, 23, 59, 59);\n              newDate.timeZone = date.timeZone;\n              return newDate;\n            },\n            rangeIntersection: function (from1, to1, from2, to2) {\n              var from1Value = from1.dateData;\n              var from2Value = from2.dateData;\n              var to1Value = to1.dateData;\n              var to2Value = to2.dateData;\n              if (from2Value >= from1Value && from2Value < to1Value) {\n                return true;\n              }\n              if (from2Value < from1Value && to2Value > from1Value) {\n                return true;\n              }\n              if (from1Value == from2Value || to1Value == to2Value) return true; // If any set is the same time, then by default there must be some overlap.\n\n              if (from1Value < from2Value) {\n                if (to1Value > from2Value && to1Value < to2Value) return true; // Condition 1\n\n                if (to1Value > to2Value) return true; // Condition 3\n              } else {\n                if (to2Value > from1Value && to2Value < to1Value) return true; // Condition 2\n\n                if (to2Value > to1Value) return true; // Condition 4\n              }\n              return false;\n            },\n            rangeContains: function (from1, to1, from2, to2) {\n              return from1 <= from2 && to2 <= to1;\n            },\n            monthDays: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n            // Number of milliseconds of one day\n            msPerDay: 1000 * 60 * 60 * 24,\n            maxYear: 9999,\n            ORDINAL_BASE: new Date(1970, 0, 1),\n            getYearDay: function (date) {\n              var dateNoTime = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n              return Math.ceil((dateNoTime - new Date(date.getFullYear(), 0, 1)) / $.jqx.scheduler.utilities.msPerDay) + 1;\n            },\n            isLeapYear: function (year) {\n              if (year instanceof Date) {\n                year = year.getFullYear();\n              }\n              return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n            },\n            tzOffset: function (date) {\n              return date.getTimezoneOffset() * 60 * 1000;\n            },\n            monthRange: function (year, month) {\n              var date = new Date(year, month, 1);\n              return [$.jqx.scheduler.utilities.getWeekday(date), $.jqx.scheduler.utilities.getMonthDays(date)];\n            },\n            getMonthDays: function (date) {\n              var month = date.getMonth();\n              return month == 1 && $.jqx.scheduler.utilities.isLeapYear(date) ? 29 : $.jqx.scheduler.utilities.monthDays[month];\n            },\n            getWeekday: function (date) {\n              var weekDays = [6, 0, 1, 2, 3, 4, 5];\n              return weekDays[date.getDay()];\n            },\n            combine: function (date, time) {\n              time = time || date;\n              return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());\n            },\n            sort: function (dates) {\n              dates.sort(function (a, b) {\n                return a.getTime() - b.getTime();\n              });\n            },\n            timeToUntilString: function (time) {\n              var date = new Date(time);\n              var comp,\n                comps = [date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), 'T', date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 'Z'];\n              for (var i = 0; i < comps.length; i++) {\n                comp = comps[i];\n                if (!/[TZ]/.test(comp) && comp < 10) {\n                  comps[i] = '0' + String(comp);\n                }\n              }\n              return comps.join('');\n            },\n            untilStringToDate: function (until) {\n              var re = /^(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2})Z)?$/;\n              var bits = re.exec(until);\n              if (!bits) {\n                throw new Error('Invalid UNTIL value: ' + until);\n              }\n              return new Date(Date.UTC(bits[1], bits[2] - 1, bits[3], bits[5] || 0, bits[6] || 0, bits[7] || 0));\n            },\n            Time: function (hour, minute, second) {\n              this.hour = hour;\n              this.minute = minute;\n              this.second = second;\n              this.that = this;\n              var that = this;\n              this.getHours = function () {\n                return that.hour;\n              };\n              this.getMinutes = function () {\n                return that.minute;\n              }, this.getSeconds = function () {\n                return that.second;\n              }, this.getTime = function () {\n                return (that.hour * 60 * 60 + that.minute * 60 + that.second) * 1000;\n              };\n            }\n          };\n          $.jqx.scheduler.appointment = function () {\n            var that = this;\n            that.from = new $.jqx.date();\n            that.to = new $.jqx.date().addHours(1);\n            that.subject = \"\";\n            that.description = \"\";\n            that.location = \"\";\n            that.tooltip = \"\";\n            that.hidden = false;\n            that.resourceId = null;\n            that.id = \"\";\n            that.background = null;\n            that.color = null;\n            that.borderColor = null;\n            that.status = \"busy\";\n            that.style = null;\n            that.exceptions = new Array();\n            that.exceptionDates = new Array();\n            that.recurrencePattern = null;\n            that.recurrenceException = new Array();\n            that.occurrenceEnumerator = null;\n            that.rootAppointment = null;\n            that.hiddenByResourceId = false;\n            that.draggable = true;\n            that.resizable = true;\n            that.recurrentAppointment = false;\n            that.allDay = false;\n            that.readOnly = false;\n            that.showStatus = true;\n            that.timeZone = null;\n            that.scheduler = null;\n            that.elements = new Array();\n            that.appointmentObject = true;\n            that.duration = function () {\n              var milliseconds = that.to - that.from;\n              var ticks = milliseconds * 10000;\n              return new $.jqx.timeSpan(ticks);\n            };\n            that.toJSON = function (utc) {\n              var charsLimit = function (text) {\n                var out = '';\n                while (text.length > 75) {\n                  out += text.substr(0, 75) + '\\n';\n                  text = ' ' + text.substr(75);\n                }\n                out += text;\n                return out;\n              };\n              var _formatNumber = function (value) {\n                return (value < 10 ? '0' : '') + value;\n              };\n              var formatDateTime = function (dateTime, utc) {\n                return !dateTime ? '' : !utc ? '' + dateTime.getFullYear() + \"-\" + _formatNumber(dateTime.getMonth() + 1) + \"-\" + _formatNumber(dateTime.getDate()) + 'T' + _formatNumber(dateTime.getHours()) + \":\" + _formatNumber(dateTime.getMinutes()) + \":\" + _formatNumber(dateTime.getSeconds()) + 'Z' : '' + dateTime.getUTCFullYear() + \"-\" + _formatNumber(dateTime.getUTCMonth() + 1) + \"-\" + _formatNumber(dateTime.getUTCDate()) + 'T' + _formatNumber(dateTime.getUTCHours()) + \":\" + _formatNumber(dateTime.getUTCMinutes()) + \":\" + _formatNumber(dateTime.getUTCSeconds()) + 'Z';\n              };\n              var exceptions = function () {\n                var result = \"\";\n                for (var i = 0; i < that.recurrenceException.length; i++) {\n                  result += that.recurrenceException[i].toString();\n                  if (i < that.recurrenceException.length - 1) result += \",\";\n                }\n                return result;\n              };\n              var obj = {};\n              obj.id = that.id;\n              obj.from = formatDateTime(that.from.toDate(), utc);\n              obj.to = formatDateTime(that.to.toDate(), utc);\n              obj.subject = that.subject;\n              obj.status = that.status;\n              obj.location = that.location;\n              obj.description = that.description;\n              obj.title = that.title;\n              obj.resourceId = that.resourceId;\n              if (that.recurrencePattern) {\n                obj.recurrencePattern = that.recurrencePattern.toString();\n              } else obj.recurrencePattern = \"\";\n              if (that.recurrenceException && that.recurrenceException.length > 0) {\n                obj.recurrenceException = exceptions();\n              } else obj.recurrenceException = \"\";\n              obj.dtstamp = formatDateTime(new Date(), utc);\n              return JSON.stringify(obj);\n            };\n            that.toString = function (local) {\n              var charsLimit = function (text) {\n                var out = '';\n                while (text.length > 75) {\n                  out += text.substr(0, 75) + '\\n';\n                  text = ' ' + text.substr(75);\n                }\n                out += text;\n                return out;\n              };\n              var _formatNumber = function (value) {\n                return (value < 10 ? '0' : '') + value;\n              };\n              var formatDateTime = function (dateTime, local) {\n                return !dateTime ? '' : local ? '' + dateTime.getFullYear() + _formatNumber(dateTime.getMonth() + 1) + _formatNumber(dateTime.getDate()) + 'T' + _formatNumber(dateTime.getHours()) + _formatNumber(dateTime.getMinutes()) + _formatNumber(dateTime.getSeconds()) : '' + dateTime.getUTCFullYear() + _formatNumber(dateTime.getUTCMonth() + 1) + _formatNumber(dateTime.getUTCDate()) + 'T' + _formatNumber(dateTime.getUTCHours()) + _formatNumber(dateTime.getUTCMinutes()) + _formatNumber(dateTime.getUTCSeconds()) + 'Z';\n              };\n              var exceptions = function () {\n                var result = \"\";\n                for (var i = 0; i < that.recurrenceException.length; i++) {\n                  result += formatDateTime(that.recurrenceException[i].toDate(), local);\n                  if (i < that.recurrenceException.length - 1) result += \",\";\n                }\n                return result;\n              };\n              var status = that.status;\n              if (!status) status = \"CONFIRMED\";\n              if (status.toLowerCase() == \"busy\") status = \"CONFIRMED\";\n              if (status.toLowerCase() == \"tentative\") status = \"TENTATIVE\";\n              if (status.toLowerCase() == \"free\") status = \"CANCELLED\";\n              if (status.toLowerCase() == \"outOfOffice\") status = \"CANCELLED\";\n              return 'BEGIN:VEVENT\\n' + 'UID:' + that.id + '\\n' + 'DTSTAMP:' + formatDateTime(new Date(), local) + '\\n' + charsLimit('TITLE:' + that.subject) + '\\n' + 'DTSTART:' + formatDateTime(that.from.toDate(), local) + '\\n' + 'DTEND:' + formatDateTime(that.to.toDate(), local) + '\\n' + (that.recurrencePattern ? 'RRULE:' + that.recurrencePattern.toString() + '\\n' : '') + (that.recurrenceException && that.recurrenceException.length > 0 ? 'EXDATE:' + exceptions() + '\\n' : '') + (that.subject ? charsLimit('SUMMARY:' + that.subject) + '\\n' : '') + 'TRANSP:OPAQUE\\n' + (that.status ? charsLimit('STATUS:' + status) + '\\n' : '') + (that.description ? charsLimit('DESCRIPTION:' + that.description) + '\\n' : '') + (that.location ? charsLimit('LOCATION:' + that.location) + '\\n' : '') + 'END:VEVENT';\n            };\n            that.range = function () {\n              if (!that.allDay) {\n                return {\n                  from: that.from,\n                  to: that.to\n                };\n              } else {\n                return {\n                  from: $.jqx.scheduler.utilities.getStartOfDay(that.from),\n                  to: $.jqx.scheduler.utilities.getEndOfDay(that.to)\n                };\n              }\n            };\n            that.clearRecurrence = function () {\n              if (that.recurrencePattern) {\n                that.exceptions = new Array();\n                that.exceptionDates = new Array();\n                that.recurrencePattern = null;\n                that.recurrenceException = new Array();\n                that.hidden = false;\n              }\n            };\n            that.isAllDayAppointment = function () {\n              return this.duration().days() >= 1 || this.allDay;\n            };\n            that.cloneAppointmentAttributes = function (appointment) {\n              appointment.subject = that.subject;\n              appointment.description = that.description;\n              appointment.location = that.location;\n              appointment.tooltip = that.tooltip;\n              appointment.resourceId = that.resourceId;\n              appointment.category = that.category;\n              appointment.status = that.status;\n              appointment.rootAppointment = that;\n              appointment.color = that.color;\n              appointment.borderColor = that.borderColor;\n              appointment.background = that.background;\n              appointment.hidden = that.hidden;\n              appointment.timezone = that.timeZone;\n              appointment.style = that.style;\n              appointment.hiddenByResourceId = that.hiddenByResourceId;\n            };\n            that.createOccurrence = function (from) {\n              if (from == null) return null;\n              var occurrence = new $.jqx.scheduler.appointment();\n              occurrence.allDay = that.allDay;\n              var duration = that.duration();\n              if (that.allDay) {\n                duration = new $.jqx.timeSpan(10000 * (that.to - that.from));\n              }\n              occurrence.from = from;\n              occurrence.to = from.add(duration);\n              occurrence.occurrenceFrom = from.clone();\n              occurrence.subject = that.subject;\n              occurrence.description = that.description;\n              occurrence.location = that.location;\n              occurrence.tooltip = that.tooltip;\n              occurrence.resourceId = that.resourceId;\n              occurrence.category = that.category;\n              occurrence.status = that.status;\n              occurrence.rootAppointment = that;\n              occurrence.color = that.color;\n              occurrence.draggable = that.draggable;\n              occurrence.resizable = that.resizable;\n              occurrence.borderColor = that.borderColor;\n              occurrence.background = that.background;\n              occurrence.recurrentAppointment = true;\n              occurrence.timeZone = that.timeZone;\n              occurrence.style = that.style;\n              occurrence.hiddenByResourceId = that.hiddenByResourceId;\n              occurrence.boundAppointment = that.boundAppointment;\n              if (that.hiddenByResourceId) {\n                occurrence.hidden = true;\n              }\n              occurrence.id = that.id + \".\" + $.jqx.scheduler.utilities.guid();\n              that.hidden = true;\n              that.occurrenceIndex++;\n              return occurrence;\n            };\n            that.clone = function () {\n              var app = new $.jqx.scheduler.appointment();\n              app.allDay = that.allDay;\n              app.from = that.from.clone();\n              app.to = that.to.clone();\n              app.subject = that.subject;\n              app.description = that.description;\n              app.location = that.location;\n              app.tooltip = that.tooltip;\n              app.resourceId = that.resourceId;\n              app.category = that.category;\n              app.status = that.status;\n              app.color = that.color;\n              app.borderColor = that.borderColor;\n              app.background = that.background;\n              app.style = that.style;\n              app.timeZone = that.timeZone;\n              app.hiddenByResourceId = that.hiddenByResourceId;\n              if (that.hiddenByResourceId) {\n                app.hidden = true;\n              }\n              app.id = that.id + \".\" + $.jqx.scheduler.utilities.guid();\n              return app;\n            };\n            that.isRecurrentAppointment = function () {\n              return that.recurrentAppointment || that.recurrencePattern != null;\n            };\n            that.anyExceptions = function () {\n              return that.exceptions != null && that.exceptions.length > 0;\n            };\n            that.anyOccurrences = function () {\n              return that.occurrenceEnumerator != null && that.occurrenceEnumerator.getNextAppointment();\n            };\n            that.isException = function () {\n              var rootAppointment = that.rootAppointment || this;\n              if (!rootAppointment.recurrenceException) return false;\n              for (var i = 0; i < rootAppointment.recurrenceException.length; i++) {\n                var date = rootAppointment.recurrenceException[i];\n                if (that.occurrenceFrom && date.equals(that.occurrenceFrom)) return true;\n              }\n              return false;\n            };\n            that.getOccurrences = function (from, to) {\n              that.occurrenceIndex = 0;\n              var start = from !== null ? from : that.from;\n              var recurrenceList = new $.jqx.scheduler.recurrentAppointmentsList(that, that.calendar, start, to, that.scheduler);\n              that.occurrences = recurrenceList.list;\n              return recurrenceList.list;\n            };\n            if (arguments.length === 1) {\n              if ($.type(arguments[0]) == \"object\") {\n                for (var key in arguments[0]) {\n                  var value = arguments[0][key];\n                  if (this[key] !== undefined) {\n                    this[key] = value;\n                  }\n                }\n              } else {\n                that.from = arguments[0];\n                that.to = new $.jqx.date(that.from).addHours(1);\n              }\n            } else if (arguments.length === 2) {\n              that.from = arguments[0];\n              that.to = arguments[1];\n            } else if (arguments.length === 3) {\n              that.from = arguments[0];\n              that.to = arguments[1];\n              that.subject = arguments[2];\n            } else if (arguments.length === 3) {\n              that.from = arguments[0];\n              that.to = arguments[1];\n              that.subject = arguments[2];\n              that.description = arguments[3];\n            }\n            if (that.recurrencePattern != null) {\n              that.recurrencePattern.setFrom(that.from);\n            }\n          };\n          $.jqx.scheduler.recurrentAppointmentsList = function () {\n            var that = this;\n            that.recurrentAppointment = null;\n            that.currentTime = null;\n            that.calendar = $.jqx.scheduler.calendar;\n            that.from = new $.jqx.date(0);\n            that.to = new $.jqx.date(9999, 12, 31);\n            that.foundItems = 0;\n            that.list = new Array();\n            that.scheduler = null;\n            that.getOccurrences = function (appointment, from, to) {\n              if (appointment == undefined) return that.list;\n              return new $.jqx.scheduler.recurrentAppointmentsList(appointment, that.calendar, from, to).list;\n            };\n            that.current = function () {\n              return that.recurrentAppointment.createOccurrence(that.currentTime);\n            };\n            that.fillList = function () {\n              that.currentTime = null;\n              that.foundItems = 0;\n              that.list = new Array();\n              var pattern = that.recurrentAppointment.recurrencePattern;\n              pattern.step = 0;\n              pattern.current = 0;\n              pattern.currentYearDay = 0;\n              if (pattern == null) {\n                return false;\n              }\n              while (that.getNextAppointment(pattern)) {\n                var app = that.current();\n                if (app) {\n                  that.list.push(app);\n                }\n              }\n            };\n            that.getNextAppointment = function (pattern) {\n              if (that.recurrentAppointment == null) {\n                return false;\n              }\n              var MAX_INT = 4294967295;\n              var view = this.scheduler._views[this.scheduler._view].type;\n              var viewObject = this.scheduler._views[this.scheduler._view];\n              var daysToAdd = 0;\n              switch (pattern.freq) {\n                case \"weekly\":\n                  daysToAdd = 7;\n                  break;\n                case \"monthly\":\n                  daysToAdd = 31;\n                  break;\n                case \"yearly\":\n                  daysToAdd = 365;\n                  break;\n              }\n              for (var i = 0; i < MAX_INT; i++) {\n                var from = pattern.getNewOccurenceDate();\n                if (!from) {\n                  continue;\n                }\n                pattern.currentTime = from;\n                if (pattern.to < from && pattern.to.addDays(daysToAdd) >= from || that.to < from && that.to.addDays(daysToAdd) >= from) {\n                  that.currentTime = null;\n                  return true;\n                }\n                if ($.jqx.scheduler.utilities.getEndOfDay(pattern.to).addDays(daysToAdd) < from || $.jqx.scheduler.utilities.getEndOfDay(that.to).addDays(daysToAdd) < from) {\n                  that.currentTime = null;\n                  return false;\n                }\n                var canSetCurrentTime = true;\n                canSetCurrentTime = that.getCanSetTime(pattern, from, canSetCurrentTime);\n                if (pattern.canCreateNewOccurence(from, that.calendar)) {\n                  var canAdd = true;\n                  if (false === viewObject.showWeekends) {\n                    if (from.dayOfWeek() == 6 || from.dayOfWeek() == 0) canAdd = false;\n                  }\n                  if (canAdd) {\n                    that.foundItems++;\n                  }\n                }\n                if (!canSetCurrentTime) continue;\n                that.currentTime = from;\n                if (that.foundItems > pattern.count) return false;\n                return true;\n              }\n              return false;\n            };\n            that.getCanSetTime = function (recurrencePattern, from, canSetCurrentTime) {\n              if (!recurrencePattern.canCreateNewOccurence(from, that.calendar)) {\n                canSetCurrentTime = false;\n              }\n              if (from < that.from && from.add(that.recurrentAppointment.duration()) <= that.from) {\n                canSetCurrentTime = false;\n              }\n              if (that.to <= from) {\n                canSetCurrentTime = false;\n              }\n              return canSetCurrentTime;\n            };\n            that.isException = function (ocurrenceStart, eventDuration, pattern) {\n              var exceptions = that.recurrentAppointment.exceptions;\n              for (var i = 0; i < exceptions.length; i++) {\n                if (pattern.isDateInExceptionAppointment(ocurrenceStart, eventDuration, exceptions[i])) {\n                  if (-1 === pattern.newExceptions.indexOf(exceptions[i])) {\n                    return true;\n                  }\n                }\n              }\n              return false;\n            };\n            if (arguments && arguments.length > 0) {\n              that.recurrentAppointment = arguments[0];\n              if (arguments[1]) {\n                that.calendar = arguments[1];\n              }\n              if (arguments[2]) {\n                that.from = arguments[2];\n              }\n              if (arguments[3]) {\n                that.to = arguments[3];\n              }\n              if (arguments[4]) {\n                that.scheduler = arguments[4];\n              }\n              if (arguments[2] === undefined) {\n                that.from = new $.jqx.date(0);\n                that.to = new $.jqx.date(9999, 12, 31);\n              }\n              if (that.scheduler && that.scheduler.localization) {\n                that.calendar.firstDay = that.scheduler.localization.firstDay;\n              }\n              that.fillList();\n            }\n            return that;\n          };\n          $.jqx.scheduler.recurrencePattern = function () {\n            var that = this;\n            var settings = {\n              from: new $.jqx.date(0),\n              to: new $.jqx.date(9999, 12, 31),\n              count: 1000,\n              interval: 1,\n              exceptions: new Array(),\n              newExceptions: new Array(),\n              month: 1,\n              day: 1,\n              current: 0,\n              currentYearDay: 0,\n              step: 0,\n              days: [],\n              bynweekday: [],\n              isEveryWeekDay: true,\n              timeZone: null,\n              weekDays: {\n                Sunday: 0,\n                Monday: 1,\n                Tuesday: 2,\n                Wednesday: 3,\n                Thursday: 4,\n                Friday: 5,\n                Saturday: 6\n              },\n              freq: \"daily\",\n              // possible values: \"daily\", \"weekly\", \"yearly\", \"monthly\", \"custom\"\n              bymonth: null,\n              bymonthday: null,\n              byyearday: null,\n              byweekno: null,\n              byweekday: null\n            };\n            $.extend(true, that, settings);\n            that.getNewOccurenceDate = function () {\n              var repeat = function (value, times) {\n                var i = 0,\n                  array = [];\n                if (value instanceof Array) {\n                  for (; i < times; i++) {\n                    array[i] = [].concat(value);\n                  }\n                } else {\n                  for (; i < times; i++) {\n                    array[i] = value;\n                  }\n                }\n                return array;\n              };\n              var module = function (a, b) {\n                var r = a % b;\n                // If r and b differ in sign, add b to wrap the result to the correct sign.\n                return r * b < 0 ? r + b : r;\n              };\n              var range = function (start, end) {\n                if (arguments.length === 1) {\n                  end = start;\n                  start = 0;\n                }\n                var rang = [];\n                for (var i = start; i < end; i++) {\n                  rang.push(i);\n                }\n                return rang;\n              };\n              var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n              var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n              var year = that.from.year();\n              var weekDays = [6, 0, 1, 2, 3, 4, 5];\n              var recalculateMasks = function (year) {\n                that.yearlen = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) ? 366 : 365;\n                that.nextyearlen = (1 + year) % 4 == 0 && ((1 + year) % 100 != 0 || (1 + year) % 400 == 0) ? 366 : 365;\n                var firstyday = new Date(year, 0, 1);\n                var wday = weekDays[new Date(year, 0, 1).getDay()];\n                var WDAYMASK = function () {\n                  for (var wdaymask = [], i = 0; i < 55; i++) {\n                    wdaymask = wdaymask.concat(range(7));\n                  }\n                  return wdaymask;\n                }();\n                if (that.yearlen == 365) {\n                  that.wdaymask = WDAYMASK.slice(wday);\n                  that.mrange = [].concat(M365RANGE);\n                } else {\n                  that.wdaymask = WDAYMASK.slice(wday);\n                  that.mrange = [].concat(M366RANGE);\n                }\n              };\n              recalculateMasks(year);\n              switch (that.freq) {\n                case \"daily\":\n                default:\n                  var dateTime = that.from.add(new $.jqx.timeSpan(that.step * that.interval, 0, 0, 0));\n                  that.step++;\n                  return dateTime;\n                case \"weekly\":\n                  if (that.byweekday) {\n                    var dateTime = new $.jqx.date(that.from, that.timeZone);\n                    var weekDay = weekDays[that.from.dayOfWeek()];\n                    dateTime = dateTime.addDays(7 * that.step);\n                    dateTime = dateTime.addDays(that.byweekday[that.current]);\n                    dateTime = dateTime.addDays(-weekDay);\n                    if (dateTime < that.from) {\n                      dateTime = null;\n                    }\n                    that.current++;\n                    if (undefined == that.byweekday[that.current]) {\n                      that.current = 0;\n                      that.step++;\n                    }\n                  }\n                  return dateTime;\n                case \"monthly\":\n                  if (that.bynweekday.length > 0) {\n                    var dateTime = new $.jqx.date(that.from.year(), that.from.month(), 1, that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addMonths(that.step * that.interval);\n                    recalculateMasks(dateTime.year());\n                    var month = dateTime.month();\n                    var ranges = [that.mrange.slice(month - 1, month + 1)][0];\n                    var first = ranges[0];\n                    var last = ranges[1];\n                    last -= 1;\n                    that.nwdaymask = repeat(0, that.yearlen);\n                    that.step++;\n                    for (var k = 0; k < that.bynweekday.length; k++) {\n                      var wday = that.bynweekday[k][0],\n                        n = that.bynweekday[k][1];\n                      if (n < 0) {\n                        i = last + (n + 1) * 7;\n                        i -= module(that.wdaymask[i] - wday, 7);\n                      } else {\n                        i = first + (n - 1) * 7;\n                        i += module(7 - that.wdaymask[i] + wday, 7);\n                      }\n                      if (first <= i && i <= last) {\n                        that.nwdaymask[i] = 1;\n                      }\n                    }\n                    var dayInYear = i + 1;\n                    var dayInMonth = dayInYear - first;\n                    var dateTime = new $.jqx.date(that.from.year(), that.from.month(), dayInMonth, that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addMonths((that.step - 1) * that.interval);\n                  } else if (that.bymonthday.length > 0) {\n                    var dateTime = new $.jqx.date(that.from.year(), that.from.month(), that.bymonthday[that.current], that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addMonths(that.step * that.interval);\n                    that.current++;\n                    if (!that.bymonthday[that.current]) {\n                      that.current = 0;\n                      that.step++;\n                    }\n                  } else {\n                    var dateTime = new $.jqx.date(that.from.year(), that.from.month(), that.day, that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addMonths(that.step * that.interval);\n                    that.step++;\n                  }\n                  return dateTime;\n                case \"yearly\":\n                  if (that.bymonth && that.bymonth.length > 0) {\n                    if (that.bynweekday.length > 0) {\n                      var dateTime = new $.jqx.date(that.from.year(), that.bymonth[that.current], 1, that.from.hour(), that.from.minute(), that.from.second());\n                      dateTime.timeZone = that.timeZone;\n                      dateTime = dateTime.addYears(that.step * that.interval);\n                      recalculateMasks(dateTime.year());\n                      var month = dateTime.month();\n                      var ranges = [that.mrange.slice(month - 1, month + 1)][0];\n                      var first = ranges[0];\n                      var last = ranges[1];\n                      last -= 1;\n                      that.nwdaymask = repeat(0, that.yearlen);\n                      for (var k = 0; k < that.bynweekday.length; k++) {\n                        var wday = that.bynweekday[k][0],\n                          n = that.bynweekday[k][1];\n                        if (n < 0) {\n                          i = last + (n + 1) * 7;\n                          i -= module(that.wdaymask[i] - wday, 7);\n                        } else {\n                          i = first + (n - 1) * 7;\n                          i += module(7 - that.wdaymask[i] + wday, 7);\n                        }\n                        if (first <= i && i <= last) {\n                          that.nwdaymask[i] = 1;\n                        }\n                      }\n                      var dayInYear = i + 1;\n                      var dayInMonth = dayInYear - first;\n                      dateTime = new $.jqx.date(dateTime.year(), that.bymonth[that.current], dayInMonth, that.from.hour(), that.from.minute(), that.from.second());\n                      dateTime.timeZone = that.timeZone;\n                      that.step++;\n                    } else if (that.byyearday && that.byyearday.length > 0) {\n                      var dateTime = new $.jqx.date(that.from.year(), that.bymonth[that.current], that.byyearday[that.currentYearDay], that.from.hour(), that.from.minute(), that.from.second());\n                      dateTime.timeZone = that.timeZone;\n                      dateTime = dateTime.addYears(that.step * that.interval);\n                      that.currentYearDay++;\n                      if (!that.byyearday[that.currentYearDay]) {\n                        that.currentYearDay = 0;\n                        that.current++;\n                        if (!that.bymonth[that.current]) {\n                          that.current = 0;\n                          that.step++;\n                        }\n                      }\n                    } else {\n                      var dateTime = new $.jqx.date(that.from.year(), that.bymonth[that.current], that.from.day(), that.from.hour(), that.from.minute(), that.from.second());\n                      dateTime.timeZone = that.timeZone;\n                      dateTime = dateTime.addYears(that.step * that.interval);\n                      that.current++;\n                      if (!that.bymonth[that.current]) {\n                        that.current = 0;\n                        that.step++;\n                      }\n                    }\n                  } else if (that.byyearday && that.byyearday.length > 0) {\n                    var dateTime = new $.jqx.date(that.from.year(), that.from.month(), that.byyearday[that.current], that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addYears(that.step * that.interval);\n                    that.current++;\n                    if (!that.byyearday[that.current]) {\n                      that.current = 0;\n                      that.step++;\n                    }\n                  } else if (that.byweekno != null) {\n                    var getDateByWeekOfYear = function (weekNum, date) {\n                      var currentWeek = 1;\n                      var dateTime = new $.jqx.date(date.year(), 1, 1, date.hour(), date.minute(), date.second());\n                      dateTime.timeZone = that.timeZone;\n                      while (currentWeek != weekNum) {\n                        dateTime = dateTime.addDays(7);\n                        currentWeek++;\n                        if (currentWeek > 53) break;\n                      }\n                      while ($.jqx.scheduler.utilities.getWeekday(dateTime.toDate()) != that.wkst) {\n                        dateTime = dateTime.addDays(1);\n                      }\n                      return dateTime;\n                    };\n                    var dateTime = that.from.addYears(that.step * that.interval);\n                    dateTime = getDateByWeekOfYear(that.byweekno[that.current], dateTime);\n                    if (that.byweekday) {\n                      var tmpDate = dateTime;\n                      for (var i = 0; i < 7; i++) {\n                        if (weekDays[tmpDate.dayOfWeek()] === that.byweekday[that.currentYearDay]) {\n                          break;\n                        }\n                        tmpDate = tmpDate.addDays(1);\n                      }\n                      dateTime = tmpDate;\n                      that.currentYearDay++;\n                      if (!that.byweekday[that.currentYearDay]) {\n                        that.currentYearDay = 0;\n                        that.current++;\n                        if (!that.byweekno[that.current]) {\n                          that.current = 0;\n                          that.step++;\n                        }\n                      }\n                    } else {\n                      that.current++;\n                      if (!that.byweekno[that.current]) {\n                        that.current = 0;\n                        that.step++;\n                      }\n                    }\n                  } else {\n                    var dateTime = new $.jqx.date(that.from.year(), that.month, that.day, that.from.hour(), that.from.minute(), that.from.second());\n                    dateTime.timeZone = that.timeZone;\n                    dateTime = dateTime.addYears(that.step * that.interval);\n                    that.step++;\n                  }\n                  return dateTime;\n              }\n            };\n            that.isDateInExceptionAppointment = function (eventStart, eventDuration, exception) {\n              switch (that.freq) {\n                case \"daily\":\n                case \"weekly\":\n                default:\n                  return eventStart.year() == exception.from.year() && eventStart.dayOfYear() == exception.from.dayOfYear();\n              }\n            };\n            that.createNewPattern = function () {\n              if (that.ical) {\n                var pattern = new $.jqx.scheduler.recurrencePattern(that.ical);\n                return pattern;\n              } else {\n                var pattern = new $.jqx.scheduler.recurrencePattern();\n                pattern.from = that.from;\n                pattern.to = that.to;\n                pattern.count = that.count;\n                pattern.interval = that.interval;\n                pattern.exceptions = that.exceptions;\n                pattern.newExceptions = that.newExceptions;\n                pattern.weekDays = that.weekDays;\n                pattern.isEveryWeekDay = that.isEveryWeekDay;\n                pattern.month = that.month;\n                pattern.day = that.day;\n                pattern.current = that.current;\n                pattern.currentYearDay = that.currentYearDay;\n                pattern.step = that.step;\n                pattern.days = that.days;\n                pattern.bynweekday = that.bynweekday;\n                pattern.bymonth = that.bymonth;\n                pattern.bymonthday = that.bymonthday;\n                pattern.byyearday = that.byyearday;\n                pattern.byweekno = that.byweekno;\n                pattern.byweekday = that.byweekday;\n                pattern.freq = pattern.freq;\n                pattern.timeZone = pattern.timeZone;\n                return pattern;\n              }\n            };\n            that.equals = function (otherPattern) {\n              var result = that.from == otherPattern.from && that.to == otherPattern.to && that.count === otherPattern.count && that.interval === otherPattern.interval && that.day === otherPattern.day && that.month === otherPattern.month;\n              return result;\n            };\n            that.isDayOfWeekIncluded = function (date) {\n              var weekDay = date.dayOfWeek();\n              return $.jqx.scheduler.utilities.areWeekDaysIncluded(that.weekDays, weekDay);\n            };\n            that.getWeekIndexFromDate = function (current, calendar) {\n              if (calendar.firstDay === undefined) {\n                calendar.firstDay = 0;\n              }\n              var firstDayOfWeek = calendar.firstDay;\n              var firstWeekStart = $.jqx.scheduler.utilities.getStartOfWeek(that.from, calendar, firstDayOfWeek);\n              var fromStart = new $.jqx.timeSpan(current.subtract(firstWeekStart));\n              return parseInt(fromStart.days() / 7);\n            };\n            that.canCreateNewOccurence = function (date, calendar) {\n              var jsDate = date.toDate();\n              switch (that.freq) {\n                case \"daily\":\n                default:\n                  if (that.bymonth) {\n                    if (that.bymonth.indexOf(date.month()) == -1) {\n                      return false;\n                    }\n                  }\n                  if (that.isEveryWeekDay) {\n                    if (!that.isDayOfWeekIncluded(date, calendar)) {\n                      return false;\n                    } else return true;\n                  } else return true;\n                  break;\n                case \"weekly\":\n                  var weekIndex = that.getWeekIndexFromDate(date, calendar);\n                  if (that.bymonth) {\n                    if (that.bymonth.indexOf(date.month()) == -1) {\n                      return false;\n                    }\n                  }\n                  if (weekIndex % that.interval != 0) {\n                    return false;\n                  }\n                  if (that.weekDays == {}) {\n                    var start = date;\n                    if (that.from.dayOfWeek() != start.dayOfWeek()) {\n                      return false;\n                    }\n                  } else if (!that.isDayOfWeekIncluded(date, calendar)) {\n                    return false;\n                  }\n                  break;\n                case \"monthly\":\n                case \"yearly\":\n                  if (that.bymonth) {\n                    if (that.bymonth.indexOf(date.month()) == -1) {\n                      return false;\n                    }\n                  }\n                  if (date < that.from) {\n                    return false;\n                  }\n                  break;\n              }\n              return true;\n            };\n            that.toString = function () {\n              var ical = {};\n              ical.dtstart = this.from.toDate();\n              ical.until = this.to ? this.to.toDate() : null;\n              ical.count = this.count;\n              var patterns = {};\n              patterns.YEARLY = 0;\n              patterns.MONTHLY = 1;\n              patterns.WEEKLY = 2;\n              patterns.DAILY = 3;\n              patterns.HOURLY = 4;\n              patterns.MINUTELY = 5;\n              patterns.SECONDLY = 6;\n              ical.freq = patterns[this.freq.toUpperCase()];\n              if (ical.freq == \"YEARLY\") {\n                ical.bymonth = this.bymonth ? this.bymonth : new Array().push(this.month);\n              }\n              ical.byweekday = new Array();\n              var days = ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'];\n              $.each(this.weekDays, function () {\n                var value = this;\n                value--;\n                if (value < 0) value = 6;\n                ical.byweekday.push(value);\n              });\n              if (this.byyearday != undefined) {\n                ical.byyearday = this.byyearday;\n              }\n              if (this.byweekno != undefined) {\n                ical.byweekno = this.byweekno;\n              }\n              ical.bymonthday = this.bymonthday;\n              ical.wkst = days[this.wkst];\n              ical.interval = this.interval;\n              var icalRule = new $.jqx.ICalRule(ical);\n              return icalRule.toString();\n            };\n            that.init = function (from) {\n              var ical = new $.jqx.ICalRule(that.ical, from);\n              var options = ical.options;\n              that.from = options.dtstart ? new $.jqx.date(options.dtstart, that.timeZone) : that.from;\n              that.count = options.count != undefined ? options.count : that.count;\n              that.freq = ical.FREQUENCIES[options.freq].toLowerCase();\n              that.interval = options.interval != undefined ? options.interval : that.interval;\n              that.to = options.until ? new $.jqx.date(options.until, that.timeZone) : that.to;\n              that.wkst = options.wkst;\n              that.bymonth = options.bymonth;\n              if (that.bymonth && that.bymonth.length > 0) {\n                that.month = that.bymonth[0];\n              } else {\n                that.month = that.from.month();\n              }\n              that.day = that.from.day();\n              if (options.byweekday != undefined) {\n                var defaultWeekDays = {\n                  Sunday: 0,\n                  Monday: 1,\n                  Tuesday: 2,\n                  Wednesday: 3,\n                  Thursday: 4,\n                  Friday: 5,\n                  Saturday: 6\n                };\n                that.weekDays = {};\n                for (var i = 0; i < options.byweekday.length; i++) {\n                  var day = options.byweekday[i];\n                  switch (day) {\n                    case 0:\n                      that.weekDays.Monday = 1;\n                      break;\n                    case 1:\n                      that.weekDays.Tuesday = 2;\n                      break;\n                    case 2:\n                      that.weekDays.Wednesday = 3;\n                      break;\n                    case 3:\n                      that.weekDays.Thursday = 4;\n                      break;\n                    case 4:\n                      that.weekDays.Friday = 5;\n                      break;\n                    case 5:\n                      that.weekDays.Saturday = 6;\n                      break;\n                    case 6:\n                      that.weekDays.Sunday = 0;\n                      break;\n                  }\n                }\n                that.byweekday = options.byweekday;\n              }\n              that.byweekno = options.byweekno;\n              if (options.bynweekday) {\n                that.bynweekday = options.bynweekday;\n              }\n              if (options.bymonthday != undefined) {\n                that.bymonthday = options.bymonthday.sort();\n                if (that.bymonthday[0]) {\n                  that.day = that.bymonthday[0];\n                }\n              }\n              if (options.byyearday != undefined) {\n                that.day = options.byyearday[0];\n                that.byyearday = options.byyearday.sort();\n              }\n              return options;\n            };\n            that.setFrom = function (from) {\n              that.from = from.clone();\n              if (that.ical) {\n                that.init(from);\n              }\n            };\n            if (arguments.length == 1) {\n              that.ical = arguments[0];\n              that.init();\n            }\n            return that;\n          };\n          $.jqx.scheduler.calendar = {\n            // separator of parts of a date (e.g. '/' in 11/05/1955)\n            '/': \"/\",\n            // separator of parts of a time (e.g. ':' in 05:44 PM)\n            ':': \":\",\n            // the first day of the week (0 = Sunday, 1 = Monday, etc)\n            firstDay: 0,\n            days: {\n              // full day names\n              names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n              // abbreviated day names\n              namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n              // shortest day names\n              namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n            },\n            months: {\n              // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n              names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n              // abbreviated month names\n              namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n            },\n            // AM and PM designators in one of these forms:\n            // The usual view, and the upper and lower case versions\n            //      [standard,lowercase,uppercase]\n            // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n            //      null\n            AM: [\"AM\", \"am\", \"AM\"],\n            PM: [\"PM\", \"pm\", \"PM\"],\n            eras: [\n            // eras in reverse chronological order.\n            // name: the name of the era in this culture (e.g. A.D., C.E.)\n            // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n            // offset: offset in years from gregorian calendar\n            {\n              \"name\": \"A.D.\",\n              \"start\": null,\n              \"offset\": 0\n            }],\n            twoDigitYearMax: 2029,\n            patterns: {\n              // short date pattern\n              d: \"M/d/yyyy\",\n              // long date pattern\n              D: \"dddd, MMMM dd, yyyy\",\n              // short time pattern\n              t: \"h:mm tt\",\n              // long time pattern\n              T: \"h:mm:ss tt\",\n              // long date, short time pattern\n              f: \"dddd, MMMM dd, yyyy h:mm tt\",\n              // long date, long time pattern\n              F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n              // month/day pattern\n              M: \"MMMM dd\",\n              // month/year pattern\n              Y: \"yyyy MMMM\",\n              // S is a sortable format that does not vary by culture\n              S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n              // formatting of dates in MySQL DataBases\n              ISO: \"yyyy-MM-dd hh:mm:ss\",\n              ISO2: \"yyyy-MM-dd HH:mm:ss\",\n              d1: \"dd.MM.yyyy\",\n              d2: \"dd-MM-yyyy\",\n              zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n              zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n              custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n              custom2: \"yyyy-MM-dd HH:mm:ss.fff\"\n            },\n            percentsymbol: \"%\",\n            currencysymbol: \"$\",\n            currencysymbolposition: \"before\",\n            decimalseparator: '.',\n            thousandsseparator: ','\n          };\n          $.jqx.ICalRule = function (options, from) {\n            var that = this;\n            var range = function (start, end) {\n              if (arguments.length === 1) {\n                end = start;\n                start = 0;\n              }\n              var rang = [];\n              for (var i = start; i < end; i++) {\n                rang.push(i);\n              }\n              return rang;\n            };\n            var repeat = function (value, times) {\n              var i = 0,\n                array = [];\n              if (value instanceof Array) {\n                for (; i < times; i++) {\n                  array[i] = [].concat(value);\n                }\n              } else {\n                for (; i < times; i++) {\n                  array[i] = value;\n                }\n              }\n              return array;\n            };\n            var isBoolean = function (obj) {\n              return obj instanceof Array && obj.length == 0 ? false : Boolean(obj);\n            };\n            var contains = function (arr, val) {\n              return arr.indexOf(val) != -1;\n            };\n            var M365MASK = [].concat(repeat(1, 31), repeat(2, 28), repeat(3, 31), repeat(4, 30), repeat(5, 31), repeat(6, 30), repeat(7, 31), repeat(8, 31), repeat(9, 30), repeat(10, 31), repeat(11, 30), repeat(12, 31), repeat(1, 7));\n            var M366MASK = [].concat(repeat(1, 31), repeat(2, 29), repeat(3, 31), repeat(4, 30), repeat(5, 31), repeat(6, 30), repeat(7, 31), repeat(8, 31), repeat(9, 30), repeat(10, 31), repeat(11, 30), repeat(12, 31), repeat(1, 7));\n            var M28 = range(1, 29),\n              M29 = range(1, 30),\n              M30 = range(1, 31),\n              M31 = range(1, 32);\n            var MDAY366MASK = [].concat(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\n            var MDAY365MASK = [].concat(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\n            M28 = range(-28, 0);\n            M29 = range(-29, 0);\n            M30 = range(-30, 0);\n            M31 = range(-31, 0);\n            var NMDAY366MASK = [].concat(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\n            var NMDAY365MASK = [].concat(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\n            var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n            var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n            var WDAYMASK = function () {\n              for (var wdaymask = [], i = 0; i < 55; i++) {\n                wdaymask = wdaymask.concat(range(7));\n              }\n              return wdaymask;\n            }();\n            var Weekday = function (weekday, n) {\n              var that = this;\n              if (n === 0) {\n                throw new Error('Can\\'t create weekday with n == 0');\n              }\n              this.weekday = weekday;\n              this.n = n;\n              this.nth = function (n) {\n                return that.n == n ? that : new Weekday(that.weekday, n);\n              };\n              this.equals = function (other) {\n                return that.weekday == other.weekday && that.n == other.n;\n              };\n              this.toString = function () {\n                var s = ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'][that.weekday];\n                if (this.n) {\n                  s = (that.n > 0 ? '+' : '') + String(that.n) + s;\n                }\n                return s;\n              };\n              this.getJsWeekday = function () {\n                return that.weekday == 6 ? 0 : that.weekday + 1;\n              };\n            };\n            this.FREQUENCIES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY'];\n            this.YEARLY = 0;\n            this.MONTHLY = 1;\n            this.WEEKLY = 2;\n            this.DAILY = 3;\n            this.HOURLY = 4;\n            this.MINUTELY = 5;\n            this.SECONDLY = 6;\n            this.MO = new Weekday(0);\n            this.TU = new Weekday(1);\n            this.WE = new Weekday(2);\n            this.TH = new Weekday(3);\n            this.FR = new Weekday(4);\n            this.SA = new Weekday(5);\n            this.SU = new Weekday(6);\n            var DEFAULT_OPTIONS = {\n              freq: null,\n              dtstart: null,\n              interval: 1,\n              wkst: that.MO,\n              count: null,\n              until: null,\n              bysetpos: null,\n              bymonth: null,\n              bymonthday: null,\n              byyearday: null,\n              byweekno: null,\n              byweekday: null,\n              byhour: null,\n              byminute: null,\n              bysecond: null,\n              byeaster: null\n            };\n\n            // RFC string\n            this._string = null;\n            this.toString = function () {\n              var options = this.origOptions;\n              var key,\n                keys,\n                defaultKeys,\n                value,\n                strValues,\n                pairs = [];\n              keys = Object.keys(options);\n              defaultKeys = Object.keys(DEFAULT_OPTIONS);\n              for (var i = 0; i < keys.length; i++) {\n                if (!contains(defaultKeys, keys[i])) continue;\n                key = keys[i].toUpperCase();\n                value = options[keys[i]];\n                strValues = [];\n                if (value === null || value instanceof Array && !value.length) {\n                  continue;\n                }\n                switch (key) {\n                  case 'FREQ':\n                    value = that.FREQUENCIES[options.freq];\n                    break;\n                  case 'WKST':\n                    if (!value) value = 0;\n                    value = value.toString();\n                    break;\n                  case 'BYWEEKDAY':\n                    key = 'BYDAY';\n                    if (!(value instanceof Array)) {\n                      value = [value];\n                    }\n                    for (var wday, j = 0; j < value.length; j++) {\n                      wday = value[j];\n                      if (wday instanceof Weekday) {\n                        // good\n                      } else if (wday instanceof Array) {\n                        wday = new Weekday(wday[0], wday[1]);\n                      } else {\n                        wday = new Weekday(wday);\n                      }\n                      strValues[j] = wday.toString();\n                    }\n                    value = strValues;\n                    break;\n                  case 'DTSTART':\n                  case 'UNTIL':\n                    value = $.jqx.scheduler.utilities.timeToUntilString(value);\n                    break;\n                  default:\n                    if (value instanceof Array) {\n                      for (var j = 0; j < value.length; j++) {\n                        strValues[j] = String(value[j]);\n                      }\n                      value = strValues;\n                    } else {\n                      value = String(value);\n                    }\n                }\n                pairs.push([key, value]);\n              }\n              var strings = [];\n              for (var i = 0; i < pairs.length; i++) {\n                var attr = pairs[i];\n                strings.push(attr[0] + '=' + attr[1].toString());\n              }\n              return strings.join(';');\n            };\n            this.parseString = function (rfcString) {\n              rfcString = rfcString.replace(/^\\s+|\\s+$/, '');\n              if (!rfcString.length) {\n                return null;\n              }\n              var i,\n                j,\n                key,\n                value,\n                attr,\n                attrs = rfcString.split(';'),\n                options = {};\n              for (i = 0; i < attrs.length; i++) {\n                attr = attrs[i].split('=');\n                key = attr[0];\n                value = attr[1];\n                if (key == \"\") continue;\n                switch (key) {\n                  case 'COUNT':\n                  case 'INTERVAL':\n                  case 'BYSETPOS':\n                  case 'BYMONTH':\n                  case 'BYMONTHDAY':\n                  case 'BYYEARDAY':\n                  case 'BYWEEKNO':\n                  case 'BYHOUR':\n                  case 'BYMINUTE':\n                  case 'BYSECOND':\n                    if (value.indexOf(',') != -1) {\n                      value = value.split(',');\n                      for (j = 0; j < value.length; j++) {\n                        if (/^[+-]?\\d+$/.test(value[j])) {\n                          value[j] = Number(value[j]);\n                        }\n                      }\n                    } else if (/^[+-]?\\d+$/.test(value)) {\n                      value = Number(value);\n                    }\n                    key = key.toLowerCase();\n                    options[key] = value;\n                    break;\n                  case 'BYDAY':\n                    // => byweekday\n                    var n,\n                      wday,\n                      day,\n                      days = value.split(',');\n                    options.byweekday = [];\n                    for (j = 0; j < days.length; j++) {\n                      day = days[j];\n                      if (day.length == 2) {\n                        // MO, TU, ...\n                        wday = that[day]; // wday instanceof Weekday\n                        options.byweekday.push(wday);\n                      } else {\n                        // -1MO, +3FR, 1SO, ...\n                        day = day.match(/^([+-]?\\d)([A-Z]{2})$/);\n                        n = Number(day[1]);\n                        wday = day[2];\n                        wday = that[wday].weekday;\n                        options.byweekday.push(new Weekday(wday, n));\n                      }\n                    }\n                    break;\n                  case 'FREQ':\n                    options.freq = that[value];\n                    break;\n                  case 'WKST':\n                    options.wkst = that[value];\n                    break;\n                  case 'DTSTART':\n                    options.dtstart = $.jqx.scheduler.utilities.untilStringToDate(value);\n                    break;\n                  case 'UNTIL':\n                    options.until = $.jqx.scheduler.utilities.untilStringToDate(value);\n                    break;\n                  case 'BYEASTER':\n                    options.byeaster = Number(value);\n                    break;\n                  default:\n                    throw new Error(\"Unknown ICalRule property '\" + key + \"'\");\n                }\n              }\n              that.options = options;\n              return options;\n            };\n            if ($.type(options) === \"string\") {\n              this.options = this.parseString(options);\n            } else {\n              this.options = options || {};\n            }\n            var options = this.options;\n            if (!Array.prototype.forEach) {\n              Array.prototype.forEach = function (callback, thisArg) {\n                var T, k;\n                if (this == null) {\n                  throw new TypeError(' this is null or not defined');\n                }\n\n                // 1. var O be the result of calling ToObject passing the |this| value as the argument.\n                var O = Object(this);\n\n                // 2. var lenValue be the result of calling the Get internal method of O with the argument \"length\".\n                // 3. var len be ToUint32(lenValue).\n                var len = O.length >>> 0;\n\n                // 4. If IsCallable(callback) is false, throw a TypeError exception.\n                if (typeof callback !== \"function\") {\n                  throw new TypeError(callback + ' is not a function');\n                }\n\n                // 5. If thisArg was supplied, var T be thisArg; else var T be undefined.\n                if (arguments.length > 1) {\n                  T = thisArg;\n                }\n\n                // 6. var k be 0\n                k = 0;\n\n                // 7. Repeat, while k < len\n                while (k < len) {\n                  var kValue;\n\n                  // a. var Pk be ToString(k).\n                  //   This is implicit for LHS operands of the in operator\n                  // b. var kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n                  //   This step can be combined with c\n                  // c. If kPresent is true, then\n                  if (k in O) {\n                    // i. var kValue be the result of calling the Get internal method of O with argument Pk.\n                    kValue = O[k];\n\n                    // ii. Call the Call internal method of callback with T as the this value and\n                    // argument list containing kValue, k, and O.\n                    callback.call(T, kValue, k, O);\n                  }\n                  // d. Increase k by 1.\n                  k++;\n                }\n                // 8. return undefined\n              };\n            }\n            if (!Object.keys) {\n              Object.keys = function () {\n                'use strict';\n\n                var hasOwnProperty = Object.prototype.hasOwnProperty,\n                  hasDontEnumBug = !{\n                    toString: null\n                  }.propertyIsEnumerable('toString'),\n                  dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n                  dontEnumsLength = dontEnums.length;\n                return function (obj) {\n                  if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                    throw new TypeError('Object.keys called on non-object');\n                  }\n                  var result = [],\n                    prop,\n                    i;\n                  for (prop in obj) {\n                    if (hasOwnProperty.call(obj, prop)) {\n                      result.push(prop);\n                    }\n                  }\n                  if (hasDontEnumBug) {\n                    for (i = 0; i < dontEnumsLength; i++) {\n                      if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                      }\n                    }\n                  }\n                  return result;\n                };\n              }();\n            }\n            // used by toString()\n            this.origOptions = {};\n            var invalid = [],\n              keys = Object.keys(this.options),\n              defaultKeys = Object.keys(DEFAULT_OPTIONS);\n\n            // Shallow copy for origOptions and check for invalid\n            keys.forEach(function (key) {\n              this.origOptions[key] = this.options[key];\n              if (!contains(defaultKeys, key)) invalid.push(key);\n            }, this);\n            if (invalid.length) {\n              throw new Error('Invalid options: ' + invalid.join(', '));\n            }\n            if (!that.FREQUENCIES[this.options.freq] && options.byeaster === null) {\n              throw new Error('Invalid Frequency: ' + String(options.freq));\n            }\n\n            // Merge in default options\n            defaultKeys.forEach(function (key) {\n              if (!contains(keys, key)) options[key] = DEFAULT_OPTIONS[key];\n            });\n            var opts = this.options;\n            if (opts.byeaster !== null) {\n              opts.freq = this.YEARLY;\n            }\n            if (!opts.dtstart) {\n              opts.dtstart = new Date();\n              opts.dtstart.setMilliseconds(0);\n            }\n            if (from) {\n              opts.dtstart = from.toDate();\n            }\n            if (opts.wkst === null) {\n              opts.wkst = this.MO.weekday;\n            } else if (typeof opts.wkst == 'number') {\n              // cool, just keep it like that\n            } else {\n              if (opts.wkst == null) {\n                opts.wkst = this.MO.weekday;\n              } else {\n                opts.wkst = opts.wkst.weekday;\n              }\n            }\n            if (opts.bysetpos !== null) {\n              if (typeof opts.bysetpos == 'number') {\n                opts.bysetpos = [opts.bysetpos];\n              }\n              for (var i = 0; i < opts.bysetpos.length; i++) {\n                var v = opts.bysetpos[i];\n                if (v == 0 || !(-366 <= v && v <= 366)) {\n                  throw new Error('bysetpos must be between 1 and 366,' + ' or between -366 and -1');\n                }\n              }\n            }\n            if (!(isBoolean(opts.byweekno) || isBoolean(opts.byyearday) || isBoolean(opts.bymonthday) || opts.byweekday !== null || opts.byeaster !== null)) {\n              switch (opts.freq) {\n                case this.YEARLY:\n                  if (!opts.bymonth) {\n                    opts.bymonth = opts.dtstart.getMonth() + 1;\n                  }\n                  opts.bymonthday = opts.dtstart.getDate();\n                  break;\n                case this.MONTHLY:\n                  opts.bymonthday = opts.dtstart.getDate();\n                  break;\n                case this.WEEKLY:\n                  opts.byweekday = $.jqx.scheduler.utilities.getWeekday(opts.dtstart);\n                  break;\n              }\n            }\n\n            // bymonth\n            if (opts.bymonth !== null && !(opts.bymonth instanceof Array)) {\n              opts.bymonth = [opts.bymonth];\n            }\n\n            // byyearday\n            if (opts.byyearday !== null && !(opts.byyearday instanceof Array)) {\n              opts.byyearday = [opts.byyearday];\n            }\n\n            // bymonthday\n            if (opts.bymonthday === null) {\n              opts.bymonthday = [];\n              opts.bynmonthday = [];\n            } else if (opts.bymonthday instanceof Array) {\n              var bymonthday = [],\n                bynmonthday = [];\n              for (i = 0; i < opts.bymonthday.length; i++) {\n                var v = opts.bymonthday[i];\n                if (v > 0) {\n                  bymonthday.push(v);\n                } else if (v < 0) {\n                  bynmonthday.push(v);\n                }\n              }\n              opts.bymonthday = bymonthday;\n              opts.bynmonthday = bynmonthday;\n            } else {\n              if (opts.bymonthday < 0) {\n                opts.bynmonthday = [opts.bymonthday];\n                opts.bymonthday = [];\n              } else {\n                opts.bynmonthday = [];\n                opts.bymonthday = [opts.bymonthday];\n              }\n            }\n\n            // byweekno\n            if (opts.byweekno !== null && !(opts.byweekno instanceof Array)) {\n              opts.byweekno = [opts.byweekno];\n            }\n\n            // byweekday / bynweekday\n            if (opts.byweekday === null) {\n              opts.bynweekday = null;\n            } else if (typeof opts.byweekday == 'number') {\n              opts.byweekday = [opts.byweekday];\n              opts.bynweekday = null;\n            } else if (opts.byweekday instanceof Weekday) {\n              if (!opts.byweekday.n || opts.freq > this.MONTHLY) {\n                opts.byweekday = [opts.byweekday.weekday];\n                opts.bynweekday = null;\n              } else {\n                opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];\n                opts.byweekday = null;\n              }\n            } else {\n              var byweekday = [],\n                bynweekday = [];\n              for (i = 0; i < opts.byweekday.length; i++) {\n                var wday = opts.byweekday[i];\n                if (typeof wday == 'number') {\n                  byweekday.push(wday);\n                } else if (!wday.n || opts.freq > this.MONTHLY) {\n                  byweekday.push(wday.weekday);\n                } else {\n                  bynweekday.push([wday.weekday, wday.n]);\n                }\n              }\n              opts.byweekday = isBoolean(byweekday) ? byweekday : null;\n              opts.bynweekday = isBoolean(bynweekday) ? bynweekday : null;\n            }\n\n            // byhour\n            if (opts.byhour === null) {\n              opts.byhour = opts.freq < this.HOURLY ? [opts.dtstart.getHours()] : null;\n            } else if (typeof opts.byhour == 'number') {\n              opts.byhour = [opts.byhour];\n            }\n\n            // byminute\n            if (opts.byminute === null) {\n              opts.byminute = opts.freq < this.MINUTELY ? [opts.dtstart.getMinutes()] : null;\n            } else if (typeof opts.byminute == 'number') {\n              opts.byminute = [opts.byminute];\n            }\n\n            // bysecond\n            if (opts.bysecond === null) {\n              opts.bysecond = opts.freq < this.SECONDLY ? [opts.dtstart.getSeconds()] : null;\n            } else if (typeof opts.bysecond == 'number') {\n              opts.bysecond = [opts.bysecond];\n            }\n            if (opts.freq >= this.HOURLY) {\n              this.timeset = null;\n            } else {\n              this.timeset = [];\n              if (opts.byhour) {\n                for (i = 0; i < opts.byhour.length; i++) {\n                  var hour = opts.byhour[i];\n                  for (var j = 0; j < opts.byminute.length; j++) {\n                    var minute = opts.byminute[j];\n                    for (var k = 0; k < opts.bysecond.length; k++) {\n                      var second = opts.bysecond[k];\n                      // python:\n                      // datetime.time(hour, minute, second,\n                      // tzinfo=self._tzinfo))\n                      this.timeset.push(new $.jqx.scheduler.utilities.Time(hour, minute, second));\n                    }\n                  }\n                }\n              }\n              $.jqx.scheduler.utilities.sort(this.timeset);\n            }\n            return this;\n          };\n        })(jqxBaseFramework);\n        (function ($) {\n          'use strict';\n\n          $.extend($.jqx._jqxScheduler.prototype, {\n            _getexportcolor: function (value) {\n              var color = value;\n              if (value == 'transparent') color = \"#FFFFFF\";\n              if (!color || !color.toString()) {\n                color = \"#FFFFFF\";\n              }\n              if (color.toString().indexOf('rgb') != -1) {\n                var rgb = color.split(',');\n                if (color.toString().indexOf('rgba') != -1) {\n                  var r = parseInt(rgb[0].substring(5));\n                  var g = parseInt(rgb[1]);\n                  var b = parseInt(rgb[2]);\n                  var a = parseFloat(rgb[3].substring(1, 4));\n                  var rgbObj = {\n                    r: r,\n                    g: g,\n                    b: b\n                  };\n                  var hex = this._rgbToHex(rgbObj);\n                  if (r == 0 && g == 0 && b == 0 && a == 0) {\n                    return \"#ffffff\";\n                  }\n                  return \"#\" + hex;\n                }\n                var r = parseInt(rgb[0].substring(4));\n                var g = parseInt(rgb[1]);\n                var b = parseInt(rgb[2].substring(1, 4));\n                var rgbObj = {\n                  r: r,\n                  g: g,\n                  b: b\n                };\n                var hex = this._rgbToHex(rgbObj);\n                return \"#\" + hex;\n              } else if (color.toString().indexOf('#') != -1) {\n                if (color.toString().length == 4) {\n                  var colorPart = color.toString().substring(1, 4);\n                  color += colorPart;\n                }\n              }\n              return color;\n            },\n            _rgbToHex: function (rgb) {\n              return this._intToHex(rgb.r) + this._intToHex(rgb.g) + this._intToHex(rgb.b);\n            },\n            _intToHex: function (dec) {\n              var result = parseInt(dec).toString(16);\n              if (result.length == 1) result = \"0\" + result;\n              return result.toUpperCase();\n            },\n            exportData: function (datatype) {\n              var that = this;\n              if (!$.jqx.dataAdapter.ArrayExporter) {\n                throw 'jqxScheduler: Missing reference to jqxdata.export.js!';\n              }\n              var exportServer = this.exportSettings.serverURL;\n              var charset = this.exportSettings.characterSet;\n              var filename = this.exportSettings.fileName;\n              var calendarName = this.exportSettings.ICSXWRCALNAME;\n              var calendarDescription = this.exportSettings.ICSXWRCALDESC;\n              if (filename === undefined) {\n                filename = \"jqxScheduler\";\n              }\n              var that = this;\n              if (datatype == \"ical\" || datatype == \"ics\") {\n                if (that._resources.length > 1 && filename && that.resourcesInMultipleICSFiles) {\n                  var rows = this.getAppointments();\n                  for (var i = 0; i < that._resources.length; i++) {\n                    var resource = that._resources[i];\n                    var appointmentsInResource = new Array();\n                    for (var j = 0; j < rows.length; j++) {\n                      var appointment = rows[j];\n                      if (appointment.resourceId == resource) {\n                        appointmentsInResource.push(appointment);\n                      }\n                    }\n                    var data = 'BEGIN:VCALENDAR\\n' + 'VERSION:2.0\\n' + 'PRODID:jqxScheduler\\n' + 'METHOD:PUBLISH\\n';\n                    if (calendarName) {\n                      data += 'X-WR-CALNAME:' + calendarName + '\\n';\n                    }\n                    if (calendarDescription) {\n                      data += 'X-WR-CALDESC:' + calendarDescription + '\\n';\n                    }\n                    for (var m = 0; m < appointmentsInResource.length; m++) {\n                      data += appointmentsInResource[m].jqxAppointment.toString();\n                      if (m < appointmentsInResource.length - 1) data += '\\n';\n                    }\n                    data += '\\nEND:VCALENDAR';\n                    var length = data.length;\n                    var array = new Uint8Array(new ArrayBuffer(length));\n                    for (var m = 0; m < length; m++) {\n                      array[m] = data.charCodeAt(m);\n                    }\n                    var blob = new Blob([array], {\n                      type: \"application/calendar\"\n                    });\n                    var saveAs;\n                    if (saveAs) {\n                      saveAs(blob, filename + \"_\" + resource + \".ics\");\n                    } else if (window.jqxSaveAs) {\n                      window.jqxSaveAs(blob, filename + \"_\" + resource + \".ics\");\n                    }\n                  }\n                } else {\n                  var rows = this.getAppointments();\n                  var data = 'BEGIN:VCALENDAR\\n' + 'VERSION:2.0\\n' + 'PRODID:jqxScheduler\\n' + 'METHOD:PUBLISH\\n';\n                  for (var i = 0; i < rows.length; i++) {\n                    data += rows[i].jqxAppointment.toString();\n                    if (i < rows.length - 1) data += '\\n';\n                  }\n                  data += '\\nEND:VCALENDAR';\n                  var length = data.length;\n                  var array = new Uint8Array(new ArrayBuffer(length));\n                  for (i = 0; i < length; i++) {\n                    array[i] = data.charCodeAt(i);\n                  }\n                  var blob = new Blob([array], {\n                    type: \"application/calendar\"\n                  });\n                  if (!filename) return data;\n                  if (saveAs) {\n                    saveAs(blob, filename + \".ics\");\n                  } else if (window.jqxSaveAs) {\n                    window.jqxSaveAs(blob, filename + \".ics\");\n                  }\n                }\n                return;\n              }\n              var rows = this.getDataAppointments();\n              var fields = new Array();\n              var dataFields = {};\n              var styles = {};\n              var $cell = this.host.find('.jqx-grid-cell:first');\n              $cell.removeClass(this.toThemeProperty('jqx-grid-cell-selected'));\n              $cell.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              $cell.removeClass(this.toThemeProperty('jqx-grid-cell-hover'));\n              $cell.removeClass(this.toThemeProperty('jqx-fill-state-hover'));\n              var styleName = 'cell';\n              var styleIndex = 1;\n              var columnStyleName = 'column';\n              var columnStyleIndex = 1;\n              var $element = $(this.columns.records[0].element);\n              var count = 0;\n              $.each(this.appointmentDataFields, function (index, value) {\n                dataFields[value] = {};\n                dataFields[value].text = value;\n                dataFields[value].width = 100;\n                dataFields[value].formatString = \"\";\n                dataFields[value].localization = that.schedulerLocalization;\n                if (index == \"from\" || index == \"to\") {\n                  dataFields[value].type = \"date\";\n                  dataFields[value].formatString = that.exportSettings.dateTimeFormatString;\n                } else {\n                  dataFields[value].type = \"string\";\n                }\n                dataFields[value].cellsAlign = \"left\";\n                fields.push(dataFields[value]);\n                styleName = 'cell' + styleIndex;\n                columnStyleName = 'column' + columnStyleIndex;\n                if (datatype == 'html' || datatype == 'xls' || datatype == 'pdf') {\n                  var buildStyle = function (styleName, $element, isColumn, altStyle, meColumn, me, index, customStyle, rowIndex) {\n                    styles[styleName] = {};\n                    if ($element == undefined) return;\n                    styles[styleName]['font-size'] = $element.css('font-size');\n                    styles[styleName]['font-weight'] = $element.css('font-weight');\n                    styles[styleName]['font-style'] = $element.css('font-style');\n                    styles[styleName]['background-color'] = that._getexportcolor($element.css('background-color'));\n                    styles[styleName]['color'] = that._getexportcolor($element.css('color'));\n                    styles[styleName]['border-color'] = that._getexportcolor($element.css('border-top-color'));\n                    if (isColumn) {\n                      styles[styleName]['text-align'] = \"left\";\n                    } else {\n                      styles[styleName]['text-align'] = \"left\";\n                      styles[styleName]['formatString'] = \"\";\n                      styles[styleName]['dataType'] = \"string\";\n                      if (index == \"from\" || index == \"to\") {\n                        styles[styleName]['dataType'] = \"date\";\n                        styles[styleName]['formatString'] = that.exportSettings.dateTimeFormatString;\n                      }\n                    }\n                    if (datatype == 'html' || datatype == 'pdf') {\n                      styles[styleName]['border-top-width'] = $element.css('border-top-width');\n                      styles[styleName]['border-left-width'] = $element.css('border-left-width');\n                      styles[styleName]['border-right-width'] = $element.css('border-right-width');\n                      styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');\n                      styles[styleName]['border-top-style'] = $element.css('border-top-style');\n                      styles[styleName]['border-left-style'] = $element.css('border-left-style');\n                      styles[styleName]['border-right-style'] = $element.css('border-right-style');\n                      styles[styleName]['border-bottom-style'] = $element.css('border-bottom-style');\n                      if (isColumn) {\n                        if (count == 0) {\n                          styles[styleName]['border-left-width'] = $element.css('border-right-width');\n                        }\n                        styles[styleName]['border-top-width'] = $element.css('border-right-width');\n                        styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');\n                      } else {\n                        if (count == 0) {\n                          styles[styleName]['border-left-width'] = \"1px\";\n                        }\n                        styles[styleName]['border-right-width'] = \"1px\";\n                      }\n                    }\n                    if (isColumn) {\n                      dataFields[value].style = styleName;\n                    }\n                    dataFields[value].cellStyle = styleName;\n                  };\n                  buildStyle(columnStyleName, $element, true, false, this, that, index);\n                  columnStyleIndex++;\n                  buildStyle(styleName, $cell, false, false, this, that, index);\n                  styleIndex++;\n                }\n                count++;\n              });\n              var exporter = $.jqx.dataAdapter.ArrayExporter(rows, dataFields, styles, exportServer);\n              if (filename == null) {\n                // update ui\n                this._renderrows();\n                var result = exporter.exportTo(datatype);\n                setTimeout(function () {\n                  that.exporting = false;\n                }, 50);\n                return result;\n              } else {\n                exporter.exportToFile(datatype, filename, exportServer, charset);\n              }\n              this._renderrows();\n              setTimeout(function () {\n                that.exporting = false;\n              }, 50);\n            },\n            shadeColor: function (color, percent) {\n              var f = parseInt(color.slice(1), 16),\n                t = percent < 0 ? 0 : 255,\n                p = percent < 0 ? percent * -1 : percent,\n                R = f >> 16,\n                G = f >> 8 & 0x00FF,\n                B = f & 0x0000FF;\n              return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n            },\n            hexToRgba: function (hex, alpha) {\n              var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n              var toString = function () {\n                var oldie = $.jqx.browser.msie && $.jqx.browser.version < 10;\n                if (this.alpha == undefined || oldie) {\n                  return \"rgb(\" + this.r + \", \" + this.g + \", \" + this.b + \")\";\n                }\n                if (this.alpha > 1) {\n                  this.alpha = 1;\n                } else if (this.alpha < 0) {\n                  this.alpha = 0;\n                }\n                return \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.alpha + \")\";\n              };\n              if (alpha == undefined) {\n                return result ? {\n                  r: parseInt(result[1], 16),\n                  g: parseInt(result[2], 16),\n                  b: parseInt(result[3], 16),\n                  toString: toString\n                } : null;\n              }\n              if (alpha > 1) {\n                alpha = 1;\n              } else if (alpha < 0) {\n                alpha = 0;\n              }\n              return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16),\n                alpha: alpha,\n                toString: toString\n              } : null;\n            },\n            getAppointmentColors: function (hexColor) {\n              var background = \"\";\n              var border = \"\";\n              var color = \"\";\n              background = this.hexToRgba(hexColor, this.appointmentOpacity).toString();\n              border = hexColor;\n              var getTextElementByColor = function (color) {\n                var nThreshold = 105;\n                var bgDelta = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\n                var foreColor = 255 - bgDelta < nThreshold ? 'Black' : 'White';\n                return foreColor;\n              };\n              color = getTextElementByColor(this.hexToRgba(hexColor, 0.7));\n              return {\n                background: background,\n                color: color,\n                border: border\n              };\n            },\n            getColors: function (resourceIndex) {\n              if (resourceIndex == -1) {\n                resourceIndex = 0;\n              }\n              var background = \"\";\n              var border = \"\";\n              var color = \"\";\n              var colorScheme = this.resources ? this.resources.colorScheme : null;\n              if (!colorScheme) colorScheme = \"scheme01\";\n              var colors = new Array();\n              for (var scheme = 0; scheme < this.colorSchemes.length; scheme++) {\n                if (this.colorSchemes[scheme].name == colorScheme) {\n                  colors = this.colorSchemes[scheme].colors;\n                  break;\n                }\n              }\n              while (resourceIndex > colors.length - 1) {\n                var schemeIndex = parseInt(colorScheme.substring(6));\n                if (schemeIndex >= 27) schemeIndex = 0;\n                colors = colors.concat(this.colorSchemes[schemeIndex].colors);\n                schemeIndex++;\n              }\n              background = colors[resourceIndex];\n              background = this.hexToRgba(colors[resourceIndex], this.appointmentOpacity).toString();\n              border = colors[resourceIndex];\n              var getTextElementByColor = function (color) {\n                var nThreshold = 105;\n                var bgDelta = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\n                var foreColor = 255 - bgDelta < nThreshold ? 'Black' : 'White';\n                return foreColor;\n              };\n              color = getTextElementByColor(this.hexToRgba(colors[resourceIndex], 0.7));\n              return {\n                background: background,\n                color: color,\n                border: border\n              };\n            },\n            getAppointments: function () {\n              var appointments = this.uiappointments;\n              var boundAppointments = new Array();\n              for (var i = 0; i < appointments.length; i++) {\n                var boundAppointment = appointments[i].boundAppointment;\n                boundAppointment.toString = boundAppointment.jqxAppointment.toString;\n                boundAppointments.push(boundAppointment);\n              }\n              return boundAppointments;\n            },\n            getDataAppointments: function () {\n              var appointments = this.uiappointments;\n              var boundAppointments = new Array();\n              for (var i = 0; i < appointments.length; i++) {\n                var boundAppointment = appointments[i].boundAppointment;\n                var obj = {};\n                $.each(this.appointmentDataFields, function (index, value) {\n                  obj[value] = boundAppointment[index];\n                  if (index == \"from\" || index == \"to\") {\n                    if (\"date\" != $.type(boundAppointment[index])) {\n                      obj[value] = boundAppointment[index].toDate();\n                    }\n                  }\n                  if (index == \"recurrencePattern\") {\n                    if (boundAppointment[index]) {\n                      obj[value] = boundAppointment[index].toString();\n                    }\n                  }\n                  if (index == \"recurrenceException\") {\n                    if (boundAppointment[index]) {\n                      obj[value] = \"\";\n                      for (var j = 0; j < boundAppointment[index].length; j++) {\n                        obj[value] += boundAppointment[index][j].toString();\n                        if (j < boundAppointment[index].length - 1) {\n                          obj[value] += \",\";\n                        }\n                      }\n                    }\n                  }\n                  try {\n                    if (JSON) {\n                      obj.toString = function () {\n                        return JSON.stringify(obj);\n                      };\n                    }\n                  } catch (er) {}\n                });\n                boundAppointments.push(obj);\n              }\n              return boundAppointments;\n            },\n            _refreshColumns: function () {\n              this._initializeColumns();\n              this.columnsheader = this.columnsheader || $('<div style=\"overflow: hidden;\"></div>');\n              this.columnsheader.children().remove();\n              var columnsHeight = this.columnsHeight;\n              columnsHeight = this._preparecolumnGroups();\n              this.columnsheader.height(columnsHeight);\n              this._rendercolumnheaders();\n            },\n            _refreshColumnTitles: function () {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var that = this;\n              var columns = new Array();\n              if (that.columns.records[0].timeColumn) columns.push({});\n              if (viewObject.timeRuler && viewObject.timeRuler.timeZones) {\n                for (var i = 0; i < viewObject.timeRuler.timeZones.length; i++) {\n                  columns.push({});\n                }\n              }\n              var createtimelineDayColumns = function (date, resourceName, resourceIndex) {\n                var scale = \"halfHour\";\n                if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                  scale = viewObject.timeRuler.scale;\n                }\n                var hours = 24;\n                var startHour = 0;\n                var endHour = 23;\n                if (viewObject.timeRuler) {\n                  if (viewObject.timeRuler.scaleStartHour != undefined) {\n                    var startHour = parseInt(viewObject.timeRuler.scaleStartHour);\n                  }\n                  if (viewObject.timeRuler.scaleEndHour != undefined) {\n                    var endHour = parseInt(viewObject.timeRuler.scaleEndHour);\n                  }\n                  if (startHour < 0) startHour = 0;\n                  if (endHour < 0) endHour = 23;\n                  if (startHour > 23) startHour = 0;\n                  if (endHour > 23) endHour = 23;\n                  hours = endHour - startHour + 1;\n                }\n                var minutes = 60;\n                var pow = 2;\n                if (scale) {\n                  switch (scale) {\n                    case 'sixtyMinutes':\n                    case 'hour':\n                      pow = 1;\n                      break;\n                    case 'thirdyMinutes':\n                    case 'halfHour':\n                      pow = 2;\n                      break;\n                    case 'fifteenMinutes':\n                    case 'quarterHour':\n                      pow = 4;\n                      break;\n                    case 'tenMinutes':\n                      pow = 6;\n                      break;\n                    case 'fiveMinutes':\n                      pow = 12;\n                      break;\n                  }\n                }\n                var rows = new Array();\n                var format = \"auto\";\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var currentHour = startHour;\n                var columnsCount = hours;\n                var currentDate = date.addHours(currentHour);\n                if (that.rtl) {\n                  var currentDate = date.addHours(endHour);\n                }\n                for (var i = 0; i < columnsCount; i++) {\n                  var cellvalue = currentDate.toDate();\n                  if (format === \"auto\") {\n                    if (cellvalue.getHours() == 0 && cellvalue.getMinutes() == 0 || cellvalue.getHours() == 12 && cellvalue.getMinutes() == 0) {\n                      var cellsFormat = \"hh tt\";\n                    } else var cellsFormat = \"hh:mm\";\n                  } else if ($.isFunction(format)) {\n                    var cellsFormat = format(cellvalue);\n                  } else {\n                    cellsFormat = format;\n                  }\n                  var today = new Date();\n                  var isToday = cellvalue.getFullYear() === today.getFullYear() && cellvalue.getMonth() === today.getMonth() && cellvalue.getDate() === today.getDate();\n                  if ($.jqx.dataFormat.isDate(cellvalue)) {\n                    cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                  }\n                  if (!that.rtl) {\n                    currentDate = currentDate.addMinutes(minutes);\n                  } else {\n                    currentDate = currentDate.addMinutes(-minutes);\n                  }\n                  columns.push({});\n                  that.columns.records[columns.length - 1].text = cellvalue;\n                  that.columns.records[columns.length - 1].today = isToday;\n                }\n              };\n              var index = this.tableColumns;\n              for (var j = 0; j < this.tableColumns; j++) {\n                switch (view) {\n                  case \"dayView\":\n                    var viewStart = this.getViewStart();\n                    if (false === viewObject.showWeekends) {\n                      if (viewStart.dayOfWeek() === 0 || viewStart.dayOfWeek() === 6) viewStart = viewStart.addDays(1);\n                      if (viewStart.dayOfWeek() === 0 || viewStart.dayOfWeek() === 6) viewStart = viewStart.addDays(1);\n                    }\n                    columns.push({});\n                    var viewStart = this.getViewStart();\n                    var date = viewStart.addDays(i);\n                    this.columns.records[columns.length - 1].today = viewStart.isToday();\n                    this.columns.records[columns.length - 1].text = this._getDayName(viewStart.dayOfWeek());\n                    break;\n                  case \"weekView\":\n                  case \"monthView\":\n                    for (var i = 0; i < 7; i++) {\n                      var day = this.schedulerLocalization.firstDay + i;\n                      if (false === viewObject.showWeekends) {\n                        if (i === 0 || i === 6) continue;\n                      }\n                      columns.push({});\n                      if (that.rtl) {\n                        day = 6 - day;\n                      }\n                      var viewStart = this.getViewStart();\n                      var date = viewStart.addDays(i);\n                      this.columns.records[columns.length - 1].today = date.isToday();\n                      this.columns.records[columns.length - 1].text = this._getDayName(day);\n                    }\n                    break;\n                  case \"timelineDayView\":\n                    var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                    createtimelineDayColumns(that.getViewStart(), resourceName);\n                    break;\n                  case \"timelineWeekView\":\n                    for (var i = 0; i < 7; i++) {\n                      var day = this.schedulerLocalization.firstDay + i;\n                      if (false === viewObject.showWeekends) {\n                        if (i === 0 || i === 6) continue;\n                      }\n                      if (that.rtl) {\n                        day = 6 - day;\n                      }\n                      createtimelineDayColumns(that.getViewStart().addDays(i), this._getDayName(day));\n                    }\n                    break;\n                  case \"timelineMonthView\":\n                    var currentDate = that.getViewStart();\n                    var format = \"auto\";\n                    if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                      format = viewObject.timeRuler.formatString;\n                    }\n                    for (var i = 0; i < 41; i++) {\n                      var day = currentDate.dayOfWeek();\n                      if (false === viewObject.showWeekends) {\n                        if (day === 0 || day === 6) continue;\n                      }\n                      if (that.rtl) {\n                        day = 6 - day;\n                      }\n                      var cellvalue = currentDate.toDate();\n                      var today = new Date();\n                      var isToday = cellvalue.getFullYear() === today.getFullYear() && cellvalue.getMonth() === today.getMonth() && cellvalue.getDate() === today.getDate();\n                      if (format === \"auto\") {\n                        var cellsFormat = \"dd\";\n                        cellvalue = currentDate.toDate();\n                        if (cellvalue.getDate() === 1) cellsFormat = \"MMM dd\";\n                      } else if ($.isFunction(format)) {\n                        var cellsFormat = format(cellvalue);\n                      } else {\n                        cellsFormat = format;\n                      }\n                      if ($.jqx.dataFormat.isDate(cellvalue)) {\n                        cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                      }\n                      currentDate = currentDate.addDays(1);\n                      columns.push({});\n                      that.columns.records[columns.length - 1].text = cellvalue;\n                      that.columns.records[columns.length - 1].today = isToday;\n                    }\n                    break;\n                }\n              }\n              var headerheight = that.columnsHeight;\n              var getcolumnheight = function (datafield, column) {\n                var height = that.columnGroupslevel * that.columnsHeight;\n                height = height - column.level * that.columnsHeight;\n                return height;\n              };\n              var totalOffset = 0;\n              for (var i = 0; i < this.columns.records.length; i++) {\n                var column = this.columns.records[i];\n                if (column.timeColumn) continue;\n                if (that.columnGroups) {\n                  if (that.columnGroups.length) {\n                    headerheight = getcolumnheight(column.datafield, column);\n                  }\n                }\n                var columnContent = column.renderer != null ? column.renderer(that.escape_HTML(column.text), column.align, headerheight) : that._rendercolumnheader(column.text, column.align, headerheight, column);\n                if (columnContent == null) {\n                  columnContent = that._rendercolumnheader(that.escape_HTML(column.text), column.align, headerheight, that);\n                }\n                if (column.renderer != null) columnContent = $(columnContent);\n                $(column.element).html(columnContent);\n                $(column.element).removeClass('today');\n                if (column.today) {\n                  $(column.element).addClass('today');\n                }\n              }\n            },\n            _editDialogLabel: function () {\n              if (this.theme) {\n                return 'jqx-scheduler-edit-dialog-label jqx-scheduler-edit-dialog-label-' + this.theme;\n              }\n              return 'jqx-scheduler-edit-dialog-label';\n            },\n            _editDialogField: function () {\n              if (this.theme) {\n                return 'jqx-scheduler-edit-dialog-field jqx-scheduler-edit-dialog-field-' + this.theme;\n              }\n              return 'jqx-scheduler-edit-dialog-field';\n            },\n            initRepeatPanels: function (_editDialog, content, end) {\n              var that = this;\n              var repeat = $(\"<div></div>\");\n              content.append(repeat);\n              var repeatLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatString + \"</div>\").appendTo(repeat);\n              var repeatField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(repeat);\n              var repeatInput = $(\"<div></div>\").appendTo(repeatField);\n              var repeatPanel = $(\"<div></div>\");\n              content.append(repeatPanel);\n              var bottomPanel = $(\"<div></div>\");\n              repeatPanel.append(bottomPanel);\n              var createBottomPanel = function (ownerPanel, panelType) {\n                var panel = $(\"<div></div>\").appendTo(ownerPanel);\n                var label = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatEndString + \"</div>\").appendTo(panel);\n                var field = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(panel);\n                var neverRadioButton = $(\"<div style='top: 3px; position:relative; float:left;'><span style='margin-left:2px;'>\" + that.schedulerLocalization.editDialogRepeatNeverString + \"</span></div>\").appendTo(field);\n                neverRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"end\" + panelType,\n                  theme: that.theme,\n                  width: 200,\n                  checked: true\n                });\n                that.editDialogFields[panelType].repeatEndNever = neverRadioButton;\n                that.editDialogFields[panelType].repeatEndNeverLabel = label;\n                var label2 = $(\"<div class='\" + that._editDialogLabel() + \"'></div>\").appendTo(panel);\n                var field2 = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(panel);\n                var afterRadioButton = $(\"<div style='top: 3px;  position:relative;  float:left;'><span style='margin-left:2px;'>\" + that.schedulerLocalization.editDialogRepeatAfterString + \"</span></div>\").appendTo(field2);\n                afterRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"end\" + panelType,\n                  theme: that.theme,\n                  width: 60,\n                  checked: false\n                });\n                var afterInput = $(\"<div style='margin-left: 3px; float:left;'></div>\").appendTo(field2);\n                afterInput.jqxNumberInput({\n                  rtl: that.rtl,\n                  decimal: 10,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                var occurrences = $(\"<div style='float: left; top: 3px;  margin-left: 5px; line-height:25px;'>\" + that.schedulerLocalization.editDialogRepeatOccurrencesString + \"</div>\").appendTo(field2);\n                that.editDialogFields[panelType].repeatEndAfter = afterRadioButton;\n                that.editDialogFields[panelType].repeatEndAfterValue = afterInput;\n                that.editDialogFields[panelType].repeatEndAfterLabel = label2;\n                var label3 = $(\"<div class='\" + that._editDialogLabel() + \"'></div>\").appendTo(panel);\n                var field3 = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(panel);\n                var onRadioButton = $(\"<div style='top: 3px; position:relative; float:left;'><span style='margin-left:2px;'>\" + that.schedulerLocalization.editDialogRepeatOnString + \"</span></div>\").appendTo(field3);\n                onRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"end\" + panelType,\n                  theme: that.theme,\n                  width: 60,\n                  checked: false\n                });\n                var onInput = $(\"<div style='margin-left: 3px; float:left;'></div>\").appendTo(field3);\n                onInput.jqxDateTimeInput({\n                  dropDownWidth: 220,\n                  dropDownHeight: 220,\n                  rtl: that.rtl,\n                  localization: that._getDateTimeInputLocalization(),\n                  firstDayOfWeek: that.schedulerLocalization.firstDay,\n                  todayString: that.schedulerLocalization.todayString,\n                  clearString: that.schedulerLocalization.clearString,\n                  value: end,\n                  formatString: that.editDialogDateFormatString,\n                  width: 150,\n                  theme: that.theme\n                });\n                var onInputInstance = onInput.jqxDateTimeInput('getInstance');\n                that.editDialogFields[panelType].repeatEndOn = onRadioButton;\n                that.editDialogFields[panelType].repeatEndOnValue = onInput;\n                that.editDialogFields[panelType].repeatEndOnLabel = label3;\n                return panel;\n              };\n              bottomPanel.detach();\n              that.editDialogFields.repeatEndPanel = {};\n              that.editDialogFields.repeatEndPanelContainer = bottomPanel;\n              createBottomPanel(bottomPanel, \"repeatEndPanel\");\n              var createRepeatPanels = function () {\n                // daily panel\n                var dailyPanel = $(\"<div style='visibility: hidden;'></div>\").appendTo($(document.body));\n                var dailyLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatEveryString + \"</div>\").appendTo(dailyPanel);\n                var dailyField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(dailyPanel);\n                var dailyInput = $(\"<div style='float:left;'></div>\").appendTo(dailyField);\n                dailyInput.jqxNumberInput({\n                  rtl: that.rtl,\n                  decimal: 1,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                var dailyEvery = $(\"<div style='float: left; margin-left: 5px; line-height:25px;'>\" + that.schedulerLocalization.editDialogRepeatEveryDayString + \"</div>\").appendTo(dailyField);\n                that.editDialogFields.daily = {};\n                that.editDialogFields.daily.repeatDayInterval = dailyInput;\n                that.editDialogFields.daily.repeatDayLabel = dailyLabel;\n                //    createBottomPanel(dailyPanel, \"daily\");\n\n                that.editDialogFields.daily.panel = dailyPanel;\n                dailyPanel.detach();\n\n                // weekly panel\n                that.editDialogFields.weekly = {};\n                var weeklyPanel = $(\"<div style='visibility: hidden;'></div>\").appendTo($(document.body));\n                var weeklyLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatEveryString + \"</div>\").appendTo(weeklyPanel);\n                var weeklyField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(weeklyPanel);\n                var weeklyInput = $(\"<div style='float:left;'></div>\").appendTo(weeklyField);\n                weeklyInput.jqxNumberInput({\n                  rtl: that.rtl,\n                  decimal: 1,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                var weeklyEvery = $(\"<div style='float: left; margin-left: 5px; line-height:25px;'>\" + that.schedulerLocalization.editDialogRepeatEveryWeekString + \"</div>\").appendTo(weeklyField);\n                that.editDialogFields.weekly.repeatWeekInterval = weeklyInput;\n                that.editDialogFields.weekly.repeatWeekIntervalLabel = weeklyLabel;\n                var weeklyOnLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatOnString + \"</div>\").appendTo(weeklyPanel);\n                var weeklyOnField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(weeklyPanel);\n                var weeklyOnInput = $(\"<div style='float:left;'></div>\").appendTo(weeklyOnField);\n                that.editDialogFields.weekly.repeatDaysLabel = weeklyOnLabel;\n                that.editDialogFields.weekly.repeatDays = new Array();\n                for (var i = 0; i < 7; i++) {\n                  var dayName = that._getDayName(i, 'firstTwoLetters');\n                  var checkbox = $(\"<div style='position:relative; top: 6px; float:left;'><span style='margin-left:2px;'>\" + dayName + \"</span></div>\");\n                  weeklyOnInput.append(checkbox);\n                  var checked = i == 1 ? true : false;\n                  checkbox.jqxCheckBox({\n                    rtl: that.rtl,\n                    checked: checked,\n                    width: 50,\n                    theme: that.theme\n                  });\n                  that.editDialogFields.weekly.repeatDays.push(checkbox);\n                }\n\n                //   createBottomPanel(weeklyPanel, \"weekly\");\n\n                that.editDialogFields.weekly.panel = weeklyPanel;\n                weeklyPanel.detach();\n\n                // monthly panel\n                that.editDialogFields.monthly = {};\n                var monthlyPanel = $(\"<div style='visibility: hidden;'></div>\").appendTo($(document.body));\n                var monthlyLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatEveryString + \"</div>\").appendTo(monthlyPanel);\n                var monthlyField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(monthlyPanel);\n                var monthlyInput = $(\"<div style='float:left;'></div>\").appendTo(monthlyField);\n                monthlyInput.jqxNumberInput({\n                  rtl: that.rtl,\n                  decimal: 1,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                var monthlyEvery = $(\"<div style='float: left; margin-left: 5px; line-height:25px;'>\" + that.schedulerLocalization.editDialogRepeatEveryMonthString + \"</div>\").appendTo(monthlyField);\n                that.editDialogFields.monthly.repeatMonth = monthlyInput;\n                that.editDialogFields.monthly.repeatMonthLabel = monthlyLabel;\n                var monthlyOnLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatOnString + \"</div>\").appendTo(monthlyPanel);\n                var monthlyOnField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(monthlyPanel);\n                var monthlyOnInput = $(\"<div style='float:left;'></div>\").appendTo(monthlyOnField);\n                var monthlyOnInputRadioButton = $(\"<div style='position:relative; top: 6px; float:left;'><span style='margin-left:2px;'>\" + that.schedulerLocalization.editDialogRepeatEveryMonthDayString + \"</span></div>\").appendTo(monthlyOnInput);\n                monthlyOnInputRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"month\",\n                  width: 60,\n                  checked: true,\n                  theme: that.theme\n                });\n                var monthlyDayNumberInput = $(\"<div style='float:left;'></div>\").appendTo(monthlyOnInput);\n                monthlyDayNumberInput.jqxNumberInput({\n                  rtl: that.rtl,\n                  decimal: 1,\n                  min: 1,\n                  max: 31,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                that.editDialogFields.monthly.repeatMonthDay = monthlyDayNumberInput;\n                that.editDialogFields.monthly.repeatMonthDayBool = monthlyOnInputRadioButton;\n                that.editDialogFields.monthly.repeatMonthDayLabel = monthlyOnLabel;\n                var monthlyFirstLabel = $(\"<div class='\" + that._editDialogLabel() + \"'></div>\").appendTo(monthlyPanel);\n                var monthlyFirstField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(monthlyPanel);\n                var monthlyFirstInput = $(\"<div style='float:left;'></div>\").appendTo(monthlyFirstField);\n                var monthlyFirstInputRadioButton = $(\"<div style='position:relative; top: 6px; float:left;'><span style='margin-left:2px;'></span></div>\").appendTo(monthlyFirstInput);\n                monthlyFirstInputRadioButton.jqxRadioButton({\n                  groupName: \"month\",\n                  width: 25,\n                  checked: false,\n                  theme: that.theme\n                });\n                var monthlyFirstDropDownList = $(\"<div style='float:left;'></div>\").appendTo(monthlyFirstInput);\n                var monthFirstSource = new Array();\n                monthFirstSource.push(that.schedulerLocalization.editDialogRepeatFirstString);\n                monthFirstSource.push(that.schedulerLocalization.editDialogRepeatSecondString);\n                monthFirstSource.push(that.schedulerLocalization.editDialogRepeatThirdString);\n                monthFirstSource.push(that.schedulerLocalization.editDialogRepeatFourthString);\n                monthFirstSource.push(that.schedulerLocalization.editDialogRepeatLastString);\n                monthlyFirstDropDownList.jqxDropDownList({\n                  height: 27,\n                  dropDownWidth: 150,\n                  selectedIndex: 0,\n                  source: monthFirstSource,\n                  autoDropDownHeight: true,\n                  width: 'auto',\n                  theme: that.theme\n                });\n                var monthlyDayDropDownList = $(\"<div style='margin-left: 5px; float:left;'></div>\").appendTo(monthlyFirstInput);\n                var monthDaySource = new Array();\n                for (var i = 0; i < 7; i++) {\n                  var dayName = that._getDayName(i);\n                  monthDaySource.push(dayName);\n                }\n                monthlyDayDropDownList.jqxDropDownList({\n                  height: 27,\n                  rtl: that.rtl,\n                  dropDownWidth: 150,\n                  autoDropDownHeight: true,\n                  selectedIndex: 1,\n                  source: monthDaySource,\n                  width: 'auto',\n                  theme: that.theme\n                });\n                that.editDialogFields.monthly.repeatDayOfWeekBool = monthlyFirstInputRadioButton;\n                that.editDialogFields.monthly.repeatDayOfWeek = monthlyDayDropDownList;\n                that.editDialogFields.monthly.repeatDayOfWeekLabel = monthlyFirstLabel;\n                that.editDialogFields.monthly.repeatDayOfWeekType = monthlyFirstDropDownList;\n                // bottom part.\n                //   createBottomPanel(monthlyPanel, \"monthly\");\n\n                that.editDialogFields.monthly.panel = monthlyPanel;\n                monthlyPanel.detach();\n\n                // yearly panel\n                that.editDialogFields.yearly = {};\n                var yearlyPanel = $(\"<div style='visibility: hidden;'></div>\").appendTo($(document.body));\n                var yearlyLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatEveryString + \"</div>\").appendTo(yearlyPanel);\n                var yearlyField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(yearlyPanel);\n                var yearlyInput = $(\"<div style='float:left;'></div>\").appendTo(yearlyField);\n                yearlyInput.jqxNumberInput({\n                  decimal: 1,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                var yearlyEvery = $(\"<div style='float: left; margin-left: 5px; line-height:25px;'>\" + that.schedulerLocalization.editDialogRepeatEveryYearString + \"</div>\").appendTo(yearlyField);\n                that.editDialogFields.yearly.repeatYear = yearlyInput;\n                that.editDialogFields.yearly.repeatYearLabel = yearlyLabel;\n                var yearlyOnLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogRepeatOnString + \"</div>\").appendTo(yearlyPanel);\n                var yearlyOnField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(yearlyPanel);\n                var yearlyOnInput = $(\"<div style='float:left;'></div>\").appendTo(yearlyOnField);\n                var yearlyOnInputRadioButton = $(\"<div style='position:relative; top: 6px; float:left;'></span></div>\").appendTo(yearlyOnInput);\n                yearlyOnInputRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"year\",\n                  width: 25,\n                  checked: true,\n                  theme: that.theme\n                });\n                that.editDialogFields.yearly.repeatYearBool = yearlyOnInputRadioButton;\n                that.editDialogFields.yearly.repeatYearBoolLabel = yearlyOnLabel;\n                var yearlyOnDayDropDownList = $(\"<div style='float:left;'></div>\").appendTo(yearlyOnInput);\n                var yearMonthSource = new Array();\n                for (var i = 0; i < 12; i++) {\n                  var monthName = that.schedulerLocalization.months.names[i];\n                  yearMonthSource.push(monthName);\n                }\n                yearlyOnDayDropDownList.jqxDropDownList({\n                  height: 27,\n                  selectedIndex: 0,\n                  dropDownWidth: 150,\n                  width: 'auto',\n                  source: yearMonthSource,\n                  theme: that.theme\n                });\n                that.editDialogFields.yearly.repeatYearMonth = yearlyOnDayDropDownList;\n                var yearlyDayNumberInput = $(\"<div style='margin-left: 5px; float:left;'></div>\").appendTo(yearlyOnInput);\n                yearlyDayNumberInput.jqxNumberInput({\n                  height: 25,\n                  decimal: 1,\n                  min: 1,\n                  inputMode: \"simple\",\n                  width: 50,\n                  spinButtons: true,\n                  decimalDigits: 0,\n                  theme: that.theme\n                });\n                that.editDialogFields.yearly.repeatYearDay = yearlyDayNumberInput;\n                var yearlyFirstLabel = $(\"<div class='\" + that._editDialogLabel() + \"'></div>\").appendTo(yearlyPanel);\n                var yearlyFirstField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(yearlyPanel);\n                var yearlyFirstInput = $(\"<div style='float:left;'></div>\").appendTo(yearlyFirstField);\n                var yearlyFirstInputRadioButton = $(\"<div style='position:relative; top: 6px; float:left;'><span style='margin-left:2px;'></span></div>\").appendTo(yearlyFirstInput);\n                yearlyFirstInputRadioButton.jqxRadioButton({\n                  rtl: that.rtl,\n                  groupName: \"year\",\n                  width: 25,\n                  checked: false,\n                  theme: that.theme\n                });\n                var yearlyFirstDropDownList = $(\"<div style='float:left;'></div>\").appendTo(yearlyFirstInput);\n                that.editDialogFields.yearly.repeatDayOfWeekBool = yearlyFirstInputRadioButton;\n                that.editDialogFields.yearly.repeatDayOfWeekType = yearlyFirstDropDownList;\n                that.editDialogFields.yearly.repeatDayOfWeekLabel = yearlyFirstLabel;\n                var yearFirstSource = new Array();\n                yearFirstSource.push(that.schedulerLocalization.editDialogRepeatFirstString);\n                yearFirstSource.push(that.schedulerLocalization.editDialogRepeatSecondString);\n                yearFirstSource.push(that.schedulerLocalization.editDialogRepeatThirdString);\n                yearFirstSource.push(that.schedulerLocalization.editDialogRepeatFourthString);\n                yearFirstSource.push(that.schedulerLocalization.editDialogRepeatLastString);\n                yearlyFirstDropDownList.jqxDropDownList({\n                  height: 27,\n                  dropDownWidth: 150,\n                  selectedIndex: 0,\n                  source: yearFirstSource,\n                  autoDropDownHeight: true,\n                  width: 'auto',\n                  theme: that.theme\n                });\n                var yearlyDayDropDownList = $(\"<div style='margin-left: 5px; float:left;'></div>\").appendTo(yearlyFirstInput);\n                that.editDialogFields.yearly.repeatDayOfWeek = yearlyDayDropDownList;\n                var yearDaySource = new Array();\n                for (var i = 0; i < 7; i++) {\n                  var dayName = that._getDayName(i);\n                  yearDaySource.push(dayName);\n                }\n                yearlyDayDropDownList.jqxDropDownList({\n                  height: 27,\n                  rtl: that.rtl,\n                  dropDownWidth: 150,\n                  selectedIndex: 1,\n                  autoDropDownHeight: true,\n                  source: yearDaySource,\n                  width: 'auto',\n                  theme: that.theme\n                });\n                var yearMonthSource = new Array();\n                var yearlyOfString = $(\"<div style='line-height:25px; height: 25px; margin-left: 5px; float:left;'>\" + that.schedulerLocalization.editDialogRepeatOfString + \"</div>\").appendTo(yearlyFirstInput);\n                var yearlyMonthDropDownList = $(\"<div style='margin-left: 5px; float:left;'></div>\").appendTo(yearlyFirstInput);\n                for (var i = 0; i < 12; i++) {\n                  var monthName = that.schedulerLocalization.months.names[i];\n                  yearMonthSource.push(monthName);\n                }\n                that.editDialogFields.yearly.repeatDayOfWeekMonth = yearlyMonthDropDownList;\n                yearlyMonthDropDownList.jqxDropDownList({\n                  height: 27,\n                  rtl: that.rtl,\n                  dropDownWidth: 150,\n                  selectedIndex: 0,\n                  source: yearMonthSource,\n                  width: 'auto',\n                  theme: that.theme\n                });\n\n                // bottom part.\n                //   createBottomPanel(yearlyPanel, \"yearly\");\n\n                that.editDialogFields.yearly.panel = yearlyPanel;\n                yearlyPanel.detach();\n              };\n              if (that.editAppointment && that.editAppointment.rootAppointment) {\n                createRepeatPanels();\n              } else {\n                createRepeatPanels();\n              }\n              var resetExceptions = $(\"<div></div>\");\n              content.append(resetExceptions);\n              var resetExceptionsLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogExceptionsString + \"</div>\").appendTo(resetExceptions);\n              var resetExceptionsField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(resetExceptions);\n              var resetExceptionsInput = $(\"<div style='position:relative; top:2px;'>\" + that.schedulerLocalization.editDialogResetExceptionsString + \"</div>\").appendTo(resetExceptionsField);\n              resetExceptionsInput.jqxCheckBox({\n                width: '100%',\n                theme: that.theme\n              });\n              resetExceptions.hide();\n              that.editDialogFields.resetExceptions = resetExceptionsInput;\n              that.editDialogFields.resetExceptionsLabel = resetExceptionsLabel;\n              that.editDialogFields.resetExceptionsContainer = resetExceptions;\n              var repeatSource = new Array();\n              repeatSource.push(that.schedulerLocalization.editDialogRepeatNeverString);\n              repeatSource.push(that.schedulerLocalization.editDialogRepeatDailyString);\n              repeatSource.push(that.schedulerLocalization.editDialogRepeatWeeklyString);\n              repeatSource.push(that.schedulerLocalization.editDialogRepeatMonthlyString);\n              repeatSource.push(that.schedulerLocalization.editDialogRepeatYearlyString);\n              repeatInput.jqxDropDownList({\n                rtl: that.rtl,\n                height: 27,\n                width: '100%',\n                autoDropDownHeight: true,\n                theme: that.theme,\n                source: repeatSource,\n                selectedIndex: 0\n              });\n              that.editDialogFields.repeat = repeatInput;\n              that.editDialogFields.repeatLabel = repeatLabel;\n              that.editDialogFields.repeatContainer = repeat;\n              that.editDialogFields.repeatPanel = repeatPanel;\n              this.addHandler(repeatInput, \"change\", function (event) {\n                var index = event.args.item.index;\n                var changePanel = function () {\n                  repeatPanel.children().detach();\n                  switch (index) {\n                    case 0:\n                      break;\n                    // daily\n                    case 1:\n                      that.editDialogFields.daily.panel.css('visibility', 'visible');\n                      repeatPanel.append(that.editDialogFields.daily.panel);\n                      break;\n                    // weekly\n                    case 2:\n                      that.editDialogFields.weekly.panel.css('visibility', 'visible');\n                      repeatPanel.append(that.editDialogFields.weekly.panel);\n                      break;\n                    // monthly\n                    case 3:\n                      that.editDialogFields.monthly.panel.css('visibility', 'visible');\n                      repeatPanel.append(that.editDialogFields.monthly.panel);\n                      break;\n                    // yearly\n                    case 4:\n                      that.editDialogFields.yearly.panel.css('visibility', 'visible');\n                      repeatPanel.append(that.editDialogFields.yearly.panel);\n                      break;\n                  }\n                  repeatPanel.append(bottomPanel);\n                  if (index == 0) {\n                    that.editDialogFields.repeatEndPanelContainer.hide();\n                  } else {\n                    that.editDialogFields.repeatEndPanelContainer.show();\n                  }\n                  if (!that.isTouchDevice()) {\n                    _editDialog.jqxWindow({\n                      height: 150\n                    });\n                    _editDialog.jqxWindow({\n                      height: content[0].scrollHeight + 40\n                    });\n                  }\n                }();\n              });\n            },\n            _initMenu: function () {\n              var that = this;\n              if (this.host.jqxMenu) {\n                if (this.menu) {\n                  if (this._hasOpenedMenu) return;\n                  this.removeHandler(this.menu, 'keydown');\n                  this.removeHandler(this.menu, 'closed');\n                  this.removeHandler(this.menu, 'itemclick');\n                  this.menu.jqxMenu('destroy');\n                  this.menu.removeData();\n                  this.menu.remove();\n                }\n                this.menuitemsarray = new Array();\n                this.menu = $('<div id=\"menu.jqxscheduler' + this.element.id + '\" style=\"white-space: nowrap; z-index: 9999999999999;\"></div>');\n                this.host.append(this.menu);\n                this.addHandler($(window), 'orientationchange.jqxscheduler' + this.element.id, function () {\n                  that.menu.jqxMenu('close');\n                  that._hasOpenedMenu = false;\n                });\n                this.addHandler($(window), 'orientationchanged.jqxscheduler' + this.element.id, function () {\n                  that.menu.jqxMenu('close');\n                  that._hasOpenedMenu = false;\n                });\n                this.removeHandler(this.menu, 'keydown');\n                this.addHandler(this.menu, 'keydown', function (event) {\n                  if (event.keyCode == 27) {\n                    that.menu.jqxMenu('close');\n                    that._hasOpenedMenu = false;\n                    that.focus();\n                  }\n                });\n                this.addHandler(this.menu, 'open', function (event) {\n                  if (that.contextMenuOpen) {\n                    that.contextMenuOpen(that.menu, that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null, event);\n                  }\n                  that._raiseEvent('contextMenuOpen', {\n                    menu: that.menu,\n                    appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                  });\n                  that._removeFeedbackAndStopResize();\n                });\n                this.addHandler(this.menu, 'close', function (event) {\n                  if (that.contextMenuClose) {\n                    that.contextMenuClose(that.menu, that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null, event);\n                  }\n                  that._hasOpenedMenu = false;\n                  if (document.activeElement && document.activeElement.className.indexOf('jqx-menu') >= 0 && !that.menuOpening) {\n                    that.focus();\n                  }\n                  that._raiseEvent('contextMenuClose', {\n                    menu: that.menu,\n                    appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                  });\n                });\n                this.addHandler(this.host, 'contextmenu', function (event) {\n                  event.preventDefault();\n                  event.stopPropagation();\n                  return false;\n                });\n                this.addHandler(this.menu, \"itemclick\", function (event) {\n                  var item = that.menu.jqxMenu('getItem', event.args.id);\n                  that._raiseEvent('contextMenuItemClick', {\n                    item: item,\n                    menu: that.menu,\n                    appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                  });\n                  if (that.contextMenuItemClick) {\n                    var result = that.contextMenuItemClick(that.menu, that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null, event);\n                    if (result == true) {\n                      if (new Date() - that.renderedTime > 500) {\n                        that._renderrows();\n                      }\n                      that.menu.jqxMenu('close');\n                      that._hasOpenedMenu = false;\n                      return;\n                    }\n                  }\n                  if (item.id == \"createAppointment\") {\n                    that._initDialog();\n                    that._openDialog();\n                    if (event.args.clickType == \"keyboard\") {\n                      that.menu.jqxMenu('close');\n                      that._hasOpenedMenu = false;\n                    }\n                  } else if (item.id == \"editAppointment\") {\n                    var jqxAppointment = that.getJQXAppointmentByElement(that.selectedAppointment);\n                    if (!jqxAppointment.readOnly) {\n                      var result = that._initDialog(jqxAppointment);\n                      if (result !== false) {\n                        that._openDialog();\n                      }\n                    }\n                    if (event.args.clickType == \"keyboard\") {\n                      that.menu.jqxMenu('close');\n                      that._hasOpenedMenu = false;\n                    }\n                  } else {\n                    if (event.args.clickType == \"keyboard\") {\n                      that.menu.jqxMenu('close');\n                      that._hasOpenedMenu = false;\n                    }\n                    return true;\n                  }\n                });\n                var source = new Array();\n                source.push({\n                  label: this.schedulerLocalization.contextMenuEditAppointmentString,\n                  id: \"editAppointment\"\n                });\n                source.push({\n                  label: this.schedulerLocalization.contextMenuCreateAppointmentString,\n                  id: \"createAppointment\"\n                });\n                var contextMenuSettings = {\n                  rtl: this.rtl,\n                  keyboardNavigation: true,\n                  source: source,\n                  popupZIndex: 999999,\n                  autoOpenPopup: false,\n                  mode: 'popup',\n                  theme: this.theme,\n                  animationShowDuration: 0,\n                  animationHideDuration: 0,\n                  animationShowDelay: 0\n                };\n                if (that.contextMenuCreate) {\n                  that.contextMenuCreate(that.menu, contextMenuSettings);\n                }\n                that._raiseEvent('contextMenuCreate', {\n                  menu: that.menu,\n                  settings: contextMenuSettings\n                });\n                this.menu.jqxMenu(contextMenuSettings);\n              }\n            },\n            _initDialog: function (appointment, deleteKey) {\n              var that = this;\n              var range = null;\n              if (appointment && appointment.isRecurrentAppointment() && !that.editRecurrenceDialog.jqxWindow('isOpen')) {\n                var coord = that.host.coord();\n                var top = coord.top + that.host.height() / 2 - that.editRecurrenceDialog.height() / 2;\n                var left = coord.left + that.host.width() / 2 - that.editRecurrenceDialog.width() / 2;\n                that.editRecurrenceDialog.find('button:first').focus();\n                setTimeout(function () {\n                  that.editRecurrenceDialog.find('button:first').focus();\n                }, 25);\n                that.editRecurrenceDialog.jqxWindow('move', left, top);\n                that.editRecurrenceDialog.jqxWindow('open');\n                that.editSeries = function (editSeries) {\n                  if (editSeries) {\n                    that._initDialog(appointment.rootAppointment);\n                    that._openDialog();\n                  } else {\n                    that._initDialog(appointment);\n                    that._openDialog();\n                  }\n                };\n                that.overlay.show();\n                that.overlay.width(that.host.width());\n                that.overlay.height(that.host.height());\n                var coord = that.host.coord();\n                that.overlay.offset(coord);\n                if (!that._editDialog) {\n                  that._initDialog();\n                }\n                return false;\n              }\n              that.editAppointment = appointment;\n              if (!appointment) {\n                range = that.getSelection();\n                if (!range) {\n                  that.focus();\n                  if (!that.focusedCell) {\n                    that._updateFocusedCell();\n                  }\n                  if (that.focusedCell) {\n                    that.focusedCell.setAttribute('data-selected', \"true\");\n                    that._lastSelectedCell = that.focusedCell;\n                    that._updateCellsSelection(that.focusedCell);\n                    range = that.getSelection();\n                  }\n                }\n              }\n              if (range || appointment) {\n                var start = range ? range.from : appointment.from;\n                var end = range ? range.to : appointment.to;\n                var selectedCells = that.getSelectedCells();\n                if (selectedCells.length > 0) {\n                  var hasEndDate = selectedCells[selectedCells.length - 1].getAttribute('data-end-date');\n                  if (hasEndDate) {\n                    end = $.jqx.scheduler.utilities.getEndOfDay(end);\n                  }\n                }\n                that._editStart = start;\n                that._editEnd = end;\n              }\n              if (that.editDialogFields && that.editDialogFields.resourceContainer && that._resources.length > 0) {\n                var resources = new Array();\n                for (var i = 0; i < that._resources.length; i++) {\n                  resources.push(that._resources[i]);\n                }\n                var dropDownHeight = true;\n                if (resources.length > 10) dropDownHeight = false;\n                that.editDialogFields.resource.jqxDropDownList({\n                  source: resources,\n                  selectedIndex: 0,\n                  autoDropDownHeight: dropDownHeight\n                });\n                if (!appointment) {\n                  that.editDialogFields.resource.val(range.resourceId);\n                }\n              }\n              if (that.editDialogFields && that.editDialogFields.repeatContainer) {\n                if (appointment && appointment.rootAppointment) {\n                  that.editDialogFields.repeatContainer.hide();\n                  that.editDialogFields.repeatPanel.hide();\n                } else {\n                  that.editDialogFields.repeatContainer.show();\n                  that.editDialogFields.repeatPanel.show();\n                }\n              }\n              if (that._editDialog == null) {\n                that._editDialog = null;\n                var title = appointment == null ? that.schedulerLocalization.editDialogCreateTitleString : that.schedulerLocalization.editDialogTitleString;\n                var _editDialog = $(\"<div><div>\" + title + \"</div><div id='dialog\" + this.element.id + \"'></div></div>\");\n                $(_editDialog).jqxWindow({\n                  rtl: that.rtl,\n                  autoFocus: false,\n                  autoOpen: false,\n                  animationType: \"none\",\n                  theme: that.theme,\n                  width: 540,\n                  maxHeight: 800,\n                  minHeight: 110,\n                  resizable: false,\n                  initContent: function () {\n                    that.editDialogFields = {};\n                    if (start == null && end == null && that._editStart && that._editEnd) {\n                      start = that._editStart;\n                      end = that._editEnd;\n                    }\n                    _editDialog.jqxWindow('setTitle', title);\n                    var content = $(_editDialog.children()[1]);\n                    var subject = $(\"<div></div>\");\n                    content.append(subject);\n                    var subjectLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogSubjectString + \"</div>\").appendTo(subject);\n                    var subjectField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(subject);\n                    var subjectInput = $(\"<input type='text'/>\").appendTo(subjectField);\n                    subjectInput.jqxInput({\n                      height: 25,\n                      rtl: that.rtl,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    subjectInput.css('box-sizing', 'border-box');\n                    that.editDialogFields.subject = subjectInput;\n                    that.editDialogFields.subjectLabel = subjectLabel;\n                    that.editDialogFields.subjectContainer = subject;\n                    var location = $(\"<div></div>\");\n                    content.append(location);\n                    var locationLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogLocationString + \"</div>\").appendTo(location);\n                    var locationField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(location);\n                    var locationInput = $(\"<input type='text'/>\").appendTo(locationField);\n                    locationInput.jqxInput({\n                      height: 25,\n                      rtl: that.rtl,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    locationInput.css('box-sizing', 'border-box');\n                    that.editDialogFields.location = locationInput;\n                    that.editDialogFields.locationLabel = locationLabel;\n                    that.editDialogFields.locationContainer = location;\n                    var from = $(\"<div></div>\");\n                    content.append(from);\n                    var fromLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogFromString + \"</div>\").appendTo(from);\n                    var fromField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(from);\n                    var fromInput = $(\"<div></div>\").appendTo(fromField);\n                    var fromInputDate = null;\n                    if (!start) {\n                      var date = new Date();\n                      date.setHours(9, 0, 0);\n                      fromInputDate = date;\n                      start = new $.jqx.date(date);\n                    } else fromInputDate = start.toDate();\n                    fromInput.jqxDateTimeInput({\n                      height: 27,\n                      dropDownWidth: 220,\n                      dropDownHeight: 220,\n                      rtl: that.rtl,\n                      localization: that._getDateTimeInputLocalization(),\n                      firstDayOfWeek: that.schedulerLocalization.firstDay,\n                      todayString: that.schedulerLocalization.todayString,\n                      clearString: that.schedulerLocalization.clearString,\n                      value: fromInputDate,\n                      formatString: that.editDialogDateTimeFormatString,\n                      width: '100%',\n                      showTimeButton: true,\n                      theme: that.theme\n                    });\n                    that.editDialogFields.from = fromInput;\n                    that.editDialogFields.fromLabel = fromLabel;\n                    that.editDialogFields.fromContainer = from;\n                    var to = $(\"<div></div>\");\n                    content.append(to);\n                    var toLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogToString + \"</div>\").appendTo(to);\n                    var toField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(to);\n                    var toInput = $(\"<div></div>\").appendTo(toField);\n                    var toInputDate = null;\n                    if (!end) {\n                      var date = new Date();\n                      date.setHours(10, 0, 0);\n                      toInputDate = date;\n                      end = new $.jqx.date(date);\n                    } else toInputDate = end.toDate();\n                    toInput.jqxDateTimeInput({\n                      height: 27,\n                      dropDownWidth: 220,\n                      dropDownHeight: 220,\n                      rtl: that.rtl,\n                      localization: that._getDateTimeInputLocalization(),\n                      firstDayOfWeek: that.schedulerLocalization.firstDay,\n                      todayString: that.schedulerLocalization.todayString,\n                      clearString: that.schedulerLocalization.clearString,\n                      value: toInputDate,\n                      formatString: that.editDialogDateTimeFormatString,\n                      width: '100%',\n                      showTimeButton: true,\n                      theme: that.theme\n                    });\n                    that.editDialogFields.to = toInput;\n                    that.editDialogFields.toLabel = toLabel;\n                    that.editDialogFields.toContainer = to;\n                    that._changeFromUser = true;\n                    that.addHandler(fromInput, \"change\", function (event) {\n                      if (!that._changeFromUser) return;\n                      var args = event.args;\n                      var from = event.args.oldValue;\n                      var to = toInput.val('date');\n                      var milliseconds = new $.jqx.date(to) - new $.jqx.date(from);\n                      if (milliseconds > 0) {\n                        var ticks = milliseconds * 10000;\n                        var duration = $.jqx.timeSpan(ticks);\n                        var newTo = new $.jqx.date(event.args.newValue).add(duration);\n                        toInput.val(newTo.toDate());\n                      }\n                    });\n                    that.addHandler(toInput, \"change\", function (event) {\n                      if (!that._changeFromUser) return;\n                      var args = event.args;\n                      var from = event.args.oldValue;\n                      var to = toInput.val('date');\n                      if (fromInput.val('date') >= to) {\n                        toInput.val(from);\n                      }\n                    });\n                    var allDay = $(\"<div></div>\");\n                    content.append(allDay);\n                    var allDayLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogAllDayString + \"</div>\").appendTo(allDay);\n                    var allDayField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(allDay);\n                    var allDayInput = $(\"<div style='top: 8px; position:relative;'></div>\").appendTo(allDayField);\n                    allDayInput.jqxCheckBox({\n                      rtl: that.rtl,\n                      width: 25,\n                      theme: that.theme\n                    });\n                    that.editDialogFields.allDay = allDayInput;\n                    that.editDialogFields.allDayLabel = allDayLabel;\n                    that.editDialogFields.allDayContainer = allDay;\n                    that.addHandler(allDay, \"change\", function (event) {\n                      if (event.args.checked) {\n                        toInput.jqxDateTimeInput({\n                          showTimeButton: false,\n                          formatString: that.editDialogDateFormatString\n                        });\n                        fromInput.jqxDateTimeInput({\n                          showTimeButton: false,\n                          formatString: that.editDialogDateFormatString\n                        });\n                      } else {\n                        toInput.jqxDateTimeInput({\n                          showTimeButton: true,\n                          formatString: that.editDialogDateTimeFormatString\n                        });\n                        fromInput.jqxDateTimeInput({\n                          showTimeButton: true,\n                          formatString: that.editDialogDateTimeFormatString\n                        });\n                      }\n                    });\n                    if ($.jqx.scheduler.utilities.getStartOfDay(start).equals(start) && $.jqx.scheduler.utilities.getEndOfDay(end).equals(end)) {\n                      that.editDialogFields.allDay.val(true);\n                    }\n                    if (that._views[that._view].type.indexOf(\"month\") >= 0 || start && start.equals(end) || end && end.equals($.jqx.scheduler.utilities.getEndOfDay(end)) && start && start.equals($.jqx.scheduler.utilities.getStartOfDay(start))) {\n                      that.editDialogFields.allDay.val(true);\n                    }\n                    var timeZone = $(\"<div></div>\");\n                    content.append(timeZone);\n                    var timeZoneLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogTimeZoneString + \"</div>\").appendTo(timeZone);\n                    var timeZoneField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(timeZone);\n                    var timeZoneInput = $(\"<div></div>\").appendTo(timeZoneField);\n                    var timeZones = new Array();\n                    timeZones.push({\n                      displayName: that.schedulerLocalization.editDialogSelectTimeZoneString,\n                      id: null\n                    });\n                    timeZones = timeZones.concat(that.timeZones);\n                    for (var i = 0; i < timeZones.length; i++) {\n                      var tz = timeZones[i];\n                      var nameIndex = tz.displayName.indexOf(')');\n                      if (nameIndex >= 0) {\n                        var searchName = tz.displayName.substring(2 + nameIndex);\n                      } else {\n                        var searchName = tz.displayName;\n                      }\n                      tz.searchName = searchName;\n                    }\n                    timeZoneInput.jqxDropDownList({\n                      height: 27,\n                      rtl: that.rtl,\n                      placeHolder: that.schedulerLocalization.editDialogSelectTimeZoneString,\n                      width: '100%',\n                      theme: that.theme,\n                      searchMember: 'searchName',\n                      source: timeZones,\n                      displayMember: 'displayName',\n                      valueMember: 'id'\n                    });\n                    that.editDialogFields.timeZone = timeZoneInput;\n                    that.editDialogFields.timeZoneLabel = timeZoneLabel;\n                    that.editDialogFields.timeZoneContainer = timeZone;\n                    that.initRepeatPanels(_editDialog, content, end.toDate());\n                    if (that.editDialogFields && that.editDialogFields.repeatContainer) {\n                      if (that.editAppointment && that.editAppointment.rootAppointment) {\n                        that.editDialogFields.repeatContainer.hide();\n                        that.editDialogFields.repeatPanel.hide();\n                      } else {\n                        that.editDialogFields.repeatContainer.show();\n                        that.editDialogFields.repeatPanel.show();\n                      }\n                    }\n                    // description\n                    var description = $(\"<div></div>\");\n                    content.append(description);\n                    var descriptionLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogDescriptionString + \"</div>\").appendTo(description);\n                    var descriptionField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(description);\n                    var descriptionInput = $(\"<textarea type='text' resizable='off' style='position:relative; top: 3px; padding:3px;'></textarea>\").appendTo(descriptionField);\n                    descriptionInput.jqxInput({\n                      rtl: that.rtl,\n                      height: 40,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    descriptionInput.css('box-sizing', 'border-box');\n                    that.editDialogFields.description = descriptionInput;\n                    that.editDialogFields.descriptionLabel = descriptionLabel;\n                    that.editDialogFields.descriptionContainer = description;\n\n                    // color\n                    var color = $(\"<div></div>\");\n                    content.append(color);\n                    var colorLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogColorString + \"</div>\").appendTo(color);\n                    var colorField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(color);\n                    var colorInput = $(\"<div></div>\").appendTo(colorField);\n                    var itemTemplate = function (index) {\n                      if (index == -1) return \"\";\n                      var color = that.colors[index];\n                      var html = \"\";\n                      var html = \"\";\n                      html += \"<div style='margin-top: 1px; float: left; border-radius: 3px; width: 96%; height: 20px; border: none; background:\" + color + \"; margin-left: 2%;'></div>\";\n                      return html;\n                    };\n                    var selectionTemplate = function (element, index) {\n                      if (index < 0) {\n                        element.css('top', '4px');\n                        element.css('position', 'relative');\n                        return element[0].outerHTML;\n                      }\n                      var color = that.colors[index];\n                      var html = \"\";\n                      html += \"<div style='margin-top: 2px; float: left; border-radius: 3px; width: 96%; height: 20px; border: none; background:\" + color + \"; margin-left: 2%;'></div>\";\n                      return html;\n                    };\n                    colorInput.jqxDropDownList({\n                      height: 27,\n                      rtl: that.rtl,\n                      selectedIndex: -1,\n                      placeHolder: that.schedulerLocalization.editDialogColorPlaceHolderString,\n                      selectionRenderer: selectionTemplate,\n                      renderer: itemTemplate,\n                      source: that.colors,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    that.editDialogFields.color = colorInput;\n                    that.editDialogFields.colorLabel = colorLabel;\n                    that.editDialogFields.colorContainer = color;\n\n                    // status\n                    var status = $(\"<div></div>\");\n                    content.append(status);\n                    var statusLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogStatusString + \"</div>\").appendTo(status);\n                    var statusField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(status);\n                    var statusInput = $(\"<div></div>\").appendTo(statusField);\n                    statusInput.jqxDropDownList({\n                      height: 27,\n                      rtl: that.rtl,\n                      selectedIndex: 2,\n                      autoDropDownHeight: true,\n                      source: that.schedulerLocalization.editDialogStatuses,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    that.editDialogFields.status = statusInput;\n                    that.editDialogFields.statusLabel = statusLabel;\n                    that.editDialogFields.statusContainer = status;\n\n                    // resource\n                    var resource = $(\"<div></div>\");\n                    content.append(resource);\n                    var resourceLabel = $(\"<div class='\" + that._editDialogLabel() + \"'>\" + that.schedulerLocalization.editDialogResourceIdString + \"</div>\").appendTo(resource);\n                    var resourceField = $(\"<div class='\" + that._editDialogField() + \"'></div>\").appendTo(resource);\n                    var resourceInput = $(\"<div></div>\").appendTo(resourceField);\n                    var resources = new Array();\n                    for (var i = 0; i < that._resources.length; i++) {\n                      resources.push(that._resources[i]);\n                    }\n                    var dropDownHeight = true;\n                    if (resources.length > 10) dropDownHeight = false;\n                    resourceInput.jqxDropDownList({\n                      height: 27,\n                      rtl: that.rtl,\n                      source: resources,\n                      selectedIndex: 0,\n                      autoDropDownHeight: dropDownHeight,\n                      width: '100%',\n                      theme: that.theme\n                    });\n                    that.editDialogFields.resource = resourceInput;\n                    that.editDialogFields.resourceLabel = resourceLabel;\n                    that.editDialogFields.resourceContainer = resource;\n                    if (resources.length == 0) {\n                      resource.hide();\n                    }\n                    if (!appointment && range) {\n                      that.editDialogFields.resource.val(range.resourceId);\n                    }\n                    var buttons = $(\"<div></div>\");\n                    content.append(buttons);\n                    var buttonsField = $(\"<div style='width:100%;' class='\" + that._editDialogField() + \"'></div>\").appendTo(buttons);\n                    var cancelButton = $(\"<button style='margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogCancelString + \"</button>\").appendTo(buttonsField);\n                    var deleteButton = $(\"<button style='margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogDeleteString + \"</button>\").appendTo(buttonsField);\n                    var deleteSeriesButton = $(\"<button style='display: none; margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogRepeatDeleteSeriesString + \"</button>\").appendTo(buttonsField);\n                    var deleteExceptionsButton = $(\"<button style='display: none; margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogRepeatDeleteString + \"</button>\").appendTo(buttonsField);\n                    var saveButton = $(\"<button style='margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogSaveString + \"</button>\").appendTo(buttonsField);\n                    var saveSeriesButton = $(\"<button style='display: none; margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogRepeatSaveSeriesString + \"</button>\").appendTo(buttonsField);\n                    var saveOccurrenceButton = $(\"<button style='display: none; margin-left: 5px; float:right;'>\" + that.schedulerLocalization.editDialogRepeatSaveString + \"</button>\").appendTo(buttonsField);\n                    var buttonHeight = 30;\n                    if (that.isTouchDevice()) {\n                      buttonHeight = null;\n                    }\n                    deleteButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    deleteSeriesButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    deleteExceptionsButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    saveButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    cancelButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    saveSeriesButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    saveOccurrenceButton.jqxButton({\n                      rtl: that.rtl,\n                      theme: that.theme\n                    });\n                    saveSeriesButton.hide();\n                    saveOccurrenceButton.hide();\n                    saveButton.addClass('primary');\n                    saveOccurrenceButton.addClass('primary');\n                    saveSeriesButton.addClass('primary');\n                    deleteButton.addClass('jqx-danger');\n                    that.editDialogFields.saveOccurrenceButton = saveOccurrenceButton;\n                    that.editDialogFields.saveSeriesButton = saveSeriesButton;\n                    that.editDialogFields.saveButton = saveButton;\n                    that.editDialogFields.cancelButton = cancelButton;\n                    that.editDialogFields.deleteButton = deleteButton;\n                    that.editDialogFields.deleteSeriesButton = deleteSeriesButton;\n                    that.editDialogFields.deleteExceptionsButton = deleteExceptionsButton;\n                    that.editDialogFields.buttons = buttonsField;\n                    that.addHandler(deleteButton, \"click\", function () {\n                      _editDialog.jqxWindow(\"close\");\n                      that.overlay.hide();\n                      that._deleteAppointment(that.editAppointment);\n                    });\n                    that.addHandler(cancelButton, \"click\", function () {\n                      _editDialog.jqxWindow(\"close\");\n                      that.overlay.hide();\n                    });\n                    that.addHandler(saveOccurrenceButton, \"click\", function () {\n                      if (!that.editAppointment.isException()) {\n                        if (that.editAppointment.rootAppointment != null) {\n                          that.editAppointment.rootAppointment.exceptions.push(that.editAppointment);\n                          that.editAppointment.rootAppointment.recurrenceException.push(that.editAppointment.occurrenceFrom);\n                        } else {\n                          that.editAppointment.exceptions.push(that.editAppointment);\n                          that.editAppointment.recurrenceException.push(that.editAppointment.occurrenceFrom);\n                        }\n                      } else {\n                        var exceptions = that.editAppointment.rootAppointment ? that.editAppointment.rootAppointment.exceptions : that.editAppointment.exceptions;\n                        for (var i = 0; i < exceptions.length; i++) {\n                          if (exceptions[i].occurrenceFrom.equals(that.editAppointment.occurrenceFrom)) {\n                            exceptions[i] = that.editAppointment;\n                            break;\n                          }\n                        }\n                      }\n                      var result = that._setAppointmentPropertiesFromDialog(that.editAppointment, \"occurrence\");\n                      if (!result) return;\n                      that.changedAppointments[that.editAppointment.id] = {\n                        type: \"Update\",\n                        appointment: that.editAppointment.boundAppointment\n                      };\n                      that._raiseEvent('appointmentChange', {\n                        appointment: that.editAppointment.boundAppointment\n                      });\n                      that._renderrows();\n                      _editDialog.jqxWindow(\"close\");\n                      that.overlay.hide();\n                    });\n                    that.addHandler(saveSeriesButton, \"click\", function () {\n                      var appointment = that.editAppointment;\n                      if (appointment.rootAppointment) {\n                        appointment = appointment.rootAppointment;\n                      }\n                      var result = that._setAppointmentPropertiesFromDialog(appointment, \"series\");\n                      if (!result) return;\n                      that.changedAppointments[appointment.id] = {\n                        type: \"Update\",\n                        appointment: appointment.boundAppointment\n                      };\n                      that._raiseEvent('appointmentChange', {\n                        appointment: appointment.boundAppointment\n                      });\n                      that._renderrows();\n                      _editDialog.jqxWindow(\"close\");\n                      that.overlay.hide();\n                    });\n                    that.addHandler(saveButton, \"click\", function () {\n                      var result = true;\n                      if (that.editAppointment == null) {\n                        var uiappointment = new $.jqx.scheduler.appointment();\n                        result = that._setAppointmentPropertiesFromDialog(uiappointment, \"none\");\n                        if (result) {\n                          that.addAppointment(uiappointment);\n                        }\n                      } else {\n                        if (that.editAppointment.rootAppointment) {\n                          saveOccurrenceButton.trigger('click');\n                          result = false;\n                        } else if (that.editAppointment.isRecurrentAppointment()) {\n                          saveSeriesButton.trigger('click');\n                          result = false;\n                        } else {\n                          result = that._setAppointmentPropertiesFromDialog(that.editAppointment, \"none\");\n                          if (result) {\n                            that.changedAppointments[that.editAppointment.id] = {\n                              type: \"Update\",\n                              appointment: that.editAppointment ? that.editAppointment.boundAppointment : null\n                            };\n                            that._raiseEvent('appointmentChange', {\n                              appointment: that.editAppointment.boundAppointment\n                            });\n                            that._renderrows();\n                          }\n                        }\n                      }\n                      if (result) {\n                        _editDialog.jqxWindow(\"close\");\n                        that.overlay.hide();\n                      }\n                    });\n                    that.addHandler(_editDialog, \"close\", function (event) {\n                      that.overlay.hide();\n                      that.focus();\n                      if (that.editDialogClose) {\n                        that.editDialogClose(_editDialog, that.editDialogFields, that.editAppointment ? that.editAppointment.boundAppointment : null);\n                      }\n                      that._raiseEvent('editDialogClose', {\n                        dialog: _editDialog,\n                        fields: that.editDialogFields,\n                        appointment: that.editAppointment ? that.editAppointment.boundAppointment : null\n                      });\n                    });\n                    if (that.editDialogCreate) {\n                      that.editDialogCreate(_editDialog, that.editDialogFields, that.editAppointment);\n                    }\n                    that._raiseEvent('editDialogCreate', {\n                      dialog: _editDialog,\n                      fields: that.editDialogFields,\n                      appointment: that.editAppointment ? that.editAppointment.boundAppointment : null\n                    });\n                    _editDialog.jqxWindow({\n                      height: content[0].scrollHeight + 40\n                    });\n                  }\n                });\n                that._editDialog = _editDialog;\n              }\n              if (!that.dialogOpenings) {\n                that.dialogOpenings = 0;\n              }\n              that.removeHandler(that._editDialog, \"open\");\n              that.addHandler(that._editDialog, \"open\", function (event) {\n                if (that.editDialogOpen && that.editDialogFields) {\n                  var result = that.editDialogOpen(that._editDialog, that.editDialogFields, that.editAppointment ? that.editAppointment.boundAppointment : null);\n                  if (result == true) return;\n                }\n                if (that.rtl) {\n                  that._editDialog.find(\".jqx-scheduler-edit-dialog-label\").addClass(that.toThemeProperty('jqx-scheduler-edit-dialog-label-rtl'));\n                  that._editDialog.find(\".jqx-scheduler-edit-dialog-field\").addClass(that.toThemeProperty('jqx-scheduler-edit-dialog-field-rtl'));\n                  that.editDialogFields.saveOccurrenceButton.css('float', 'left');\n                  that.editDialogFields.saveSeriesButton.css('float', 'left');\n                  that.editDialogFields.saveButton.css('float', 'left');\n                  that.editDialogFields.cancelButton.css('float', 'left');\n                  that.editDialogFields.deleteButton.css('float', 'left');\n                  that.editDialogFields.deleteSeriesButton.css('float', 'left');\n                  that.editDialogFields.deleteExceptionsButton.css('float', 'left');\n                  that.editDialogFields.buttons.css('width', 'auto');\n                  that.editDialogFields.allDay.css('float', 'right');\n                }\n                setTimeout(function () {\n                  var editApp = that.editAppointment ? that.editAppointment.boundAppointment : null;\n                  if (that.editAppointment && that.editAppointment.rootAppointment) {\n                    editApp = that.editAppointment.rootAppointment.boundAppointment;\n                  }\n                  that._raiseEvent('editDialogOpen', {\n                    dialog: that._editDialog,\n                    fields: that.editDialogFields,\n                    appointment: editApp\n                  });\n                });\n                var focus = function () {\n                  setTimeout(function () {\n                    if (!deleteKey) {\n                      that.editDialogFields.subject.focus();\n                      that.editDialogFields.subject.select();\n                    } else {\n                      that.editDialogFields.deleteButton.focus();\n                    }\n                  }, 1);\n                };\n                var title = that.editAppointment == null ? that.schedulerLocalization.editDialogCreateTitleString : that.schedulerLocalization.editDialogTitleString;\n                that._editDialog.jqxWindow({\n                  title: title\n                });\n                if (0 == that.dialogOpenings && !appointment) {\n                  that.dialogOpenings++;\n                  if (!that.isTouchDevice()) {\n                    that._editDialog.jqxWindow({\n                      height: 150\n                    });\n                    that._editDialog.jqxWindow({\n                      height: $(that._editDialog.children())[1].scrollHeight + 40\n                    });\n                  }\n                  that.editDialogFields.deleteButton.hide();\n                  focus();\n                  return;\n                }\n                if (that.editDialogFields) {\n                  that.editDialogFields.subject.val(\"\");\n                  that.editDialogFields.location.val(\"\");\n                  focus();\n                  that.editDialogFields.resetExceptions.val(false);\n                  that.editDialogFields.description.val(\"\");\n                  if (!appointment) {\n                    that.editDialogFields.deleteButton.hide();\n                  }\n                  if (appointment) {\n                    that.dialogOpenings++;\n                    that.editDialogFields.deleteButton.show();\n                    that.editDialogFields.subject.val(appointment.subject);\n                    that.editDialogFields.location.val(appointment.location);\n                    that.editDialogFields.description.val(appointment.description);\n                    that.editDialogFields.timeZone.val(appointment.timeZone);\n                    if (that.colors.indexOf(appointment.borderColor) >= 0) {\n                      that.editDialogFields.color.val(appointment.borderColor);\n                    } else that.editDialogFields.color.jqxDropDownList('clearSelection');\n                    that.editDialogFields.allDay.val(appointment.allDay);\n                    that.editDialogFields.resource.val(appointment.resourceId);\n                    that.editDialogFields.status.val(appointment.status);\n                    if (appointment.timeZone) {\n                      appointment.from = appointment.from.toTimeZone(appointment.timeZone);\n                      appointment.to = appointment.to.toTimeZone(appointment.timeZone);\n                    }\n                    start = appointment.from;\n                    end = appointment.to;\n                    if ($.jqx.scheduler.utilities.getStartOfDay(start).equals(start) && $.jqx.scheduler.utilities.getEndOfDay(end).equals(end)) {\n                      that.editDialogFields.allDay.val(true);\n                    }\n                    that._setAppointmentPropertiesToDialog(appointment, start, end, range ? range.resourceId : null);\n                  } else {\n                    that.editDialogFields.saveButton.show();\n                    that._setAppointmentPropertiesToDialog(null, start, end, range ? range.resourceId : null);\n                  }\n                  if (start && end) {\n                    that._changeFromUser = false;\n                    that.editDialogFields.from.val(start.toDate());\n                    that.editDialogFields.to.val(end.toDate());\n                    that._changeFromUser = true;\n                  }\n                  if (!that.isTouchDevice()) {\n                    that._editDialog.jqxWindow({\n                      height: 150\n                    });\n                    that._editDialog.jqxWindow({\n                      height: $(that._editDialog.children())[1].scrollHeight + 40\n                    });\n                  }\n                }\n              });\n              that.removeHandler(that._editDialog, \"keydown\");\n              that.addHandler(that._editDialog, \"keydown\", function (event) {\n                if (that.editDialogKeyDown) {\n                  var result = that.editDialogKeyDown(_editDialog, that.editDialogFields, that.editAppointment, event);\n                  if (result != undefined) return result;\n                }\n                if (event.keyCode == 13) {\n                  if ($(document.activeElement).ischildof(that._editDialog)) {\n                    if (document.activeElement.nodeName.toLowerCase() == \"button\") return true;\n                    if (appointment) {\n                      if (appointment.isException() || appointment.rootAppointment) {\n                        that.editDialogFields.saveOccurrenceButton.trigger('click');\n                      } else if (appointment.isRecurrentAppointment()) {\n                        that.editDialogFields.saveSeriesButton.trigger('click');\n                      } else {\n                        that.editDialogFields.saveButton.trigger('click');\n                      }\n                    } else {\n                      that.editDialogFields.saveButton.trigger('click');\n                    }\n                  }\n                } else if (event.keyCode == 27) {\n                  that.editDialogFields.cancelButton.trigger('click');\n                }\n              });\n            },\n            openMenu: function (menuLeft, menuTop) {\n              var that = this;\n              if (!that.menu) {\n                that._initMenu();\n              }\n              var view = that._views[that._view].type;\n              //   if (view == \"agendaView\")\n              //       return;\n\n              if (that.contextMenu && that.menu) {\n                if (!that.selectedAppointment) {\n                  that.menu.jqxMenu('hideItem', 'editAppointment');\n                } else {\n                  that.menu.jqxMenu('showItem', 'editAppointment');\n                }\n                if (arguments.length < 2) {\n                  if (that.selectedAppointment) {\n                    var coord = that.selectedAppointment.coord();\n                    menuLeft = coord.left;\n                    menuTop = coord.top;\n                  } else if (that.focusedCell) {\n                    var coord = $(that.focusedCell).coord();\n                  }\n                  menuLeft = coord.left;\n                  menuTop = coord.top;\n                }\n                that.menu.jqxMenu('open', menuLeft, menuTop);\n                that._hasOpenedMenu = true;\n              }\n            },\n            closeMenu: function () {\n              var that = this;\n              if (that.contextMenu && that.menu) {\n                setTimeout(function () {\n                  that.menu.jqxMenu('close');\n                });\n              }\n            },\n            closeDialog: function () {\n              var that = this;\n              that._editDialog.jqxWindow('close');\n            },\n            openDialog: function (dialogLeft, dialogTop) {\n              var that = this;\n              var view = that._views[that._view].type;\n              //     if (view == \"agendaView\")\n              //         return;\n\n              if (that.selectedJQXAppointment) {\n                var result = that._initDialog(that.selectedJQXAppointment);\n                if (result !== false) {\n                  that._openDialog(dialogLeft, dialogTop);\n                }\n              } else {\n                if (that.getSelection() == null) {\n                  that.focus();\n                  that.focusedCell.setAttribute('data-selected', \"true\");\n                  that._lastSelectedCell = that.focusedCell;\n                  that._updateCellsSelection(that.focusedCell);\n                }\n                that._initDialog();\n                that._openDialog(dialogLeft, dialogTop);\n              }\n            },\n            _openDialog: function (dialogLeft, dialogTop) {\n              var that = this;\n              var view = that._views[that._view].type;\n              if (!that.editDialog) {\n                return;\n              }\n              var coord = that.host.coord();\n              that.overlay.show();\n              that.overlay.css('z-index', 9999999);\n              that.overlay.width(that.host.width());\n              that.overlay.height(that.host.height());\n              that.overlay.offset(coord);\n              var touchDevice = that.isTouchDevice();\n              if (touchDevice) {\n                that._editDialog.jqxWindow('move', coord.left, coord.top);\n                that._editDialog.jqxWindow({\n                  draggable: false,\n                  maxWidth: that.host.width(),\n                  maxHeight: that.host.height()\n                });\n                that._editDialog.jqxWindow({\n                  width: that.host.width(),\n                  height: that.host.height()\n                });\n                that._editDialog.jqxWindow('open');\n                that._editDialog.jqxWindow('move', coord.left, coord.top);\n              } else {\n                if (dialogLeft != undefined && dialogTop != undefined) {\n                  that._editDialog.jqxWindow('move', dialogLeft, dialogTop);\n                  that._editDialog.jqxWindow('open');\n                } else {\n                  var dialogHeight = that._editDialog.height();\n                  if (dialogHeight < 400) dialogHeight = 400;\n                  var top = coord.top + that.host.height() / 2 - dialogHeight / 2;\n                  var left = coord.left + that.host.width() / 2 - that._editDialog.width() / 2;\n                  that._editDialog.jqxWindow('move', left, top);\n                  that._editDialog.jqxWindow('open');\n                }\n              }\n              setTimeout(function () {\n                that.overlay.css('z-index', 999);\n              }, 50);\n            },\n            _setAppointmentPropertiesFromDialog: function (appointment, type) {\n              var that = this;\n              var setAppointmentProperties = function (appointment) {\n                var view = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                var from = that.editDialogFields.from.val('date');\n                var to = that.editDialogFields.to.val('date');\n                if (from > to) {\n                  that.editDialogFields.from.jqxDateTimeInput('focus');\n                  return false;\n                }\n                if (from == to) {\n                  if (view.indexOf(\"month\") >= 0) {\n                    return true;\n                  }\n                  return false;\n                }\n                appointment.resourceId = that.editDialogFields.resource.val();\n                if (that.editDialogFields.resourceContainer.css('display') == \"none\") {\n                  appointment.resourceId = \"\";\n                }\n                appointment.description = that.editDialogFields.description.val();\n                appointment.allDay = that.editDialogFields.allDay.val();\n                appointment.status = that.editDialogFields.status.val();\n                appointment.location = that.editDialogFields.location.val();\n                appointment.timeZone = that.editDialogFields.timeZone.val();\n                if (appointment.timeZone == \"\" && that.timeZone != \"\") {\n                  appointment.timeZone = that.timeZone;\n                }\n                appointment.from = new $.jqx.date(from, appointment.timeZone);\n                appointment.to = new $.jqx.date(to, appointment.timeZone);\n                if (that.timeZone) {\n                  appointment.from = appointment.from.toTimeZone(that.timeZone);\n                  appointment.to = appointment.to.toTimeZone(that.timeZone);\n                } else {\n                  appointment.from = appointment.from.toTimeZone(null);\n                  appointment.to = appointment.to.toTimeZone(null);\n                }\n                if (appointment.allDay) {\n                  appointment.from = $.jqx.scheduler.utilities.getStartOfDay(appointment.from);\n                  appointment.to = $.jqx.scheduler.utilities.getEndOfDay(appointment.to);\n                }\n                if (that.editDialogFields.color.val()) {\n                  var colors = that.getAppointmentColors(that.editDialogFields.color.val());\n                  appointment.color = colors.color;\n                  appointment.background = colors.background;\n                  appointment.borderColor = colors.border;\n                }\n                appointment.subject = that.editDialogFields.subject.val();\n                var repeatIndex = that.editDialogFields.repeat.jqxDropDownList('selectedIndex');\n                var repeatPattern = new $.jqx.scheduler.recurrencePattern();\n                var repeatEndPanel = that.editDialogFields.repeatEndPanel;\n                repeatPattern.timeZone = that.timeZone;\n                repeatPattern.from = appointment.from.clone();\n                if (type == \"occurrence\") {\n                  if (appointment.rootAppointment) {\n                    repeatPattern.from = appointment.rootAppointment.from.clone();\n                  }\n                }\n                if (that.editDialogFields.resetExceptions.val()) {\n                  appointment.exceptions = new Array();\n                  appointment.recurrenceException = new Array();\n                }\n                if (repeatEndPanel.repeatEndNever.val()) {\n                  repeatPattern.count = 1000;\n                  repeatPattern.to = new $.jqx.date(9999, 12, 31);\n                } else if (repeatEndPanel.repeatEndAfter.val()) {\n                  repeatPattern.count = repeatEndPanel.repeatEndAfterValue.val();\n                  repeatPattern.to = new $.jqx.date(9999, 12, 31);\n                } else if (repeatEndPanel.repeatEndOn.val()) {\n                  repeatPattern.count = 1000;\n                  var to = new $.jqx.date(repeatEndPanel.repeatEndOnValue.jqxDateTimeInput('getDate'), that.timeZone);\n                  repeatPattern.to = to;\n                }\n                switch (repeatIndex) {\n                  case 0:\n                  default:\n                    appointment.clearRecurrence();\n                    break;\n                  case 1:\n                    var dailyPattern = that.editDialogFields.daily;\n                    var interval = dailyPattern.repeatDayInterval.val();\n                    repeatPattern.interval = interval;\n                    repeatPattern.freq = \"daily\";\n                    break;\n                  case 2:\n                    var weeklyPattern = that.editDialogFields.weekly;\n                    var interval = weeklyPattern.repeatWeekInterval.val();\n                    var weekDays = [{\n                      Sunday: 0\n                    }, {\n                      Monday: 1\n                    }, {\n                      Tuesday: 2\n                    }, {\n                      Wednesday: 3\n                    }, {\n                      Thursday: 4\n                    }, {\n                      Friday: 5\n                    }, {\n                      Saturday: 6\n                    }];\n                    var days = weeklyPattern.repeatDays;\n                    var byweekday = new Array();\n                    repeatPattern.weekDays = {};\n                    for (var i = 0; i < 7; i++) {\n                      var day = days[i].val();\n                      if (day) {\n                        if (i == 0) {\n                          byweekday.push(6);\n                        } else {\n                          byweekday.push(i - 1);\n                        }\n                        $.extend(repeatPattern.weekDays, weekDays[i]);\n                      }\n                    }\n                    repeatPattern.freq = \"weekly\";\n                    repeatPattern.byweekday = byweekday;\n                    repeatPattern.interval = interval;\n                    break;\n                  case 3:\n                    var monthlyPattern = that.editDialogFields.monthly;\n                    var interval = monthlyPattern.repeatMonth.val();\n                    if (monthlyPattern.repeatMonthDayBool.val()) {\n                      repeatPattern.day = monthlyPattern.repeatMonthDay.val();\n                      repeatPattern.bymonthday = new Array();\n                      repeatPattern.bymonthday.push(repeatPattern.day);\n                    } else {\n                      var dayOfWeek = monthlyPattern.repeatDayOfWeek.jqxDropDownList('selectedIndex');\n                      var bynweekday = new Array();\n                      if (dayOfWeek == 0) dayOfWeek = 6;else dayOfWeek--;\n                      var dayOfWeekType = monthlyPattern.repeatDayOfWeekType.jqxDropDownList('selectedIndex');\n                      // 0 - first\n                      // 1 - second\n                      // 2 - third\n                      // 3 - fourth\n                      // 4 - last\n                      var dayOfWeekStr = \"\";\n                      switch (dayOfWeekType) {\n                        case 0:\n                          dayOfWeekStr = 1;\n                          break;\n                        case 1:\n                          dayOfWeekStr = 2;\n                          break;\n                        case 2:\n                          dayOfWeekStr = 3;\n                          break;\n                        case 3:\n                          dayOfWeekStr = 4;\n                          break;\n                        case 4:\n                          dayOfWeekStr = -1;\n                          break;\n                      }\n                      bynweekday.push([dayOfWeek, dayOfWeekStr]);\n                      repeatPattern.bynweekday = bynweekday;\n                    }\n                    repeatPattern.freq = \"monthly\";\n                    repeatPattern.interval = interval;\n                    break;\n                  case 4:\n                    var yearlyPattern = that.editDialogFields.yearly;\n                    var interval = yearlyPattern.repeatYear.val();\n                    if (yearlyPattern.repeatYearBool.val()) {\n                      repeatPattern.day = yearlyPattern.repeatYearDay.val();\n                      repeatPattern.month = yearlyPattern.repeatYearMonth.jqxDropDownList('selectedIndex');\n                      repeatPattern.bymonth = new Array();\n                      repeatPattern.bymonth.push(1 + repeatPattern.month);\n                      repeatPattern.byyearday = new Array();\n                      repeatPattern.byyearday.push(repeatPattern.day);\n                    } else {\n                      repeatPattern.month = yearlyPattern.repeatDayOfWeekMonth.jqxDropDownList('selectedIndex');\n                      repeatPattern.bymonth = new Array();\n                      repeatPattern.bymonth.push(1 + repeatPattern.month);\n                      var dayOfWeek = yearlyPattern.repeatDayOfWeek.jqxDropDownList('selectedIndex');\n                      var bynweekday = new Array();\n                      if (dayOfWeek == 0) dayOfWeek = 6;else dayOfWeek--;\n                      var dayOfWeekType = yearlyPattern.repeatDayOfWeekType.jqxDropDownList('selectedIndex');\n                      // 0 - first\n                      // 1 - second\n                      // 2 - third\n                      // 3 - fourth\n                      // 4 - last\n                      var dayOfWeekStr = \"\";\n                      switch (dayOfWeekType) {\n                        case 0:\n                          dayOfWeekStr = 1;\n                          break;\n                        case 1:\n                          dayOfWeekStr = 2;\n                          break;\n                        case 2:\n                          dayOfWeekStr = 3;\n                          break;\n                        case 3:\n                          dayOfWeekStr = 4;\n                          break;\n                        case 4:\n                          dayOfWeekStr = -1;\n                          break;\n                      }\n                      bynweekday.push([dayOfWeek, dayOfWeekStr]);\n                      repeatPattern.bynweekday = bynweekday;\n                    }\n                    repeatPattern.freq = \"yearly\";\n                    repeatPattern.interval = interval;\n                    break;\n                }\n                if (appointment.rootAppointment) {\n                  appointment.rootAppointment.recurrencePattern = repeatPattern;\n                } else if (repeatIndex > 0) {\n                  appointment.recurrencePattern = repeatPattern;\n                }\n                var boundAppointment = {};\n                var originalData = {};\n                for (var key in that.appointmentDataFields) {\n                  var field = that.appointmentDataFields[key];\n                  var value = appointment[key];\n                  boundAppointment[key] = value;\n                  if (key == \"from\" || key == \"to\") {\n                    value = value.toDate();\n                  }\n                  originalData[field] = value;\n                }\n                boundAppointment.originalData = originalData;\n                boundAppointment.jqxAppointment = appointment;\n                appointment.boundAppointment = boundAppointment;\n                return true;\n              }(appointment);\n              return setAppointmentProperties;\n            },\n            _setAppointmentPropertiesToDialog: function (appointment, start, end, resourceId) {\n              var that = this;\n              var resetRepeatFields = function () {\n                var repeatEndPanel = that.editDialogFields.repeatEndPanel;\n                repeatEndPanel.repeatEndNever.jqxRadioButton({\n                  checked: true\n                });\n                repeatEndPanel.repeatEndAfter.jqxRadioButton({\n                  checked: false\n                });\n                repeatEndPanel.repeatEndAfterValue.val(1);\n                repeatEndPanel.repeatEndOnValue.val(endJSDate);\n                var endJSDate = end.toDate();\n                if (that.editDialogFields.daily) {\n                  var dailyPattern = that.editDialogFields.daily;\n                  dailyPattern.repeatDayInterval.val(1);\n                }\n                if (that.editDialogFields.weekly) {\n                  var weeklyPattern = that.editDialogFields.weekly;\n                  for (var i = 0; i < weeklyPattern.repeatDays.length; i++) {\n                    if (i == 1) {\n                      weeklyPattern.repeatDays[i].jqxCheckBox({\n                        checked: true\n                      });\n                    } else {\n                      weeklyPattern.repeatDays[i].jqxCheckBox({\n                        checked: false\n                      });\n                    }\n                  }\n                  weeklyPattern.repeatWeekInterval.val(1);\n                }\n                if (that.editDialogFields.monthly) {\n                  var monthlyPattern = that.editDialogFields.monthly;\n                  monthlyPattern.repeatDayOfWeek.jqxDropDownList('selectIndex', 1);\n                  monthlyPattern.repeatDayOfWeekBool.jqxRadioButton({\n                    checked: false\n                  });\n                  monthlyPattern.repeatDayOfWeekType.jqxDropDownList('selectIndex', 0);\n                  monthlyPattern.repeatMonthDayBool.jqxRadioButton({\n                    checked: true\n                  });\n                  monthlyPattern.repeatMonthDay.val(1);\n                  monthlyPattern.repeatMonth.val(1);\n                }\n                if (that.editDialogFields.yearly) {\n                  var yearlyPattern = that.editDialogFields.yearly;\n                  yearlyPattern.repeatDayOfWeekMonth.jqxDropDownList('selectIndex', 0);\n                  yearlyPattern.repeatDayOfWeekBool.jqxRadioButton({\n                    checked: false\n                  });\n                  yearlyPattern.repeatDayOfWeekType.jqxDropDownList('selectIndex', 0);\n                  yearlyPattern.repeatDayOfWeek.jqxDropDownList('selectIndex', 1);\n                  yearlyPattern.repeatYear.val(1);\n                  yearlyPattern.repeatYearMonth.jqxDropDownList('selectIndex', 0);\n                  yearlyPattern.repeatYearDay.val(1);\n                  yearlyPattern.repeatYearBool.val(true);\n                }\n              };\n              resetRepeatFields();\n              if (appointment && appointment.isRecurrentAppointment()) {\n                if (!appointment.rootAppointment) {\n                  that.editDialogFields.resetExceptionsContainer.show();\n                } else {\n                  that.editDialogFields.resetExceptionsContainer.hide();\n                }\n              } else if (appointment) {\n                that.editDialogFields.resetExceptionsContainer.hide();\n                that.editDialogFields.repeat.jqxDropDownList('selectIndex', 0);\n              }\n              if (!appointment) {\n                that.editDialogFields.timeZone.jqxDropDownList('clearSelection');\n                if (!resourceId) {\n                  that.editDialogFields.resource.jqxDropDownList('selectIndex', 0);\n                } else {\n                  that.editDialogFields.resource.val(resourceId);\n                }\n                that.editDialogFields.allDay.val(false);\n                if (that._views[that._view].type.indexOf(\"month\") >= 0 || start && start.equals(end) || end && end.equals($.jqx.scheduler.utilities.getEndOfDay(end)) && start && start.equals($.jqx.scheduler.utilities.getStartOfDay(start))) {\n                  that.editDialogFields.allDay.val(true);\n                }\n                that.editDialogFields.color.jqxDropDownList('clearSelection');\n                that.editDialogFields.description.val('');\n                that.editDialogFields.subject.val('');\n                that.editDialogFields.repeat.jqxDropDownList('selectIndex', 0);\n                return;\n              }\n              var setAppointmentProperties = function (appointment) {\n                var repeatPattern = appointment.recurrencePattern;\n                if (appointment.rootAppointment) {\n                  var repeatPattern = appointment.rootAppointment.recurrencePattern;\n                }\n                if (repeatPattern == null) return;\n                var freq = repeatPattern.freq;\n                var repeatIndex = 0;\n                if (freq == \"daily\") repeatIndex = 1;\n                if (freq == \"weekly\") repeatIndex = 2;\n                if (freq == \"monthly\") repeatIndex = 3;\n                if (freq == \"yearly\") repeatIndex = 4;\n                var repeatEndPanel = that.editDialogFields.repeatEndPanel;\n                if (repeatPattern.count != 1000) {\n                  repeatEndPanel.repeatEndNever.jqxRadioButton({\n                    checked: false\n                  });\n                  repeatEndPanel.repeatEndAfter.jqxRadioButton({\n                    checked: true\n                  });\n                  repeatEndPanel.repeatEndAfterValue.val(repeatPattern.count);\n                } else if (repeatPattern.to.year() != 9999) {\n                  repeatEndPanel.repeatEndOn.jqxRadioButton({\n                    checked: true\n                  });\n                  repeatEndPanel.repeatEndOnValue.val(repeatPattern.to.toDate());\n                } else {\n                  repeatEndPanel.repeatEndNever.jqxRadioButton({\n                    checked: true\n                  });\n                }\n                that.editDialogFields.repeat.jqxDropDownList('selectIndex', repeatIndex);\n                switch (repeatIndex) {\n                  case 1:\n                    var interval = repeatPattern.interval;\n                    var dailyPattern = that.editDialogFields.daily;\n                    dailyPattern.repeatDayInterval.val(interval);\n                    break;\n                  case 2:\n                    var interval = repeatPattern.interval;\n                    var weeklyPattern = that.editDialogFields.weekly;\n                    weeklyPattern.repeatWeekInterval.val(interval);\n                    var days = repeatPattern.byweekday;\n                    for (var i = 0; i < 7; i++) {\n                      var day = weeklyPattern.repeatDays[i];\n                      day.val(false);\n                    }\n                    for (var i = 0; i < days.length; i++) {\n                      var day = days[i];\n                      if (day == 6) weeklyPattern.repeatDays[0].val(true);else {\n                        weeklyPattern.repeatDays[day + 1].val(true);\n                      }\n                    }\n                    break;\n                  case 3:\n                    var monthlyPattern = that.editDialogFields.monthly;\n                    monthlyPattern.repeatMonth.val(repeatPattern.interval);\n                    if (repeatPattern.bymonthday && repeatPattern.bymonthday.length > 0) {\n                      monthlyPattern.repeatMonthDayBool.jqxRadioButton({\n                        checked: true\n                      });\n                      monthlyPattern.repeatMonthDay.val(repeatPattern.day);\n                    } else {\n                      monthlyPattern.repeatDayOfWeekBool.jqxRadioButton({\n                        checked: true\n                      });\n                      var bynweekday = repeatPattern.bynweekday;\n                      var dayOfWeek = bynweekday[0][0];\n                      dayOfWeek++;\n                      if (dayOfWeek == 7) dayOfWeek = 0;\n                      monthlyPattern.repeatDayOfWeek.jqxDropDownList('selectIndex', dayOfWeek);\n                      var dayOfWeekType = bynweekday[0][1];\n                      var dayOfWeekIndex = \"\";\n                      switch (dayOfWeekType) {\n                        case 1:\n                          dayOfWeekIndex = 0;\n                          break;\n                        case 2:\n                          dayOfWeekIndex = 1;\n                          break;\n                        case 3:\n                          dayOfWeekIndex = 2;\n                          break;\n                        case 4:\n                          dayOfWeekIndex = 3;\n                          break;\n                        case -1:\n                          dayOfWeekIndex = 4;\n                          break;\n                      }\n                      monthlyPattern.repeatDayOfWeekType.jqxDropDownList('selectIndex', dayOfWeekIndex);\n                    }\n                    break;\n                  case 4:\n                    var yearlyPattern = that.editDialogFields.yearly;\n                    if (repeatPattern.byyearday && repeatPattern.byyearday.length > 0) {\n                      yearlyPattern.repeatYearDay.val(repeatPattern.byyearday[0]);\n                      yearlyPattern.repeatYearBool.val(true);\n                    }\n                    if (repeatPattern.bymonth && repeatPattern.bymonth.length > 0) {\n                      yearlyPattern.repeatYearMonth.jqxDropDownList('selectIndex', repeatPattern.bymonth[0] - 1);\n                      yearlyPattern.repeatYearBool.val(true);\n                    }\n                    if (!repeatPattern.byyearday || repeatPattern.byyearday && repeatPattern.byyearday.length == 0) {\n                      yearlyPattern.repeatDayOfWeekMonth.jqxDropDownList('selectIndex', repeatPattern.bymonth[0] - 1);\n                      yearlyPattern.repeatDayOfWeekBool.jqxRadioButton({\n                        checked: true\n                      });\n                      var bynweekday = repeatPattern.bynweekday;\n                      var dayOfWeek = bynweekday[0][0];\n                      dayOfWeek++;\n                      if (dayOfWeek == 7) dayOfWeek = 0;\n                      yearlyPattern.repeatDayOfWeek.jqxDropDownList('selectIndex', dayOfWeek);\n                      var dayOfWeekType = bynweekday[0][1];\n                      var dayOfWeekIndex = \"\";\n                      switch (dayOfWeekType) {\n                        case 1:\n                          dayOfWeekIndex = 0;\n                          break;\n                        case 2:\n                          dayOfWeekIndex = 1;\n                          break;\n                        case 3:\n                          dayOfWeekIndex = 2;\n                          break;\n                        case 4:\n                          dayOfWeekIndex = 3;\n                          break;\n                        case -1:\n                          dayOfWeekIndex = 4;\n                          break;\n                      }\n                      yearlyPattern.repeatDayOfWeekType.jqxDropDownList('selectIndex', dayOfWeekIndex);\n                    }\n                    break;\n                }\n              };\n              setAppointmentProperties(appointment);\n            }\n          });\n          $.jqx.scheduler.column = function (owner, data) {\n            this.owner = owner;\n            this.datafield = null;\n            this.displayfield = null;\n            this.text = '';\n            this.sortable = true;\n            this.editable = true;\n            this.hidden = false;\n            this.hideable = true;\n            this.groupable = true;\n            this.renderer = null;\n            this.cellsRenderer = null;\n            this.columntype = null;\n            this.cellsFormat = \"\";\n            this.align = 'center';\n            this.cellsalign = 'center';\n            this.width = 'auto';\n            this.minwidth = 60;\n            this.maxwidth = 'auto';\n            this.pinned = false;\n            this.visibleindex = -1;\n            this.filterable = true;\n            this.filter = null;\n            this.resizable = true;\n            this.draggable = true;\n            this.initeditor = null;\n            this.createeditor = null;\n            this.destroyeditor = null;\n            this.geteditorvalue = null;\n            this.autoCellHeight = true;\n            this.validation = null;\n            this.classname = '';\n            this.cellclassname = '';\n            this.rendered = null;\n            this.exportable = true;\n            this.nullable = true;\n            this.columngroup = null;\n            this.columntype = \"textbox\";\n            this.getcolumnproperties = function () {\n              return {\n                nullable: this.nullable,\n                sortable: this.sortable,\n                hidden: this.hidden,\n                groupable: this.groupable,\n                width: this.width,\n                align: this.align,\n                editable: this.editable,\n                minwidth: this.minwidth,\n                maxwidth: this.maxwidth,\n                resizable: this.resizable,\n                datafield: this.datafield,\n                text: this.text,\n                exportable: this.exportable,\n                cellsalign: this.cellsalign,\n                pinned: this.pinned,\n                cellsFormat: this.cellsFormat,\n                columntype: this.columntype,\n                classname: this.classname,\n                cellclassname: this.cellclassname,\n                menu: this.menu\n              };\n            }, this.setproperty = function (propertyname, value) {\n              if (this[propertyname]) {\n                var oldvalue = this[propertyname];\n                this[propertyname] = value;\n                this.owner._columnPropertyChanged(this, propertyname, value, oldvalue);\n              } else {\n                if (this[propertyname.toLowerCase()]) {\n                  var oldvalue = this[propertyname.toLowerCase()];\n                  this[propertyname.toLowerCase()] = value;\n                  this.owner._columnPropertyChanged(this, propertyname.toLowerCase(), value, oldvalue);\n                }\n              }\n            };\n            this._initfields = function (data) {\n              if (data != null) {\n                var that = this;\n                if ($.jqx.hasProperty(data, 'dataField')) {\n                  this.datafield = $.jqx.get(data, 'dataField');\n                }\n                if ($.jqx.hasProperty(data, 'displayField')) {\n                  this.displayfield = $.jqx.get(data, 'displayField');\n                } else {\n                  this.displayfield = this.datafield;\n                }\n                if ($.jqx.hasProperty(data, 'columnType')) {\n                  this.columntype = $.jqx.get(data, 'columnType');\n                }\n                if ($.jqx.hasProperty(data, 'validation')) {\n                  this.validation = $.jqx.get(data, 'validation');\n                }\n                if ($.jqx.hasProperty(data, 'autoCellHeight')) {\n                  this.autoCellHeight = $.jqx.get(data, 'autoCellHeight');\n                }\n                if ($.jqx.hasProperty(data, 'text')) {\n                  this.text = $.jqx.get(data, 'text');\n                } else {\n                  this.text = this.displayfield;\n                }\n                if ($.jqx.hasProperty(data, 'sortable')) {\n                  this.sortable = $.jqx.get(data, 'sortable');\n                }\n                if ($.jqx.hasProperty(data, 'hidden')) {\n                  this.hidden = $.jqx.get(data, 'hidden');\n                }\n                if ($.jqx.hasProperty(data, 'groupable')) {\n                  this.groupable = $.jqx.get(data, 'groupable');\n                }\n                if ($.jqx.hasProperty(data, 'renderer')) {\n                  this.renderer = $.jqx.get(data, 'renderer');\n                }\n                if ($.jqx.hasProperty(data, 'align')) {\n                  this.align = $.jqx.get(data, 'align');\n                }\n                if ($.jqx.hasProperty(data, 'cellsAlign')) {\n                  this.cellsalign = $.jqx.get(data, 'cellsAlign');\n                }\n                if ($.jqx.hasProperty(data, 'cellsFormat')) {\n                  this.cellsFormat = $.jqx.get(data, 'cellsFormat');\n                }\n                if ($.jqx.hasProperty(data, 'width')) {\n                  this.width = $.jqx.get(data, 'width');\n                }\n                if ($.jqx.hasProperty(data, 'minWidth')) {\n                  this.minwidth = $.jqx.get(data, 'minWidth');\n                }\n                if ($.jqx.hasProperty(data, 'maxWidth')) {\n                  this.maxwidth = $.jqx.get(data, 'maxWidth');\n                }\n                if ($.jqx.hasProperty(data, 'cellsRenderer')) {\n                  this.cellsRenderer = $.jqx.get(data, 'cellsRenderer');\n                }\n                if ($.jqx.hasProperty(data, 'columnType')) {\n                  this.columntype = $.jqx.get(data, 'columnType');\n                }\n                if ($.jqx.hasProperty(data, 'pinned')) {\n                  this.pinned = $.jqx.get(data, 'pinned');\n                }\n                if ($.jqx.hasProperty(data, 'filterable')) {\n                  this.filterable = $.jqx.get(data, 'filterable');\n                }\n                if ($.jqx.hasProperty(data, 'filter')) {\n                  this.filter = $.jqx.get(data, 'filter');\n                }\n                if ($.jqx.hasProperty(data, 'resizable')) {\n                  this.resizable = $.jqx.get(data, 'resizable');\n                }\n                if ($.jqx.hasProperty(data, 'draggable')) {\n                  this.draggable = $.jqx.get(data, 'draggable');\n                }\n                if ($.jqx.hasProperty(data, 'editable')) {\n                  this.editable = $.jqx.get(data, 'editable');\n                }\n                if ($.jqx.hasProperty(data, 'initEditor')) {\n                  this.initeditor = $.jqx.get(data, 'initEditor');\n                }\n                if ($.jqx.hasProperty(data, 'createEditor')) {\n                  this.createeditor = $.jqx.get(data, 'createEditor');\n                }\n                if ($.jqx.hasProperty(data, 'destroyEditor')) {\n                  this.destroyeditor = $.jqx.get(data, 'destroyEditor');\n                }\n                if ($.jqx.hasProperty(data, 'getEditorValue')) {\n                  this.geteditorvalue = $.jqx.get(data, 'getEditorValue');\n                }\n                if ($.jqx.hasProperty(data, 'className')) {\n                  this.classname = $.jqx.get(data, 'className');\n                }\n                if ($.jqx.hasProperty(data, 'cellClassName')) {\n                  this.cellclassname = $.jqx.get(data, 'cellClassName');\n                }\n                if ($.jqx.hasProperty(data, 'rendered')) {\n                  this.rendered = $.jqx.get(data, 'rendered');\n                }\n                if ($.jqx.hasProperty(data, 'exportable')) {\n                  this.exportable = $.jqx.get(data, 'exportable');\n                }\n                if ($.jqx.hasProperty(data, 'nullable')) {\n                  this.nullable = $.jqx.get(data, 'nullable');\n                }\n                if ($.jqx.hasProperty(data, 'columnGroup')) {\n                  this.columngroup = $.jqx.get(data, 'columnGroup');\n                }\n                if (!data instanceof String && !(typeof data == \"string\")) {\n                  for (var obj in data) {\n                    if (!that.hasOwnProperty(obj)) {\n                      if (!that.hasOwnProperty(obj.toLowerCase())) {\n                        owner.host.remove();\n                        throw new Error(\"jqxScheduler: Invalid property name - \" + obj + \".\");\n                      }\n                    }\n                  }\n                }\n              }\n            };\n            this._initfields(data);\n            return this;\n          };\n          $.jqx.schedulerDataCollection = function (owner) {\n            this.records = new Array();\n            this.owner = owner;\n            this.updating = false;\n            this.beginUpdate = function () {\n              this.updating = true;\n            };\n            this.resumeupdate = function () {\n              this.updating = false;\n            };\n            this.clear = function () {\n              this.records = new Array();\n            };\n            this.replace = function (index, object) {\n              this.records[index] = object;\n            };\n            this.isempty = function (index) {\n              if (this.records[index] == undefined) {\n                return true;\n              }\n              return false;\n            };\n            this.initialize = function (size) {\n              if (size < 1) size = 1;\n              this.records[size - 1] = -1;\n            };\n            this.length = function () {\n              return this.records.length;\n            };\n            this.indexOf = function (object) {\n              return this.records.indexOf(object);\n            };\n            this.add = function (object) {\n              if (object == null) return false;\n              this.records[this.records.length] = object;\n              return true;\n            };\n            this.insertAt = function (index, object) {\n              if (index == null || index == undefined) return false;\n              if (object == null) return false;\n              if (index >= 0) {\n                if (index < this.records.length) {\n                  this.records.splice(index, 0, object);\n                  return true;\n                } else return this.add(object);\n              }\n              return false;\n            };\n            this.remove = function (object) {\n              if (object == null || object == undefined) return false;\n              var index = this.records.indexOf(object);\n              if (index != -1) {\n                this.records.splice(index, 1);\n                return true;\n              }\n              return false;\n            };\n            this.removeAt = function (index) {\n              if (index == null || index == undefined) return false;\n              if (index < 0) return false;\n              if (index < this.records.length) {\n                var object = this.records[index];\n                this.records.splice(index, 1);\n                return true;\n              }\n              return false;\n            };\n            return this;\n          };\n          $.jqx.scheduler.dataView = function (id) {\n            this.that = this;\n            this.scheduler = null;\n            this.records = [];\n            this.rows = [];\n            this.columns = [];\n            this.filters = new Array();\n            this.pagesize = 0;\n            this.pagenum = 0;\n            this.source = null;\n            this.databind = function (source, objectuniqueId) {\n              var that = this;\n              if ($.isArray(source)) {\n                that.update(source);\n                return;\n              }\n              var isdataadapter = source._source ? true : false;\n              var dataadapter = null;\n              this._sortData = null;\n              this._sortHierarchyData = null;\n              if (isdataadapter) {\n                dataadapter = source;\n                source = source._source;\n              } else {\n                dataadapter = new $.jqx.dataAdapter(source, {\n                  autoBind: false\n                });\n              }\n              var initadapter = function (that) {\n                dataadapter.recordids = [];\n                dataadapter.records = new Array();\n                dataadapter.cachedrecords = new Array();\n                dataadapter.originaldata = new Array();\n                dataadapter._options.totalrecords = that.totalrecords;\n                dataadapter._options.originaldata = that.originaldata;\n                dataadapter._options.recordids = that.recordids;\n                dataadapter._options.cachedrecords = new Array();\n                dataadapter._options.pagenum = that.pagenum;\n                dataadapter._options.pageable = that.pageable;\n                if (source.type != undefined) {\n                  dataadapter._options.type = source.type;\n                }\n                if (source.formatdata != undefined) {\n                  dataadapter._options.formatData = source.formatdata;\n                }\n                if (source.contenttype != undefined) {\n                  dataadapter._options.contentType = source.contenttype;\n                }\n                if (source.async != undefined) {\n                  dataadapter._options.async = source.async;\n                }\n                if (source.updaterow != undefined) {\n                  dataadapter._options.updaterow = source.updaterow;\n                }\n                if (source.addrow != undefined) {\n                  dataadapter._options.addrow = source.addrow;\n                }\n                if (source.deleterow != undefined) {\n                  dataadapter._options.deleterow = source.deleterow;\n                }\n                if (that.pagesize == 0) that.pagesize = 10;\n                dataadapter._options.pagesize = that.pagesize;\n              };\n              var updatefromadapter = function (that) {\n                that.originaldata = dataadapter.originaldata;\n                that.records = dataadapter.records;\n                that.hierarchy = dataadapter.hierarchy;\n                if (!that.scheduler.serverProcessing) {\n                  that._sortData = null;\n                  that._sortfield = null;\n                  that._filteredData = null;\n                  that._sortHierarchyData = null;\n                }\n                if (!that.hierarchy) {\n                  that.hierarchy = new Array();\n                  dataadapter.hierarchy = new Array();\n                }\n                if (dataadapter._source.totalrecords) {\n                  that.totalrecords = dataadapter._source.totalrecords;\n                } else if (dataadapter._source.totalRecords) {\n                  that.totalrecords = dataadapter._source.totalRecords;\n                } else {\n                  if (that.hierarchy.length !== 0) {\n                    that.totalrecords = that.hierarchy.length;\n                  } else {\n                    that.totalrecords = that.records.length;\n                  }\n                }\n                that.cachedrecords = dataadapter.cachedrecords;\n              };\n              initadapter(this);\n              this.source = source;\n              if (objectuniqueId !== undefined) {\n                var uniqueId = objectuniqueId;\n              }\n              var that = this;\n              switch (source.datatype) {\n                case \"local\":\n                case \"array\":\n                default:\n                  if (source.localdata == null) {\n                    source.localdata = [];\n                  }\n                  if (source.localdata != null) {\n                    dataadapter.unbindBindingUpdate(id + that.scheduler.element.id);\n                    if (!that.scheduler.autoBind && that.scheduler.isInitialized || that.scheduler.autoBind) {\n                      dataadapter.dataBind();\n                    }\n                    var updateFunc = function () {\n                      updatefromadapter(that);\n                      that.update(dataadapter.records);\n                    };\n                    updateFunc();\n                    dataadapter.bindBindingUpdate(id + that.scheduler.element.id, updateFunc);\n                  }\n                  break;\n                case \"ics\":\n                case \"json\":\n                case \"jsonp\":\n                case \"xml\":\n                case \"xhtml\":\n                case \"script\":\n                case \"text\":\n                case \"csv\":\n                case \"tab\":\n                  {\n                    if (source.localdata != null) {\n                      dataadapter.unbindBindingUpdate(id + that.scheduler.element.id);\n                      if (!that.scheduler.autoBind && that.scheduler.isInitialized || that.scheduler.autoBind) {\n                        dataadapter.dataBind();\n                      }\n                      var updateFunc = function (changeType) {\n                        updatefromadapter(that);\n                        that.update(dataadapter.records);\n                      };\n                      updateFunc();\n                      dataadapter.bindBindingUpdate(id + that.scheduler.element.id, updateFunc);\n                      return;\n                    }\n                    var filterdata = {};\n                    var filterslength = 0;\n                    var postdata = {};\n                    var tmpdata = dataadapter._options.data;\n                    if (dataadapter._options.data) {\n                      $.extend(dataadapter._options.data, postdata);\n                    } else {\n                      if (source.data) {\n                        $.extend(postdata, source.data);\n                      }\n                      dataadapter._options.data = postdata;\n                    }\n                    var updateFunc = function () {\n                      var ie = $.jqx.browser.msie && $.jqx.browser.version < 9;\n                      var doUpdate = function () {\n                        updatefromadapter(that);\n                        that.update(dataadapter.records);\n                      };\n                      if (ie) {\n                        try {\n                          doUpdate();\n                        } catch (error) {}\n                      } else {\n                        doUpdate();\n                      }\n                    };\n                    dataadapter.unbindDownloadComplete(id + that.scheduler.element.id);\n                    dataadapter.bindDownloadComplete(id + that.scheduler.element.id, updateFunc);\n                    dataadapter._source.loaderror = function (xhr, status, error) {\n                      updateFunc();\n                    };\n                    if (!that.scheduler.autoBind && that.scheduler.isInitialized || that.scheduler.autoBind) {\n                      dataadapter.dataBind();\n                    }\n                    dataadapter._options.data = tmpdata;\n                  }\n              }\n            };\n            this.addFilter = function (field, filter) {\n              this._sortData = null;\n              this._sortHierarchyData = null;\n              var filterindex = -1;\n              for (var m = 0; m < this.filters.length; m++) {\n                if (this.filters[m].datafield == field) {\n                  filterindex = m;\n                  break;\n                }\n              }\n              if (filterindex == -1) {\n                this.filters[this.filters.length] = {\n                  filter: filter,\n                  datafield: field\n                };\n              } else {\n                this.filters[filterindex] = {\n                  filter: filter,\n                  datafield: field\n                };\n              }\n            };\n            this.removeFilter = function (field) {\n              this._sortData = null;\n              this._sortHierarchyData = null;\n              for (var i = 0; i < this.filters.length; i++) {\n                if (this.filters[i].datafield == field) {\n                  this.filters.splice(i, 1);\n                  break;\n                }\n              }\n            };\n            this._compare = function (value1, value2, type) {\n              var value1 = value1;\n              var value2 = value2;\n              if (value1 === undefined) {\n                value1 = null;\n              }\n              if (value2 === undefined) {\n                value2 = null;\n              }\n              if (value1 === null && value2 === null) {\n                return 0;\n              }\n              if (value1 === null && value2 !== null) {\n                return 1;\n              }\n              if (value1 !== null && value2 === null) {\n                return 1;\n              }\n              value1 = value1.toString();\n              value2 = value2.toString();\n              if ($.jqx.dataFormat) {\n                if (type && type != \"\") {\n                  switch (type) {\n                    case \"number\":\n                    case \"int\":\n                    case \"float\":\n                      if (value1 < value2) {\n                        return -1;\n                      }\n                      if (value1 > value2) {\n                        return 1;\n                      }\n                      return 0;\n                    case \"date\":\n                    case \"time\":\n                      if (value1 < value2) {\n                        return -1;\n                      }\n                      if (value1 > value2) {\n                        return 1;\n                      }\n                      return 0;\n                    case \"string\":\n                    case \"text\":\n                      value1 = String(value1).toLowerCase();\n                      value2 = String(value2).toLowerCase();\n                      break;\n                  }\n                } else {\n                  if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {\n                    if (value1 < value2) {\n                      return -1;\n                    }\n                    if (value1 > value2) {\n                      return 1;\n                    }\n                    return 0;\n                  } else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {\n                    if (value1 < value2) {\n                      return -1;\n                    }\n                    if (value1 > value2) {\n                      return 1;\n                    }\n                    return 0;\n                  } else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {\n                    value1 = String(value1).toLowerCase();\n                    value2 = String(value2).toLowerCase();\n                  }\n                }\n              }\n              try {\n                if (value1 < value2) {\n                  return -1;\n                }\n                if (value1 > value2) {\n                  return 1;\n                }\n              } catch (error) {\n                var er = error;\n              }\n              return 0;\n            };\n            this._equals = function (value1, value2) {\n              return this._compare(value1, value2) === 0;\n            };\n            this.evaluate = function (rows) {\n              if (this.scheduler.serverProcessing) {\n                return rows;\n              }\n              var records = new Array();\n              if (this.filters.length) {\n                var uniqueRecords = new Array();\n                var getRecords = function (records, filtered) {\n                  for (var i = 0; i < records.length; i++) {\n                    var record = records[i];\n                    record._visible = true;\n\n                    // The filter is applied to parents first and to children only if parent fulfils the condition.\n                    var filterresult = undefined;\n                    for (var j = 0; j < this.filters.length; j++) {\n                      var filter = this.filters[j].filter;\n                      var value = record[this.filters[j].datafield];\n                      var result = filter.evaluate(value);\n                      if (filterresult == undefined) {\n                        filterresult = result;\n                      } else {\n                        if (filter.operator == 'or') {\n                          filterresult = filterresult || result;\n                        } else {\n                          filterresult = filterresult && result;\n                        }\n                      }\n                    }\n                    record._visible = false;\n                    if (filterresult || record.aggregate) {\n                      record._visible = true;\n                      filtered.push(record);\n                      uniqueRecords[record.uid] = record;\n                    }\n                  }\n                };\n                if (!this._filteredData) {\n                  if (this.source.hierarchy || this.scheduler.source.hierarchy && this.scheduler.source.hierarchy.length > 0) {\n                    var flatList = new Array();\n                    var getAsFlatList = function (parent, rows) {\n                      for (var i = 0; i < rows.length; i++) {\n                        var row = rows[i];\n                        flatList.push(row);\n                        if (row.records && row.records.length > 0) {\n                          getAsFlatList(row, row.records);\n                        }\n                      }\n                    };\n                    getAsFlatList(null, rows);\n                    getRecords.call(this, flatList, records);\n                    for (var i = 0; i < records.length; i++) {\n                      var record = records[i];\n                      while (record.parent) {\n                        var parent = record.parent;\n                        if (!uniqueRecords[parent.uid]) {\n                          parent._visible = true;\n                          uniqueRecords[parent.uid] = parent;\n                        }\n                        record = parent;\n                      }\n                    }\n                    records = rows;\n                  } else {\n                    getRecords.call(this, rows, records);\n                  }\n                  this._filteredData = records;\n                  this.rows = records;\n                } else {\n                  this.rows = this._filteredData;\n                }\n              } else {\n                this.rows = rows;\n              }\n              return this.rows;\n            };\n            this.getid = function (id, record, index) {\n              if ($(id, record).length > 0) {\n                return $(id, record).text();\n              }\n              if (this.rows && id != \"\" && id != undefined && this.rows.length > 0) {\n                var lastID = this.rows[this.rows.length - 1][id];\n                if (lastID == null) lastID = null;\n                for (var i = 1; i <= 100; i++) {\n                  var hasID = this.scheduler.appointmentsByKey[i + lastID];\n                  if (!hasID) {\n                    if (this.scheduler && this.scheduler.treeGrid && this.scheduler.treescheduler.virtualModeCreateRecords) {\n                      var hasID = this.scheduler.appointmentsByKey[\"jqx\" + lastID + i];\n                      if (hasID) continue;\n                      return \"jqx\" + lastID + i;\n                    }\n                    return lastID + i;\n                  }\n                }\n              }\n              if (id != undefined) {\n                if (id.toString().length > 0) {\n                  var result = $(record).attr(id);\n                  if (result != null && result.toString().length > 0) {\n                    if (this.scheduler && this.scheduler.treeGrid && this.scheduler.treescheduler.virtualModeCreateRecords) {\n                      return \"jqx\" + result;\n                    }\n                    return result;\n                  }\n                }\n              }\n              if (this.rows && this.rows.length > 0) {\n                var hasID = this.scheduler.appointmentsByKey[index];\n                if (hasID) {\n                  var lastID = this.rows[this.rows.length - 1][id];\n                  if (lastID == null) lastID = \"\";\n                  for (var i = 1; i <= 1000; i++) {\n                    var hasID = this.scheduler.appointmentsByKey[i + lastID];\n                    if (!hasID) {\n                      if (this.scheduler && this.scheduler.treeGrid && this.scheduler.treescheduler.virtualModeCreateRecords) {\n                        var hasID = this.scheduler.appointmentsByKey[\"jqx\" + lastID + i];\n                        if (hasID) continue;\n                        return \"jqx\" + lastID + i;\n                      }\n                      return lastID + i;\n                    }\n                  }\n                }\n              }\n              if (this.scheduler && this.scheduler.treeGrid && this.scheduler.treescheduler.virtualModeCreateRecords) {\n                var hasID = this.scheduler.appointmentsByKey[\"jqx\" + index];\n                if (!hasID) {\n                  return \"jqx\" + index;\n                } else {\n                  for (var i = index + 1; i <= 100; i++) {\n                    var hasID = this.scheduler.appointmentsByKey[\"jqx\" + i];\n                    if (!hasID) {\n                      var hasID = this.scheduler.appointmentsByKey[\"jqx\" + i];\n                      if (hasID) continue;\n                      return \"jqx\" + i;\n                    }\n                  }\n                }\n              }\n              return index;\n            };\n            this.generatekey = function () {\n              var S4 = function () {\n                return (1 + Math.random()) * 0x10 | 0;\n              };\n              return \"\" + S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4();\n            };\n            return this;\n          };\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/5253: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          if (!$.jqx.scheduler) {\n            $.jqx.scheduler = {};\n          }\n          $.jqx.jqxWidget('jqxScheduler', '', {});\n          $.extend($.jqx._jqxScheduler.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // sets the alternating row style.\n                altRows: false,\n                // automatically displays the load element.\n                autoShowLoadElement: true,\n                // sets the columns height.\n                columnsHeight: 30,\n                // sets the columns.\n                columns: [],\n                // sets the column groups.\n                columnGroups: null,\n                // sets the grid data view.\n                dataview: null,\n                // enables or disables the scheduler.\n                disabled: false,\n                // enables the hover effect.\n                enableHover: true,\n                appointmentOpacity: 0.8,\n                // header z index.\n                headerZIndex: 235,\n                // sets the height.\n                height: 600,\n                // sets the row details indent column widget.\n                timeRulerWidth: 60,\n                // this message is displayed when the user tries to call a method before the binding complete.\n                loadingErrorMessage: \"The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxScheduler raises the 'bindingComplete' event when the binding is completed.\",\n                // sets the localization object.\n                localization: null,\n                // callback function called when the widget is ready for usage.\n                ready: null,\n                // callback function called for rendering the tool bar.\n                renderToolBar: null,\n                renderAppointment: null,\n                // callback function called after the rendering.\n                rendered: null,\n                // callback function called before the rendering.\n                rendering: null,\n                // enables right-to-left.\n                rtl: false,\n                showToolbar: true,\n                // shows the status bar.\n                showLegend: false,\n                legendPosition: \"bottom\",\n                // sets the status bar's height.\n                legendHeight: 34,\n                rowsHeight: 27,\n                touchRowsHeight: 36,\n                appointmentsMinHeight: 18,\n                touchAppointmentsMinHeight: 27,\n                appointmentsRenderMode: \"default\",\n                // enables the server processing.\n                serverProcessing: false,\n                // sets the selection mode.\n                selectionMode: \"multiplerows\",\n                // sets the scrollbar's size\n                scrollBarSize: $.jqx.utilities.scrollBarSize,\n                touchScrollBarSize: $.jqx.utilities.touchScrollBarSize,\n                // shows or hides the grid's columns header.\n                showHeader: true,\n                showCurrent: true,\n                showCurrentAppointment: true,\n                maxHeight: 999999,\n                maxWidth: 999999,\n                autoBind: true,\n                showAllDayRow: true,\n                changedAppointments: new Array(),\n                renderMode: \"simple\",\n                views: new Array(),\n                view: 0,\n                // day, week, month\n                min: new $.jqx.date(0),\n                max: new $.jqx.date(9999, 12, 31),\n                maxAppointmentsPerDay: 20,\n                date: new $.jqx.date('todayDate'),\n                colors: ['#307DD7', '#AA4643', '#89A54E', '#71588F', '#4198AF', '#7FD13B', '#EA157A', '#FEB80A', '#00ADDC', '#738AC8', '#E8601A', '#FF9639', '#F5BD6A', '#599994', '#115D6E', '#D02841', '#FF7C41', '#FFC051', '#5B5F4D', '#364651', '#25A0DA', '#309B46', '#8EBC00', '#FF7515', '#FFAE00', '#0A3A4A', '#196674', '#33A6B2', '#9AC836', '#D0E64B', '#CC6B32', '#FFAB48', '#FFE7AD', '#A7C9AE', '#888A63', '#3F3943', '#01A2A6', '#29D9C2', '#BDF271', '#FFFFA6', '#1B2B32', '#37646F', '#A3ABAF', '#E1E7E8', '#B22E2F', '#5A4B53', '#9C3C58', '#DE2B5B', '#D86A41', '#D2A825', '#993144', '#FFA257', '#CCA56A', '#ADA072', '#949681', '#105B63', '#EEEAC5', '#FFD34E', '#DB9E36', '#BD4932', '#BBEBBC', '#F0EE94', '#F5C465', '#FA7642', '#FF1E54', '#60573E', '#F2EEAC', '#BFA575', '#A63841', '#BFB8A3', '#444546', '#FFBB6E', '#F28D00', '#D94F00', '#7F203B', '#583C39', '#674E49', '#948658', '#F0E99A', '#564E49', '#142D58', '#447F6E', '#E1B65B', '#C8782A', '#9E3E17', '#4D2B1F', '#635D61', '#7992A2', '#97BFD5', '#BFDCF5', '#844341', '#D5CC92', '#BBA146', '#897B26', '#55591C', '#56626B', '#6C9380', '#C0CA55', '#F07C6C', '#AD5472', '#96003A', '#FF7347', '#FFBC7B', '#FF4154', '#642223', '#5D7359', '#E0D697', '#D6AA5C', '#8C5430', '#661C0E', '#16193B', '#35478C', '#4E7AC7', '#7FB2F0', '#ADD5F7', '#7B1A25', '#BF5322', '#9DA860', '#CEA457', '#B67818', '#0081DA', '#3AAFFF', '#99C900', '#FFEB3D', '#309B46', '#0069A5', '#0098EE', '#7BD2F6', '#FFB800', '#FF6800', '#FF6800', '#A0A700', '#FF8D00', '#678900', '#0069A5'],\n                colorSchemes: [{\n                  name: 'scheme01',\n                  colors: ['#307DD7', '#AA4643', '#89A54E', '#71588F', '#4198AF']\n                }, {\n                  name: 'scheme02',\n                  colors: ['#7FD13B', '#EA157A', '#FEB80A', '#00ADDC', '#738AC8']\n                }, {\n                  name: 'scheme03',\n                  colors: ['#E8601A', '#FF9639', '#F5BD6A', '#599994', '#115D6E']\n                }, {\n                  name: 'scheme04',\n                  colors: ['#D02841', '#FF7C41', '#FFC051', '#5B5F4D', '#364651']\n                }, {\n                  name: 'scheme05',\n                  colors: ['#25A0DA', '#309B46', '#8EBC00', '#FF7515', '#FFAE00']\n                }, {\n                  name: 'scheme06',\n                  colors: ['#0A3A4A', '#196674', '#33A6B2', '#9AC836', '#D0E64B']\n                }, {\n                  name: 'scheme07',\n                  colors: ['#CC6B32', '#FFAB48', '#FFE7AD', '#A7C9AE', '#888A63']\n                }, {\n                  name: 'scheme08',\n                  colors: ['#3F3943', '#01A2A6', '#29D9C2', '#BDF271', '#FFFFA6']\n                }, {\n                  name: 'scheme09',\n                  colors: ['#1B2B32', '#37646F', '#A3ABAF', '#E1E7E8', '#B22E2F']\n                }, {\n                  name: 'scheme10',\n                  colors: ['#5A4B53', '#9C3C58', '#DE2B5B', '#D86A41', '#D2A825']\n                }, {\n                  name: 'scheme11',\n                  colors: ['#993144', '#FFA257', '#CCA56A', '#ADA072', '#949681']\n                }, {\n                  name: 'scheme12',\n                  colors: ['#105B63', '#EEEAC5', '#FFD34E', '#DB9E36', '#BD4932']\n                }, {\n                  name: 'scheme13',\n                  colors: ['#BBEBBC', '#F0EE94', '#F5C465', '#FA7642', '#FF1E54']\n                }, {\n                  name: 'scheme14',\n                  colors: ['#60573E', '#F2EEAC', '#BFA575', '#A63841', '#BFB8A3']\n                }, {\n                  name: 'scheme15',\n                  colors: ['#444546', '#FFBB6E', '#F28D00', '#D94F00', '#7F203B']\n                }, {\n                  name: 'scheme16',\n                  colors: ['#583C39', '#674E49', '#948658', '#F0E99A', '#564E49']\n                }, {\n                  name: 'scheme17',\n                  colors: ['#142D58', '#447F6E', '#E1B65B', '#C8782A', '#9E3E17']\n                }, {\n                  name: 'scheme18',\n                  colors: ['#4D2B1F', '#635D61', '#7992A2', '#97BFD5', '#BFDCF5']\n                }, {\n                  name: 'scheme19',\n                  colors: ['#844341', '#D5CC92', '#BBA146', '#897B26', '#55591C']\n                }, {\n                  name: 'scheme20',\n                  colors: ['#56626B', '#6C9380', '#C0CA55', '#F07C6C', '#AD5472']\n                }, {\n                  name: 'scheme21',\n                  colors: ['#96003A', '#FF7347', '#FFBC7B', '#FF4154', '#642223']\n                }, {\n                  name: 'scheme22',\n                  colors: ['#5D7359', '#E0D697', '#D6AA5C', '#8C5430', '#661C0E']\n                }, {\n                  name: 'scheme23',\n                  colors: ['#16193B', '#35478C', '#4E7AC7', '#7FB2F0', '#ADD5F7']\n                }, {\n                  name: 'scheme24',\n                  colors: ['#7B1A25', '#BF5322', '#9DA860', '#CEA457', '#B67818']\n                }, {\n                  name: 'scheme25',\n                  colors: ['#0081DA', '#3AAFFF', '#99C900', '#FFEB3D', '#309B46']\n                }, {\n                  name: 'scheme26',\n                  colors: ['#0069A5', '#0098EE', '#7BD2F6', '#FFB800', '#FF6800']\n                }, {\n                  name: 'scheme27',\n                  colors: ['#FF6800', '#A0A700', '#FF8D00', '#678900', '#0069A5']\n                }],\n                resources: null,\n                contextMenu: true,\n                contextMenuOpen: null,\n                contextMenuClose: null,\n                contextMenuItemClick: null,\n                contextMenuCreate: null,\n                timeZone: null,\n                statuses: {\n                  free: \"white\",\n                  tentative: \"tentative\",\n                  busy: \"transparent\",\n                  outOfOffice: \"#800080\"\n                },\n                appointmentDataFields: {\n                  from: \"from\",\n                  to: \"to\",\n                  id: \"id\",\n                  calendarId: \"calendarId\",\n                  description: \"description\",\n                  location: \"location\",\n                  subject: \"subject\",\n                  background: \"background\",\n                  color: \"color\",\n                  borderColor: \"borderColor\",\n                  style: \"style\",\n                  recurrencePattern: \"recurrencePattern\",\n                  recurrenceException: \"recurrenceException\",\n                  draggable: \"draggable\",\n                  resizable: \"resizable\",\n                  resourceId: \"resourceId\",\n                  status: \"status\",\n                  tooltip: \"tooltip\",\n                  hidden: \"hidden\",\n                  allDay: \"allDay\",\n                  timeZone: \"timeZone\",\n                  ownerId: \"ownerId\"\n                },\n                appointmentTooltips: true,\n                tableColumns: 1,\n                tableRows: 1,\n                // Possible values: shortest, firstTwoLetters, firstLetter, abbr, full\n                dayNameFormat: 'full',\n                touchDayNameFormat: \"abbr\",\n                toolBarRangeFormat: \"dd MMMM yyyy\",\n                toolBarRangeFormatAbbr: \"dd MM yyyy\",\n                columnRenderer: null,\n                exportSettings: {\n                  serverURL: null,\n                  characterSet: null,\n                  fileName: \"jqxScheduler\",\n                  dateTimeFormatString: \"S\",\n                  resourcesInMultipleICSFiles: false,\n                  ICSXWRCALNAME: \"jqxScheduler\",\n                  ICSXWRCALDESC: \"jqxScheduler Description\"\n                },\n                // sets the datatable's source.\n                source: {\n                  beforeprocessing: null,\n                  beforesend: null,\n                  loaderror: null,\n                  localdata: null,\n                  data: null,\n                  datatype: 'array',\n                  // {name: name, map: map}\n                  datafields: [],\n                  url: \"\",\n                  root: '',\n                  record: '',\n                  id: '',\n                  totalrecords: 0,\n                  recordstartindex: 0,\n                  recordendindex: 0,\n                  loadallrecords: true,\n                  sortcolumn: null,\n                  sortdirection: null,\n                  sort: null,\n                  filter: null,\n                  sortcomparer: null\n                },\n                editDialogDateTimeFormatString: \"dd/MM/yyyy hh:mm tt\",\n                editDialogDateFormatString: \"dd/MM/yyyy\",\n                editDialogOpen: null,\n                editDialogCreate: null,\n                editDialogKeyDown: null,\n                editDialogClose: null,\n                editDialog: true,\n                // toolbar height.\n                toolbarHeight: 54,\n                // table z index.\n                tableZIndex: 469,\n                // private members\n                _updating: false,\n                touchMode: 'auto',\n                // sets the width.\n                width: 800,\n                that: this,\n                beginDrag: null,\n                endDrag: null,\n                dragging: null,\n                timeZones: [{\n                  id: 'Dateline Standard Time',\n                  offset: -720,\n                  offsetHours: -12,\n                  displayName: '(UTC-12:00) International Date Line West',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'UTC-11',\n                  offset: -660,\n                  offsetHours: -11,\n                  displayName: '(UTC-11:00) Coordinated Universal Time-11',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Hawaiteratoran Standard Time',\n                  offset: -600,\n                  offsetHours: -10,\n                  displayName: '(UTC-10:00) Hawaiterator',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Alaskan Standard Time',\n                  offset: -540,\n                  offsetHours: -9,\n                  displayName: '(UTC-09:00) Alaska',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Pacific Standard Time (Mexico)',\n                  offset: -480,\n                  offsetHours: -8,\n                  displayName: '(UTC-08:00) Baja California',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Pacific Standard Time',\n                  offset: -480,\n                  offsetHours: -8,\n                  displayName: '(UTC-08:00) Pacific Time (US & Canada)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'US Mountain Standard Time',\n                  offset: -420,\n                  offsetHours: -7,\n                  displayName: '(UTC-07:00) Arizona',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Mountain Standard Time (Mexico)',\n                  offset: -420,\n                  offsetHours: -7,\n                  displayName: '(UTC-07:00) Chihuahua, La Paz, Mazatlan',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Mountain Standard Time',\n                  offset: -420,\n                  offsetHours: -7,\n                  displayName: '(UTC-07:00) Mountain Time (US & Canada)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Central Standard Time',\n                  offset: -360,\n                  offsetHours: -6,\n                  displayName: '(UTC-06:00) Central Time (US & Canada)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Central America Standard Time',\n                  offset: -360,\n                  offsetHours: -6,\n                  displayName: '(UTC-06:00) Central America',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Canada Central Standard Time',\n                  offset: -360,\n                  offsetHours: -6,\n                  displayName: '(UTC-06:00) Saskatchewan',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Central Standard Time (Mexico)',\n                  offset: -360,\n                  offsetHours: -6,\n                  displayName: '(UTC-06:00) Guadalajara, Mexico City, Monterrey',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'SA Pacific Standard Time',\n                  offset: -300,\n                  offsetHours: -5,\n                  displayName: '(UTC-05:00) Bogota, Lima, Quito, Rio Branco',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Eastern Standard Time',\n                  offset: -300,\n                  offsetHours: -5,\n                  displayName: '(UTC-05:00) Eastern Time (US & Canada)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'US Eastern Standard Time',\n                  offset: -300,\n                  offsetHours: -5,\n                  displayName: '(UTC-05:00) Indiana (East)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Venezuela Standard Time',\n                  offset: -270,\n                  offsetHours: -4.5,\n                  displayName: '(UTC-04:30) Caracas',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Atlantic Standard Time',\n                  offset: -240,\n                  offsetHours: -4,\n                  displayName: '(UTC-04:00) Atlantic Time (Canada)',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Paraguay Standard Time',\n                  offset: -240,\n                  offsetHours: -4,\n                  displayName: '(UTC-04:00) Asuncion',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Central Brazilian Standard Time',\n                  offset: -240,\n                  offsetHours: -4,\n                  displayName: '(UTC-04:00) Cuiaba',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Pacific SA Standard Time',\n                  offset: -240,\n                  offsetHours: -4,\n                  displayName: '(UTC-04:00) Santiago',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'SA Western Standard Time',\n                  offset: -240,\n                  offsetHours: -4,\n                  displayName: '(UTC-04:00) Georgetown, La Paz, Manaus',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Newfoundland Standard Time',\n                  offset: -210,\n                  offsetHours: -3.5,\n                  displayName: '(UTC-03:30) Newfoundland',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'SA Eastern Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Cayenne, Fortaleza',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Argentina Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Buenos Aires',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'E. South America Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Brasilia',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Bahia Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Salvador',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Montevideo Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Montevideo',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Greenland Standard Time',\n                  offset: -180,\n                  offsetHours: -3,\n                  displayName: '(UTC-03:00) Greenland',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'UTC-02',\n                  offset: -120,\n                  offsetHours: -2,\n                  displayName: '(UTC-02:00) Coordinated Universal Time-02',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Mid-Atlantic Standard Time',\n                  offset: -120,\n                  offsetHours: -2,\n                  displayName: '(UTC-02:00) Mid-Atlantic - Old',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Azores Standard Time',\n                  offset: -60,\n                  offsetHours: -1,\n                  displayName: '(UTC-01:00) Azores',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Cape Verde Standard Time',\n                  offset: -60,\n                  offsetHours: -1,\n                  displayName: '(UTC-01:00) Cape Verde Is.',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Morocco Standard Time',\n                  offset: 0,\n                  offsetHours: 0,\n                  displayName: '(UTC) Casablanca',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'UTC',\n                  offset: 0,\n                  offsetHours: 0,\n                  displayName: '(UTC) Coordinated Universal Time',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'GMT Standard Time',\n                  offset: 0,\n                  offsetHours: 0,\n                  displayName: '(UTC) Dublin, Edinburgh, Lisbon, London',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Greenwich Standard Time',\n                  offset: 0,\n                  offsetHours: 0,\n                  displayName: '(UTC) Monrovia, Reykjavik',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Central European Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Namibia Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) Windhoek',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'W. Central Africa Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) West Central Africa',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'W. Europe Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) Amsterdam, Berlin, Rome',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Central Europe Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) Belgrade, Budapest, Prague',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Romance Standard Time',\n                  offset: 60,\n                  offsetHours: 1,\n                  displayName: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'FLE Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'South Africa Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Harare, Pretoria',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Turkey Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Istanbul',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'GTB Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Athens, Bucharest',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Libya Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Tripoli',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'E. Europe Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) E. Europe',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Jordan Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Amman',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Middle East Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Beirut',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Egypt Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Cairo',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Syria Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Damascus',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Israel Standard Time',\n                  offset: 120,\n                  offsetHours: 2,\n                  displayName: '(UTC+02:00) Jerusalem',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Arab Standard Time',\n                  offset: 180,\n                  offsetHours: 3,\n                  displayName: '(UTC+03:00) Kuwait, Riyadh',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'E. Africa Standard Time',\n                  offset: 180,\n                  offsetHours: 3,\n                  displayName: '(UTC+03:00) Nairobi',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Arabic Standard Time',\n                  offset: 180,\n                  offsetHours: 3,\n                  displayName: '(UTC+03:00) Baghdad',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Kaliningrad Standard Time',\n                  offset: 180,\n                  offsetHours: 3,\n                  displayName: '(UTC+03:00) Kaliningrad, Minsk',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Iran Standard Time',\n                  offset: 210,\n                  offsetHours: 3.5,\n                  displayName: '(UTC+03:30) Tehran',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Mauritius Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Port Louis',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Georgian Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Tbilisi',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Caucasus Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Yerevan',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Arabian Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Abu Dhabi, Muscat',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Azerbaijan Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Baku',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Russian Standard Time',\n                  offset: 240,\n                  offsetHours: 4,\n                  displayName: '(UTC+04:00) Moscow, St. Petersburg, Volgograd',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Afghanistan Standard Time',\n                  offset: 270,\n                  offsetHours: 4.5,\n                  displayName: '(UTC+04:30) Kabul',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Pakistan Standard Time',\n                  offset: 300,\n                  offsetHours: 5,\n                  displayName: '(UTC+05:00) Islamabad, Karachi',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'West Asia Standard Time',\n                  offset: 300,\n                  offsetHours: 5,\n                  displayName: '(UTC+05:00) Ashgabat, Tashkent',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'India Standard Time',\n                  offset: 330,\n                  offsetHours: 5.5,\n                  displayName: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Sri Lanka Standard Time',\n                  offset: 330,\n                  offsetHours: 5.5,\n                  displayName: '(UTC+05:30) Sri Jayawardenepura',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Nepal Standard Time',\n                  offset: 345,\n                  offsetHours: 5.75,\n                  displayName: '(UTC+05:45) Kathmandu',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Central Asia Standard Time',\n                  offset: 360,\n                  offsetHours: 6,\n                  displayName: '(UTC+06:00) Astana',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Bangladesh Standard Time',\n                  offset: 360,\n                  offsetHours: 6,\n                  displayName: '(UTC+06:00) Dhaka',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Ekaterinburg Standard Time',\n                  offset: 360,\n                  offsetHours: 6,\n                  displayName: '(UTC+06:00) Ekaterinburg',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Myanmar Standard Time',\n                  offset: 390,\n                  offsetHours: 6.5,\n                  displayName: '(UTC+06:30) Yangon (Rangoon)',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'SE Asia Standard Time',\n                  offset: 420,\n                  offsetHours: 7,\n                  displayName: '(UTC+07:00) Bangkok, Hanoi, Jakarta',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'N. Central Asia Standard Time',\n                  offset: 420,\n                  offsetHours: 7,\n                  displayName: '(UTC+07:00) Novosibirsk',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Ulaanbaatar Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Ulaanbaatar',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'China Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Beijing, Chongqing, Hong Kong',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Singapore Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Kuala Lumpur, Singapore',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'North Asia Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Krasnoyarsk',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Taipei Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Taipei',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'W. Australia Standard Time',\n                  offset: 480,\n                  offsetHours: 8,\n                  displayName: '(UTC+08:00) Perth',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Korea Standard Time',\n                  offset: 540,\n                  offsetHours: 9,\n                  displayName: '(UTC+09:00) Seoul',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'North Asia East Standard Time',\n                  offset: 540,\n                  offsetHours: 9,\n                  displayName: '(UTC+09:00) Irkutsk',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Tokyo Standard Time',\n                  offset: 540,\n                  offsetHours: 9,\n                  displayName: '(UTC+09:00) Osaka, Sapporo, Tokyo',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'AUS Central Standard Time',\n                  offset: 570,\n                  offsetHours: 9.5,\n                  displayName: '(UTC+09:30) Darwin',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Cen. Australia Standard Time',\n                  offset: 570,\n                  offsetHours: 9.5,\n                  displayName: '(UTC+09:30) Adelaide',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'West Pacific Standard Time',\n                  offset: 600,\n                  offsetHours: 10,\n                  displayName: '(UTC+10:00) Guam, Port Moresby',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Tasmania Standard Time',\n                  offset: 600,\n                  offsetHours: 10,\n                  displayName: '(UTC+10:00) Hobart',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'E. Australia Standard Time',\n                  offset: 600,\n                  offsetHours: 10,\n                  displayName: '(UTC+10:00) Brisbane',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'AUS Eastern Standard Time',\n                  offset: 600,\n                  offsetHours: 10,\n                  displayName: '(UTC+10:00) Canberra, Melbourne, Sydney',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Yakutsk Standard Time',\n                  offset: 600,\n                  offsetHours: 10,\n                  displayName: '(UTC+10:00) Yakutsk',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Vladivostok Standard Time',\n                  offset: 660,\n                  offsetHours: 11,\n                  displayName: '(UTC+11:00) Vladivostok',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Central Pacific Standard Time',\n                  offset: 660,\n                  offsetHours: 11,\n                  displayName: '(UTC+11:00) Solomon Is., New Caledonia',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Magadan Standard Time',\n                  offset: 720,\n                  offsetHours: 12,\n                  displayName: '(UTC+12:00) Magadan',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Kamchatka Standard Time',\n                  offset: 720,\n                  offsetHours: 12,\n                  displayName: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'Fiji Standard Time',\n                  offset: 720,\n                  offsetHours: 12,\n                  displayName: '(UTC+12:00) Fiji',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'New Zealand Standard Time',\n                  offset: 720,\n                  offsetHours: 12,\n                  displayName: '(UTC+12:00) Auckland, Wellington',\n                  supportsDaylightSavingTime: true\n                }, {\n                  id: 'UTC+12',\n                  offset: 720,\n                  offsetHours: 12,\n                  displayName: '(UTC+12:00) Coordinated Universal Time+12',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Tonga Standard Time',\n                  offset: 780,\n                  offsetHours: 13,\n                  displayName: '(UTC+13:00) Nuku\\'alofa',\n                  supportsDaylightSavingTime: false\n                }, {\n                  id: 'Samoa Standard Time',\n                  offset: 780,\n                  offsetHours: 13,\n                  displayName: '(UTC+13:00) Samoa',\n                  supportsDaylightSavingTime: true\n                }]\n              };\n              if (this === $.jqx._jqxScheduler.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              this.that = this;\n              return settings;\n            },\n            _applyThemeSettings: function () {\n              const that = this;\n              var gridStyle = window.getComputedStyle(that.element);\n              var rowHeight = gridStyle.getPropertyValue('--jqx-grid-row-height');\n              var columnHeight = gridStyle.getPropertyValue('--jqx-grid-column-height');\n              var scrollbarSize = gridStyle.getPropertyValue('--jqx-scrollbar-size');\n              if (rowHeight) {\n                if (that.rowsHeight === 27) {\n                  that.rowsHeight = parseInt(rowHeight);\n                }\n              }\n              if (columnHeight) {\n                that.columnsHeight = parseInt(columnHeight);\n              }\n              if (scrollbarSize) {\n                //         that.scrollBarSize = scrollbarSize;\n                //       $.jqx.utilities.scrollBarSize = scrollbarSize;\n              }\n            },\n            createInstance: function (args) {\n              var that = this;\n              that._views = new Array();\n              that._view = that.view;\n              this._applyThemeSettings();\n              for (var i = 0; i < that.views.length; i++) {\n                if ($.type(that.views[i]) === \"string\") {\n                  that._views.push({\n                    type: that.views[i]\n                  });\n                } else {\n                  that._views.push(that.views[i]);\n                }\n              }\n              for (var i = 0; i < that._views.length; i++) {\n                if (that._views[i].type == that.view) {\n                  that._view = i;\n                  break;\n                }\n              }\n              if ($.jqx.utilities.scrollBarSize != 15) {\n                that.scrollBarSize = $.jqx.utilities.scrollBarSize;\n              }\n              if (that.source && !that.source.dataBind) {\n                that.source = new $.jqx.dataAdapter(that.source);\n              }\n              var datafields = that.source._source.datafields;\n              if (datafields && datafields.length > 0) {\n                that._camelCase = that.source._source.dataFields !== undefined;\n                that.selectionMode = that.selectionMode.toLowerCase();\n              }\n              if (that.host.attr(\"tabindex\") == null) {\n                that.host.attr('tabindex', '0');\n              }\n              that.host.attr('role', 'grid');\n              that.host.attr('align', 'left');\n              that.host.addClass(that.toTP('jqx-grid'));\n              that.host.addClass(that.toTP('jqx-scheduler'));\n              that.host.addClass(that.toTP('jqx-reset'));\n              that.host.addClass(that.toTP('jqx-rc-all'));\n              that.host.addClass(that.toTP('jqx-widget'));\n              that.host.addClass(that.toTP('jqx-widget-content jqx-disableselect'));\n              // check for missing modules.\n              if (that._testmodules()) {\n                return;\n              }\n              that.overlay = $(\"<div style='z-index: 999; position:absolute;'></div>\");\n              that.overlay.hide();\n              that.overlay.appendTo(that.host);\n              that.render(true);\n              $.jqx.utilities.resize(that.host, function () {\n                var width = $(window).width();\n                var height = $(window).height();\n                that._hostWidth = null;\n                that._hostHeight = null;\n                var hostwidth = that.host.width();\n                var hostheight = that.host.height();\n                that._hostWidth = hostwidth;\n                that._hostHeight = hostheight;\n                if (that._lastHostWidth != hostwidth || that._lastHostHeight != hostheight) {\n                  that._updatesize(that._lastHostWidth != hostwidth, that._lastHostHeight != hostheight);\n                }\n                that._lastWidth = width;\n                that._lastHeight = height;\n                that._lastHostWidth = hostwidth;\n                that._lastHostHeight = hostheight;\n              });\n              that.createEditRecurrenceDialog();\n            },\n            createEditRecurrenceDialog: function () {\n              var that = this;\n              that.editRecurrenceDialog = null;\n              var editRecurrenceDialog = $(\"<div><div>\" + that.schedulerLocalization.editRecurringAppointmentDialogTitleString + \"</div><div><div>\" + that.schedulerLocalization.editRecurringAppointmentDialogContentString + \"</div><div style='position: absolute; white-space:nowrap; text-overflow: ellipsis; left:0px; width:100%; bottom: 0px;'><button title='\" + that.schedulerLocalization.editRecurringAppointmentDialogOccurrenceString + \"' id='editRecurringAppointmentOccurrence\" + \".\" + that.element.id + \"' style='white-space:nowrap; text-overflow: ellipsis; border-left-width: 0px;  border-bottom-width: 0px; border-radius:0px; width:50%;'>\" + that.schedulerLocalization.editRecurringAppointmentDialogOccurrenceString + \"</button><button title='\" + that.schedulerLocalization.editRecurringAppointmentDialogSeriesString + \"' id='editRecurringAppointmentSeries\" + \".\" + that.element.id + \"' style=' white-space:nowrap; text-overflow: ellipsis; border-bottom-width: 0px;  border-left-width: 0px; border-right-width:0px; width:50%; border-radius:0px;'>\" + that.schedulerLocalization.editRecurringAppointmentDialogSeriesString + \"</button></div></div></div>\");\n              that.editRecurrenceDialog = editRecurrenceDialog;\n              $(editRecurrenceDialog).jqxWindow({\n                rtl: that.rtl,\n                autoFocus: false,\n                animationType: \"none\",\n                autoOpen: false,\n                theme: that.theme,\n                minWidth: 300,\n                minHeight: 110,\n                resizable: false\n              });\n              var buttons = editRecurrenceDialog.find('button');\n              buttons.jqxButton({\n                theme: that.theme,\n                width: '50%'\n              });\n              var fromButton = false;\n              buttons.mousedown(function () {\n                fromButton = true;\n                var id = this.id;\n                if (id.indexOf('editRecurringAppointmentOccurrence') >= 0) {\n                  that.editSeries(false);\n                } else {\n                  that.editSeries(true);\n                }\n                $(editRecurrenceDialog).jqxWindow('close');\n              });\n              this.addHandler($(editRecurrenceDialog), 'open', function (event) {\n                that._raiseEvent('editRecurrenceDialogOpen', {\n                  dialog: editRecurrenceDialog,\n                  appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                });\n              });\n              that.addHandler($(editRecurrenceDialog), \"keydown\", function (event) {\n                if (event.keyCode == 13) {\n                  if ($(document.activeElement).ischildof($(editRecurrenceDialog))) {\n                    if (document.activeElement.nodeName.toLowerCase() == \"button\") {\n                      $(document.activeElement).trigger('mousedown');\n                      $(document.activeElement).trigger('mouseup');\n                      return true;\n                    }\n                  }\n                }\n              });\n              this.addHandler($(editRecurrenceDialog), 'close', function (event) {\n                if (!fromButton) {\n                  that._removeFeedbackAndStopResize();\n                  that.overlay.hide();\n                  that.focus();\n                  that._raiseEvent('editRecurrenceDialogClose', {\n                    dialog: editRecurrenceDialog,\n                    appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                  });\n                  return false;\n                }\n                fromButton = false;\n                that.overlay.hide();\n                that.focus();\n                that._raiseEvent('editRecurrenceDialogClose', {\n                  dialog: editRecurrenceDialog,\n                  appointment: that.selectedJQXAppointment ? that.selectedJQXAppointment.boundAppointment : null\n                });\n              });\n              that.editRecurrenceDialog = editRecurrenceDialog;\n            },\n            getViewStart: function () {\n              var visibleDate = this.getVisibleDate();\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              switch (view) {\n                case \"dayView\":\n                case \"timelineDayView\":\n                  return visibleDate;\n              }\n              var firstDay = this.getFirstDayOfWeek(visibleDate);\n              return firstDay;\n            },\n            // gets the view's end date.\n            getViewEnd: function () {\n              var start = this.getViewStart();\n              var step = 1;\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              switch (view) {\n                case \"dayView\":\n                  step = 1;\n                  break;\n                case \"timelineDayView\":\n                  step = 1;\n                  if (viewObject.days) {\n                    step = viewObject.days;\n                  }\n                  break;\n                case \"weekView\":\n                case \"timelineWeekView\":\n                  step = 7;\n                  if (viewObject.days) {\n                    step = viewObject.days;\n                  }\n                  break;\n                case \"monthView\":\n                  step = 41;\n                  break;\n                case \"timelineMonthView\":\n                  step = 41;\n                  if (viewObject.days) {\n                    step = viewObject.days;\n                  }\n                  break;\n                case \"agendaView\":\n                  step = 7;\n                  if (viewObject.days) {\n                    step = viewObject.days;\n                  }\n                  break;\n              }\n              return start.addDays(step);\n            },\n            getFirstDayOfWeek: function (visibleDate) {\n              var date = visibleDate;\n              var firstDayOfWeek = this.schedulerLocalization.firstDay;\n              if (firstDayOfWeek < 0 || firstDayOfWeek > 6) firstDayOfWeek = 6;\n              while (date.dayOfWeek() != firstDayOfWeek) {\n                date.addDays(-1, false);\n              }\n              return date;\n            },\n            // gets the visible date in the current month.\n            getVisibleDate: function () {\n              var visibleDate = this.date;\n              if (visibleDate < this.min) {\n                visibleDate = this.min;\n              }\n              if (visibleDate > this.max) {\n                visibleDate = this.max;\n              }\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              visibleDate = visibleDate.clearTime();\n              switch (view) {\n                case \"dayView\":\n                case \"weekView\":\n                case \"timelineDayView\":\n                case \"timelineWeekView\":\n                case \"agendaView\":\n                  return visibleDate;\n              }\n              var dayInMonth = visibleDate.day();\n              var newVisibleDate = visibleDate.addDays(-dayInMonth + 1);\n              visibleDate = newVisibleDate;\n              return visibleDate;\n            },\n            _builddataloadelement: function () {\n              if (this.dataloadelement) {\n                this.dataloadelement.remove();\n              }\n              this.dataloadelement = $('<div class=\"jqx-datatable-load\" style=\"z-index: 99998; background-color:rgba(50,50,50,0.1); overflow: hidden; position: absolute;\"></div>');\n              var table = $('<div style=\"z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;\"><div style=\"float: left;\"><div style=\"float: left; overflow: hidden; width: 32px; height: 32px;\" class=\"jqx-grid-load\"/><span style=\"margin-top: 10px; float: left; display: block; margin-left: 5px;\" >' + this.schedulerLocalization.loadString + '</span></div></div>');\n              table.addClass(this.toTP('jqx-rc-all'));\n              this.dataloadelement.addClass(this.toTP('jqx-rc-all'));\n              table.addClass(this.toTP('jqx-fill-state-normal'));\n              this.dataloadelement.append(table);\n              this.dataloadelement.width(this.width);\n              this.dataloadelement.height(this.height);\n              this.host.prepend(this.dataloadelement);\n              if (this.source._source.url != \"\") {\n                var autoHeight = false;\n                if (this.height === \"auto\" || this.height === null || this.autoheight) {\n                  if (this.maxHeight == 999999) {\n                    autoHeight = true;\n                  }\n                }\n                if (autoHeight) {\n                  this.host.height(100);\n                  this.dataloadelement.height(100);\n                } else {\n                  this.host.height(this.height);\n                  this.dataloadelement.height(this.height);\n                }\n                var autoWidth = false;\n                if (this.width === \"auto\" || this.width === null || this.autoWidth) {\n                  autoWidth = true;\n                }\n                if (autoWidth) {\n                  this.host.width(300);\n                  this.dataloadelement.width(300);\n                } else {\n                  this.host.width(this.width);\n                  this.dataloadelement.width(this.width);\n                }\n              }\n            },\n            _measureElement: function (type) {\n              var span = $(\"<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>\");\n              span.addClass(this.toTP('jqx-widget'));\n              $(document.body).append(span);\n              if (type == 'cell') {\n                this._cellheight = span.height();\n              } else this._columnheight = span.height();\n              span.remove();\n            },\n            _testmodules: function () {\n              var missingModules = \"\";\n              var that = this;\n              var addComma = function () {\n                if (missingModules.length != \"\") missingModules += \",\";\n              };\n              if (!this.host.jqxScrollBar) {\n                addComma();\n                missingModules += \" jqxscrollbar.js\";\n              }\n              if (!this.host.jqxButton) {\n                addComma();\n                missingModules += \" jqxbuttons.js\";\n              }\n              if (!$.jqx.dataAdapter) {\n                addComma();\n                missingModules += \" jqxdata.js\";\n              }\n              if (!this.host.jqxDateTimeInput) {\n                addComma();\n                missingModules += \" jqxdatetimeinput.js\";\n              }\n              if (!this.host.jqxCalendar) {\n                addComma();\n                missingModules += \" jqxcalendar.js\";\n              }\n              try {\n                if (!Globalize) {\n                  addComma();\n                  missingModules += \" globalize.js\";\n                }\n              } catch (er) {}\n              if (missingModules != \"\") {\n                throw new Error(\"jqxScheduler: Missing references to the following module(s): \" + missingModules);\n                this.host.remove();\n                return true;\n              }\n              return false;\n            },\n            focus: function () {\n              try {\n                if (this.isTouchDevice()) return;\n                if (this._editDialog && this._editDialog.jqxWindow('isOpen')) {\n                  var that = this;\n                  setTimeout(function () {\n                    that.editDialogFields.subject.focus();\n                    that.editDialogFields.subject.select();\n                  }, 1);\n                  this.focused = true;\n                  return;\n                }\n                if (document.activeElement == this.element) return;\n                this.host.focus();\n                var that = this;\n                setTimeout(function () {\n                  that.host.focus();\n                }, 25);\n                this.focused = true;\n              } catch (error) {}\n            },\n            hiddenParent: function () {\n              return $.jqx.isHidden(this.host);\n            },\n            _updatesize: function (updateWidth, updateHeight) {\n              if (this._loading) {\n                return;\n              }\n              var that = this;\n              var hostWidth = that.host.width();\n              var hostHeight = that.host.height();\n              if (!that._oldWidth) {\n                that._oldWidth = hostWidth;\n              }\n              if (!that._oldHeight) {\n                that._oldHeight = hostHeight;\n              }\n              if (that._resizeTimer != undefined) {\n                clearTimeout(that._resizeTimer);\n                that._resizeTimer = null;\n              }\n              var delay = 300;\n              var resize = function () {\n                if (that._resizeTimer) {\n                  clearTimeout(that._resizeTimer);\n                }\n                that.resizingGrid = true;\n                if ($.jqx.isHidden(that.host)) return;\n                that._updatecolumnwidths();\n                that.refresh();\n                that._oldWidth = hostWidth;\n                that._oldHeight = hostHeight;\n                that.resizingGrid = false;\n              };\n              resize();\n              that._resizeTimer = setTimeout(function () {\n                var hostWidth = that.host.width();\n                var hostHeight = that.host.height();\n                if (that._oldWidth != hostWidth || that._oldHeight != hostHeight) {\n                  resize();\n                }\n              }, delay);\n            },\n            resize: function (width, height) {\n              if (width != undefined) {\n                this.width = width;\n              }\n              if (height != undefined) {\n                this.height = height;\n              }\n              this._updatecolumnwidths();\n              this.refresh();\n            },\n            isTouchDevice: function () {\n              if (this.touchDevice != undefined) return this.touchDevice;\n              var isTouchDevice = $.jqx.mobile.isTouchDevice();\n              this.touchDevice = isTouchDevice;\n              if (this.touchMode == true) {\n                isTouchDevice = true;\n                $.jqx.mobile.setMobileSimulator(this.element);\n                this.touchDevice = isTouchDevice;\n              } else if (this.touchMode == false) {\n                isTouchDevice = false;\n              }\n              if (isTouchDevice) {\n                this.touchDevice = true;\n                this.host.addClass(this.toThemeProperty('jqx-touch'));\n                this.host.find('jqx-widget-content').addClass(this.toThemeProperty('jqx-touch'));\n                this.host.find('jqx-widget-header').addClass(this.toThemeProperty('jqx-touch'));\n                this.scrollBarSize = this.touchScrollBarSize;\n              }\n              return isTouchDevice;\n            },\n            toTP: function (name) {\n              return this.toThemeProperty(name);\n            },\n            localizestrings: function (localizationobj, refresh) {\n              this._cellscache = new Array();\n              if ($.jqx.dataFormat) {\n                $.jqx.dataFormat.cleardatescache();\n              }\n              if (this._loading) {\n                throw new Error('jqxScheduler: ' + this.loadingErrorMessage);\n                return false;\n              }\n              if (localizationobj != null) {\n                for (var obj in this.schedulerLocalization) {\n                  if (localizationobj[obj]) {\n                    this.schedulerLocalization[obj] = localizationobj[obj];\n                  }\n                }\n                if (localizationobj.loadingErrorMessage) {\n                  this.loadingErrorMessage = localizationobj.loadingErrorMessage;\n                }\n                if (refresh !== false) {\n                  this._builddataloadelement();\n                  $(this.dataloadelement).css('visibility', 'hidden');\n                  $(this.dataloadelement).css('display', 'none');\n                }\n              } else {\n                this.schedulerLocalization = {\n                  // separator of parts of a date (e.g. '/' in 11/05/1955)\n                  '/': \"/\",\n                  // separator of parts of a time (e.g. ':' in 05:44 PM)\n                  ':': \":\",\n                  // the first day of the week (0 = Sunday, 1 = Monday, etc)\n                  firstDay: 0,\n                  days: {\n                    // full day names\n                    names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                    // abbreviated day names\n                    namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                    // shortest day names\n                    namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n                  },\n                  months: {\n                    // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                    names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                    // abbreviated month names\n                    namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n                  },\n                  // AM and PM designators in one of these forms:\n                  // The usual view, and the upper and lower case versions\n                  //      [standard,lowercase,uppercase]\n                  // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n                  //      null\n                  AM: [\"AM\", \"am\", \"AM\"],\n                  PM: [\"PM\", \"pm\", \"PM\"],\n                  eras: [\n                  // eras in reverse chronological order.\n                  // name: the name of the era in this culture (e.g. A.D., C.E.)\n                  // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                  // offset: offset in years from gregorian calendar\n                  {\n                    \"name\": \"A.D.\",\n                    \"start\": null,\n                    \"offset\": 0\n                  }],\n                  twoDigitYearMax: 2029,\n                  patterns: {\n                    // short date pattern\n                    d: \"M/d/yyyy\",\n                    // long date pattern\n                    D: \"dddd, MMMM dd, yyyy\",\n                    // short time pattern\n                    t: \"h:mm tt\",\n                    // long time pattern\n                    T: \"h:mm:ss tt\",\n                    // long date, short time pattern\n                    f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                    // long date, long time pattern\n                    F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                    // month/day pattern\n                    M: \"MMMM dd\",\n                    // month/year pattern\n                    Y: \"yyyy MMMM\",\n                    // S is a sortable format that does not vary by culture\n                    S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n                    // formatting of dates in MySQL DataBases\n                    ISO: \"yyyy-MM-dd hh:mm:ss\",\n                    ISO2: \"yyyy-MM-dd HH:mm:ss\",\n                    d1: \"dd.MM.yyyy\",\n                    d2: \"dd-MM-yyyy\",\n                    d3: \"dd-MMMM-yyyy\",\n                    d4: \"dd-MM-yy\",\n                    d5: \"H:mm\",\n                    d6: \"HH:mm\",\n                    d7: \"HH:mm tt\",\n                    d8: \"dd/MMMM/yyyy\",\n                    d9: \"MMMM-dd\",\n                    d10: \"MM-dd\",\n                    d11: \"MM-dd-yyyy\"\n                  },\n                  agendaDateColumn: \"Date\",\n                  agendaTimeColumn: \"Time\",\n                  agendaAppointmentColumn: \"Appointment\",\n                  backString: \"Back\",\n                  forwardString: \"Forward\",\n                  toolBarPreviousButtonString: \"previous\",\n                  toolBarNextButtonString: \"next\",\n                  emptyDataString: \"No data to display\",\n                  loadString: \"Loading...\",\n                  clearString: \"Clear\",\n                  todayString: \"Today\",\n                  dayViewString: \"Day\",\n                  weekViewString: \"Week\",\n                  monthViewString: \"Month\",\n                  agendaViewString: \"Agenda\",\n                  timelineDayViewString: \"Timeline Day\",\n                  timelineWeekViewString: \"Timeline Week\",\n                  timelineMonthViewString: \"Timeline Month\",\n                  agendaAllDayString: \"all day\",\n                  loadingErrorMessage: \"The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxScheduler raises the 'bindingComplete' event when the binding is completed.\",\n                  editRecurringAppointmentDialogTitleString: \"Edit Recurring Appointment\",\n                  editRecurringAppointmentDialogContentString: \"Do you want to edit only this occurrence or the series?\",\n                  editRecurringAppointmentDialogOccurrenceString: \"Edit Occurrence\",\n                  editRecurringAppointmentDialogSeriesString: \"Edit The Series\",\n                  editDialogTitleString: \"Edit Appointment\",\n                  editDialogCreateTitleString: \"Create New Appointment\",\n                  contextMenuEditAppointmentString: \"Edit Appointment\",\n                  contextMenuCreateAppointmentString: \"Create New Appointment\",\n                  editDialogSubjectString: \"Subject\",\n                  editDialogLocationString: \"Location\",\n                  editDialogFromString: \"From\",\n                  editDialogToString: \"To\",\n                  editDialogAllDayString: \"All day\",\n                  editDialogExceptionsString: \"Exceptions\",\n                  editDialogResetExceptionsString: \"Reset on Save\",\n                  editDialogDescriptionString: \"Description\",\n                  editDialogResourceIdString: \"Owner\",\n                  editDialogStatusString: \"Status\",\n                  editDialogColorString: \"Color\",\n                  editDialogColorPlaceHolderString: \"Select Color\",\n                  editDialogTimeZoneString: \"Time Zone\",\n                  editDialogSelectTimeZoneString: \"Select Time Zone\",\n                  editDialogSaveString: \"Save\",\n                  editDialogDeleteString: \"Delete\",\n                  editDialogCancelString: \"Cancel\",\n                  editDialogRepeatString: \"Repeat\",\n                  editDialogRepeatEveryString: \"Repeat every\",\n                  editDialogRepeatEveryWeekString: \"week(s)\",\n                  editDialogRepeatEveryYearString: \"year(s)\",\n                  editDialogRepeatEveryDayString: \"day(s)\",\n                  editDialogRepeatNeverString: \"Never\",\n                  editDialogRepeatDailyString: \"Daily\",\n                  editDialogRepeatWeeklyString: \"Weekly\",\n                  editDialogRepeatMonthlyString: \"Monthly\",\n                  editDialogRepeatYearlyString: \"Yearly\",\n                  editDialogRepeatEveryMonthString: \"month(s)\",\n                  editDialogRepeatEveryMonthDayString: \"Day\",\n                  editDialogRepeatFirstString: \"first\",\n                  editDialogRepeatSecondString: \"second\",\n                  editDialogRepeatThirdString: \"third\",\n                  editDialogRepeatFourthString: \"fourth\",\n                  editDialogRepeatLastString: \"last\",\n                  editDialogRepeatEndString: \"End\",\n                  editDialogRepeatAfterString: \"After\",\n                  editDialogRepeatOnString: \"On\",\n                  editDialogRepeatOfString: \"of\",\n                  editDialogRepeatOccurrencesString: \"occurrence(s)\",\n                  editDialogRepeatSaveString: \"Save Occurrence\",\n                  editDialogRepeatSaveSeriesString: \"Save Series\",\n                  editDialogRepeatDeleteString: \"Delete Occurrence\",\n                  editDialogRepeatDeleteSeriesString: \"Delete Series\",\n                  editDialogStatuses: {\n                    free: \"Free\",\n                    tentative: \"Tentative\",\n                    busy: \"Busy\",\n                    outOfOffice: \"Out of Office\"\n                  }\n                };\n              }\n            },\n            _updateScrollbars: function (widgetHeight) {\n              var autoWidth = false;\n              var that = this;\n              if (that.width === \"auto\" || that.width === null || that.autowidth) {\n                if (that.maxWidth == 999999) {\n                  autoWidth = true;\n                }\n              }\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              if (view == \"monthView\" && that.resources && that.resources.orientation == \"none\" && !viewObject.monthRowAutoHeight) {\n                var vScrollBarVisibility = that.vScrollBar[0].style.visibility;\n                that.hScrollBar[0].style.visibility = \"hidden\";\n                that.vScrollBar[0].style.visibility = \"hidden\";\n                if (vScrollBarVisibility != that.vScrollBar[0].style.visibility) {\n                  that._updatecolumnwidths();\n                }\n                return;\n              }\n\n              // scrollbar Size.\n              var scrollSize = parseInt(that.scrollBarSize);\n              var tableHeight = that.table ? that.table.height() : 0;\n              var vOffset = 0;\n              var visibility = \"inherit\";\n              var vScrollBarVisibility = that.vScrollBar[0].style.visibility;\n              var hScrollBarVisibility = that.hScrollBar[0].style.visibility;\n              if (!widgetHeight) {\n                var hostHeight = that.host.height();\n              } else {\n                var hostHeight = widgetHeight;\n              }\n              if (!that.columnGroups) {\n                hostHeight -= that.showHeader ? that.columnsHeight : 0;\n              } else {\n                hostHeight -= that.showHeader ? that.columnsheader.height() : 0;\n              }\n              if (that.filterable) {\n                hostHeight -= that.filter.height();\n              }\n              if (that.pageable) {\n                hostHeight -= that.pagerHeight;\n                if (that.pagerPosition === \"both\") {\n                  hostHeight -= that.pagerHeight;\n                }\n              }\n              if (that.showToolbar) {\n                hostHeight -= that.toolbarHeight;\n              }\n              if (that.showLegend && that._resources.length > 0) {\n                hostHeight -= that.legendHeight;\n              }\n              var autoHeight = false;\n              if (that.height === \"auto\" || that.height === null || that.autoheight) {\n                if (that.maxHeight == 999999) {\n                  autoHeight = true;\n                }\n              }\n              if (!autoHeight && tableHeight > hostHeight && that.getRows().length > 0) {\n                that.vScrollBar[0].style.visibility = visibility;\n                vOffset = 4 + parseInt(scrollSize);\n                that.vScrollBar.jqxScrollBar({\n                  max: tableHeight - hostHeight\n                });\n              } else {\n                that.vScrollBar[0].style.visibility = \"hidden\";\n              }\n              if (vScrollBarVisibility != that.vScrollBar[0].style.visibility) {\n                that._updatecolumnwidths();\n              }\n              var tableWidth = that.table ? that.table.width() : 0;\n              if (tableWidth > 4) {\n                tableWidth -= 4;\n              }\n              var borderWidth = parseInt(that.host.css('border-left-width')) + parseInt(that.host.css('border-right-width'));\n              var hostWidth = borderWidth + that.host.width() - vOffset;\n              if (tableWidth > hostWidth && !autoWidth) {\n                that.hScrollBar[0].style.visibility = visibility;\n                that.hScrollBar.jqxScrollBar({\n                  max: 2 + borderWidth + tableWidth - hostWidth\n                });\n                vOffset = 4 + parseInt(scrollSize);\n                if (scrollSize == 0) vOffset = 0;\n                if (!autoHeight && tableHeight != hostHeight) {\n                  if (tableHeight > hostHeight - vOffset + 4 && that.getRows().length > 0) {\n                    that.hScrollBar.jqxScrollBar({\n                      max: borderWidth + tableWidth - hostWidth\n                    });\n                    var isHidden = that.vScrollBar[0].style.visibility === \"hidden\";\n                    that.vScrollBar[0].style.visibility = visibility;\n                    that._updatecolumnwidths();\n                    if (isHidden) {\n                      that.hScrollBar.jqxScrollBar({\n                        max: tableWidth - hostWidth + borderWidth\n                      });\n                    }\n                    var newTableWidth = that.table ? that.table.width() : 0;\n                    if (newTableWidth > 3) {\n                      newTableWidth -= 3;\n                    }\n                    if (newTableWidth != tableWidth) {\n                      if (newTableWidth < hostWidth) {\n                        that.hScrollBar.jqxScrollBar({\n                          max: borderWidth + newTableWidth - hostWidth\n                        });\n                        that.hScrollBar[0].style.visibility = \"hidden\";\n                        vOffset = 0;\n                      } else if (!isHidden) {\n                        that.hScrollBar.jqxScrollBar({\n                          max: tableWidth - hostWidth + borderWidth - scrollSize\n                        });\n                      } else if (newTableWidth > hostWidth) {\n                        that.hScrollBar.jqxScrollBar({\n                          max: borderWidth + newTableWidth - hostWidth\n                        });\n                      }\n                    }\n                  }\n                  if (tableHeight - hostHeight > 0) {\n                    that.vScrollBar.jqxScrollBar({\n                      max: tableHeight - hostHeight + vOffset\n                    });\n                  } else {\n                    that.vScrollBar[0].style.visibility = \"hidden\";\n                  }\n                }\n              } else {\n                that.hScrollBar[0].style.visibility = \"hidden\";\n              }\n              if (that.getRows().length === 0) {\n                that.vScrollBar[0].style.visibility = \"hidden\";\n                that.bottomRight[0].style.visibility = \"hidden\";\n              }\n              if (that.vScrollBar[0].style.visibility == \"hidden\") {\n                if (that.vScrollInstance.value != 0) {\n                  that.vScrollInstance.setPosition(0);\n                }\n              }\n            },\n            _measureElementWidth: function (text) {\n              var span = $(\"<span style='visibility: hidden; white-space: nowrap;'>\" + text + \"</span>\");\n              span.addClass(this.toTP('jqx-widget'));\n              span.addClass(this.toTP('jqx-grid'));\n              span.addClass(this.toTP('jqx-grid-column-header'));\n              span.addClass(this.toTP('jqx-widget-header'));\n              $(document.body).append(span);\n              var w = span.outerWidth() + 20;\n              span.remove();\n              return w;\n            },\n            _arrangeAutoHeight: function (scrollOffset) {\n              if (!scrollOffset) scrollOffset = 0;\n              if (this.height === \"auto\" || this.height === null || this.autoheight) {\n                var t = this.table.height();\n                var heightTotal = 0;\n                this._hostHeight = null;\n                if (!this.columnGroups) {\n                  heightTotal += this.showHeader ? this.columnsHeight : -1;\n                } else {\n                  heightTotal += this.showHeader ? this.columnsheader.height() : -1;\n                }\n                heightTotal += this.showLegend && this._resources.length > 0 ? this.legendHeight : 0;\n                heightTotal += this.showToolbar ? this.toolbarHeight : 0;\n                heightTotal += this.pageable ? this.pagerHeight : 0;\n                if (this.pagerPosition === 'both') {\n                  heightTotal += this.pageable ? this.pagerHeight : 0;\n                }\n                heightTotal += t;\n                if (this.filterable) {\n                  var filterconditions = this.filter.find('.filterrow');\n                  var filterconditionshidden = this.filter.find('.filterrow-hidden');\n                  var filterrow = 1;\n                  if (filterconditionshidden.length > 0) {\n                    filterrow = 0;\n                  }\n                  heightTotal += this.filterHeight - 1 + this.filterHeight * filterconditions.length * filterrow;\n                }\n                if (heightTotal + scrollOffset > this.maxHeight) {\n                  this.host.height(this.maxHeight);\n                } else {\n                  this.host.height(heightTotal + scrollOffset);\n                }\n                return true;\n              }\n              return false;\n            },\n            _arrangeAutoWidth: function (scrollOffset) {\n              if (!scrollOffset) scrollOffset = 0;\n              if (this.width === \"auto\" || this.width === null || this.autowidth) {\n                this._hostWidth = null;\n                var w = 0;\n                for (var i = 0; i < this.columns.records.length; i++) {\n                  var cw = this.columns.records[i].width;\n                  if (this.columns.records[i].hidden) continue;\n                  if (cw == 'auto') {\n                    cw = this._measureElementWidth(this.columns.records[i].text);\n                    w += cw;\n                  } else {\n                    w += cw;\n                  }\n                }\n                var width = w;\n                if (width + scrollOffset > this.maxWidth) {\n                  this.host.width(this.maxWidth);\n                } else {\n                  this.host.width(width + scrollOffset);\n                }\n                return true;\n              }\n              return false;\n            },\n            _measureTopAndHeight: function () {\n              var height = this.host.height();\n              var top = 0;\n              if (this.showToolbar) {\n                top += this.toolbarHeight;\n                height -= parseInt(this.toolbarHeight);\n              }\n              if (this.showLegend && this.legendPosition != 'bottom' && this._resources.length > 0) {\n                top += parseInt(this.legendHeight) + 1;\n              }\n              return {\n                top: top,\n                height: height\n              };\n            },\n            _arrange: function () {\n              if (!this.table) {\n                return;\n              }\n              this._arrangeAutoHeight();\n              this._arrangeAutoWidth();\n              var legendHeight = this.legendHeight;\n              if (this._resources.length == 0) {\n                legendHeight = 0;\n              }\n              var width = this._hostWidth ? this._hostWidth : this.host.width();\n              var height = this._hostHeight ? this._hostHeight : this.host.height();\n              var hostHeight = height;\n              var that = this;\n              if (this.showLegend && this.legendPosition == \"top\") {\n                this.legendbartop[0].style.visibility = \"inherit\";\n              } else {\n                this.legendbartop[0].style.visibility = \"hidden\";\n              }\n              var top = 0;\n              if (this.showToolbar) {\n                this.toolbar.width(width);\n                this.toolbar[0].style.height = this.toolbarHeight - 1 + \"px\";\n                this.toolbar[0].style.top = \"0px\";\n                top += this.toolbarHeight;\n                height -= parseInt(this.toolbarHeight);\n              } else {\n                this.toolbar[0].style.height = '0px';\n              }\n              if (this.showLegend && this.legendPosition == \"bottom\") {\n                this.legendbarbottom[0].style.width = width + \"px\";\n                this.legendbarbottom[0].style.height = legendHeight + \"px\";\n              } else {\n                this.legendbarbottom[0].style.height = '0px';\n              }\n              if (this.showLegend && this.legendPosition == \"top\") {\n                if (this.legendbartop[0].style.width != width + 'px') {\n                  this.legendbartop[0].style.width = parseInt(width) + 'px';\n                }\n                if (this.legendbartop[0].style.height != legendHeight + 'px') {\n                  this.legendbartop[0].style.height = parseInt(legendHeight - 1) + 'px';\n                }\n                if (this.legendbartop[0].style.top != top + 'px') {\n                  this.legendbartop[0].style.top = top + 'px';\n                }\n                var newContentTop = top + legendHeight + 'px';\n                top = top + legendHeight;\n                if (this.content[0].style.top != newContentTop) {\n                  this.content[0].style.top = top + 'px';\n                }\n              }\n              if (!this.showLegend) {\n                this.legendbartop[0].style.display = \"none\";\n                this.legendbarbottom[0].style.display = \"none\";\n              }\n              // scrollbar Size.\n              this._updateScrollbars(hostHeight);\n              var scrollSize = parseInt(this.scrollBarSize);\n              var scrollOffset = 4;\n              var bottomSizeOffset = 2;\n              var rightSizeOffset = 0;\n\n              // right scroll offset.\n              if (this.vScrollBar[0].style.visibility != 'hidden') {\n                rightSizeOffset = scrollSize + scrollOffset;\n              }\n\n              // bottom scroll offset.\n              if (this.hScrollBar[0].style.visibility != 'hidden') {\n                bottomSizeOffset = scrollSize + scrollOffset + 2;\n              }\n              if (scrollSize == 0) {\n                bottomSizeOffset = 0;\n                rightSizeOffset = 0;\n              }\n              if (\"hidden\" != this.vScrollBar[0].style.visibility || \"hidden\" != this.hScrollBar[0].style.visibility) {\n                var autoHeight = this._arrangeAutoHeight(bottomSizeOffset - 2);\n                var autoWidth = this._arrangeAutoWidth(rightSizeOffset + 1);\n                if (autoHeight || autoWidth) {\n                  this.legendbartop[0].style.width = parseInt(width) + 'px';\n                  this.toolbar[0].style.width = parseInt(width) + 'px';\n                  this.legendbarbottom[0].style.width = parseInt(width) + 'px';\n                  this.filter[0].style.width = parseInt(width) + 'px';\n                }\n                if (autoHeight) {\n                  var measured = this._measureTopAndHeight();\n                  top = measured.top;\n                  height = measured.height;\n                }\n              }\n              var pageheight = 0;\n              if (this.showLegend && this.legendPosition == \"bottom\") {\n                bottomSizeOffset += legendHeight;\n                pageheight += legendHeight;\n              } else if (this.showLegend) {\n                bottomSizeOffset += legendHeight;\n              }\n              if (this.hScrollBar[0].style.height != scrollSize + 'px') {\n                this.hScrollBar[0].style.height = parseInt(scrollSize) + 'px';\n              }\n              if (this.hScrollBar[0].style.top != top + height - scrollOffset - scrollSize - pageheight + 'px' || this.hScrollBar[0].style.left != '0px') {\n                this.hScrollBar[0].style.top = top + height - scrollOffset - scrollSize - pageheight - 1 + 'px';\n                this.hScrollBar[0].style.left = '0px';\n              }\n              var hScrollWidth = this.hScrollBar[0].style.width;\n              var hSizeChange = false;\n              var vSizeChange = false;\n              if (rightSizeOffset == 0) {\n                if (hScrollWidth != width - 2 + 'px') {\n                  this.hScrollBar[0].style.width = width - 2 + 'px';\n                  hSizeChange = true;\n                }\n              } else {\n                if (hScrollWidth != width - scrollSize - scrollOffset + 'px') {\n                  this.hScrollBar[0].style.width = width - scrollSize - scrollOffset + 'px';\n                  hSizeChange = true;\n                }\n              }\n              if (this.vScrollBar[0].style.width != scrollSize + 'px') {\n                this.vScrollBar[0].style.width = scrollSize + 'px';\n                vSizeChange = true;\n              }\n              if (this.vScrollBar[0].style.height != parseInt(height) - bottomSizeOffset + 'px') {\n                this.vScrollBar[0].style.height = parseInt(height) - bottomSizeOffset + 'px';\n                vSizeChange = true;\n              }\n              if (this.vScrollBar[0].style.left != parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px' || this.vScrollBar[0].style.top != top + 'px') {\n                this.vScrollBar[0].style.top = top + 'px';\n                this.vScrollBar[0].style.left = parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px';\n              }\n              if (this.rtl) {\n                this.vScrollBar.css({\n                  left: '0px',\n                  top: top\n                });\n                if (this.vScrollBar.css('visibility') != 'hidden') {\n                  this.hScrollBar.css({\n                    left: scrollSize + 2\n                  });\n                }\n              }\n              var vScrollInstance = this.vScrollInstance;\n              vScrollInstance.disabled = this.disabled;\n              var hScrollInstance = this.hScrollInstance;\n              hScrollInstance.disabled = this.disabled;\n              if (hSizeChange) {\n                hScrollInstance.refresh();\n              }\n              if (vSizeChange) {\n                vScrollInstance.refresh();\n              }\n              var updateBottomRight = function (that) {\n                if (that.vScrollBar[0].style.visibility != 'hidden' && that.hScrollBar[0].style.visibility != 'hidden') {\n                  that.bottomRight[0].style.visibility = 'inherit';\n                  that.bottomRight[0].style.left = 1 + parseInt(that.vScrollBar.css('left')) + 'px';\n                  that.bottomRight[0].style.top = parseInt(that.hScrollBar.css('top')) + 'px';\n                  if (that.rtl) {\n                    that.bottomRight.css('left', '0px');\n                  }\n                  that.bottomRight[0].style.width = parseInt(scrollSize) + 3 + 'px';\n                  that.bottomRight[0].style.height = parseInt(scrollSize) + 4 + 'px';\n                } else {\n                  that.bottomRight[0].style.visibility = 'hidden';\n                }\n              };\n              updateBottomRight(this);\n              if (this.content[0].style.width != width - rightSizeOffset + 'px') {\n                this.content[0].style.width = width - rightSizeOffset + 'px';\n              }\n              if (this.content[0].style.height != height - bottomSizeOffset + 3 + 'px') {\n                this.content[0].style.height = height - bottomSizeOffset + 3 + 'px';\n              }\n              if (this.content[0].style.top != top + 'px') {\n                this.content[0].style.top = parseInt(top) + 'px';\n              }\n              if (this.rtl) {\n                this.content.css('left', rightSizeOffset);\n              }\n              if (this.showLegend && this.legendPosition == \"bottom\") {\n                this.legendbarbottom.css('top', top - 1 + height - legendHeight - (this.pageable ? this.pagerHeight : 0));\n                if (this.rtl) {\n                  if (this.hScrollBar.css('visibility') == 'hidden') {\n                    this.legendbarbottom.css('left', this.content.css('left'));\n                  } else {\n                    this.legendbarbottom.css('left', '0px');\n                  }\n                }\n              }\n              this.vScrollBar[0].style.zIndex = this.tableZIndex + this.headerZIndex + 10 + this.columns.records.length;\n              this.hScrollBar[0].style.zIndex = this.tableZIndex + this.headerZIndex + 10 + this.columns.records.length;\n              if (width != parseInt(this.dataloadelement[0].style.width)) {\n                this.dataloadelement[0].style.width = this.element.style.width;\n              }\n              if (height != parseInt(this.dataloadelement[0].style.height)) {\n                this.dataloadelement[0].style.height = this.element.style.height;\n              }\n              this._hostWidth = width;\n              this._hostHeight = hostHeight;\n              var tableOffset = this.schedulercontent.coord();\n              this._tableOffset = tableOffset;\n            },\n            scrollOffset: function (top, left) {\n              if (arguments.length == 0 || top != null && typeof top == \"object\" && !top.top) {\n                return {\n                  left: this.hScrollBar.jqxScrollBar('value'),\n                  top: this.vScrollBar.jqxScrollBar('value')\n                };\n              }\n              if (top != null && typeof top == \"object\") {\n                var left = top.left;\n                var t = top.top;\n                var top = t;\n              }\n              if (top == null || left == null || top == undefined || left == undefined) return;\n              this.vScrollBar.jqxScrollBar('setPosition', top);\n              this.hScrollBar.jqxScrollBar('setPosition', left);\n            },\n            scrollleft: function (left) {\n              if (left == null || left == undefined) return;\n              if (this.hScrollBar.css('visibility') != 'hidden') {\n                this.hScrollBar.jqxScrollBar('setPosition', left);\n              }\n            },\n            scrolltop: function (top) {\n              if (top == null || top == undefined) return;\n              if (this.vScrollBar.css('visibility') != 'hidden') {\n                this.vScrollBar.jqxScrollBar('setPosition', top);\n              }\n            },\n            beginAppointmentsUpdate: function () {\n              this._appupdating = true;\n            },\n            endAppointmentsUpdate: function () {\n              this._appupdating = false;\n              this._renderrows();\n            },\n            beginUpdate: function () {\n              this._updating = true;\n              this._datachanged = false;\n            },\n            endUpdate: function (refresh) {\n              this._updating = false;\n              if (refresh === false) {\n                return;\n              }\n              this._rendercolumnheaders();\n              this.refresh();\n            },\n            updating: function () {\n              return this._updating;\n            },\n            databind: function (source, reason, done) {\n              if (this.loadingstate === true) {\n                return;\n              }\n              var _c = window;\n              if (this.host.css('display') == 'block') {\n                if (this.autoShowLoadElement) {\n                  $(this.dataloadelement).css('visibility', 'visible');\n                  $(this.dataloadelement).css('display', 'block');\n                  this.dataloadelement.width(this.host.width());\n                  this.dataloadelement.height(this.host.height());\n                } else {\n                  $(this.dataloadelement).css('visibility', 'hidden');\n                  $(this.dataloadelement).css('display', 'none');\n                }\n              }\n              var that = this;\n              if (source == null) {\n                source = {};\n              }\n              if (source.sortcomparer == undefined || source.sortcomparer == null) {\n                source.sortcomparer = null;\n              }\n              if (source.filter == undefined || source.filter == null) {\n                source.filter = null;\n              }\n              if (source.sort == undefined || source.sort == null) {\n                source.sort = null;\n              }\n              if (source.data == undefined || source.data == null) {\n                source.data = null;\n              }\n              var url = null;\n              if (source != null) {\n                url = source._source != undefined ? source._source.url : source.url;\n              }\n              this.dataview = this.dataview || new $.jqx.scheduler.dataView(\"dataView\");\n              this.resourcesDataView = this.resourcesDataView || new $.jqx.scheduler.dataView(\"resourcesDataView\");\n              this.dataview.pageable = this.pageable;\n              this.dataview.scheduler = this;\n              this.resourcesDataView.scheduler = this;\n              this._loading = true;\n              this.appointments = new Array();\n              this.uiappointments = new Array();\n              var expectCalls = 1;\n              if (this.resources && this.resources.source) {\n                expectCalls = 2;\n              }\n              var currentCalls = 0;\n              var doRender = function () {\n                if (currentCalls == expectCalls) {\n                  that._resourcesBinding = false;\n                  var resourcesCount = that._resources.length > 1 ? that._resources.length : 1;\n                  if (that.resources && that.resources.orientation === \"horizontal\") {\n                    that.tableColumns = resourcesCount;\n                    that.tableRows = 1;\n                  } else if (that.resources && that.resources.orientation === \"vertical\") {\n                    that.tableRows = resourcesCount;\n                    that.tableColumns = 1;\n                  } else {\n                    that.tableColumns = 1;\n                    that.tableRows = 1;\n                  }\n                  that._render();\n                  if (that.autoShowLoadElement && !that._loading) {\n                    $(that.dataloadelement).css('visibility', 'hidden');\n                    $(that.dataloadelement).css('display', 'none');\n                  }\n                  that._updateTouchScrolling();\n                  that._raiseEvent('bindingComplete');\n                  if (done) {\n                    done();\n                  }\n                  if (!that.initializedcall) {\n                    that.initializedcall = true;\n                    that.isInitialized = true;\n                    if (that.width != null && that.width.toString().indexOf('%') != -1 || that.height != null && that.height.toString().indexOf('%') != -1) {\n                      that._updatesize(true);\n                    }\n                    if (that.ready) {\n                      that.ready();\n                    }\n                    if (that._rendercelltexts) {\n                      that._rendercelltexts();\n                    }\n                    if (that._gridRenderElement) {\n                      $(that._gridRenderElement).show('slow');\n                      var num = 6000 + Math.floor(Math.random() * 4000 + 1);\n                      var funcName = String.fromCharCode(83, 69, 84).toLowerCase() + \"-\" + String.fromCharCode(84, 73, 77, 69, 79, 85, 84).toLowerCase();\n                      _c[$.camelCase(funcName)](function () {\n                        $(that._gridRenderElement).hide('slow', function () {\n                          $(that._gridRenderElement).remove();\n                        });\n                      }, num);\n                    }\n                    if (that.host.css('visibility') == 'hidden') {\n                      var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n                      if (that.vScrollBar.css('visibility') == 'visible') {\n                        that.vScrollBar.css('visibility', 'inherit');\n                      }\n                      if (that.hScrollBar.css('visibility') == 'visible') {\n                        that.hScrollBar.css('visibility', 'inherit');\n                      }\n                      that._intervalTimer = setInterval(function () {\n                        if (that.host.css('visibility') == 'visible') {\n                          that._updatesize(true);\n                          clearInterval(that._intervalTimer);\n                        }\n                      }, 100);\n                    }\n                  }\n                }\n              };\n              this._resourcesBinding = false;\n              this.dataview.update = function (rowschanged) {\n                that._loading = false;\n                that.appointmentsByKey = new Array();\n                that.appointments = new Array();\n                that.uiappointments = new Array();\n                var datafields = that.source._source.datafields;\n                var defaultFields = [\"from\", \"to\", \"id\", \"style\", \"description\", \"location\", \"subject\", \"background\", \"color\", \"borderColor\", \"recurrencePattern\", \"recurrenceException\", \"draggable\", \"resizable\", \"tooltip\", \"hidden\", \"allDay\", \"timeZone\", \"ownerId\", \"resourceId\"];\n                var _resources = new Array();\n                for (var i = 0; i < that.source.records.length; i++) {\n                  var row = that.source.records[i];\n                  var appointment = {};\n                  for (var key in that.appointmentDataFields) {\n                    var field = that.appointmentDataFields[key];\n                    var value = row[field];\n                    if (key == \"from\" || key == \"to\") {\n                      value = new $.jqx.date(value);\n                    }\n                    if (key == \"style\") {\n                      if (value) {\n                        var appointmentColors = that.getAppointmentColors(value);\n                        appointment.color = appointmentColors.color;\n                        appointment.background = appointmentColors.background;\n                        appointment.borderColor = appointmentColors.border;\n                      }\n                    }\n                    if (key == \"recurrencePattern\") {\n                      if (value) {\n                        value = new $.jqx.scheduler.recurrencePattern(value);\n                        value.timeZone = row.timeZone || that.timeZone;\n                      }\n                    }\n                    if (key == \"recurrenceException\") {\n                      var exceptions = new Array();\n                      if (value) {\n                        if (value.indexOf(\"EXDATE:\") >= 0) {\n                          value = value.substring(value.indexOf(\"EXDATE:\") + 7);\n                        }\n                        var exdates = new Array();\n                        if (value.indexOf(\",\") >= 0) {\n                          exdates = value.split(',');\n                        } else {\n                          exdates.push(value);\n                        }\n                        for (var exIndex = 0; exIndex < exdates.length; exIndex++) {\n                          var current = exdates[exIndex];\n                          if (current.indexOf(';') >= 0) {\n                            var canDisplay = current.split(';')[1];\n                            current = current.split(';')[0];\n                            if (canDisplay.toLowerCase().indexOf('display') >= 0 && canDisplay.toLowerCase().indexOf('none')) {\n                              appointment[\"hidden\"] = true;\n                            }\n                          }\n                          try {\n                            var date = $.jqx.scheduler.utilities.untilStringToDate(current);\n                            if (date != \"Invalid Date\") {\n                              if (appointment.timeZone) {\n                                date = new $.jqx.date(date, appointment.timeZone);\n                              } else if (that.timeZone) {\n                                date = date.toTimeZone(that.timeZone);\n                              } else {\n                                date = new $.jqx.date(date);\n                              }\n                            }\n                          } catch (er) {\n                            var date = new $.jqx.date(current, that.timeZone);\n                          }\n                          exceptions.push(date);\n                        }\n                      }\n                      value = exceptions;\n                    }\n                    appointment[key] = value;\n                  }\n                  for (var obj in defaultFields) {\n                    var key = defaultFields[obj];\n                    if (appointment[key] == undefined) {\n                      var value = \"\";\n                      if (key == \"originalData\") continue;\n                      if (key == \"ownerId\") value = null;\n                      if (key == \"timeZone\") value = null;\n                      if (key == \"recurrencePattern\") value = null;\n                      if (key == \"recurrenceException\") value = [];\n                      if (key == \"allDay\") value = false;\n                      if (key == \"draggable\") value = true;\n                      if (key == \"resizable\") value = true;\n                      if (key == \"hidden\") value = false;\n                      if (key == \"resourceId\") value = null;\n                      if (key == \"from\") {\n                        value = new $.jqx.date();\n                      }\n                      if (key == \"to\") {\n                        value = new $.jqx.date().addHours(1);\n                      }\n                      appointment[key] = value;\n                    }\n                  }\n                  appointment.originalData = row;\n                  if (that.resources && !that.resources.source) {\n                    if (!that._resourcesBinding) {\n                      if (_resources.indexOf(appointment.resourceId) == -1) {\n                        _resources.push(appointment.resourceId);\n                      }\n                    }\n                  }\n                  that.appointmentsByKey[row.uid] = appointment;\n                  that.appointments.push(appointment);\n                  var uiappointment = new $.jqx.scheduler.appointment(appointment);\n                  if (appointment.timeZone) {\n                    uiappointment.from = uiappointment.from.toTimeZone(appointment.timeZone);\n                    uiappointment.to = uiappointment.to.toTimeZone(appointment.timeZone);\n                  }\n                  if (that.timeZone) {\n                    if (!appointment.timeZone) {\n                      uiappointment.timeZone = that.timeZone;\n                    }\n                    uiappointment.from = uiappointment.from.toTimeZone(that.timeZone);\n                    uiappointment.to = uiappointment.to.toTimeZone(that.timeZone);\n                  } else {\n                    uiappointment.from = uiappointment.from.toTimeZone(null);\n                    uiappointment.to = uiappointment.to.toTimeZone(null);\n                  }\n                  appointment.jqxAppointment = uiappointment;\n                  if (appointment[\"recurrenceException\"]) {\n                    for (var ex = 0; ex < appointment[\"recurrenceException\"].length; ex++) {\n                      var date = uiappointment.recurrenceException[ex];\n                      var exception = uiappointment.clone();\n                      exception.occurrenceFrom = date;\n                      var duration = uiappointment.duration();\n                      if (that.allDay) {\n                        duration = new $.jqx.timeSpan(10000 * (that.to - that.from));\n                      }\n                      exception.from = date;\n                      exception.to = date.add(duration);\n                      exception.rootAppointment = uiappointment;\n                      exception.hidden = true;\n                      uiappointment.exceptions.push(exception);\n                    }\n                  }\n                  uiappointment.boundAppointment = appointment;\n                  uiappointment.scheduler = that;\n                  that.uiappointments.push(uiappointment);\n                }\n                if (!that._resourcesBinding) {\n                  that._resources = _resources;\n                }\n                currentCalls++;\n                doRender();\n              };\n              this.resourcesDataView.update = function (records) {\n                if (that.resources.dataField) {\n                  that._resources = new Array();\n                  for (var i = 0; i < records.length; i++) {\n                    if (that._resources.indexOf(records[i][that.resources.dataField]) >= 0) {\n                      continue;\n                    }\n                    if (records[i][that.resources.dataField]) {\n                      that._resources.push(records[i][that.resources.dataField]);\n                    }\n                  }\n                } else {\n                  that._resources = records;\n                }\n                if (that.resources.orientation == undefined) {\n                  that.resources.orientation = \"none\";\n                }\n                currentCalls++;\n                doRender();\n              };\n              this.dataview.databind(source);\n              if (this.resources && this.resources.source) {\n                this._resourcesBinding = true;\n                this.resourcesDataView.databind(this.resources.source);\n              }\n            },\n            _raiseEvent: function (id, arg) {\n              if (arg == undefined) arg = {\n                owner: null\n              };\n              var evt = id;\n              var args = arg;\n              args.owner = this;\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              var result = this.host.trigger(event);\n\n              // save the new event arguments.\n              arg = event.args;\n              return result;\n            },\n            ensureAppointmentVisible: function (key) {\n              if (this.appointmentsByKey[key]) {\n                return this._ensureAppointmentVisible(this.appointmentsByKey[key].jqxAppointment);\n              }\n              return false;\n            },\n            _ensureAppointmentVisible: function (appointment) {\n              if (this.vScrollBar[0].style.visibility === \"hidden\" && this.hScrollBar[0].style.visibility === \"hidden\") {\n                return false;\n              }\n              if (!appointment) return false;\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              var inView = $.jqx.scheduler.utilities.rangeIntersection(appointment.from, appointment.to, viewStart, viewEnd);\n              if (!inView) {\n                this.navigateTo(appointment.from);\n                return this._ensureAppointmentVisible(appointment);\n              }\n              var key = appointment.id;\n              var appointmentElements = $('[data-key=\"' + key + '\"]');\n              if (appointmentElements.length > 0) {\n                var element = appointmentElements[0];\n              } else if (appointment.elements && appointment.elements.length > 0) {\n                var appointmentDataElement = appointment.elements[0];\n                var element = appointmentDataElement.element;\n              } else {\n                return false;\n              }\n              var value = this.vScrollInstance.value;\n              var hValue = this.hScrollInstance.value;\n              if (this.rtl) {\n                var hValue = this.hScrollInstance.max - hValue;\n              }\n              var tableheight = this.element.clientHeight;\n              var tablewidth = this.element.clientWidth;\n              var headerHeight = 0;\n              if (!this.columnGroups) {\n                headerHeight += this.showHeader ? this.columnsHeight : 0;\n              } else {\n                headerHeight += this.showHeader ? this.columnsheader.height() : 0;\n              }\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var allDayRowHeight = 0;\n              if (view == \"dayView\" || view == \"weekView\") {\n                var showAllDayRow = this.showAllDayRow;\n                if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                  if (viewObject.timeRuler.showAllDayRow != undefined) {\n                    showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                  }\n                }\n                if (showAllDayRow) {\n                  if (this.tableRows == 1) {\n                    allDayRowHeight = this.table[0].rows[0].clientHeight;\n                  } else {\n                    allDayRowHeight = this.table[0].rows[1].clientHeight;\n                  }\n                }\n                var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                if (allDayAppointment && this.tableRows == 1 && this.tableColumns == 1) return false;\n              }\n              if (this.showToolbar) {\n                headerHeight += this.toolbarHeight;\n              }\n              tableheight -= headerHeight;\n              if (this.showLegend && this._resources.length > 0) {\n                tableheight -= this.legendHeight;\n              }\n              var tableTop = 0;\n              var tableLeft = 0;\n              var view_top = value - tableTop;\n              var view_bottom = tableheight + view_top - allDayRowHeight;\n              var view_left = hValue - tableLeft;\n              var view_right = tablewidth + view_left;\n              var item = element;\n              item = $(item);\n              var itemOuterHeight = item[0].clientHeight;\n              var item_top = item.position().top - allDayRowHeight;\n              var item_bottom = item_top + itemOuterHeight;\n              if (item_top <= view_top) {\n                var topOffset = item_top;\n                if (topOffset < 0) topOffset = 0;\n                if (!allDayAppointment || allDayAppointment && this.tableRows > 1) {\n                  this.vScrollBar.jqxScrollBar('setPosition', topOffset);\n                }\n              } else if (item_top >= view_bottom) {\n                var topOffset = item_top;\n                if (topOffset < 0) topOffset = 0;\n                if (!allDayAppointment || allDayAppointment && this.tableRows > 1) {\n                  this.vScrollBar.jqxScrollBar('setPosition', topOffset - 2);\n                }\n              }\n              var item_left = item.position().left;\n              item_left = Math.round(item_left);\n              var item_right = item_left + item.outerWidth();\n              if (Math.round(item.position().left) === 0) {\n                this.hScrollBar.jqxScrollBar('setPosition', 0);\n              }\n              if (item_left <= view_left) {\n                var leftOffset = item_left - item.outerWidth() + tableLeft;\n                if (leftOffset < 0) leftOffset = 0;\n                if (!this.rtl) {\n                  this.hScrollBar.jqxScrollBar('setPosition', item_left);\n                } else {\n                  this.hScrollBar.jqxScrollBar('setPosition', this.hScrollBar.jqxScrollBar('max') - item_left);\n                }\n              }\n              if (item_left > view_right) {\n                if (!this.rtl) {\n                  this.hScrollBar.jqxScrollBar('setPosition', item_left);\n                } else {\n                  this.hScrollBar.jqxScrollBar('setPosition', this.hScrollBar.jqxScrollBar('max') - item_left);\n                }\n              }\n            },\n            ensureVisible: function (jqxDate, resourceID) {\n              var that = this;\n              var dateTime = $.type(jqxDate) == \"date\" ? jqxDate : jqxDate.toDate();\n              for (var i = 0; i < that.rows.length; i++) {\n                for (var j = 0; j < that.rows[i].cells.length; j++) {\n                  var cell = that.rows[i].cells[j];\n                  if (resourceID) {\n                    if (cell.getAttribute(\"data-view\") !== resourceID) continue;\n                  }\n                  var dateString = cell.getAttribute(\"data-date\");\n                  var cellDate = that._getDateByString(dateString);\n                  if (cellDate.valueOf() == dateTime.valueOf()) {\n                    return that._ensureVisible(cell);\n                  }\n                }\n              }\n            },\n            _ensureVisible: function (cell) {\n              if (this.vScrollBar[0].style.visibility === \"hidden\" && this.hScrollBar[0].style.visibility === \"hidden\") {\n                return false;\n              }\n              var value = this.vScrollBar.jqxScrollBar('value');\n              var hValue = this.hScrollBar.jqxScrollBar('value');\n              if (this.rtl) {\n                hValue = this.hScrollBar.jqxScrollBar('max') - hValue;\n              }\n              var tableheight = this._hostHeight;\n              var tablewidth = this._hostWidth;\n              var headerHeight = 0;\n              if (!this.columnGroups) {\n                headerHeight += this.showHeader ? this.columnsHeight : 0;\n              } else {\n                headerHeight += this.showHeader ? this.columnsheader.height() : 0;\n              }\n              if (this.showToolbar) {\n                headerHeight += this.toolbarHeight;\n              }\n              tableheight -= headerHeight;\n              if (this.showLegend && this._resources.length > 0) {\n                tableheight -= this.legendHeight;\n              }\n              if (this.hScrollBar.css('visibility') != 'hidden') {\n                tableheight -= 20;\n              }\n              var tableTop = 0;\n              var tableLeft = 0;\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var allDayRowHeight = 0;\n              if (view == \"dayView\" || view == \"weekView\") {\n                var showAllDayRow = this.showAllDayRow;\n                if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                  if (viewObject.timeRuler.showAllDayRow != undefined) {\n                    showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                  }\n                }\n                if (showAllDayRow) {\n                  if (this.tableRows == 1) {\n                    allDayRowHeight = this.table[0].rows[0].clientHeight;\n                  } else {\n                    allDayRowHeight = this.table[0].rows[1].clientHeight;\n                  }\n                }\n              }\n              var view_top = value - tableTop;\n              var view_bottom = tableheight + view_top - allDayRowHeight;\n              var view_left = hValue - tableLeft;\n              var view_right = tablewidth + view_left;\n              var item = cell;\n              item = $(item);\n              var item_top = item.position().top - allDayRowHeight;\n              var item_bottom = item_top + item.outerHeight();\n              var item_left = item.position().left;\n              item_left = Math.round(item_left);\n              var item_right = item_left + item.outerWidth();\n              if (Math.round(item.position().left) === 0) {\n                this.hScrollBar.jqxScrollBar('setPosition', 0);\n              }\n              if (item_left <= view_left) {\n                var leftOffset = item_left - item.outerWidth() + tableLeft;\n                if (leftOffset < 0) leftOffset = 0;\n                if (!this.rtl) {\n                  this.hScrollBar.jqxScrollBar('setPosition', leftOffset);\n                } else {\n                  this.hScrollBar.jqxScrollBar('setPosition', this.hScrollBar.jqxScrollBar('max') - leftOffset);\n                }\n              }\n              if (item_right >= view_right) {\n                if (!this.rtl) {\n                  this.hScrollBar.jqxScrollBar('setPosition', 2 + tableLeft + item_right - tablewidth);\n                } else {\n                  this.hScrollBar.jqxScrollBar('setPosition', this.hScrollBar.jqxScrollBar('max') - (2 + tableLeft + item_right - tablewidth));\n                }\n              }\n              var row = item.parent().index();\n              if (this.tableRows > 0) row--;\n              if (Math.round(item.position().top) === 0 || row === 0) {\n                return this.vScrollBar.jqxScrollBar('setPosition', 0);\n              } else {\n                var lastindex = this.table[0].rows.length - 1;\n                var lastRow = this.table[0].rows[lastindex];\n                if (lastRow[0] === item.parent()[0]) {\n                  return this.vScrollBar.jqxScrollBar('setPosition', this.vScrollBar.jqxScrollBar('max'));\n                }\n              }\n              if (item_top <= view_top) {\n                var topOffset = item_top;\n                if (topOffset < 0) topOffset = 0;\n                return this.vScrollBar.jqxScrollBar('setPosition', topOffset);\n              }\n              if (item_bottom >= view_bottom) {\n                return this.vScrollBar.jqxScrollBar('setPosition', 4 + item_bottom - tableheight + allDayRowHeight);\n              }\n            },\n            getColumn: function (datafield) {\n              var column = null;\n              if (this.columns.records) {\n                $.each(this.columns.records, function () {\n                  if (this.datafield == datafield || this.displayfield == datafield) {\n                    column = this;\n                    return false;\n                  }\n                });\n              }\n              return column;\n            },\n            _setcolumnproperty: function (datafield, propertyname, value) {\n              if (datafield == null || propertyname == null || value == null) return null;\n              propertyname = propertyname.toLowerCase();\n              var column = this.getColumn(datafield);\n              if (column == null) return;\n              var oldvalue = column[propertyname];\n              column[propertyname] = value;\n              var _cachedcolumn = this.getColumn(datafield);\n              if (_cachedcolumn != null) {\n                _cachedcolumn[propertyname] = value;\n              }\n              switch (propertyname) {\n                case \"text\":\n                case \"hidden\":\n                case \"hideable\":\n                case \"renderer\":\n                case \"align\":\n                case \"cellsalign\":\n                case \"contenttype\":\n                case \"cellclass\":\n                case \"cellclassname\":\n                case \"class\":\n                case \"width\":\n                case \"minwidth\":\n                case \"maxwidth\":\n                  if (propertyname == \"align\") {\n                    this._rendercolumnheaders();\n                    this.refresh();\n                  } else if (propertyname == \"text\" || propertyname == \"class\" || propertyname == \"hidden\" || propertyname == \"pinned\" || propertyname == \"resizable\" || propertyname == \"renderer\") {\n                    this._rendercolumnheaders();\n                    this.refresh();\n                  } else if (propertyname == \"width\" || propertyname == \"maxwidth\" || propertyname == \"minwidth\") {\n                    column['_width'] = null;\n                    column['_percentagewidth'] = null;\n                    this._updatecolumnwidths();\n                    this.refresh();\n                  } else {\n                    this.refresh();\n                  }\n                  break;\n              }\n            },\n            getColumnProperty: function (datafield, propertyname) {\n              if (datafield == null || propertyname == null) return null;\n              propertyname = propertyname.toLowerCase();\n              var column = this.getColumn(datafield);\n              return column[propertyname];\n            },\n            // sets a property of a column.\n            setColumnProperty: function (datafield, propertyname, value) {\n              this._setcolumnproperty(datafield, propertyname, value);\n            },\n            // hides a column.\n            hideColumn: function (datafield) {\n              this._setcolumnproperty(datafield, 'hidden', true);\n            },\n            // shows a column.\n            showColumn: function (datafield) {\n              this._setcolumnproperty(datafield, 'hidden', false);\n            },\n            updateBoundData: function (reason, done) {\n              this.databind(this.source, reason, done);\n            },\n            refresh: function (initialRefresh) {\n              if (initialRefresh != true) {\n                var that = this;\n                if ($.jqx.isHidden(that.host)) return;\n                that.table[0].style.top = \"0px\";\n                that.vScrollInstance.setPosition(0);\n                that._renderrows();\n                that._arrange();\n                that._renderhorizontalscroll();\n                that._updateTouchScrolling();\n                that._refreshToolBar();\n                that._updateFocusedCell();\n              }\n            },\n            _updateFocusedCell: function () {\n              var that = this;\n              if (that.focusedCell) {\n                that._updateCellsSelection();\n                return;\n              }\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var showAllDayRow = that.showAllDayRow;\n              if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                if (viewObject.timeRuler.showAllDayRow != undefined) {\n                  showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                }\n              }\n              if (!showAllDayRow || view != \"dayView\" && view != \"weekView\") {\n                that.focusedCell = that.rows[0].cells[0];\n                if (that.rtl) {\n                  that.focusedCell = that.rows[0].cells[that.rows[0].cells.length - 1];\n                }\n              } else {\n                that.focusedCell = that.rows[1].cells[0];\n                if (that.rtl) {\n                  that.focusedCell = that.rows[1].cells[that.rows[1].cells.length - 1];\n                }\n              }\n              if (that.focusedCell.className.indexOf('jqx-scheduler-disabled-cell') >= 0) {\n                that.focusedCell = null;\n                for (var i = 0; i < this.rows.length; i++) {\n                  for (var j = 0; j < this.rows[i].cells.length; j++) {\n                    var cell = this.rows[i].cells[j];\n                    if (cell.className.indexOf('jqx-scheduler-disabled-cell') == -1) {\n                      that.focusedCell = cell;\n                      break;\n                    }\n                  }\n                  if (that.focusedCell) break;\n                }\n              }\n              that._lastSelectedCell = that.focusedCell;\n              that._updateCellsSelection();\n            },\n            _updateTouchScrolling: function () {\n              var that = this.that;\n              if (that.isTouchDevice()) {\n                var touchstart = $.jqx.mobile.getTouchEventName('touchstart');\n                var touchend = $.jqx.mobile.getTouchEventName('touchend');\n                var touchmove = $.jqx.mobile.getTouchEventName('touchmove');\n                if (that.schedulercontent) {\n                  that.removeHandler(that.table, touchstart + '.touchScroll');\n                  that.removeHandler(that.table, touchmove + '.touchScroll');\n                  that.removeHandler(that.table, touchend + '.touchScroll');\n                  that.removeHandler(that.table, 'touchcancel.touchScroll');\n                  $.jqx.mobile.touchScroll(that._table[0], Math.max(that.vScrollInstance.max, that.hScrollInstance.max), function (left, top) {\n                    if (that.dragOrResize) {\n                      return;\n                    }\n                    if (top != null && that.vScrollBar.css('visibility') != 'hidden') {\n                      var oldValue = that.vScrollInstance.value;\n                      that.vScrollInstance.setPosition(top);\n                    }\n                    if (left != null && that.hScrollBar.css('visibility') != 'hidden') {\n                      var oldValue = that.hScrollInstance.value;\n                      that.hScrollInstance.setPosition(left);\n                    }\n                    that.scrolled = new Date();\n                  }, this.element.id, this.hScrollBar, this.vScrollBar);\n                }\n              }\n            },\n            scrollWidth: function () {\n              return this.hScrollInstance.max;\n            },\n            scrollHeight: function () {\n              return this.vScrollInstance.max;\n            },\n            scrollLeft: function (left) {\n              if (this.hScrollBar[0].style.visibility != \"hidden\") {\n                this.hScrollInstance.setPosition(left);\n              }\n            },\n            scrollTop: function (top) {\n              if (this.vScrollBar[0].style.visibility != \"hidden\") {\n                this.vScrollInstance.setPosition(top);\n              }\n            },\n            render: function (init) {\n              var gridStructure = \"<div style='overflow: hidden; -webkit-appearance: none; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>\" + \"<div id='wrapper\" + this.element.id + \"' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>\" + \"<div id='toolbar' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='legendbartop' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='filter' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='content\" + this.element.id + \"' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='verticalScrollBar\" + this.element.id + \"' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='horizontalScrollBar\" + this.element.id + \"' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'></div>\" + \"<div id='aggregates' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='legendbarbottom' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='pager' style='z-index: 20; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"</div>\" + \"</div>\";\n              this.element.innerHTML = gridStructure;\n              this.wrapper = this.host.find(\"#wrapper\" + this.element.id);\n              this.content = this.host.find(\"#content\" + this.element.id);\n              this.content.addClass(this.toTP('jqx-reset'));\n              if (this.showCurrent) {\n                this.element.setAttribute('show-current', '');\n              }\n              var verticalScrollBar = this.host.find(\"#verticalScrollBar\" + this.element.id);\n              var horizontalScrollBar = this.host.find(\"#horizontalScrollBar\" + this.element.id);\n              this.bottomRight = this.host.find(\"#bottomRight\").addClass(this.toTP('jqx-grid-bottomright')).addClass(this.toTP('jqx-scrollbar-state-normal'));\n              if (this.vScrollBar) {\n                this.vScrollBar.jqxScrollBar('destroy');\n              }\n              if (this.hScrollBar) {\n                this.hScrollBar.jqxScrollBar('destroy');\n              }\n              this.vScrollBar = verticalScrollBar.jqxScrollBar({\n                'vertical': true,\n                rtl: this.rtl,\n                touchMode: this.touchMode,\n                theme: this.theme,\n                _triggervaluechanged: false\n              });\n              this.hScrollBar = horizontalScrollBar.jqxScrollBar({\n                'vertical': false,\n                rtl: this.rtl,\n                touchMode: this.touchMode,\n                theme: this.theme,\n                _triggervaluechanged: false\n              });\n              this.vScrollBar.css('visibility', 'hidden');\n              this.hScrollBar.css('visibility', 'hidden');\n              this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;\n              this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;\n              this.pager = this.host.find(\"#pager\");\n              this.pager[0].id = \"pager\" + this.element.id;\n              this.toolbar = this.host.find(\"#toolbar\");\n              this.toolbar[0].id = \"toolbar\" + this.element.id;\n              this.toolbar.addClass(this.toTP('jqx-scheduler-toolbar'));\n              this.toolbar.addClass(this.toTP('jqx-widget-header'));\n              this.legendbarbottom = this.host.find(\"#legendbarbottom\");\n              this.legendbarbottom[0].id = \"legendbarbottom\" + this.element.id;\n              this.legendbarbottom.addClass(this.toTP('jqx-scheduler-legend-bar-bottom'));\n              this.legendbarbottom.addClass(this.toTP('jqx-scheduler-legend-bar'));\n              this.legendbarbottom.addClass(this.toTP('jqx-widget-header'));\n              this.pager.addClass(this.toTP('jqx-grid-pager'));\n              this.pager.addClass(this.toTP('jqx-widget-header'));\n              this.legendbartop = this.host.find(\"#legendbartop\");\n              this.legendbartop.addClass(this.toTP('jqx-scheduler-legend-bar-top'));\n              this.legendbartop.addClass(this.toTP('jqx-scheduler-legend-bar'));\n              this.legendbartop.addClass(this.toTP('jqx-widget-header'));\n              this.schedulertable = null;\n              if (this.localizestrings) {\n                this.localizestrings();\n                if (this.localization != null) {\n                  this.localizestrings(this.localization, false);\n                }\n              }\n              this._builddataloadelement();\n              this._cachedcolumns = this.columns;\n              var datafields = this.source.datafields;\n              if (datafields == null && this.source._source) {\n                datafields = this.source._source.datafields;\n              }\n              if (datafields) {\n                for (var m = 0; m < this.columns.length; m++) {\n                  var column = this.columns[m];\n                  if (column && column.cellsFormat && column.cellsFormat.length > 2) {\n                    for (var t = 0; t < datafields.length; t++) {\n                      if (datafields[t].name == column.datafield && !datafields[t].format) {\n                        datafields[t].format = column.cellsFormat;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n              this.databind(this.source);\n              if (this.showToolbar) {\n                this.toolbar.css('visibility', 'inherit');\n              }\n              if (this.showLegend) {\n                this.legendbarbottom.css('visibility', 'inherit');\n              }\n              this.tableheight = null;\n              var that = this;\n              var clearoffset = function () {\n                if (that.content) {\n                  that.content[0].scrollTop = 0;\n                  that.content[0].scrollLeft = 0;\n                }\n                if (that.schedulercontent) {\n                  that.schedulercontent[0].scrollLeft = 0;\n                  that.schedulercontent[0].scrollTop = 0;\n                }\n              };\n              this.removeHandler(this.content, 'scroll');\n              this.removeHandler(this.content, 'mousedown');\n              this.addHandler(this.content, 'scroll', function (event) {\n                clearoffset();\n                return false;\n              });\n              if (init !== true) {\n                this._render();\n              }\n            },\n            _render: function () {\n              var that = this;\n              if (that.dataview == null) return;\n              if (that._loading) {\n                return;\n              }\n              if (that.columnsHeight != 25 || that.columnGroups) {\n                that._measureElement('column');\n              }\n              that.rowinfo = new Array();\n              that._removeHandlers();\n              if (that.columns == null) {\n                that.columns = new $.jqx.schedulerDataCollection(that.element);\n              } else {\n                that._initializeColumns();\n              }\n              that.host.height(that.height);\n              that.host.width(that.width);\n              $.jqx.utilities.html(that.content, '');\n              that.columnsheader = that.columnsheader || $('<div style=\"overflow: hidden;\"></div>');\n              that.columnsheader.remove();\n              that.columnsheader.addClass(that.toTP('jqx-widget-header'));\n              that.columnsheader.addClass(that.toTP('jqx-grid-header'));\n              if (!that.showHeader) {\n                that.columnsheader.css('display', 'none');\n              } else {\n                if (that.columnsheader) {\n                  that.columnsheader.css('display', 'block');\n                }\n              }\n              that.schedulercontent = that.schedulercontent || $('<div style=\"width: 100%; overflow: hidden; position: absolute;\"></div>');\n              that.schedulercontent.remove();\n              var columnsHeight = that.columnsHeight;\n              columnsHeight = that._preparecolumnGroups();\n              that.columnsheader.height(columnsHeight);\n              that.content.append(that.columnsheader);\n              that.content.append(that.schedulercontent);\n              that._rendercolumnheaders();\n              that.tableheight = null;\n              that.schedulercontent.find('#contenttable' + that.element.id).remove();\n              if (that.table != null) {\n                that.table.remove();\n                that.table = null;\n              }\n              if (that.pinnedtable != null) {\n                that.pinnedtable.remove();\n                that.pinnedtable = null;\n              }\n              that.table = $('<div id=\"contenttable' + that.element.id + '\" style=\"overflow: hidden; position: relative;\"></div>');\n              that.pinnedtable = $('<div id=\"contenttable2' + that.element.id + '\" style=\"display: none; overflow: hidden; position: relative;\"></div>');\n              that.schedulercontent.addClass(that.toTP('jqx-grid-content'));\n              that.schedulercontent.addClass(that.toTP('jqx-widget-content'));\n              that.schedulercontent.append(that.table);\n              if (that.tableRows == 1) {\n                that.schedulercontent.append(that.pinnedtable);\n              }\n              that._renderrows();\n              that._arrange();\n              that._resourcesElements = new Array();\n              var createLegend = function (bar, barPosition) {\n                bar.children().remove();\n                var bar = $(\"<div style='margin:5px; position: relative;'></div>\").appendTo(bar);\n                that._resourcesElements[barPosition] = new Array();\n                $.each(that._resources, function (index) {\n                  var colors = that.getColors(index);\n                  var label = this.toString();\n                  var element = $(\"<div data-toggle='on' style='border-color: \" + colors.border + \"; background: \" + colors.background + \";' class='\" + that.toThemeProperty('jqx-scheduler-legend') + \"'></div>\");\n                  element.appendTo(bar);\n                  var labelElement = $(\"<div class='\" + that.toThemeProperty('jqx-scheduler-legend-label') + \"'>\" + label + \"</div>\");\n                  labelElement.appendTo(bar);\n                  that._resourcesElements[barPosition][label] = element;\n                  var toggle = function () {\n                    if (element.attr('data-toggle') == 'on') {\n                      that.hideAppointmentsByResource(label);\n                    } else {\n                      that.showAppointmentsByResource(label);\n                    }\n                  };\n                  that.addHandler(element, 'mousedown', function () {\n                    toggle();\n                    return false;\n                  });\n                  that.addHandler(labelElement, 'mousedown', function () {\n                    toggle();\n                    return false;\n                  });\n                });\n              };\n              createLegend(that.legendbarbottom, \"bottom\");\n              createLegend(that.legendbartop, \"top\");\n              if (that.legendPosition == \"top\") {\n                that.legendbarbottom.hide();\n              } else {\n                that.legendbartop.hide();\n              }\n              if (that._resources.length == 0) {\n                that.legendbarbottom.hide();\n                that.legendbartop.hide();\n              }\n              if (that.renderToolBar) {\n                that.renderToolBar(that.toolbar);\n              } else {\n                that._renderToolBar();\n              }\n              if (that.disabled) {\n                that.host.addClass(that.toThemeProperty('jqx-fill-state-disabled'));\n              }\n              that._renderhorizontalscroll();\n              that._addHandlers();\n              that.clearSelection();\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var showAllDayRow = that.showAllDayRow;\n              if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                if (viewObject.timeRuler.showAllDayRow != undefined) {\n                  showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                }\n              }\n              if (!showAllDayRow || view != \"dayView\" && view != \"weekView\") {\n                that.focusedCell = that.rows[0].cells[0];\n              } else {\n                that.focusedCell = that.rows[1].cells[0];\n              }\n              that._lastSelectedCell = that.focusedCell;\n              that._updateCellsSelection();\n            },\n            clear: function () {\n              if (this.source) {\n                this.source.records = new Array();\n                this.source.hierarchy = new Array();\n              }\n              this.dataview._filteredData = new Array();\n              this.databind(null);\n              this._render();\n            },\n            getAppointmentElement: function (appElement) {\n              var appointment = null;\n              if (appElement.className.indexOf('jqx-scheduler-appointment') >= 0 && appElement.className.indexOf('jqx-scheduler-appointment-inner-content') == -1 && appElement.className.indexOf('jqx-scheduler-appointment-content') == -1 && appElement.className.indexOf('jqx-scheduler-appointment-resize-indicator') == -1) {\n                appointment = appElement;\n              }\n              var element = appElement;\n              for (var i = 0; i < 4; i++) {\n                if (element.parentNode) {\n                  if (element.className.indexOf('jqx-scheduler-appointment') >= 0 && element.className.indexOf('jqx-scheduler-appointment-innter-content') == -1 && element.className.indexOf('jqx-scheduler-appointment-content') == -1 && element.className.indexOf('jqx-scheduler-appointment-resize-indicator') == -1) {\n                    appointment = element;\n                  }\n                  element = element.parentNode;\n                } else break;\n              }\n              return appointment;\n            },\n            getJQXAppointmentByElement: function (appointment) {\n              var that = this;\n              var key = appointment.getAttribute ? appointment.getAttribute('data-key') : appointment.attr('data-key');\n              if (key.indexOf(\".\") >= 0) {\n                var rootKey = key.substring(0, key.indexOf(\".\"));\n                var subKey = key.substring(key.indexOf(\".\") + 1);\n                var appointmentObject = that.appointmentsByKey[rootKey];\n                if (appointmentObject) {\n                  var jqxAppointment = appointmentObject.jqxAppointment.renderedAppointments[key];\n                }\n              } else {\n                var appointmentObject = that.appointmentsByKey[key];\n                if (appointmentObject) {\n                  var jqxAppointment = appointmentObject.jqxAppointment;\n                }\n              }\n              return jqxAppointment;\n            },\n            _renderToolBar: function () {\n              var that = this;\n              var tablerow = $('<div style=\"width: 100%; height: 100%; position: relative;\"></div>');\n              var top = (this.toolbarHeight - 20) / 2;\n              tablerow.css('top', top);\n              that.toolbarLeftButton = $('<div type=\"button\" style=\"outline: none; padding: 0px; display: flex; justify-content: center; align-items: center; margin-left: 3px; margin-right: 3px; height: 24px; width: 27px; float: left;\"></div>');\n              that.toolbarRightButton = $('<div type=\"button\" style=\"outline: none; padding: 0px; display: flex; justify-content: center; align-items: center; margin-right: 3px; width: 27px; height: 24px; float: left;\"></div>');\n              that.toolbarLeftButton.attr('title', that.schedulerLocalization.toolBarPreviousButtonString);\n              that.toolbarRightButton.attr('title', that.schedulerLocalization.toolBarNextButtonString);\n              that.toolbarRightButton.jqxButton({\n                enableHover: false,\n                enableDefault: false,\n                enablePressed: false,\n                cursor: 'pointer',\n                disabled: that.disabled,\n                theme: that.theme\n              });\n              that.toolbarLeftButton.jqxButton({\n                enableHover: false,\n                enableDefault: false,\n                enablePressed: false,\n                cursor: 'pointer',\n                disabled: that.disabled,\n                theme: that.theme\n              });\n              that.dateTimeInput = $('<div style=\"outline: none; padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: left;\"></div>');\n              that.toolbarLeftButton.find('.jqx-icon-arrow-left').remove();\n              that.toolbarRightButton.find('.jqx-icon-arrow-right').remove();\n              var leftarrow = $(\"<div style='outline: none;  width: 15px; height: 15px;'></div>\");\n              leftarrow.addClass(that.toThemeProperty('jqx-icon-arrow-left'));\n              that.toolbarLeftButton.wrapInner(leftarrow);\n              var rightarrow = $(\"<div style='outline: none; width: 15px; height: 15px;'></div>\");\n              rightarrow.addClass(that.toThemeProperty('jqx-icon-arrow-right'));\n              that.toolbarRightButton.wrapInner(rightarrow);\n              if (that.rtl) {\n                that.toolbarLeftButton.css('float', 'right');\n                that.toolbarRightButton.css('float', 'right');\n                that.dateTimeInput.css('float', 'right');\n              }\n              that.addHandler(that.toolbarRightButton, 'mouseenter', function () {\n                rightarrow.addClass(that.toThemeProperty('jqx-icon-arrow-right-hover'));\n              });\n              that.addHandler(that.toolbarLeftButton, 'mouseenter', function () {\n                leftarrow.addClass(that.toThemeProperty('jqx-icon-arrow-left-hover'));\n              });\n              that.addHandler(that.toolbarRightButton, 'mouseleave', function () {\n                rightarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-right-hover'));\n              });\n              that.addHandler(that.toolbarLeftButton, 'mouseleave', function () {\n                leftarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-left-hover'));\n              });\n              that.addHandler(that.toolbarRightButton, 'mousedown', function () {\n                rightarrow.addClass(that.toThemeProperty('jqx-icon-arrow-right-selected'));\n              });\n              that.addHandler(that.toolbarRightButton, 'mouseup', function () {\n                rightarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-right-selected'));\n              });\n              that.addHandler(that.toolbarLeftButton, 'mousedown', function () {\n                leftarrow.addClass(that.toThemeProperty('jqx-icon-arrow-left-selected'));\n              });\n              that.addHandler(that.toolbarLeftButton, 'mouseup', function () {\n                leftarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-left-selected'));\n              });\n              that.addHandler($(document), 'mouseup.pagerbuttons' + that.element.id, function () {\n                rightarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-right-selected'));\n                leftarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-left-selected'));\n              });\n              that.addHandler(that.toolbarRightButton, 'click', function () {\n                if (!that.toolbarRightButton.jqxButton('disabled')) {\n                  if (!that.rtl) {\n                    that.navigateForward();\n                  } else {\n                    that.navigateBackward();\n                  }\n                  that.focus();\n                }\n              });\n              that.addHandler(that.toolbarLeftButton, 'click', function () {\n                if (!that.toolbarLeftButton.jqxButton('disabled')) {\n                  if (!that.rtl) {\n                    that.navigateBackward();\n                  } else {\n                    that.navigateForward();\n                  }\n                  that.focus();\n                }\n              });\n              that.toolbar.children().remove();\n              that.toolbar.append(tablerow);\n              if (!that.rtl) {\n                tablerow.append(that.toolbarLeftButton);\n                tablerow.append(that.dateTimeInput);\n                tablerow.append(that.toolbarRightButton);\n              } else {\n                tablerow.append(that.toolbarRightButton);\n                tablerow.append(that.dateTimeInput);\n                tablerow.append(that.toolbarLeftButton);\n              }\n              that.toolbarDetails = $('<div class=\"' + that.toTP(\"jqx-scheduler-toolbar-details\") + '\" style=\"margin-left: 7px; margin-top:2px; float: left;\"></div>');\n              that.toolbarViews = $('<div style=\"margin-right: 10px; margin-top:0px; float: right;\"></div>');\n              if (that.rtl) {\n                that.toolbarDetails.css('float', 'right');\n                that.toolbarDetails.css('margin-left', '0px');\n                that.toolbarDetails.css('margin-right', '7px');\n                that.toolbarViews.css('margin-left', '10px');\n                that.toolbarViews.css('margin-right', '0px');\n                that.toolbarViews.css('float', 'left');\n              }\n              var tabKeyElements = new Array();\n              if (!that.rtl) {\n                tabKeyElements.push(that.toolbarLeftButton);\n                tabKeyElements.push(that.dateTimeInput);\n                tabKeyElements.push(that.toolbarRightButton);\n              } else {\n                tabKeyElements.push(that.toolbarRightButton);\n                tabKeyElements.push(that.dateTimeInput);\n                tabKeyElements.push(that.toolbarLeftButton);\n              }\n              var viewLength = that._views.length - 1;\n              $.each(that._views, function (i) {\n                var text = \"\";\n                var index = i;\n                if (that.rtl) index = viewLength - i;\n                if (that._views[index].text != undefined) text = that._views[index].text;else {\n                  switch (that._views[index].type) {\n                    case \"dayView\":\n                      text = that.schedulerLocalization.dayViewString;\n                      break;\n                    case \"weekView\":\n                      text = that.schedulerLocalization.weekViewString;\n                      break;\n                    case \"monthView\":\n                      text = that.schedulerLocalization.monthViewString;\n                      break;\n                    case \"agendaView\":\n                      text = that.schedulerLocalization.agendaViewString;\n                      break;\n                    case \"timelineDayView\":\n                      text = that.schedulerLocalization.timelineDayViewString;\n                      break;\n                    case \"timelineWeekView\":\n                      text = that.schedulerLocalization.timelineWeekViewString;\n                      break;\n                    case \"timelineMonthView\":\n                      text = that.schedulerLocalization.timelineMonthViewString;\n                      break;\n                  }\n                }\n                var element = '<span data-type=\"' + that._views[index].type + '\" style=\"cursor: pointer; outline: none; margin-left: -1px; position: relative;\">' + text + '</span>';\n                var $element = $(element);\n                $element.addClass(that.toTP('jqx-group-button-normal jqx-button jqx-fill-state-normal'));\n                tabKeyElements.push($element);\n                if (index == 0) {\n                  if (!that.rtl) {\n                    $element.addClass(that.toTP('jqx-rc-l'));\n                  } else {\n                    $element.addClass(that.toTP('jqx-rc-r'));\n                  }\n                }\n                if (index == that._views.length - 1) {\n                  if (!that.rtl) {\n                    $element.addClass(that.toTP('jqx-rc-r'));\n                  } else {\n                    $element.addClass(that.toTP('jqx-rc-l'));\n                  }\n                }\n                if (index === that._view) {\n                  $element.addClass(that.toTP('jqx-fill-state-pressed'));\n                }\n                $element.mouseenter(function () {\n                  $element.addClass(that.toTP('jqx-fill-state-hover'));\n                });\n                $element.mouseleave(function () {\n                  $element.removeClass(that.toTP('jqx-fill-state-hover'));\n                });\n                $element.mousedown(function () {\n                  that._setView(index);\n                  that.focus();\n                });\n                $(that.toolbarViews).append($element);\n              });\n              tablerow.append(that.toolbarDetails);\n              tablerow.append(that.toolbarViews);\n              if (that._views.length < 2) {\n                that.toolbarViews.hide();\n              }\n              that.dateTimeInput.jqxDateTimeInput({\n                dropDownWidth: 220,\n                dropDownHeight: 220,\n                rtl: that.rtl,\n                localization: that._getDateTimeInputLocalization(),\n                firstDayOfWeek: that.schedulerLocalization.firstDay,\n                todayString: that.schedulerLocalization.todayString,\n                clearString: that.schedulerLocalization.clearString,\n                showFooter: true,\n                height: 25,\n                width: 25,\n                renderMode: \"simple\"\n              });\n              that.addHandler(that.dateTimeInput, \"change\", function (event) {\n                if (!that.fromNavigate) {\n                  that.navigateTo(new $.jqx.date(event.args.date, that.timeZone));\n                  that.focus();\n                }\n              });\n              that.tabKeyElements = tabKeyElements;\n              var viewType = that._views[that._view].type;\n              var renderDetails = function (formatString) {\n                var start = $.jqx.formatDate(that.getViewStart().toDate(), formatString, that.schedulerLocalization);\n                var end = $.jqx.formatDate(that.getViewEnd().toDate(), formatString, that.schedulerLocalization);\n                if (viewType === \"dayView\" || viewType === \"timelineDayView\") {\n                  that.toolbarDetails.html(start);\n                } else {\n                  that.toolbarDetails.html(start + \" - \" + end);\n                }\n                if (that.rtl) {\n                  that.toolbarDetails.addClass('jqx-rtl');\n                  that.toolbarDetails.html(\"<span style='direction:rtl;'>\" + end + \"<span> - <span style='direction:rtl;'>\" + start + \"</span>\");\n                } else {\n                  that.toolbarDetails[0].style.direction = \"ltr\";\n                }\n              };\n              renderDetails(that.toolBarRangeFormat);\n              var width = that.toolbarViews.width() + that.toolbarDetails.width() + 120;\n              var formatString = that.toolBarRangeFormat;\n              if (width > that.host.width()) {\n                formatString = that.toolBarRangeFormatAbbr;\n                renderDetails(formatString);\n                var width = that.toolbarViews.width() + that.toolbarDetails.width() + 120;\n                if (width > that.host.width()) {\n                  that.toolbarDetails.hide();\n                  var width = that.toolbarViews.width() + 120;\n                  if (width > that.host.width()) {\n                    that.toolbarViews.hide();\n                  }\n                }\n              } else that.currentToolbarFormat = that.toolBarRangeFormat;\n            },\n            _setView: function (index) {\n              var that = this;\n              that.toolbarViews.find('.jqx-fill-state-pressed').removeClass(that.toTP('jqx-fill-state-pressed'));\n              if (!that.rtl) {\n                $(that.toolbarViews.children()[index]).addClass(that.toTP('jqx-fill-state-pressed'));\n              } else {\n                $(that.toolbarViews.children()[that._views.length - 1 - index]).addClass(that.toTP('jqx-fill-state-pressed'));\n              }\n              if (that._view === index) return;\n              var vScrollBarVisibility = that.vScrollBar[0].style.visibility;\n              if (vScrollBarVisibility) {\n                if (!that._scrollPosition) {\n                  that._scrollPosition = new Array();\n                }\n                that._scrollPosition[that._view] = that.vScrollInstance.value;\n              }\n              var hScrollBarVisibility = that.hScrollBar[0].style.visibility;\n              if (hScrollBarVisibility) {\n                if (!that._hscrollPosition) {\n                  that._hscrollPosition = new Array();\n                }\n                that._hscrollPosition[that._view] = that.hScrollInstance.value;\n              }\n              var oldViewType = that._views[that._view].type;\n              var newViewType = that._views[index].type;\n              that._view = index;\n              that._refreshColumns();\n              that.refresh();\n              var hScrollBarVisibilityAfterRefresh = that.hScrollBar[0].style.visibility;\n              if (hScrollBarVisibility !== hScrollBarVisibilityAfterRefresh) {\n                that._renderrows();\n                that._updateTouchScrolling();\n              }\n              if (that._scrollPosition[that._view]) {\n                that.vScrollInstance.setPosition(that._scrollPosition[that._view]);\n              }\n              if (that._hscrollPosition[that._view]) {\n                that.hScrollInstance.setPosition(that._hscrollPosition[that._view]);\n              }\n              if (that.selectedJQXAppointment) {\n                that._ensureAppointmentVisible(that.selectedJQXAppointment);\n              }\n              var viewStart = that.getViewStart();\n              var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n              that._raiseEvent('viewChange', {\n                date: that.date,\n                from: viewStart,\n                to: viewEnd,\n                oldViewType: oldViewType,\n                newViewType: newViewType\n              });\n            },\n            _getDateTimeInputLocalization: function () {\n              var that = this;\n              var localization = {};\n              localization.backString = that.schedulerLocalization.backString;\n              localization.forwardString = that.schedulerLocalization.forwardString;\n              localization.todayString = that.schedulerLocalization.todayString;\n              localization.clearString = that.schedulerLocalization.clearString;\n              localization.calendar = that.schedulerLocalization;\n              return localization;\n            },\n            setView: function (view) {\n              switch (view) {\n                case \"dayView\":\n                  this._setView(0);\n                  break;\n                case \"weekView\":\n                  this._setView(1);\n                  break;\n                case \"monthView\":\n                  this._setView(2);\n                  break;\n                case \"timelineDayView\":\n                  this._setView(3);\n                  break;\n                case \"timelineWeekView\":\n                  this._setView(4);\n                  break;\n                case \"timelineMonthView\":\n                  this._setView(5);\n                  break;\n              }\n              this.view = view;\n            },\n            navigateForward: function () {\n              var that = this;\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var date = new $.jqx.date(this.date, that.timeZone);\n              var avoidWeekend = function () {\n                while ((date.dayOfWeek() == 0 || date.dayOfWeek() == 6) && false === viewObject.showWeekends) {\n                  date = date.addDays(1);\n                }\n                return date;\n              };\n              switch (view) {\n                case \"dayView\":\n                case \"timelineDayView\":\n                  date = date.addDays(1);\n                  date = avoidWeekend();\n                  break;\n                case \"weekView\":\n                case \"timelineWeekView\":\n                  date = date.addDays(7);\n                  break;\n                case \"monthView\":\n                case \"timelineMonthView\":\n                  var day = date.day();\n                  var month = date.month();\n                  var year = date.year();\n                  var firstDateInMonth = new $.jqx.date(year, month, 1);\n                  firstDateInMonth.timeZone = that.timeZone;\n                  date = firstDateInMonth.addMonths(1);\n                  break;\n                case \"agendaView\":\n                  if (viewObject.days) {\n                    date = date.addDays(viewObject.days);\n                  } else {\n                    date = date.addDays(7);\n                  }\n                  break;\n              }\n              return this.navigateTo(date);\n            },\n            navigateBackward: function () {\n              var that = this;\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var date = new $.jqx.date(this.date, that.timeZone);\n              var avoidWeekend = function () {\n                while ((date.dayOfWeek() == 0 || date.dayOfWeek() == 6) && false === viewObject.showWeekends) {\n                  date = date.addDays(-1);\n                }\n                return date;\n              };\n              switch (view) {\n                case \"dayView\":\n                case \"timelineDayView\":\n                  date = date.addDays(-1);\n                  date = avoidWeekend();\n                  break;\n                case \"weekView\":\n                case \"timelineWeekView\":\n                  date = date.addDays(-7);\n                  break;\n                case \"monthView\":\n                case \"timelineMonthView\":\n                  var day = date.day();\n                  var month = date.month();\n                  var year = date.year();\n                  var firstDateInMonth = new $.jqx.date(year, month, 1);\n                  firstDateInMonth.timeZone = that.timeZone;\n                  date = firstDateInMonth.addMonths(-1);\n                  break;\n                case \"agendaView\":\n                  if (viewObject.days) {\n                    date = date.addDays(-viewObject.days);\n                  } else {\n                    date = date.addDays(-7);\n                  }\n                  break;\n              }\n              return this.navigateTo(date);\n            },\n            _refreshToolBar: function (navigate) {\n              var that = this;\n              var viewStart = that.getViewStart();\n              var viewEnd = that.getViewEnd();\n              var renderDetails = function (formatString) {\n                var start = $.jqx.formatDate(viewStart.toDate(), formatString, that.schedulerLocalization);\n                var end = $.jqx.formatDate(viewEnd.toDate(), formatString, that.schedulerLocalization);\n                var viewType = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                if (viewObject.showWeekends === false) {\n                  if (viewStart.dayOfWeek() == 0 || viewStart.dayOfWeek() == 6) {\n                    viewStart = viewStart.addDays(1);\n                  }\n                  if (viewStart.dayOfWeek() == 0 || viewStart.dayOfWeek() == 6) {\n                    viewStart = viewStart.addDays(1);\n                  }\n                  if (viewEnd.dayOfWeek() == 0 || viewEnd.dayOfWeek() == 6) {\n                    viewEnd = viewEnd.addDays(-1);\n                  }\n                  if (viewEnd.dayOfWeek() == 0 || viewEnd.dayOfWeek() == 6) {\n                    viewEnd = viewEnd.addDays(-1);\n                  }\n                  var start = $.jqx.formatDate(viewStart.toDate(), formatString, that.schedulerLocalization);\n                  var end = $.jqx.formatDate(viewEnd.toDate(), formatString, that.schedulerLocalization);\n                }\n                if (viewType === \"dayView\" || viewType === \"timelineDayView\") {\n                  that.toolbarDetails.html(start);\n                } else {\n                  that.toolbarDetails.html(start + \" - \" + end);\n                }\n                if (that.rtl) {\n                  that.toolbarDetails.addClass('jqx-rtl');\n                  that.toolbarDetails.html(\"<span style='direction:rtl;'>\" + end + \"<span> - <span style='direction:rtl;'>\" + start + \"</span>\");\n                } else {\n                  that.toolbarDetails[0].style.direction = \"ltr\";\n                }\n              };\n              if (navigate) {\n                renderDetails(that._lastFormatString || that.toolBarRangeFormat);\n                return;\n              }\n              renderDetails(that.toolBarRangeFormat);\n              that.toolbarDetails.show();\n              that.toolbarViews.show();\n              var twidth = that.toolbarViews.width() + that.toolbarDetails.width() + 120;\n              if (twidth > that.host.width()) {\n                renderDetails(that.toolBarRangeFormatAbbr);\n                var twidth = that.toolbarViews.width() + that.toolbarDetails.width() + 120;\n                if (twidth > that.host.width()) {\n                  that.toolbarDetails.hide();\n                  var twidth = that.toolbarViews.width() + 120;\n                  if (twidth > that.host.width()) {\n                    that.toolbarViews.hide();\n                  }\n                }\n              }\n            },\n            navigateTo: function (date) {\n              var that = this;\n              if ($.type(date) == \"date\") {\n                date = new $.jqx.date(date);\n              }\n              if (date < this.min) return;\n              if (date > this.max) return;\n              date.timeZone = that.timeZone;\n              that.date = date;\n              that._refreshToolBar(true);\n              that.fromNavigate = true;\n              that.dateTimeInput.val(date.toDate());\n              that.fromNavigate = false;\n              that._refreshColumnTitles();\n              that._renderrows();\n              that._updateFocusedCell();\n              if (that.resources) {\n                that._renderhorizontalscroll();\n              }\n              var viewStart = that.getViewStart();\n              var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n              that._raiseEvent('dateChange', {\n                date: date,\n                from: viewStart,\n                to: viewEnd\n              });\n            },\n            _preparecolumnGroups: function () {\n              var columnsHeight = this.columnsHeight;\n              if (this.columnGroups) {\n                this.columnshierarchy = new Array();\n                if (this.columnGroups.length) {\n                  var that = this;\n                  for (var i = 0; i < this.columnGroups.length; i++) {\n                    this.columnGroups[i].parent = null;\n                    this.columnGroups[i].groups = null;\n                  }\n                  for (var i = 0; i < this.columns.records.length; i++) {\n                    this.columns.records[i].parent = null;\n                    this.columns.records[i].groups = null;\n                  }\n                  var getParentGroup = function (name) {\n                    for (var i = 0; i < that.columnGroups.length; i++) {\n                      var group = that.columnGroups[i];\n                      if (group.name === name) return group;\n                    }\n                    return null;\n                  };\n                  for (var i = 0; i < this.columnGroups.length; i++) {\n                    var group = this.columnGroups[i];\n                    if (!group.groups) {\n                      group.groups = null;\n                    }\n                    if (group.parentGroup) group.parentgroup = group.parentGroup;\n                    if (group.parentgroup) {\n                      var parentgroup = getParentGroup(group.parentgroup);\n                      if (parentgroup) {\n                        group.parent = parentgroup;\n                        if (!parentgroup.groups) {\n                          parentgroup.groups = new Array();\n                        }\n                        if (parentgroup.groups.indexOf(group) === -1) {\n                          parentgroup.groups.push(group);\n                        }\n                      }\n                    }\n                  }\n                  for (var i = 0; i < this.columns.records.length; i++) {\n                    var group = this.columns.records[i];\n                    if (group.columngroup) {\n                      var parentgroup = getParentGroup(group.columngroup);\n                      if (parentgroup) {\n                        if (!parentgroup.groups) {\n                          parentgroup.groups = new Array();\n                        }\n                        group.parent = parentgroup;\n                        if (parentgroup.groups.indexOf(group) === -1) {\n                          parentgroup.groups.push(group);\n                        }\n                      }\n                    }\n                  }\n                  var totalmaxlevel = 0;\n                  for (var i = 0; i < this.columns.records.length; i++) {\n                    var group = this.columns.records[i];\n                    var initialgroup = group;\n                    group.level = 0;\n                    while (initialgroup.parent) {\n                      initialgroup = initialgroup.parent;\n                      group.level++;\n                    }\n                    var initialgroup = group;\n                    var maxlevel = group.level;\n                    totalmaxlevel = Math.max(totalmaxlevel, group.level);\n                    while (initialgroup.parent) {\n                      initialgroup = initialgroup.parent;\n                      if (initialgroup) {\n                        initialgroup.level = --maxlevel;\n                      }\n                    }\n                  }\n                  var getcolumns = function (group) {\n                    var columns = new Array();\n                    if (group.columngroup) {\n                      columns.push(group);\n                    }\n                    if (!group.groups) {\n                      return new Array();\n                    }\n                    for (var i = 0; i < group.groups.length; i++) {\n                      if (group.groups[i].columngroup) {\n                        columns.push(group.groups[i]);\n                      } else {\n                        if (group.groups[i].groups) {\n                          var tmpcolumns = getcolumns(group.groups[i]);\n                          for (var j = 0; j < tmpcolumns.length; j++) {\n                            columns.push(tmpcolumns[j]);\n                          }\n                        }\n                      }\n                    }\n                    return columns;\n                  };\n                  for (var i = 0; i < this.columnGroups.length; i++) {\n                    var group = this.columnGroups[i];\n                    var columns = getcolumns(group);\n                    group.columns = columns;\n                    var indexes = new Array();\n                    var pinned = 0;\n                    for (var j = 0; j < columns.length; j++) {\n                      indexes.push(this.columns.records.indexOf(columns[j]));\n                      if (columns[j].pinned) {\n                        pinned++;\n                      }\n                    }\n                    if (pinned != 0) {\n                      throw new Error(\"jqxScheduler: Column Groups initialization Error. Please, check the initialization of the jqxScheduler's columns array. The columns in a column group cannot be pinned.\");\n                    }\n                    indexes.sort(function (value1, value2) {\n                      value1 = parseInt(value1);\n                      value2 = parseInt(value2);\n                      if (value1 < value2) {\n                        return -1;\n                      }\n                      if (value1 > value2) {\n                        return 1;\n                      }\n                      return 0;\n                    });\n                    for (var index = 1; index < indexes.length; index++) {\n                      if (indexes[index] != indexes[index - 1] + 1) {\n                        throw new Error(\"jqxScheduler: Column Groups initialization Error. Please, check the initialization of the jqxScheduler's columns array. The columns in a column group are expected to be siblings in the columns array.\");\n                        this.host.remove();\n                      }\n                    }\n                  }\n                }\n                this.columnGroupslevel = 1 + totalmaxlevel;\n                columnsHeight = this.columnGroupslevel * this.columnsHeight;\n              }\n              return columnsHeight;\n            },\n            // performs mouse wheel.\n            wheel: function (event, that) {\n              if (that.editRecurrenceDialog && that.editRecurrenceDialog.jqxWindow('isOpen')) return true;\n              if (that._editDialog && that._editDialog.jqxWindow('isOpen')) return true;\n              if (that.autoheight && that.hScrollBar.css('visibility') == 'hidden') {\n                event.returnValue = true;\n                return true;\n              }\n              var delta = 0;\n              if (!event) /* For IE. */\n                event = window.event;\n              if (event.originalEvent && event.originalEvent.wheelDelta) {\n                event.wheelDelta = event.originalEvent.wheelDelta;\n              }\n              if (event.wheelDelta) {\n                /* IE/Opera. */\n                delta = event.wheelDelta / 120;\n              } else if (event.detail) {\n                /** Mozilla case. */\n                delta = -event.detail / 3;\n              }\n              if (delta) {\n                var result = that._handleDelta(delta);\n                if (result) {\n                  if (event.preventDefault) event.preventDefault();\n                  if (event.originalEvent != null) {\n                    event.originalEvent.mouseHandled = true;\n                  }\n                  if (event.stopPropagation != undefined) {\n                    event.stopPropagation();\n                  }\n                }\n                if (result) {\n                  result = false;\n                  event.returnValue = result;\n                  return result;\n                } else {\n                  return false;\n                }\n              }\n              if (event.preventDefault) event.preventDefault();\n              event.returnValue = false;\n            },\n            _handleDelta: function (delta) {\n              if (this.vScrollBar.css('visibility') != 'hidden') {\n                var oldvalue = this.vScrollInstance.value;\n                if (delta < 0) {\n                  this.vScrollInstance.setPosition(this.vScrollInstance.value + 2 * 10);\n                } else {\n                  this.vScrollInstance.setPosition(this.vScrollInstance.value - 2 * 10);\n                }\n                var newvalue = this.vScrollInstance.value;\n                if (oldvalue != newvalue) {\n                  return true;\n                }\n              } else if (this.hScrollBar.css('visibility') != 'hidden') {\n                var oldvalue = this.hScrollInstance.value;\n                if (delta > 0) {\n                  if (this.hScrollInstance.value > 2 * 10) {\n                    this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * 10);\n                  } else {\n                    this.hScrollInstance.setPosition(0);\n                  }\n                } else {\n                  if (this.hScrollInstance.value < this.hScrollInstance.max) {\n                    this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * 10);\n                  } else this.hScrollInstance.setPosition(this.hScrollInstance.max);\n                }\n                var newvalue = this.hScrollInstance.value;\n                if (oldvalue != newvalue) {\n                  return true;\n                }\n              }\n              return false;\n            },\n            _removeHandlers: function () {\n              var that = this;\n              if (that._mousewheelfunc) {\n                that.removeHandler(this.host, 'mousewheel', that._mousewheelfunc);\n              }\n              that.removeHandler($(document), 'keydown.scheduler' + that.element.id);\n              that.removeHandler(that.host, 'focus');\n              that.removeHandler(that.host, 'blur');\n              that.removeHandler(that.host, 'dragstart.' + that.element.id);\n              that.removeHandler(that.host, 'selectstart.' + that.element.id);\n              that.removeHandler($(window), 'jqxReady.' + that.element.id);\n              that.removeHandler(that.host, 'mousewheel', that._mousewheelfunc);\n              var eventname = 'mousedown';\n              if (that.isTouchDevice()) {\n                eventname = $.jqx.mobile.getTouchEventName('touchstart');\n                if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                  eventname = 'mousedown';\n                }\n              }\n              if (that.table) {\n                that.removeHandler(that.table, 'mouseleave');\n              }\n              var mousemove = 'mousemove.scheduler' + that.element.id;\n              var mouseup = \"mouseup.scheduler\" + that.element.id;\n              if (that.isTouchDevice() && that.touchMode !== true) {\n                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.scheduler' + that.element.id;\n                mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.scheduler' + that.element.id;\n              }\n              that.removeHandler($(document), mousemove);\n              that.removeHandler($(document), mouseup);\n              if (!that.isTouchDevice()) {\n                try {\n                  if (document.referrer != \"\" || window.frameElement) {\n                    if (window.top != null && window.top != window.self) {\n                      var parentLocation = null;\n                      if (window.parent && document.referrer) {\n                        parentLocation = document.referrer;\n                      }\n                      if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {\n                        that.removeHandler($(window.top.document), 'mouseup.jqxscheduler' + that.element.id);\n                      }\n                    }\n                  }\n                } catch (error) {}\n              }\n              that.removeHandler(that.host, mousemove);\n              that.removeHandler($(document), 'keydown.jqxscheduler' + that.element.id);\n              that.removeHandler(that.host, 'keydown');\n              if (that.table) {\n                that.removeHandler(that.table, 'dblclick');\n                that.removeHandler(that.pinnedtable, eventname);\n                that.removeHandler(that.table, eventname);\n              }\n            },\n            selectAppointment: function (key) {\n              if (this.appointmentsByKey[key]) {\n                this._selectAppointment(this.appointmentsByKey[key].jqxAppointment);\n              }\n            },\n            _selectAppointment: function (appointment, htmlElement, selectionType) {\n              if (!appointment) return;\n              var that = this;\n              if (that.selectedAppointment) {\n                that.clearAppointmentsSelection();\n              }\n              var key = appointment.id;\n              var appointmentElements = $('[data-key=\"' + key + '\"]');\n              if (appointmentElements.length > 0) {\n                that.selectedJQXAppointment = appointment;\n                if (!htmlElement) {\n                  that.selectedAppointment = $(appointmentElements[0]);\n                } else {\n                  that.selectedAppointment = $(htmlElement);\n                }\n                var view = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                if (view == \"agendaView\") {\n                  that.clearSelection();\n                  return;\n                }\n                appointmentElements.addClass(that.toTP('jqx-scheduler-selected-appointment'));\n                if (appointment.resizable) {\n                  appointmentElements.find(\".jqx-scheduler-appointment-resize-indicator\").show();\n                }\n                switch (view) {\n                  case \"dayView\":\n                    $(appointmentElements).find(\".jqx-scheduler-appointment-left-resize-indicator\").hide();\n                    $(appointmentElements).find(\".jqx-scheduler-appointment-right-resize-indicator\").hide();\n                    break;\n                  case \"weekView\":\n                    break;\n                  case \"monthView\":\n                  case \"timeLineMonthView\":\n                  case \"timeLineDayView\":\n                  case \"timeLineWeekView\":\n                    if (appointmentElements.length > 1) {\n                      $.each(appointmentElements, function (index) {\n                        if (!that.rtl) {\n                          if (index > 0) {\n                            $(this).find(\".jqx-scheduler-appointment-left-resize-indicator\").hide();\n                          }\n                          if (index < appointmentElements.length - 1) {\n                            $(this).find(\".jqx-scheduler-appointment-right-resize-indicator\").hide();\n                          }\n                        } else {\n                          if (index > 0) {\n                            $(this).find(\".jqx-scheduler-appointment-right-resize-indicator\").hide();\n                          }\n                          if (index < appointmentElements.length - 1) {\n                            $(this).find(\".jqx-scheduler-appointment-left-resize-indicator\").hide();\n                          }\n                        }\n                      });\n                    }\n                    break;\n                }\n                if (selectionType == \"mouse\") {\n                  that.clearSelection();\n                  return;\n                }\n              }\n              that.clearSelection();\n            },\n            clearAppointmentsSelection: function () {\n              var that = this;\n              if (that.selectedAppointment) {\n                var key = that.selectedAppointment.attr('data-key');\n                var appointmentElements = $('[data-key=\"' + key + '\"]');\n                appointmentElements.removeClass(that.toTP('jqx-scheduler-selected-appointment'));\n                appointmentElements.find(\".jqx-scheduler-appointment-resize-indicator\").hide();\n                that.selectedAppointment = null;\n                that.selectedJQXAppointment = null;\n              }\n            },\n            selectCell: function (date, allDay, resourceID) {\n              var that = this;\n              var dateTime = date.toDate();\n              for (var i = 0; i < that.rows.length; i++) {\n                for (var j = 0; j < that.rows[i].cells.length; j++) {\n                  var cell = that.rows[i].cells[j];\n                  if (resourceID) {\n                    if (cell.getAttribute(\"data-view\") !== resourceID) continue;\n                  }\n                  var dateString = cell.getAttribute(\"data-date\");\n                  var cellDate = that._getDateByString(dateString);\n                  if (allDay && cell.getAttribute(\"data-end-date\")) {\n                    if (cellDate.valueOf() == date.valueOf()) {\n                      cell.setAttribute('data-selected', 'true');\n                      that.focusedCell = cell;\n                      that._lastSelectedCell = cell;\n                      that._updateCellsSelection();\n                      that._ensureVisible(that.focusedCell);\n                      return;\n                    }\n                  } else if (!allDay && cell.getAttribute(\"data-end-date\")) continue;\n                  if (cellDate.valueOf() == dateTime.valueOf()) {\n                    cell.setAttribute('data-selected', 'true');\n                    that.focusedCell = cell;\n                    that._lastSelectedCell = cell;\n                    that._updateCellsSelection();\n                    that._ensureVisible(that.focusedCell);\n                    return;\n                  }\n                }\n              }\n              that._updateCellsSelection();\n            },\n            selectRange: function (from, to, allDay, resourceID) {\n              var that = this;\n              if (from < this.min) from = this.min;\n              if (to > this.max) to = this.max;\n              var dateTime1 = from.toDate();\n              var dateTime2 = to.toDate();\n              var selected = false;\n              for (var i = 0; i < that.rows.length; i++) {\n                for (var j = 0; j < that.rows[i].cells.length; j++) {\n                  var cell = that.rows[i].cells[j];\n                  if (resourceID) {\n                    if (cell.getAttribute(\"data-view\") !== resourceID) continue;\n                  }\n                  var dateString = cell.getAttribute(\"data-date\");\n                  var cellDate = that._getDateByString(dateString);\n                  if (allDay && cell.getAttribute(\"data-end-date\")) {\n                    if (cellDate.valueOf() >= dateTime1.valueOf() && cellDate.valueOf() <= dateTime2.valueOf()) {\n                      cell.setAttribute('data-selected', 'true');\n                    }\n                  } else if (!allDay && cell.getAttribute(\"data-end-date\")) continue;\n                  if (cellDate.valueOf() >= dateTime1.valueOf() && cellDate.valueOf() <= dateTime2.valueOf()) {\n                    cell.setAttribute('data-selected', 'true');\n                    if (!selected) {\n                      that._lastSelectedCell = cell;\n                      that.focusedCell = cell;\n                      selected = true;\n                    }\n                  }\n                }\n              }\n              that._updateCellsSelection();\n            },\n            _selectRange: function (dragcell, clickedcell) {\n              var that = this;\n              if (that._views[that._view].type == \"agendaView\") return;\n              var td = dragcell;\n              var clickedDataView = clickedcell.getAttribute(\"data-view\");\n              if (dragcell.getAttribute(\"data-view\") !== clickedDataView) return;\n              var dateString1 = clickedcell.getAttribute(\"data-date\");\n              var dateString2 = td.getAttribute(\"data-date\");\n              if (null == dateString1 || null == dateString2) return;\n              var endDate = clickedcell.getAttribute(\"data-end-date\");\n              var dragEndDate = td.getAttribute(\"data-end-date\");\n              var allDayCells = endDate != null || dragEndDate != null;\n              var fullDayCells = endDate != null && dragEndDate != null;\n              var date1 = that._getDateByString(dateString1);\n              var date2 = that._getDateByString(dateString2);\n              if (date1 < this.min.toDate()) date1 = this.min.toDate();\n              if (date2 < this.min.toDate()) date2 = this.min.toDate();\n              if (date1 > this.max.toDate()) date1 = this.max.toDate();\n              if (date2 > this.max.toDate()) date2 = this.max.toDate();\n              var min = Math.min(date1, date2);\n              var max = Math.max(date1, date2);\n              var rows = that.rows;\n              var start = 0;\n              var end = 0;\n              if (start > 0 && that.rtl) {\n                start = 0;\n                end = 1;\n              }\n              var length = rows.length;\n              if (allDayCells) {\n                length = 1;\n                if (dragcell.getAttribute(\"data-end-date\") == null) {\n                  date2.setHours(0, 0, 0, 0);\n                  var allDayDate = new $.jqx.date(date2, that.timeZone).toString();\n                  var dragCellRow = $(td).parent().index();\n                  $.each(rows[0].cells, function () {\n                    var date = this.getAttribute(\"data-date\");\n                    if (date === allDayDate) {\n                      dragcell = this;\n                      fullDayCells = clickedcell.getAttribute(\"data-end-date\") != null && dragcell.getAttribute(\"data-end-date\") != null;\n                      var dateString1 = clickedcell.getAttribute(\"data-date\");\n                      var dateString2 = dragcell.getAttribute(\"data-date\");\n                      var date1 = that._getDateByString(dateString1);\n                      var date2 = that._getDateByString(dateString2);\n                      min = Math.min(date1, date2);\n                      max = Math.max(date1, date2);\n                      return false;\n                    }\n                  });\n                }\n              }\n              for (var i = 0; i < length; i++) {\n                var row = rows[i];\n                if (allDayCells && this.tableRows > 1) {\n                  var resourceIndex = parseInt(dragcell.getAttribute(\"data-view\"));\n                  var rowsPerVew = rows.length / that.tableRows;\n                  var rowIndex = (-1 + resourceIndex) * rowsPerVew;\n                  cells = rows[rowIndex];\n                  row = rows[rowIndex];\n                }\n                var cells = row.cells;\n                for (var j = start; j < cells.length - end; j++) {\n                  if (cells[j].getAttribute(\"data-view\") !== clickedDataView) continue;\n                  cells[j].removeAttribute('data-selected');\n                  if (!fullDayCells && cells[j].getAttribute(\"data-end-date\")) {\n                    continue;\n                  }\n                  var dateString = cells[j].getAttribute(\"data-date\");\n                  var date = that._getDateByString(dateString).valueOf();\n                  if (min <= date && date <= max) {\n                    cells[j].setAttribute('data-selected', 'true');\n                  }\n                }\n              }\n              that._updateCellsSelection();\n            },\n            findCell: function (x, y) {\n              var that = this;\n              var td = null;\n              if (!that._tableOffset) {\n                var tableOffset = that.schedulercontent.coord();\n                that._tableOffset = tableOffset;\n              }\n              var offset = that._tableOffset;\n              var tableTop = offset.top;\n              var tableLeft = offset.left;\n              if (y < tableTop) return null;\n              if (x < tableLeft) return null;\n              if (y > tableTop + that._hostHeight) return null;\n              if (x > tableLeft + that._hostWidth) return null;\n              var foundCell = false;\n              var rows = that.rows;\n              var viewObject = that._views[that._view];\n              var view = viewObject.type;\n              var allDayHeight = 0;\n              var vScrollValue = that.vScrollInstance.value;\n              var hScrollValue = that.hScrollInstance.value;\n              for (var j = 0; j < rows.length; j++) {\n                if (foundCell) break;\n                var row = rows[j];\n                var cells = row.cells;\n                var showAllDayRow = false;\n                if (j == 0 && view == \"dayView\" || view == \"weekView\") {\n                  showAllDayRow = that.showAllDayRow;\n                  if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                    if (viewObject.timeRuler.showAllDayRow != undefined) {\n                      showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                    }\n                  }\n                  if (showAllDayRow) {\n                    allDayHeight = that._allDayRowFullHeight;\n                  }\n                }\n                for (var i = 0; i < cells.length; i++) {\n                  var cell = cells[i];\n                  if (i == 0 && cell.getAttribute(\"data-time-slot\")) continue;\n                  if (!cell._left) {\n                    var left = cell.offsetLeft + tableLeft;\n                    var top = cell.offsetTop + tableTop;\n                    var width = cell.offsetWidth;\n                    var height = cell.offsetHeight;\n                    cell._left = left;\n                    cell._top = top;\n                    cell._width = width;\n                    cell._height = height;\n                  } else {\n                    var left = cell._left;\n                    var top = cell._top;\n                    var width = cell._width;\n                    var height = cell._height;\n                  }\n                  cell._left = left;\n                  cell._top = top;\n                  cell._width = width;\n                  cell._height = height;\n                  if (width === 0 || height === 0) {\n                    continue;\n                  }\n                  if (!that.rtl) {\n                    left -= hScrollValue;\n                  } else {\n                    if (that.hScrollInstance.element.style.visibility != \"hidden\") {\n                      left -= that.hScrollInstance.max - hScrollValue;\n                    }\n                  }\n                  top -= vScrollValue;\n                  if (j == 0 && showAllDayRow) {\n                    top += vScrollValue;\n                  }\n                  if (top <= y && y < top + height) {\n                    if (left <= x && x < left + width) {\n                      td = cell;\n                      foundCell = true;\n                      break;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n              }\n              return td;\n            },\n            _removeFeedbackAndStopResize: function () {\n              var that = this;\n              if (!that.feedback) return;\n              that.feedback.remove();\n              that.feedback = null;\n              that.pinnedfeedback.remove();\n              that.pinnedfeedback = null;\n              if (that.feedbacks) {\n                for (var i = 0; i < that.feedbacks.length; i++) {\n                  that.feedbacks[i].remove();\n                }\n              }\n              that._resizeDays = 0;\n              that._resizeStep = 0;\n              that._lastX = null;\n              that.feedbacks = new Array();\n              that.leftResize = false;\n              that.rightResize = false;\n              that.topResize = false;\n              that.bottomResize = false;\n              that.overlay.hide();\n              that.resizing = false;\n              that.resizeFrom = null;\n              that._dragCell = null;\n              that._dragStartCell = null;\n              that.resizeTo = null;\n              that.dragOrResize = false;\n              that.isMouseDown = false;\n              if (that.selectedJQXAppointment) {\n                var appointments = $('[data-key=\"' + that.selectedJQXAppointment.id + '\"]');\n                appointments.removeClass(that.toTP('jqx-scheduler-feedback-appointment jqx-disableselect'));\n              }\n              if (that.openedMonthCellPopup) {\n                that.openedMonthCellPopup.remove();\n              }\n            },\n            _saveChangesAfterDragOrResize: function (param, appointment, dragCell, resizing) {\n              var that = this;\n              if (param === false) {\n                if (!appointment.isException()) {\n                  if (!appointment.rootAppointment.recurrenceException) {\n                    appointment.rootAppointment.recurrenceException = new Array();\n                  }\n                  if (appointment.rootAppointment != null) {\n                    appointment.rootAppointment.exceptions.push(appointment);\n                    appointment.rootAppointment.recurrenceException.push(appointment.occurrenceFrom);\n                  } else {\n                    appointment.exceptions.push(appointment);\n                    appointment.recurrenceException.push(appointment.occurrenceFrom);\n                  }\n                } else {\n                  var exceptions = appointment.rootAppointment ? appointment.rootAppointment.exceptions : appointment.exceptions;\n                  for (var i = 0; i < exceptions.length; i++) {\n                    if (exceptions[i].occurrenceFrom.equals(appointment.occurrenceFrom)) {\n                      exceptions[i] = appointment;\n                      break;\n                    }\n                  }\n                }\n              } else if (param === true) {\n                if (appointment.isException()) {\n                  var exceptions = appointment.rootAppointment ? appointment.rootAppointment.exceptions : appointment.exceptions;\n                  for (var i = 0; i < exceptions.length; i++) {\n                    if (exceptions[i].occurrenceFrom.equals(appointment.occurrenceFrom)) {\n                      for (var j = 0; j < appointment.rootAppointment.recurrenceException.length; j++) {\n                        if (appointment.rootAppointment.recurrenceException[j].equals(exceptions[i].occurrenceFrom)) {\n                          var dragFrom = appointment.from;\n                          var newFrom = new $.jqx.date(exceptions[i].occurrenceFrom.year(), exceptions[i].occurrenceFrom.month(), exceptions[i].occurrenceFrom.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                          appointment.rootAppointment.recurrenceException[j] = newFrom;\n                          break;\n                        }\n                      }\n                      exceptions[i] = appointment;\n                      var dragFrom = appointment.from;\n                      var newFrom = new $.jqx.date(exceptions[i].occurrenceFrom.year(), exceptions[i].occurrenceFrom.month(), exceptions[i].occurrenceFrom.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                      exceptions[i].occurrenceFrom = newFrom;\n                      break;\n                    }\n                  }\n                }\n                if (appointment.rootAppointment != null) {\n                  appointment.rootAppointment.recurrencePattern = appointment.rootAppointment.recurrencePattern.createNewPattern();\n                  var from = appointment.rootAppointment.from;\n                  var rootDuration = appointment.rootAppointment.duration();\n                  var freq = appointment.rootAppointment.recurrencePattern.freq;\n                  var newFrom = null;\n                  switch (freq) {\n                    case \"daily\":\n                      newFrom = new $.jqx.date(from.year(), from.month(), from.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                      break;\n                    case \"weekly\":\n                      newFrom = new $.jqx.date(from.year(), from.month(), from.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                      break;\n                    case \"monthly\":\n                      newFrom = new $.jqx.date(from.year(), from.month(), from.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                      break;\n                    case \"yearly\":\n                      newFrom = new $.jqx.date(from.year(), from.month(), from.day(), appointment.from.hour(), appointment.from.minute(), appointment.from.second());\n                      break;\n                  }\n                  if (resizing) {\n                    appointment.rootAppointment.from = from;\n                    ;\n                    appointment.rootAppointment.to = from.add(appointment.duration());\n                  } else {\n                    appointment.rootAppointment.from = newFrom;\n                    appointment.rootAppointment.to = newFrom.add(rootDuration);\n                  }\n                  appointment.rootAppointment.allDay = appointment.allDay;\n                  appointment.rootAppointment.resourceId = appointment.resourceId;\n                  appointment.rootAppointment.color = appointment.color;\n                  appointment.rootAppointment.borderColor = appointment.borderColor;\n                  appointment.rootAppointment.background = appointment.background;\n                  appointment.rootAppointment.timezone = appointment.timezone;\n                  appointment.rootAppointment.subject = appointment.subject;\n                  appointment.rootAppointment.description = appointment.description;\n                  appointment.rootAppointment.location = appointment.location;\n                  appointment.rootAppointment.category = appointment.category;\n                  appointment.rootAppointment.status = appointment.status;\n                  if (!that.resizing) {\n                    appointment.rootAppointment.recurrencePattern.setFrom(newFrom);\n                  } else {\n                    appointment.rootAppointment.recurrencePattern.setFrom(from);\n                  }\n                } else {\n                  appointment.recurrencePattern = appointment.recurrencePattern.createNewPattern();\n                  appointment.recurrencePattern.setFrom(appointment.from);\n                }\n                var view = $(dragCell).attr('data-view');\n                var resourceId = that._resources[parseInt(view) - 1];\n                if (resourceId != null) {\n                  if (appointment.rootAppointment != null) {\n                    appointment.rootAppointment.resourceId = resourceId;\n                  } else {\n                    appointment.resourceId = resourceId;\n                  }\n                }\n              }\n            },\n            _handleMouseUp: function (jqxAppointment, dragCell, resizing) {\n              var that = this;\n              clearInterval(that._verticalIntervalDragVelocity);\n              clearInterval(that._horizontalIntervalDragVelocity);\n              clearInterval(that._intervalDrag);\n              clearInterval(that._horizontalIntervalDrag);\n              var appointment = jqxAppointment;\n              var cancel = false;\n              if (!resizing) {\n                if (that._dragStartCell == dragCell) {\n                  cancel = true;\n                }\n              } else {\n                if (that.resizeTo) {\n                  if (appointment.to.equals(that.resizeTo)) {\n                    cancel = true;\n                  }\n                } else if (that.resizeFrom) {\n                  if (appointment.from.equals(that.resizeFrom)) {\n                    cancel = true;\n                  }\n                }\n              }\n              if (cancel) {\n                var appointments = $('[data-key=\"' + jqxAppointment.id + '\"]');\n                appointments.removeClass(that.toTP('jqx-scheduler-feedback-appointment jqx-disableselect'));\n                that._removeFeedbackAndStopResize();\n                return;\n              }\n              var duration = appointment.duration();\n              var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n              var commit = function (param, appointment) {\n                if (appointment.allDay || allDayAppointment) {\n                  var allDayRowsCountOld = that.getMaxAllDayAppointments(that.appointmentsToRender);\n                }\n                if (resizing) {\n                  if (that.resizeTo) {\n                    if (that.resizeTo > that.max) that.resizeTo = that.max;\n                    if (that.resizeTo < that.min) that.resizeTo = that.min;\n                    appointment.to = that.resizeTo;\n                  } else if (that.resizeFrom) {\n                    if (that.resizeFrom > that.max) that.resizeFrom = that.max;\n                    if (that.resizeFrom < that.min) that.resizeFrom = that.min;\n                    appointment.from = that.resizeFrom;\n                  }\n                  if (appointment.from.hour() == 0 && appointment.from.minute() == 0 && appointment.to.hour() == 23 && appointment.to.minute() == 59) {\n                    appointment.allDay = true;\n                  }\n                } else {\n                  var view = that._views[that._view].type;\n                  var viewObject = that._views[that._view];\n                  var date = $(dragCell).attr('data-date');\n                  var allDayCell = $(dragCell).attr('data-end-date') != null;\n                  var jqxDate = new $.jqx.date(date, that.timeZone);\n                  if (jqxDate < that.min) jqxDate = that.min;\n                  if (jqxDate > that.max) jqxDate = that.max;\n                  if (that.rtl && allDayAppointment && allDayCell) {\n                    appointment.to = $.jqx.scheduler.utilities.getEndOfDay(jqxDate);\n                  } else if (that.rtl && (view == \"monthView\" || view == \"timelineMonthView\")) {\n                    appointment.to = $.jqx.scheduler.utilities.getEndOfDay(jqxDate);\n                  } else if (that.rtl && (view == \"timelineDayView\" || view == \"timelineWeekView\")) {\n                    var minutesPerScale = that.getMinutesPerScale();\n                    appointment.to = jqxDate.addMinutes(minutesPerScale);\n                  } else {\n                    appointment.from = jqxDate;\n                  }\n                  if (view === \"dayView\" || view === \"weekView\") {\n                    if (!allDayAppointment && !allDayCell) {\n                      appointment.to = jqxDate.add(duration);\n                      appointment.allDay = false;\n                    } else if (!allDayAppointment && allDayCell) {\n                      appointment.to = $.jqx.scheduler.utilities.getEndOfDay(jqxDate);\n                      appointment.allDay = true;\n                    } else if (allDayAppointment && allDayCell && !that.rtl) {\n                      appointment.to = jqxDate.add(duration);\n                      if (appointment.from.hour() == 0 && appointment.from.minute() == 0 && appointment.to.hour() == 23 && appointment.to.minute() == 59) {\n                        appointment.allDay = true;\n                      }\n                    } else if (allDayAppointment && allDayCell && that.rtl) {\n                      appointment.from = $.jqx.scheduler.utilities.getStartOfDay(appointment.to.add(new $.jqx.timeSpan(-duration)));\n                      if (appointment.from.hour() == 0 && appointment.from.minute() == 0 && appointment.to.hour() == 23 && appointment.to.minute() == 59) {\n                        appointment.allDay = true;\n                      }\n                    } else if (allDayAppointment && !allDayCell) {\n                      var minutes = 30;\n                      var scale = viewObject.timeRuler && viewObject.timeRuler.scale;\n                      switch (scale) {\n                        case 'sixtyMinutes':\n                        case 'hour':\n                          minutes = 60;\n                          break;\n                        case 'fifteenMinutes':\n                        case 'quarterHour':\n                          minutes = 15;\n                          break;\n                        case 'tenMinutes':\n                          minutes = 10;\n                          break;\n                        case 'fiveMinutes':\n                          minutes = 5;\n                          break;\n                      }\n                      appointment.to = jqxDate.addMinutes(minutes);\n                      appointment.allDay = false;\n                    }\n                  } else if (view === \"monthView\") {\n                    if (!that.rtl) {\n                      appointment.to = jqxDate.add(duration);\n                    } else {\n                      appointment.from = $.jqx.scheduler.utilities.getStartOfDay(appointment.to.add(new $.jqx.timeSpan(-duration)));\n                    }\n                  } else if (view === \"timelineDayView\" || view === \"timelineWeekView\" || view === \"timelineMonthView\") {\n                    if (!that.rtl) {\n                      appointment.to = jqxDate.add(duration);\n                    } else {\n                      if (view == \"timelineMonthView\") {\n                        appointment.from = $.jqx.scheduler.utilities.getStartOfDay(appointment.to.add(new $.jqx.timeSpan(-duration)));\n                      } else {\n                        var minutesPerScale = that.getMinutesPerScale();\n                        appointment.from = jqxDate.addMinutes(minutesPerScale).add(new $.jqx.timeSpan(-duration));\n                      }\n                    }\n                  }\n                }\n                that._saveChangesAfterDragOrResize(param, appointment, dragCell, that.resizing);\n                var view = $(dragCell).attr('data-view');\n                var resourceId = that._resources[parseInt(view) - 1];\n                if (resourceId != null) {\n                  appointment.resourceId = resourceId;\n                }\n                that.resizing = false;\n                that.resizeFrom = null;\n                that._dragCell = null;\n                that.resizeTo = null;\n                var boundAppointment = {};\n                var originalData = {};\n                for (var key in that.appointmentDataFields) {\n                  var field = that.appointmentDataFields[key];\n                  var value = appointment[key];\n                  boundAppointment[key] = value;\n                  if (key == \"from\" || key == \"to\") {\n                    value = value.toDate();\n                  }\n                  originalData[field] = value;\n                }\n                boundAppointment.jqxAppointment = appointment;\n                boundAppointment.originalData = originalData;\n                appointment.boundAppointment = boundAppointment;\n                that._raiseEvent('appointmentChange', {\n                  appointment: appointment.boundAppointment\n                });\n                that.changedAppointments[appointment.id] = {\n                  type: \"Update\",\n                  appointment: appointment.boundAppointment\n                };\n                that.table.find('.jqx-icon-arrow-down').hide();\n                if (that._views[that._view].type == \"monthView\" && that._views[that._view].monthRowAutoHeight) {\n                  that._renderrows();\n                } else if ((that._views[that._view].type == \"weekView\" || that._views[that._view].type == \"dayView\") && (appointment.allDay || allDayAppointment)) {\n                  if (that.tableRows > 1) {\n                    that._renderrows();\n                  } else {\n                    var viewStart = that.getViewStart();\n                    var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                    that._prepareAppointmentsInView(viewStart, viewEnd);\n                    that._renderAppointments(viewStart, viewEnd);\n                    var allDayRowsCount = that.getMaxAllDayAppointments(that.appointmentsToRender);\n                    if (allDayRowsCount != allDayRowsCountOld) {\n                      var allDayRowHeight = allDayRowsCount * (that._defaultRowHeight - 2);\n                      if (that.isTouchDevice()) {\n                        allDayRowHeight = Math.max(22 + that._defaultRowHeight, 17 + allDayRowHeight);\n                      } else {\n                        allDayRowHeight = Math.max(3 * that._defaultRowHeight, 17 + allDayRowHeight);\n                      }\n                      if (that.tableRows == 1) {\n                        $($(that.table[0].rows[0]).find('td')).css('height', allDayRowHeight + \"px\");\n                      } else {\n                        $($(that.table[0].rows[1]).find('td')).css('height', allDayRowHeight + \"px\");\n                      }\n                      $(that.oldRow).find('td').css('height', allDayRowHeight + \"px\");\n                      $(that.pinnedTableRow).find('td').css('height', allDayRowHeight + \"px\");\n                      that.pinnedtable.height(allDayRowHeight);\n                      that._updateScrollbars(that._hostHeight ? that._hostHeight : that.host.height());\n                    }\n                  }\n                } else {\n                  var viewStart = that.getViewStart();\n                  var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                  that._prepareAppointmentsInView(viewStart, viewEnd);\n                  that._renderAppointments(viewStart, viewEnd);\n                }\n                that._removeFeedbackAndStopResize();\n              };\n              if (appointment.isRecurrentAppointment()) {\n                commit(false, appointment);\n              } else {\n                commit(null, appointment);\n              }\n            },\n            _handleDayWeekViewResize: function (x, y, td, position, appointment) {\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n              if (!allDayAppointment && !td.getAttribute('data-end-date')) {\n                var validateHeight = function (height) {\n                  if (height < 10) return false;\n                  return true;\n                };\n                var sameColumnTD = that.findCell(that.feedback.coord().left, y);\n                if (that.topResize) {\n                  if (!that._lastResizeY) {\n                    that._lastResizeY = that.mouseDownPosition.top;\n                  }\n                  if (y > that._lastResizeY + $(td).height() / 2) {\n                    var newHeight = that.selectedAppointmentTableBounds.height + that.selectedAppointmentTableBounds.top - position.top - $(td).height() - 3;\n                    if (validateHeight(newHeight)) {\n                      that.feedback.css('top', 2 + position.top + $(td).height());\n                      that.feedback.height(newHeight);\n                      that._lastResizeY = that.feedback.coord().top;\n                      var date = new $.jqx.date(sameColumnTD.getAttribute('data-date'), that.timeZone);\n                      that.resizeFrom = date.addMinutes(that.getMinutesPerScale());\n                    }\n                  } else if (y < that._lastResizeY - $(td).height() / 2) {\n                    var newHeight = that.selectedAppointmentTableBounds.height + that.selectedAppointmentTableBounds.top - position.top - 3;\n                    if (validateHeight(newHeight)) {\n                      that.feedback.css('top', 2 + position.top);\n                      that.feedback.height(newHeight);\n                      that._lastResizeY = that.feedback.coord().top;\n                      that.resizeFrom = new $.jqx.date(sameColumnTD.getAttribute('data-date'), that.timeZone);\n                    }\n                  }\n                } else if (that.bottomResize) {\n                  if (!that._lastResizeY) {\n                    that._lastResizeY = that.mouseDownPosition.top;\n                  }\n                  if (y > that._lastResizeY + $(td).height() / 2) {\n                    var offset = -5 + $(td).height() + position.top - that.selectedAppointmentTableBounds.height - that.selectedAppointmentTableBounds.top;\n                    var newHeight = that.selectedAppointmentTableBounds.height + offset;\n                    if (validateHeight(newHeight)) {\n                      that.feedback.height(newHeight);\n                      that._lastResizeY = that.selectedAppointmentTableBounds.height + offset + that.feedback.coord().top;\n                      that.resizeTo = new $.jqx.date(sameColumnTD.getAttribute('data-date'), that.timeZone).addMinutes(that.getMinutesPerScale());\n                    }\n                  } else if (y < that._lastResizeY - $(td).height() / 2) {\n                    var offset = -5 + position.top - that.selectedAppointmentTableBounds.height - that.selectedAppointmentTableBounds.top;\n                    var newHeight = that.selectedAppointmentTableBounds.height + offset;\n                    if (validateHeight(newHeight)) {\n                      that.feedback.height(newHeight);\n                      that._lastResizeY = that.selectedAppointmentTableBounds.height + offset + that.feedback.coord().top;\n                      that.resizeTo = new $.jqx.date(sameColumnTD.getAttribute('data-date'), that.timeZone);\n                    }\n                  }\n                }\n              } else {\n                var validateWidth = function (width) {\n                  if (width < that.cellWidth - 10) return false;\n                  return true;\n                };\n                var exactTime = viewObject.appointmentsRenderMode && viewObject.appointmentsRenderMode == \"exactTime\";\n                if (appointment.allDay || !exactTime) {\n                  if (that.leftResize) {\n                    if (!that._lastResizeX) {\n                      that._lastResizeX = that.mouseDownPosition.left;\n                    }\n                    if (x > that._lastResizeX + $(td).width() / 2) {\n                      var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left - that.cellWidth;\n                      if (validateWidth(newWidth)) {\n                        that.feedback.css('left', 5 + position.left + that.cellWidth);\n                        that.feedback.width(newWidth - 5);\n                        that.feedback.hide();\n                        that.pinnedfeedback.css('left', 5 + position.left + that.cellWidth);\n                        that.pinnedfeedback.width(newWidth - 5);\n                        that._lastResizeX = that.pinnedfeedback.coord().left;\n                        if (!that.rtl) {\n                          that.resizeFrom = new $.jqx.date(td.getAttribute('data-date'), that.timeZone).addDays(1);\n                        } else {\n                          that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone)).addDays(-1);\n                        }\n                      }\n                    } else if (x < that._lastResizeX - $(td).width() / 2) {\n                      var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left;\n                      if (validateWidth(newWidth)) {\n                        that.feedback.css('left', 5 + position.left);\n                        that.feedback.width(newWidth - 5);\n                        that.feedback.hide();\n                        that.pinnedfeedback.css('left', 5 + position.left);\n                        that.pinnedfeedback.width(newWidth - 5);\n                        that._lastResizeX = that.pinnedfeedback.coord().left;\n                        if (!that.rtl) {\n                          that.resizeFrom = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                        } else {\n                          that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone));\n                        }\n                      }\n                    }\n                  } else if (that.rightResize) {\n                    if (!that._lastResizeX) {\n                      that._lastResizeX = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left;\n                    }\n                    var resizeOffset = $(td).width() / 2;\n                    if (x > that._lastResizeX + resizeOffset) {\n                      var offset = $(td).width() + position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                      var newWidth = that.selectedAppointmentTableBounds.width + offset;\n                      if (validateWidth(newWidth)) {\n                        that.feedback.hide();\n                        that.feedback.width(newWidth - 6);\n                        that.feedback.css('left', 5 + position.left);\n                        that.pinnedfeedback.width(newWidth - 6);\n                        that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.pinnedfeedback.coord().left;\n                        if (!that.rtl) {\n                          that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone));\n                        } else {\n                          that.resizeFrom = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                        }\n                      }\n                    } else if (x < that._lastResizeX - resizeOffset) {\n                      var offset = position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                      var newWidth = that.selectedAppointmentTableBounds.width + offset;\n                      if (validateWidth(newWidth)) {\n                        that.feedback.hide();\n                        that.feedback.css('left', 5 + position.left);\n                        that.feedback.width(newWidth - 6);\n                        that.pinnedfeedback.width(newWidth - 6);\n                        that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.pinnedfeedback.coord().left;\n                        if (!that.rtl) {\n                          that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone).addDays(-1));\n                        } else {\n                          that.resizeFrom = new $.jqx.date(td.getAttribute('data-date'), that.timeZone).addDays(1);\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  var resizePositions = new Array();\n                  var resizeDates = new Array();\n                  var startPosition = -1;\n                  var endPosition = -1;\n                  var left = this.host.coord().left;\n                  var timeColumns = 0;\n                  var hScrollValue = that.hScrollInstance.value;\n                  if (that.rtl) {\n                    var hScrollValue = that.hScrollInstance.max - that.hScrollInstance.value;\n                  }\n                  if (that.hScrollBar[0].style.visibility == \"hidden\") {\n                    hScrollValue = 0;\n                  }\n                  var positionLeft = x + hScrollValue - left;\n                  left = 0;\n                  for (var i = 0; i < this.columns.records.length; i++) {\n                    if (this.columns.records[i].timeColumn) {\n                      if (!that.rtl) {\n                        left += this.columns.records[i].width;\n                        timeColumns++;\n                      }\n                    }\n                  }\n                  var viewStart = that.getViewStart();\n                  var viewEnd = that.getViewEnd();\n                  for (var i = 0; i < this._getColumnsLengthPerView(); i++) {\n                    var width = this.columns.records[i + timeColumns].width;\n                    if (that.leftResize) {\n                      if (!that.rtl) {\n                        resizePositions.push(left);\n                        resizeDates.push(viewStart.addDays(i));\n                        if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                          if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left);\n                            resizeDates.push(appointment.from);\n                            startPosition = resizePositions.length - 1;\n                          }\n                        }\n                        if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                          if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width + 8);\n                            resizeDates.push(appointment.to);\n                            endPosition = resizePositions.length - 1;\n                          }\n                        }\n                      }\n                      if (that.rtl) {\n                        resizePositions.push(left);\n                        resizeDates.push(viewEnd.addDays(-i - 1));\n                        if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                          if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width + 8);\n                            resizeDates.push(appointment.from);\n                            startPosition = resizePositions.length - 1;\n                          }\n                        }\n                        if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                          if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left);\n                            resizeDates.push(appointment.to);\n                            endPosition = resizePositions.length - 1;\n                          }\n                        }\n                      }\n                      left += width;\n                    } else {\n                      if (!that.rtl) {\n                        if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                          if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left);\n                            resizeDates.push(appointment.from);\n                            startPosition = resizePositions.length - 1;\n                          }\n                        }\n                        if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                          if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width + 8);\n                            resizeDates.push(appointment.to);\n                            endPosition = resizePositions.length - 1;\n                          }\n                        }\n                        left += width;\n                        resizePositions.push(left);\n                        resizeDates.push(viewStart.addDays(i));\n                      } else {\n                        if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                          if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width + 8);\n                            resizeDates.push(appointment.from);\n                            startPosition = resizePositions.length - 1;\n                          }\n                        }\n                        if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                          if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                            resizePositions.push(that.selectedAppointmentTableBounds.left);\n                            resizeDates.push(appointment.to);\n                            endPosition = resizePositions.length - 1;\n                          }\n                        }\n                        left += width;\n                        resizePositions.push(left);\n                        resizeDates.push(viewEnd.addDays(-i - 1));\n                      }\n                    }\n                  }\n                  if (that.leftResize) {\n                    for (var i = 0; i < resizePositions.length; i++) {\n                      var position = resizePositions[i];\n                      var nextPosition = resizePositions[i + 1];\n                      if (!nextPosition) nextPosition = position;\n                      var condition = i < resizePositions.length - 1 ? positionLeft >= position && positionLeft <= nextPosition : positionLeft >= position;\n                      if (condition) {\n                        var width = -position + that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width;\n                        var previousWidth = that.pinnedfeedback.width();\n                        var previousLeft = that.pinnedfeedback.css('left');\n                        var previousResizeTo = that.resizeTo;\n                        var previousResizeFrom = that.resizeFrom;\n                        if (width > 0) {\n                          that.pinnedfeedback.css('left', position);\n                          that.pinnedfeedback.width(width);\n                          if (i == startPosition) {\n                            if (!that.rtl) {\n                              that.resizeFrom = appointment.from;\n                            } else {\n                              that.resizeTo = appointment.from;\n                            }\n                          } else if (i == endPosition) {\n                            if (!that.rtl) {\n                              that.resizeFrom = appointment.to;\n                            } else {\n                              that.resizeTo = appointment.to;\n                            }\n                          } else {\n                            if (!that.rtl) {\n                              that.resizeFrom = resizeDates[i];\n                            } else {\n                              that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(resizeDates[i]);\n                            }\n                          }\n                        }\n                      }\n                    }\n                    var from = that.resizeFrom;\n                    var to = that.resizeTo;\n                    if (that.rtl) {\n                      from = appointment.from;\n                    } else to = appointment.to;\n                    var duration = new $.jqx.timeSpan(10000 * (to - from));\n                    if (duration.days() < 1) {\n                      that.pinnedfeedback.css('left', previousLeft);\n                      that.pinnedfeedback.width(previousWidth);\n                      that.resizeFrom = previousResizeFrom;\n                      that.resizeTo = previousResizeTo;\n                    }\n                  } else if (that.rightResize) {\n                    for (var i = 0; i < resizePositions.length; i++) {\n                      var position = resizePositions[i];\n                      var nextPosition = resizePositions[i + 1];\n                      if (!nextPosition) nextPosition = position;\n                      var condition = i < resizePositions.length - 1 ? x >= position - this.cellWidth / 3 && x <= nextPosition - this.cellWidth / 3 : x >= position - this.cellWidth / 3;\n                      if (condition) {\n                        var width = position - that.selectedAppointmentTableBounds.left - 15;\n                        var previousWidth = that.pinnedfeedback.width();\n                        that.pinnedfeedback.width(width);\n                        var previousResizeTo = that.resizeTo;\n                        var previousResizeFrom = that.resizeFrom;\n                        if (i == startPosition) {\n                          if (!that.rtl) {\n                            that.resizeTo = appointment.from;\n                          } else {\n                            that.resizeFrom = appointment.from;\n                          }\n                          var width = position - that.selectedAppointmentTableBounds.left - 9;\n                          that.pinnedfeedback.width(width);\n                          break;\n                        } else if (i == endPosition) {\n                          if (!that.rtl) {\n                            that.resizeTo = appointment.to;\n                          } else {\n                            that.resizeFrom = appointment.to;\n                          }\n                          var width = position - that.selectedAppointmentTableBounds.left - 9;\n                          that.pinnedfeedback.width(width);\n                          break;\n                        } else {\n                          if (!that.rtl) {\n                            that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(resizeDates[i]);\n                          } else {\n                            that.resizeFrom = resizeDates[i];\n                          }\n                          break;\n                        }\n                      }\n                    }\n                    var from = that.resizeFrom;\n                    var to = that.resizeTo;\n                    if (!that.rtl) {\n                      from = appointment.from;\n                    } else to = appointment.to;\n                    var duration = new $.jqx.timeSpan(10000 * (to - from));\n                    if (duration.days() < 1) {\n                      that.pinnedfeedback.width(previousWidth);\n                      that.resizeFrom = previousResizeFrom;\n                      that.resizeTo = previousResizeTo;\n                    }\n                  }\n                }\n              }\n            },\n            _handleTimelineMonthViewResize: function (x, y, td, position, appointment) {\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var validateWidth = function (width) {\n                if (width < 10) return false;\n                return true;\n              };\n              var sameRowTD = that.findCell(x, that.feedback.coord().top);\n              if (appointment.allDay) {\n                if (that.leftResize) {\n                  if (!that._lastResizeX) {\n                    that._lastResizeX = that.mouseDownPosition.left;\n                  }\n                  if (x > that._lastResizeX + $(td).width() / 2) {\n                    var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left - $(td).width();\n                    if (validateWidth(newWidth)) {\n                      that.feedback.css('left', position.left + $(td).width());\n                      that.feedback.width(newWidth);\n                      that._lastResizeX = that.feedback.coord().left;\n                      if (!that.rtl) {\n                        that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addDays(1);\n                      } else {\n                        that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addDays(-1));\n                      }\n                    }\n                  } else if (x < that._lastResizeX - $(td).width() / 2) {\n                    var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left;\n                    if (validateWidth(newWidth)) {\n                      that.feedback.css('left', position.left);\n                      that.feedback.width(newWidth);\n                      that._lastResizeX = that.feedback.coord().left;\n                      if (!that.rtl) {\n                        that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                      } else {\n                        that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone));\n                      }\n                    }\n                  }\n                } else if (that.rightResize) {\n                  if (!that._lastResizeX) {\n                    that._lastResizeX = that.mouseDownPosition.left;\n                  }\n                  if (x > that._lastResizeX + $(td).width() / 2) {\n                    var offset = $(td).width() + position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                    var newWidth = that.selectedAppointmentTableBounds.width + offset - 5;\n                    if (validateWidth(newWidth)) {\n                      that.feedback.width(newWidth);\n                      that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.feedback.coord().left;\n                      if (!that.rtl) {\n                        that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone));\n                      } else {\n                        that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                      }\n                    }\n                  } else if (x < that._lastResizeX - $(td).width() / 2) {\n                    var offset = position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                    var newWidth = that.selectedAppointmentTableBounds.width + offset - 5;\n                    if (validateWidth(newWidth)) {\n                      that.feedback.width(newWidth);\n                      that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.feedback.coord().left;\n                      if (!that.rtl) {\n                        that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addDays(-1));\n                      } else {\n                        that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addDays(1);\n                      }\n                    }\n                  }\n                }\n              } else {\n                var resizePositions = new Array();\n                var resizeDates = new Array();\n                var startPosition = -1;\n                var endPosition = -1;\n                var left = this.host.coord().left;\n                var timeColumns = 0;\n                for (var i = 0; i < this.columns.records.length; i++) {\n                  if (this.columns.records[i].timeColumn) {\n                    left += this.columns.records[i].width;\n                    timeColumns++;\n                  }\n                }\n                var hScrollValue = that.hScrollInstance.value;\n                if (that.rtl) {\n                  var hScrollValue = that.hScrollInstance.max - that.hScrollInstance.value;\n                }\n                if (that.hScrollBar[0].style.visibility == \"hidden\") {\n                  hScrollValue = 0;\n                }\n                var positionLeft = x + hScrollValue - left;\n                left = 0;\n                var viewStart = that.getViewStart();\n                var viewEnd = that.getViewEnd();\n                var length = this._getColumnsLengthPerView() - 1;\n                for (var i = 0; i < this._getColumnsLengthPerView(); i++) {\n                  var width = this.columns.records[i + timeColumns].width;\n                  if (that.leftResize) {\n                    resizePositions.push(left);\n                    if (!that.rtl) {\n                      resizeDates.push(viewStart.addDays(i));\n                    } else {\n                      resizeDates.push(viewEnd.addDays(-i));\n                    }\n                    if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                      if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                        resizePositions.push(that.selectedAppointmentTableBounds.left);\n                        resizeDates.push(appointment.from);\n                        startPosition = resizePositions.length - 1;\n                      }\n                    }\n                    if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                      if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                        resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width + 8);\n                        resizeDates.push(appointment.to);\n                        endPosition = resizePositions.length - 1;\n                      }\n                    }\n                    left += width;\n                  } else {\n                    if (appointment.from.hour() != 0 || appointment.from.hour() == 0 && appointment.from.minute() != 0) {\n                      if (left < that.selectedAppointmentTableBounds.left && left + width > that.selectedAppointmentTableBounds.left) {\n                        resizePositions.push(that.selectedAppointmentTableBounds.left);\n                        resizeDates.push(appointment.from);\n                        startPosition = resizePositions.length - 1;\n                      }\n                    }\n                    if (appointment.to.hour() != 23 || appointment.to.hour() == 23 && appointment.to.minute() != 59) {\n                      if (left < that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width && left + width > that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width) {\n                        resizePositions.push(that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width);\n                        resizeDates.push(appointment.to);\n                        endPosition = resizePositions.length - 1;\n                      }\n                    }\n                    left += width;\n                    resizePositions.push(left);\n                    if (!that.rtl) {\n                      resizeDates.push(viewStart.addDays(i));\n                    } else {\n                      resizeDates.push(viewEnd.addDays(-i - 1));\n                    }\n                  }\n                }\n                if (that.leftResize) {\n                  for (var i = 0; i < resizePositions.length; i++) {\n                    var resizePosition = resizePositions[i];\n                    var nextPosition = resizePositions[i + 1];\n                    if (!nextPosition) nextPosition = resizePosition;\n                    var condition = i < resizePositions.length - 1 ? positionLeft >= resizePosition && positionLeft <= nextPosition : positionLeft >= resizePosition;\n                    if (condition) {\n                      var width = -resizePosition + that.selectedAppointmentTableBounds.left + that.selectedAppointmentTableBounds.width;\n                      var previousWidth = that.feedback.width();\n                      var previousLeft = that.feedback.css('left');\n                      var previousResizeTo = that.resizeTo;\n                      var previousResizeFrom = that.resizeFrom;\n                      that.feedback.css('left', resizePosition);\n                      that.feedback.width(width);\n                      if (i == startPosition) {\n                        if (!that.rtl) {\n                          that.resizeFrom = appointment.from;\n                        } else {\n                          that.resizeTo = appointment.from;\n                        }\n                      } else if (i == endPosition) {\n                        if (!that.rtl) {\n                          that.resizeFrom = appointment.to;\n                        } else {\n                          that.resizeTo = appointment.to;\n                        }\n                      } else {\n                        if (!that.rtl) {\n                          that.resizeFrom = resizeDates[i];\n                        } else {\n                          that.resizeTo = resizeDates[i];\n                        }\n                      }\n                    }\n                  }\n                  var from = that.resizeFrom;\n                  var to = that.resizeTo;\n                  if (that.rtl) {\n                    from = appointment.from;\n                  } else to = appointment.to;\n                  var duration = new $.jqx.timeSpan(10000 * (to - from));\n                  if (that.feedback.width() < 20) {\n                    that.feedback.css('left', previousLeft);\n                    that.feedback.width(previousWidth);\n                    that.resizeFrom = previousResizeFrom;\n                    that.resizeTo = previousResizeTo;\n                  }\n                } else if (that.rightResize) {\n                  for (var i = 0; i < resizePositions.length; i++) {\n                    var resizePosition = resizePositions[i];\n                    var nextPosition = resizePositions[i + 1];\n                    if (!nextPosition) nextPosition = resizePosition;\n                    var condition = i < resizePositions.length - 1 ? positionLeft >= resizePosition - this.cellWidth / 3 && positionLeft <= nextPosition - this.cellWidth / 3 : positionLeft >= resizePosition - this.cellWidth / 3;\n                    if (condition) {\n                      var width = resizePosition - that.selectedAppointmentTableBounds.left - 12;\n                      var previousWidth = that.feedback.width();\n                      that.feedback.width(width);\n                      var previousResizeTo = that.resizeTo;\n                      var previousResizeFrom = that.resizeFrom;\n                      if (i == startPosition) {\n                        if (!that.rtl) {\n                          that.resizeTo = appointment.from;\n                        } else {\n                          that.resizeFrom = appointment.from;\n                        }\n                        var width = resizePosition - that.selectedAppointmentTableBounds.left;\n                        that.feedback.width(width);\n                        break;\n                      } else if (i == endPosition) {\n                        if (!that.rtl) {\n                          that.resizeTo = appointment.to;\n                        } else {\n                          that.resizeFrom = appointment.to;\n                        }\n                        var width = resizePosition - that.selectedAppointmentTableBounds.left;\n                        that.feedback.width(width);\n                        break;\n                      } else {\n                        if (!that.rtl) {\n                          that.resizeTo = $.jqx.scheduler.utilities.getEndOfDay(resizeDates[i]);\n                        } else {\n                          that.resizeFrom = resizeDates[i];\n                        }\n                        break;\n                      }\n                    }\n                  }\n                  var from = that.resizeFrom;\n                  var to = that.resizeTo;\n                  if (!that.rtl) {\n                    from = appointment.from;\n                  } else to = appointment.to;\n                  var duration = new $.jqx.timeSpan(10000 * (to - from));\n                  if (that.feedback.width() < 20) {\n                    that.feedback.width(previousWidth);\n                    that.resizeFrom = previousResizeFrom;\n                    that.resizeTo = previousResizeTo;\n                  }\n                }\n              }\n            },\n            _handleMonthViewResize: function (x, y, td, position, appointment) {\n              var that = this;\n              if (!that.selectedJQXAppointment) {\n                return;\n              }\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var validateWidth = function (width) {\n                if (width < 10) return false;\n                return true;\n              };\n              var monthWidth = -5;\n              if (that.tableColumns > 1) {\n                monthWidth = parseInt(-5 / that.tableColumns);\n              }\n              for (var i = 0; i < that.columns.records.length / that.tableColumns; i++) {\n                if (that.columns.records[i].timeColumn) continue;\n                monthWidth += that.columns.records[i].width;\n              }\n              var resourceId = that.selectedJQXAppointment.resourceId;\n              var resourceIndex = that._resources.indexOf(resourceId);\n              if (that.resources && that.resources.orientation == \"none\") resourceIndex = -1;\n              var viewLeft = \"0px\";\n              if (resourceIndex != -1 && that.tableRows == 1) {\n                viewLeft = monthWidth * resourceIndex + \"px\";\n              }\n              if (viewObject.showWeekNumbers) {\n                if (!that.rtl) {\n                  viewLeft = parseInt(viewLeft) + that.columns.records[0].width + \"px\";\n                }\n              }\n              var tdWidth = td.offsetWidth;\n              var tdHeight = td.offsetHeight;\n              var topOffset = 18;\n              if (that.isTouchDevice()) topOffset = 2;\n              for (var i = 0; i < 6; i++) {\n                that.feedbacks[i][0].style.left = viewLeft;\n                that.feedbacks[i][0].style.width = monthWidth + \"px\";\n                that.feedbacks[i][0].style.display = \"block\";\n                that.feedbacks[i][0].style.top = parseInt(that.rows[i].top) + topOffset + \"px\";\n                if (that.tableRows > 1) {\n                  that.feedbacks[i][0].style.top = parseInt(that.rows[6 * resourceIndex + i].top) + topOffset + \"px\";\n                }\n                $(that.feedbacks[i][0]).find(\".jqx-scheduler-appointment-resize-indicator\").css('visibility', 'inherit');\n              }\n              var elements = that.selectedJQXAppointment.elements;\n              var firstCell = elements[0].cells[0].cell;\n              var lastCell = elements[elements.length - 1];\n              var lastCellPositionTop = lastCell.lastCellY;\n              var lastCellPositionLeft = lastCell.lastCellX;\n              var firstCellPositionTop = elements[0].cellY;\n              var firstCellPositionLeft = elements[0].cellX;\n              var positionTop = parseInt(position.top);\n              var positionLeft = parseInt(position.left);\n              if (!that.rtl) {\n                if (that.leftResize) {\n                  var resizeFromSet = false;\n                  for (var i = 0; i < 6; i++) {\n                    var feedback = that.feedbacks[i];\n                    var feedbackTop = parseInt(feedback[0].style.top) - topOffset;\n                    var feedbackLeft = parseInt(feedback[0].style.left);\n                    // full row width for elements above cursor.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.width = monthWidth + \"px\";\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (top == feedbackTop) {\n                          feedback[0].style.top = elements[j].y + \"px\";\n                        }\n                      }\n                    } else {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (top == feedbackTop) {\n                          feedback[0].style.width = elements[j].width + \"px\";\n                          feedback[0].style.top = elements[j].y + \"px\";\n                        }\n                      }\n                    }\n                    // handle the feedback for the first element.\n                    var element = elements[0];\n                    var left = parseInt(element.x);\n\n                    // handle first element's feedback.\n                    if (feedbackTop == firstCellPositionTop) {\n                      feedback[0].style.left = left + \"px\";\n                      if (positionTop == firstCellPositionTop) {\n                        feedback[0].style.left = 1 + position.left + \"px\";\n                        feedback[0].style.width = -1 + element.x + element.width - position.left + \"px\";\n                        if (viewObject.appointmentsRenderMode == \"exactTime\" && !that.selectedJQXAppointment.allDay) {\n                          var w = that.cellWidth - (element.x - firstCellPositionLeft);\n                          var hostLeft = that.host.coord().left;\n                          if (x - hostLeft >= element.x && x - hostLeft <= element.x + w + 2) {\n                            feedback[0].style.left = left + \"px\";\n                            feedback[0].style.width = element.width + \"px\";\n                            resizeFromSet = true;\n                          }\n                        }\n                      } else if (positionTop > firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = element.width + \"px\";\n                      } else if (positionTop < firstCellPositionTop) {\n                        feedback[0].style.left = viewLeft;\n                        feedback[0].style.width = element.x + element.width - parseInt(viewLeft) + \"px\";\n                      }\n                    }\n                    // handle the cursor position below the first element.\n                    else if (feedbackTop == positionTop) {\n                      feedback[0].style.width = monthWidth - position.left + parseInt(viewLeft) + \"px\";\n                      feedback[0].style.left = position.left + \"px\";\n                    }\n\n                    // hide feedbacks below last element.\n                    if (feedbackTop > lastCellPositionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n\n                    // hide feedbacks above cursor.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n                    if (positionTop >= lastCellPositionTop) {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (positionTop > lastCellPositionTop || positionTop == lastCellPositionTop && positionLeft > lastCellPositionLeft) {\n                          if (top == feedbackTop) {\n                            feedback[0].style.display = \"block\";\n                            feedback[0].style.width = elements[j].width + \"px\";\n                            feedback[0].style.left = elements[j].x + \"px\";\n                          }\n                        } else if (positionTop == lastCellPositionTop && positionLeft <= lastCellPositionLeft) {\n                          if (firstCellPositionTop != lastCellPositionTop) {\n                            feedback[0].style.width = elements[j].width - position.left + parseInt(viewLeft) + \"px\";\n                          }\n                        }\n                      }\n                    }\n                  }\n                  var newDate = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                  if (newDate < that.selectedJQXAppointment.to && !resizeFromSet) {\n                    that.resizeFrom = newDate;\n                  } else {\n                    that.resizeFrom = that.selectedJQXAppointment.from;\n                  }\n                }\n                // RESIZE RIGHT\n                else if (that.rightResize) {\n                  var resizeToSet = false;\n                  for (var i = 0; i < 6; i++) {\n                    var feedback = that.feedbacks[i];\n                    var feedbackTop = parseInt(feedback[0].style.top) - topOffset;\n                    var feedbackLeft = parseInt(feedback[0].style.left);\n                    // full row width for elements above cursor.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.width = monthWidth + \"px\";\n                    }\n                    for (var j = 0; j < elements.length; j++) {\n                      var top = elements[j].cellY;\n                      if (top == feedbackTop) {\n                        feedback[0].style.top = elements[j].y + \"px\";\n                      }\n                    }\n\n                    // handle the feedback for the first element.\n                    var element = elements[0];\n                    var left = parseInt(element.x);\n\n                    // handle first element's feedback.\n                    if (feedbackTop == firstCellPositionTop) {\n                      feedback[0].style.left = left + \"px\";\n                      if (positionTop == firstCellPositionTop) {\n                        if (positionLeft >= firstCellPositionLeft) {\n                          feedback[0].style.width = positionLeft + tdWidth - left - 5 + \"px\";\n                          if (viewObject.appointmentsRenderMode == \"exactTime\" && !that.selectedJQXAppointment.allDay) {\n                            var hostLeft = that.host.coord().left;\n                            if (x - hostLeft >= lastCellPositionLeft && x - hostLeft <= element.x + element.width + 15) {\n                              feedback[0].style.width = element.width + \"px\";\n                              resizeToSet = true;\n                            }\n                          }\n                        } else {\n                          feedback[0].style.width = element.width + \"px\";\n                        }\n                      } else if (positionTop < firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = element.width + \"px\";\n                      } else if (positionTop > firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = monthWidth - left + parseInt(viewLeft) + \"px\";\n                      }\n                    }\n                    // handle the cursor position below the first element.\n                    else if (feedbackTop == positionTop) {\n                      feedback[0].style.width = positionLeft + tdWidth - 5 - parseInt(viewLeft) + \"px\";\n                    }\n\n                    // hide feedbacks above first element.\n                    if (feedbackTop < firstCellPositionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n\n                    // hide feedbacks below cursor and after the first element.\n                    if (feedbackTop > positionTop && feedbackTop > firstCellPositionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n                    if (positionTop <= firstCellPositionTop) {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (positionTop < firstCellPositionTop || positionTop == firstCellPositionTop && positionLeft < firstCellPositionLeft) {\n                          if (top == feedbackTop) {\n                            feedback[0].style.display = \"block\";\n                            feedback[0].style.width = elements[j].width + \"px\";\n                          }\n                        }\n                      }\n                    }\n                  }\n                  var newDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone));\n                  if (newDate > that.selectedJQXAppointment.from && !resizeToSet) {\n                    that.resizeTo = newDate;\n                  } else {\n                    that.resizeTo = that.selectedJQXAppointment.to;\n                  }\n                }\n              } // RTL\n              else {\n                if (that.leftResize) {\n                  var resizeToSet = false;\n                  for (var i = 0; i < 6; i++) {\n                    var feedback = that.feedbacks[i];\n                    var feedbackTop = parseInt(feedback[0].style.top) - topOffset;\n                    var feedbackLeft = parseInt(feedback[0].style.left);\n                    // full row width for elements above cursor.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.width = monthWidth + \"px\";\n                    } else {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (top == feedbackTop) {\n                          feedback[0].style.width = elements[j].width + \"px\";\n                          feedback[0].style.top = elements[j].y + \"px\";\n                        }\n                      }\n                    }\n                    // handle the feedback for the first element.\n                    var element = elements[0];\n                    var left = parseInt(element.x);\n\n                    // handle first element's feedback.\n                    if (feedbackTop == firstCellPositionTop) {\n                      feedback[0].style.left = left + \"px\";\n                      if (positionTop == firstCellPositionTop) {\n                        feedback[0].style.left = 1 + position.left + \"px\";\n                        feedback[0].style.width = -1 + element.x + element.width - position.left + \"px\";\n                        if (position.left > element.x + element.width) {\n                          feedback[0].style.width = element.width + \"px\";\n                          feedback[0].style.left = element.x + \"px\";\n                        }\n                        if (viewObject.appointmentsRenderMode == \"exactTime\" && !that.selectedJQXAppointment.allDay) {\n                          var hostLeft = that.host.coord().left;\n                          if (x - hostLeft >= element.x - 10 && x - hostLeft <= element.cellX + that.cellWidth) {\n                            feedback[0].style.width = element.width + \"px\";\n                            feedback[0].style.left = element.x + \"px\";\n                            resizeToSet = true;\n                          }\n                        }\n                      } else if (positionTop < firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = element.width + \"px\";\n                      } else if (positionTop > firstCellPositionTop) {\n                        feedback[0].style.left = viewLeft;\n                        feedback[0].style.width = element.x + element.width - parseInt(viewLeft) + \"px\";\n                      }\n                    }\n                    // handle the cursor position below the first element.\n                    else if (feedbackTop == positionTop) {\n                      feedback[0].style.width = monthWidth - position.left + parseInt(viewLeft) + \"px\";\n                      feedback[0].style.left = position.left + \"px\";\n                    }\n\n                    // hide feedbacks above last element.\n                    if (feedbackTop < firstCellPositionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n\n                    // hide feedbacks below cursor.\n                    if (feedbackTop > positionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n                    if (positionTop < firstCellPositionTop) {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (top == feedbackTop) {\n                          feedback[0].style.display = \"block\";\n                          feedback[0].style.width = elements[j].width + \"px\";\n                          feedback[0].style.left = elements[j].x + \"px\";\n                        }\n                      }\n                    }\n                    if (positionTop == firstCellPositionTop) {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (positionTop < firstCellPositionTop || positionTop == firstCellPositionTop) {\n                          if (top == feedbackTop && firstCellPositionTop != lastCellPositionTop) {\n                            //  feedback[0].style.display = \"block\";\n                            feedback[0].style.left = 1 + position.left + parseInt(viewLeft) + \"px\";\n                            if (1 + position.left + parseInt(viewLeft) > element.x + element.width) {\n                              feedback[0].style.left = element.x + \"px\";\n                            }\n                            feedback[0].style.width = -1 + element.x + element.width - position.left + \"px\";\n                          }\n                        }\n                      }\n                    }\n                  }\n                  var newDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(td.getAttribute('data-date'), that.timeZone));\n                  if (newDate > that.selectedJQXAppointment.from && !resizeToSet) {\n                    that.resizeTo = newDate;\n                  } else {\n                    that.resizeTo = that.selectedJQXAppointment.to;\n                  }\n                }\n                // RESIZE RIGHT\n                else if (that.rightResize) {\n                  var resizeFromSet = false;\n                  for (var i = 0; i < 6; i++) {\n                    var feedback = that.feedbacks[i];\n                    var feedbackTop = parseInt(feedback[0].style.top) - topOffset;\n                    var feedbackLeft = parseInt(feedback[0].style.left);\n                    // full row width for elements above cursor.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.width = monthWidth + \"px\";\n                    }\n                    for (var j = 0; j < elements.length; j++) {\n                      var top = elements[j].cellY;\n                      if (top == feedbackTop) {\n                        feedback[0].style.top = elements[j].y + \"px\";\n                      }\n                    }\n\n                    // handle the feedback for the first element.\n                    var element = elements[0];\n                    var left = parseInt(element.x);\n\n                    // handle first element's feedback.\n                    if (feedbackTop == firstCellPositionTop) {\n                      feedback[0].style.left = left + \"px\";\n                      if (positionTop == firstCellPositionTop) {\n                        if (positionLeft >= firstCellPositionLeft) {\n                          feedback[0].style.width = positionLeft + tdWidth - left - 5 + \"px\";\n                          if (viewObject.appointmentsRenderMode == \"exactTime\" && !that.selectedJQXAppointment.allDay) {\n                            var hostLeft = that.host.coord().left;\n                            if (x - hostLeft >= element.lastCellX && x - hostLeft <= element.x + element.width + 15) {\n                              feedback[0].style.width = element.width + \"px\";\n                              resizeFromSet = true;\n                            }\n                          }\n                        } else {\n                          feedback[0].style.width = element.width + \"px\";\n                        }\n                      } else if (positionTop > firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = element.width + \"px\";\n                      } else if (positionTop < firstCellPositionTop) {\n                        feedback[0].style.left = left + \"px\";\n                        feedback[0].style.width = monthWidth - left + parseInt(viewLeft) + \"px\";\n                      }\n                    }\n                    // handle the cursor position below the first element.\n                    else if (feedbackTop == positionTop) {\n                      feedback[0].style.width = positionLeft + tdWidth - 5 - parseInt(viewLeft) + \"px\";\n                    }\n\n                    // hide feedbacks below last element.\n                    if (feedbackTop > lastCellPositionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n\n                    // hide feedbacks below cursor and after the first element.\n                    if (feedbackTop < positionTop) {\n                      feedback[0].style.display = \"none\";\n                    }\n                    if (positionTop > lastCellPositionTop) {\n                      for (var j = 0; j < elements.length; j++) {\n                        var top = elements[j].cellY;\n                        if (top == feedbackTop) {\n                          feedback[0].style.display = \"block\";\n                        }\n                        if (feedbackTop == lastCellPositionTop) {\n                          feedback[0].style.width = elements[j].width + \"px\";\n                          feedback[0].style.left = elements[j].x + \"px\";\n                        }\n                      }\n                    }\n                    if (positionTop <= lastCellPositionTop) {\n                      if (feedbackTop == lastCellPositionTop) {\n                        for (var j = 0; j < elements.length; j++) {\n                          var top = elements[j].cellY;\n                          if (feedbackTop != positionTop && top == feedbackTop && firstCellPositionTop != lastCellPositionTop) {\n                            feedback[0].style.width = elements[j].width + \"px\";\n                            feedback[0].style.left = elements[j].x + \"px\";\n                          } else if (feedbackTop == positionTop && top == feedbackTop && firstCellPositionTop != lastCellPositionTop) {\n                            feedback[0].style.left = elements[j].x + \"px\";\n                            feedback[0].style.width = positionLeft + tdWidth - 5 - parseInt(viewLeft) - elements[j].x + \"px\";\n                          }\n                        }\n                      }\n                    }\n                  }\n                  var newDate = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                  if (newDate < that.selectedJQXAppointment.to && !resizeFromSet) {\n                    that.resizeFrom = newDate;\n                  } else {\n                    that.resizeFrom = that.selectedJQXAppointment.from;\n                  }\n                }\n              }\n              var visibleFeedbacks = new Array();\n              for (var i = 0; i < 6; i++) {\n                var feedback = that.feedbacks[i];\n                if (feedback[0].style.display == \"block\") {\n                  visibleFeedbacks.push(feedback);\n                }\n              }\n              $.each(visibleFeedbacks, function (index) {\n                if (!that.rtl) {\n                  if (index > 0) {\n                    $(this).find(\".jqx-scheduler-appointment-left-resize-indicator\")[0].style.visibility = \"hidden\";\n                  }\n                  if (index < visibleFeedbacks.length - 1) {\n                    $(this).find(\".jqx-scheduler-appointment-right-resize-indicator\")[0].style.visibility = \"hidden\";\n                  }\n                } else {\n                  if (index > 0) {\n                    $(this).find(\".jqx-scheduler-appointment-right-resize-indicator\")[0].style.visibility = \"hidden\";\n                  }\n                  if (index < visibleFeedbacks.length - 1) {\n                    $(this).find(\".jqx-scheduler-appointment-left-resize-indicator\")[0].style.visibility = \"hidden\";\n                  }\n                }\n              });\n            },\n            _handleTimelineDayWeekViewResize: function (x, y, td, position, appointment) {\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var minutes = that.getMinutesPerScale();\n              var validateWidth = function (width) {\n                if (width < 10) return false;\n                return true;\n              };\n              var sameRowTD = that.findCell(x, that.feedback.coord().top);\n              if (that.leftResize) {\n                if (!that._lastResizeX) {\n                  that._lastResizeX = that.mouseDownPosition.left;\n                }\n                if (x > that._lastResizeX + $(td).width() / 2) {\n                  var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left - $(td).width();\n                  if (validateWidth(newWidth)) {\n                    that.feedback.css('left', 2 + position.left + $(td).width());\n                    that.feedback.width(newWidth);\n                    that._lastResizeX = that.feedback.coord().left;\n                    if (!that.rtl) {\n                      that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addMinutes(minutes);\n                    } else {\n                      that.resizeTo = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                    }\n                  }\n                } else if (x < that._lastResizeX - $(td).width() / 2) {\n                  var newWidth = that.selectedAppointmentTableBounds.width + that.selectedAppointmentTableBounds.left - position.left;\n                  if (validateWidth(newWidth)) {\n                    that.feedback.css('left', 2 + position.left);\n                    that.feedback.width(newWidth);\n                    that._lastResizeX = that.feedback.coord().left;\n                    if (!that.rtl) {\n                      that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                    } else {\n                      that.resizeTo = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addMinutes(minutes);\n                      ;\n                    }\n                  }\n                }\n              } else if (that.rightResize) {\n                if (!that._lastResizeX) {\n                  that._lastResizeX = that.mouseDownPosition.left;\n                }\n                if (x > that._lastResizeX + $(td).width() / 2) {\n                  var offset = $(td).width() + position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                  var newWidth = that.selectedAppointmentTableBounds.width + offset;\n                  if (validateWidth(newWidth)) {\n                    that.feedback.width(newWidth);\n                    that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.feedback.coord().left;\n                    if (!that.rtl) {\n                      that.resizeTo = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addMinutes(minutes);\n                    } else {\n                      that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                    }\n                  }\n                } else if (x < that._lastResizeX - $(td).width() / 2) {\n                  var offset = position.left - that.selectedAppointmentTableBounds.width - that.selectedAppointmentTableBounds.left;\n                  var newWidth = that.selectedAppointmentTableBounds.width + offset;\n                  if (validateWidth(newWidth)) {\n                    that.feedback.width(newWidth);\n                    that._lastResizeX = that.selectedAppointmentTableBounds.width + offset + that.feedback.coord().left;\n                    if (!that.rtl) {\n                      that.resizeTo = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone);\n                    } else {\n                      that.resizeFrom = new $.jqx.date(sameRowTD.getAttribute('data-date'), that.timeZone).addMinutes(minutes);\n                    }\n                  }\n                }\n              }\n            },\n            _handleResize: function (x, y, td, position, appointment) {\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              if (view === \"dayView\" || view === \"weekView\") {\n                that._handleDayWeekViewResize(x, y, td, position, appointment);\n              } else if (view === \"timelineMonthView\") {\n                that._handleTimelineMonthViewResize(x, y, td, position, appointment);\n              } else if (view === \"monthView\") {\n                that._handleMonthViewResize(x, y, td, position, appointment);\n              } else if (view === \"timelineDayView\" || view === \"timelineWeekView\") {\n                that._handleTimelineDayWeekViewResize(x, y, td, position, appointment);\n              }\n              if (view === \"timelineDayView\" || view === \"timelineMonthView\" || view === \"timelineWeekView\") {\n                clearInterval(that._horizontalIntervalDrag);\n                that._horizontalIntervalDrag = setInterval(function () {\n                  var tablewdith = that.host.width();\n                  var tableLeft = that.host.coord().left;\n                  var view_left = tableLeft + 25;\n                  var view_right = tablewdith + view_left - 45;\n                  if (!that.rtl) {\n                    if (x < view_left) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value - 5);\n                    } else if (x > view_right) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value + 5);\n                    }\n                  } else {\n                    if (x > view_right) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value - 5);\n                    } else if (x < view_left) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value + 5);\n                    }\n                  }\n                }, 5);\n              } else if (view === \"dayView\" || view === \"weekView\") {\n                clearInterval(that._intervalDrag);\n                that._intervalDrag = setInterval(function () {\n                  var tableheight = that.host.height();\n                  var headerHeight = 0;\n                  if (!that.columnGroups) {\n                    headerHeight += that.showHeader ? that.columnsHeight : 0;\n                  } else {\n                    headerHeight += that.showHeader ? that.columnsheader.height() : 0;\n                  }\n                  if (that.showToolbar) {\n                    headerHeight += that.toolbarHeight;\n                  }\n                  tableheight -= headerHeight;\n                  var legendHeight = that.legendHeight;\n                  if (that._resources.length == 0) {\n                    legendHeight = 0;\n                  }\n                  if (that.showLegend) {\n                    tableheight -= legendHeight;\n                  }\n                  var tableTop = headerHeight + that.host.coord().top;\n                  var showAllDayRow = that.showAllDayRow;\n                  if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                    if (viewObject.timeRuler.showAllDayRow != undefined) {\n                      showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                    }\n                  }\n                  var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                  if (showAllDayRow && allDayAppointment) tableTop -= 20;else if (showAllDayRow && that.resizing) {\n                    tableTop += $(that.table[0].rows[0]).height();\n                    tableheight -= $(that.table[0].rows[0]).height();\n                  }\n                  var view_top = tableTop + 25;\n                  var view_bottom = tableheight + view_top - 45;\n                  if (y < view_top) {\n                    that.vScrollInstance.setPosition(that.vScrollInstance.value - 5);\n                  } else if (y > view_bottom) {\n                    that.vScrollInstance.setPosition(that.vScrollInstance.value + 5);\n                  }\n                }, 5);\n              }\n              that.resizing = true;\n            },\n            _startTimers: function (x, y, appointment) {\n              var that = this;\n              var coord = that.host.coord();\n              var velocity = 0;\n              var vvelocity = 0;\n              if (that.hScrollInstance.element.style.visibility != \"hidden\") {\n                clearInterval(that._horizontalIntervalDragVelocity);\n                that._horizontalIntervalDragVelocity = setInterval(function () {\n                  velocity++;\n                  if (velocity > 40) velocity = 40;\n                }, 100);\n                clearInterval(that._horizontalIntervalDrag);\n                that._horizontalIntervalDrag = setInterval(function () {\n                  var tablewdith = that._hostWidth;\n                  var tableLeft = coord.left;\n                  var view_left = tableLeft + 30;\n                  var view_right = tablewdith + view_left - 60;\n                  if (!that.rtl) {\n                    if (x < view_left) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value - 10 - velocity);\n                    } else if (x > view_right) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value + 10 + velocity);\n                    } else velocity = 0;\n                  } else {\n                    if (x < view_left) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value + 10 + velocity);\n                    } else if (x > view_right) {\n                      that.hScrollInstance.setPosition(that.hScrollInstance.value - 10 - velocity);\n                    } else velocity = 0;\n                  }\n                }, 10);\n              }\n              if (that.vScrollInstance.element.style.visibility != \"hidden\") {\n                clearInterval(that._verticalIntervalDragVelocity);\n                that._verticalIntervalDragVelocity = setInterval(function () {\n                  vvelocity++;\n                  if (vvelocity > 40) vvelocity = 40;\n                }, 100);\n                clearInterval(that._intervalDrag);\n                that._intervalDrag = setInterval(function () {\n                  var tableheight = that._hostHeight;\n                  var headerHeight = 0;\n                  if (!that.columnGroups) {\n                    headerHeight += that.showHeader ? that.columnsHeight : 0;\n                  } else {\n                    headerHeight += that.showHeader ? that.columnsheader.height() : 0;\n                  }\n                  var view = that._views[that._view].type;\n                  var viewObject = that._views[that._view];\n                  if (that.showToolbar) {\n                    headerHeight += that.toolbarHeight;\n                  }\n                  tableheight -= headerHeight;\n                  if (that.showLegend && that._resources.length > 0) {\n                    tableheight -= that.legendHeight;\n                  }\n                  var widgetTop = coord.top;\n                  var tableTop = headerHeight + widgetTop;\n                  if (view == \"dayView\" || view == \"weekView\") {\n                    var showAllDayRow = that.showAllDayRow;\n                    if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                      if (viewObject.timeRuler.showAllDayRow != undefined) {\n                        showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                      }\n                    }\n                    var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                    if (showAllDayRow && allDayAppointment) tableTop -= 20;else if (showAllDayRow && that.resizing) {\n                      tableTop += $(that.table[0].rows[0]).height();\n                    }\n                  }\n                  var view_top = tableTop + 30;\n                  var view_bottom = widgetTop + tableheight + headerHeight - 30;\n                  if (y < view_top) {\n                    that.vScrollInstance.setPosition(that.vScrollInstance.value - 10 - vvelocity);\n                  } else if (y > view_bottom) {\n                    that.vScrollInstance.setPosition(that.vScrollInstance.value + 10 + vvelocity);\n                  } else vvelocity = 0;\n                }, 10);\n              }\n            },\n            _hoverCell: function (cell) {\n              var that = this;\n              if (!that.enableHover) {\n                return true;\n              }\n              if (that._resources.length > 0) {\n                if (cell.className.indexOf('pinned') >= 0) {\n                  return true;\n                }\n              }\n              if (cell.className.indexOf('time-column') >= 0) {\n                return true;\n              }\n              if (cell.className.indexOf('jqx-scheduler-disabled-cell') >= 0) {\n                return true;\n              }\n              if (cell && cell == that.hoveredCell) {\n                return true;\n              }\n              that.hoveredCell = cell;\n              if (!cell) {\n                return true;\n              }\n              that._removeHoveredCell();\n              that.hoveredCell = cell;\n              cell.className += \" \" + that.toTP('jqx-fill-state-hover') + \" \" + that.toTP('jqx-grid-cell-hover') + \" \" + that.toTP('jqx-scheduler-cell-hover');\n              cell.jqxClassName = cell.className;\n            },\n            _removeHoveredCell: function () {\n              var that = this;\n              if (that.hoveredCell) {\n                var cell = that.hoveredCell;\n                var removeHoverState = function (cells) {\n                  var className = cell.className;\n                  className = className.replace(\" \" + that.toTP('jqx-fill-state-hover'), \"\");\n                  className = className.replace(\" \" + that.toTP('jqx-grid-cell-hover'), \"\");\n                  className = className.replace(\" \" + that.toTP('jqx-scheduler-cell-hover'), \"\");\n                  cell.className = className;\n                  cell.jqxClassName = className;\n                };\n                removeHoverState(cell);\n              }\n              that.hoveredCell = null;\n            },\n            _addHandlers: function () {\n              var that = this;\n              this._mousewheelfunc = this._mousewheelfunc || function (event) {\n                that.wheel(event, that);\n                return false;\n              };\n              this.focused = false;\n              var focusBack = false;\n              this.addHandler($(document), 'keydown.scheduler' + that.element.id, function (event) {\n                focusBack = false;\n                if (event.keyCode === 9 && event.shiftKey && !that.focused) {\n                  focusBack = true;\n                }\n              });\n              this.addHandler(this.host, 'focus', function (event) {\n                if (that.focusedCell && !that.selectedAppointment && !focusBack) {\n                  $(that.focusedCell).addClass(that.toThemeProperty('jqx-scheduler-cell-focus'));\n                }\n                that.focused = true;\n                if (focusBack) {\n                  if (that.appointmentsToRender.length > 0) {\n                    var jqxAppointment = that.appointmentsToRender[that.appointmentsToRender.length - 1];\n                    that._selectAppointment(jqxAppointment);\n                    that._lastSelectedAppointment = jqxAppointment;\n                  } else if (!that.focusedCell) {\n                    that._updateFocusedCell();\n                  } else if (that.focusedCell) {\n                    if (that.focusedCell.className.indexOf('-focus') == -1) {\n                      that._updateCellsSelection();\n                      return false;\n                    }\n                  }\n                }\n              });\n              this.addHandler(this.host, 'blur', function (event) {\n                if (that.focusedCell) {\n                  if (document.activeElement == that.element) return true;\n                  if ($(document.activeElement).ischildof(that.host)) {\n                    return true;\n                  }\n                  $(that.focusedCell).removeClass(that.toThemeProperty('jqx-scheduler-cell-focus'));\n                  that.focused = false;\n                }\n              });\n              this.addHandler(this.host, 'dragstart.' + this.element.id, function (event) {\n                return false;\n              });\n              this.addHandler(this.host, 'selectstart.' + this.element.id, function (event) {\n                if (that.enableBrowserSelection) {\n                  return true;\n                }\n                if (that.showToolBar) {\n                  if ($(event.target).ischildof(that.toolbar)) {\n                    return true;\n                  }\n                }\n                if (that.rowDetails) {\n                  if ($(event.target).parents('[data-role=details]').length > 0) {\n                    return true;\n                  }\n                }\n                if (undefined == that.editKey) {\n                  return false;\n                }\n              });\n              this.addHandler($(window), 'jqxReady.' + this.element.id, function () {\n                //            that._updatecolumnwidths();\n                //            that.refresh();\n              });\n              this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);\n              var isTouch = this.isTouchDevice();\n              this.vScrollInstance.valueChanged = function (params) {\n                if (that._timer) {\n                  clearTimeout(that._timer);\n                }\n                if (isTouch) {\n                  if (that.table) {\n                    that.table[0].style.top = 0 - that.vScrollInstance.value + 'px';\n                  }\n                } else {\n                  that._timer = setTimeout(function () {\n                    if (that.table) {\n                      that.table[0].style.top = 0 - that.vScrollInstance.value + 'px';\n                    }\n                  }, 1);\n                }\n              };\n              this.hScrollInstance.valueChanged = function (params) {\n                if (that._htimer) {\n                  clearTimeout(that._htimer);\n                }\n                if (isTouch) {\n                  if (that.table) {\n                    that._renderhorizontalscroll();\n                  }\n                } else {\n                  that._htimer = setTimeout(function () {\n                    if (that.table) {\n                      that._renderhorizontalscroll();\n                    }\n                  }, 1);\n                }\n              };\n              var eventname = 'mousedown';\n              if (this.isTouchDevice()) {\n                eventname = $.jqx.mobile.getTouchEventName('touchstart');\n                if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                  eventname = 'mousedown';\n                }\n              }\n              this.addHandler(this.table, 'mouseleave', function (event) {\n                that._removeHoveredCell();\n              });\n              if (that.isTouchDevice()) {\n                that.enableHover = false;\n              }\n              var mousemove = 'mousemove.scheduler' + this.element.id;\n              var mouseup = \"mouseup.scheduler\" + this.element.id;\n              if (this.isTouchDevice() && this.touchMode !== true) {\n                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.scheduler' + this.element.id;\n                mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.scheduler' + this.element.id;\n              }\n              this.addHandler($(document), mousemove, function (event) {\n                var x = event.pageX;\n                var y = event.pageY;\n                if (that.isTouchDevice()) {\n                  var position = $.jqx.position(event);\n                  x = position.left;\n                  y = position.top;\n                  if (isNaN(x) || isNaN(y)) {\n                    var position = $.jqx.position(event.originalEvent);\n                    x = position.left;\n                    y = position.top;\n                  }\n                }\n                if (that.disabled || event.which === 3) {\n                  return true;\n                }\n                if (!that.isMouseDown) {\n                  return true;\n                }\n                if (that.hScrollInstance.isScrolling() || that.vScrollInstance.isScrolling()) {\n                  return true;\n                }\n                if (that._hostWidth) {\n                  var hostOffset = that.host.coord();\n                  if (hostOffset.left + that._hostWidth < x || x < hostOffset.left) return true;\n                  if (hostOffset.top + that._hostHeight < y || y < hostOffset.top) return true;\n                }\n                if (that.mouseDownPosition) {\n                  if (Math.abs(that.mouseDownPosition.left - x) >= 3 && Math.abs(that.mouseDownPosition.left - x) <= 10 || Math.abs(that.mouseDownPosition.top - y) >= 3 && Math.abs(that.mouseDownPosition.top - y) <= 10) {\n                    that.dragOrResize = true;\n                  }\n                }\n                if (that.selectedAppointment && that.dragOrResize) {\n                  var appointment = null;\n                  if (that._hasOpenedMenu) return true;\n                  if (that.editRecurrenceDialog.jqxWindow('isOpen')) return true;\n                  var view = that._views[that._view].type;\n                  var viewObject = that._views[that._view];\n                  var allDayAppointment = false;\n                  if (event.target.nodeName.toLowerCase() === \"td\") {\n                    var td = event.target;\n                  } else {\n                    var td = that.findCell(x, y);\n                  }\n                  if (!td) {\n                    return true;\n                  }\n                  if (td.getAttribute('data-time-slot') != undefined) return true;\n                  if (td.className.indexOf('jqx-grid-cell-pinned') >= 0) return true;\n                  if (!that.feedback) {\n                    appointment = that.getJQXAppointmentByElement(that.selectedAppointment);\n                    if (!appointment.draggable && !appointment.resizable) {\n                      appointment = null;\n                      return true;\n                    }\n                    if (that.beginDrag) {\n                      var canDrag = that.beginDrag(appointment);\n                      if (!canDrag) return true;\n                    }\n                    var appointments = $('[data-key=\"' + appointment.id + '\"]');\n                    var coord = that.selectedAppointment.position();\n                    that.feedback = that.selectedAppointment.clone(true);\n                    that.pinnedfeedback = that.selectedAppointment.clone(true);\n                    var notResizable = !(that.selectedAppointment[0].style.cursor == \"row-resize\" || that.selectedAppointment[0].style.cursor == \"col-resize\" || that.resizing);\n                    var createFeedback = function (feedback) {\n                      if (notResizable) {\n                        feedback.find(\".jqx-scheduler-appointment-resize-indicator\").hide();\n                      }\n                      appointments.addClass(that.toTP('jqx-scheduler-feedback-appointment jqx-disableselect'));\n                      feedback.find(\".jqx-scheduler-appointment-duration-status\").hide();\n                      feedback.addClass(that.toTP('jqx-scheduler-feedback-appointment'));\n                      feedback.addClass(that.toTP('jqx-scheduler-feedback-drag-appointment'));\n                      if (!notResizable) {\n                        feedback.css('z-index', 400);\n                      } else {\n                        feedback.css('z-index', 401);\n                      }\n                    };\n                    createFeedback(that.feedback);\n                    createFeedback(that.pinnedfeedback);\n                    if (that._views[that._view].type != \"monthView\" || notResizable) {\n                      that.table.append(that.feedback);\n                      if (that.tableRows == 1) {\n                        that.pinnedtable.append(that.pinnedfeedback);\n                      } else {\n                        that.table.append(that.pinnedfeedback);\n                      }\n                      that.feedback.css('left', coord.left);\n                      that.feedback.css('top', coord.top);\n                      that.pinnedfeedback.css('left', coord.left);\n                      that.pinnedfeedback.css('top', coord.top);\n                      if (that._views[that._view].type == \"monthView\" && that.isTouchDevice()) {\n                        that.feedbacks = new Array();\n                        for (var i = 0; i < 6; i++) {\n                          that.feedbacks.push(that.feedback.clone(true));\n                          $(that.feedbacks[i]).hide();\n                          that.table.append($(that.feedbacks[i]));\n                        }\n                      }\n                    } else {\n                      that.feedbacks = new Array();\n                      for (var i = 0; i < 6; i++) {\n                        that.feedbacks.push(that.feedback.clone(true));\n                        $(that.feedbacks[i]).hide();\n                        that.table.append($(that.feedbacks[i]));\n                      }\n                    }\n                  }\n                  if (that.dragging) {\n                    var canDrag = that.dragging(appointment, td, that.feedback);\n                    if (false === canDrag) return true;\n                  }\n                  var position = $(td).position();\n                  if (that.endDrag) {\n                    var oldLeft = that.feedback.css('left');\n                    var oldTop = that.feedback.css('top');\n                    var oldWidth = that.feedback.width();\n                    var oldHeight = that.feedback.height;\n                  }\n                  if (!appointment) {\n                    appointment = that.selectedJQXAppointment;\n                  }\n                  if (!appointment) {\n                    that.selectAppointment(that.uiappointments[0].id);\n                    appointment = that.selectedJQXAppointment;\n                  }\n                  var resourceId = appointment.resourceId;\n                  var resourceIndex = that._resources.indexOf(resourceId);\n                  if (that.resources && that.resources.orientation == \"none\") resourceIndex = -1;\n                  var resizeOnTouch = false;\n                  var touchDevice = that.isTouchDevice();\n                  if (touchDevice && that.touchMode !== true && that._dragCell == null && !(that.leftResize || that.rightResize || that.topResize || that.bottomResize || that.resizing)) {\n                    switch (view) {\n                      case \"dayView\":\n                      case \"weekView\":\n                        var allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                        if (!allDayAppointment) {\n                          if (y >= that.selectedAppointmentBounds.top - 15 && y <= that.selectedAppointmentBounds.top + 15) {\n                            resizeOnTouch = true;\n                            that.topResize = true;\n                          }\n                          if (y >= that.selectedAppointmentBounds.top - 15 + that.selectedAppointmentBounds.height && y <= that.selectedAppointmentBounds.top + that.selectedAppointmentBounds.height + 15) {\n                            resizeOnTouch = true;\n                            that.bottomResize = true;\n                          }\n                        } else {\n                          if (x >= that.selectedAppointmentBounds.left - 15 && x <= that.selectedAppointmentBounds.left + 15) {\n                            resizeOnTouch = true;\n                            that.leftResize = true;\n                          }\n                          if (x >= that.selectedAppointmentBounds.left + that.selectedAppointmentBounds.width - 15 && x <= that.selectedAppointmentBounds.left + that.selectedAppointmentBounds.width + 15) {\n                            resizeOnTouch = true;\n                            that.rightResize = true;\n                          }\n                        }\n                        break;\n                      default:\n                        if (x >= that.selectedAppointmentBounds.left - 15 && x <= that.selectedAppointmentBounds.left + 15) {\n                          resizeOnTouch = true;\n                          that.leftResize = true;\n                        }\n                        if (x >= that.selectedAppointmentBounds.left + that.selectedAppointmentBounds.width - 15 && x <= that.selectedAppointmentBounds.left + that.selectedAppointmentBounds.width + 15) {\n                          resizeOnTouch = true;\n                          that.rightResize = true;\n                        }\n                        break;\n                    }\n                  }\n                  if (touchDevice && (that.leftResize || that.rightResize || that.topResize || that.bottomResize || that.resizing) || resizeOnTouch) {\n                    if (td.getAttribute('data-view') != resourceIndex + 1 && that._resources.length > 0) {\n                      if (that.resources.orientation != \"none\") return true;\n                    }\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    if (cellDate < that.min.toDate() || cellDate > that.max.toDate()) return;\n                    that._handleResize(x, y, td, position, appointment);\n                    that._oldResizeTD = td;\n                  } else if (!touchDevice && that.selectedAppointment[0].style.cursor == \"row-resize\" || that.selectedAppointment[0].style.cursor == \"col-resize\" || that.resizing) {\n                    if (td.getAttribute('data-view') != resourceIndex + 1 && that._resources.length > 0) {\n                      if (that.resources && that.resources.orientation != \"none\") return true;\n                    }\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    if (cellDate < that.min.toDate() || cellDate > that.max.toDate()) return;\n                    that._handleResize(x, y, td, position, appointment);\n                    that._oldResizeTD = td;\n                  } else {\n                    if (!appointment.draggable) {\n                      that._removeFeedbackAndStopResize();\n                      return true;\n                    }\n                    if (that._dragCell == td) {\n                      that._startTimers(x, y, appointment);\n                      if (that.isTouchDevice() && that.touchMode !== true) {\n                        event.stopPropagation();\n                        return false;\n                      } else {\n                        return;\n                      }\n                    }\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    if (cellDate < that.min.toDate() || cellDate > that.max.toDate()) {\n                      return;\n                    }\n                    var duration = appointment.duration();\n                    if (view.indexOf('month') >= 0 && new $.jqx.date(cellDate).add(duration) > that.max) {\n                      return;\n                    }\n                    var scrollWidth = that.vScrollBar[0].style.visibility == \"hidden\" ? 0 : 6 + that.vScrollBar.outerWidth();\n                    that._dragCell = td;\n                    that.feedback[0].style.left = 2 + position.left + \"px\";\n                    that.feedback[0].style.top = 2 + position.top + \"px\";\n                    if (view === \"dayView\" || view === \"weekView\") {\n                      that.pinnedfeedback.css('left', 2 + position.left);\n                      that.pinnedfeedback.css('top', 2 + position.top);\n                      var width = 0;\n                      if (td.getAttribute('data-end-date')) {\n                        var appointmentHeight = that.appointmentsMinHeight;\n                        if (that.isTouchDevice()) {\n                          appointmentHeight = that.touchAppointmentsMinHeight;\n                        }\n                        if (viewObject.appointmentHeight) {\n                          appointmentHeight = viewObject.appointmentHeight;\n                        }\n                        allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                        that.feedback.css('top', 2 + position.top + appointmentHeight);\n                        that.pinnedfeedback.css('top', 2 + position.top + 18);\n                        if (view == \"dayView\") {\n                          var l = that.selectedAppointment.coord().left - 9;\n                          that.feedback.css('left', l);\n                          that.pinnedfeedback.css('left', l);\n                        }\n                        if (allDayAppointment) {\n                          that.pinnedfeedback.css('top', appointment.elements[0].y);\n                          width = that.selectedAppointment.width();\n                          if (2 + position.left + width > that.host.width() - scrollWidth) {\n                            var result = 2 + position.left + width - that.host.width() + scrollWidth + 6;\n                            width -= result;\n                          }\n                          that.feedback.width(width);\n                          that.feedback.height(appointmentHeight);\n                          that.pinnedfeedback.width(width);\n                          that.pinnedfeedback.height(appointmentHeight);\n                        } else {\n                          width = $(td).width() - 4;\n                          that.feedback.width(width);\n                          that.feedback.height(appointmentHeight);\n                          that.pinnedfeedback.width(width);\n                          that.pinnedfeedback.height(appointmentHeight);\n                        }\n                        that.feedback.hide();\n                        that.pinnedfeedback.show();\n                      } else {\n                        that.feedback.show();\n                        that.pinnedfeedback.hide();\n                        var cellsCount = 2;\n                        var minutes = 30;\n                        var scale = viewObject.timeRuler && viewObject.timeRuler.scale;\n                        switch (scale) {\n                          case 'sixtyMinutes':\n                          case 'hour':\n                            cellsCount = 1;\n                            break;\n                          case 'thirtyMinutes':\n                          case 'halfHour':\n                            cellsCount = 2;\n                            break;\n                          case 'fifteenMinutes':\n                          case 'quarterHour':\n                            cellsCount = 4;\n                            break;\n                          case 'tenMinutes':\n                            cellsCount = 6;\n                            break;\n                          case 'fiveMinutes':\n                            cellsCount = 12;\n                            break;\n                        }\n                        width = $(td).width() - 4;\n                        that.feedback.width(width);\n                        allDayAppointment = appointment.duration().days() >= 1 || appointment.allDay;\n                        if (allDayAppointment) {\n                          that.feedback.height($(td).height() - 6);\n                        } else {\n                          that.feedback.height(that.selectedAppointment.height());\n                        }\n                      }\n                      that._startTimers(x, y, appointment);\n                    } else if (view === \"monthView\") {\n                      that.feedback.css('left', 1 + position.left);\n                      var appointmentPosition = that.selectedAppointmentTableBounds;\n                      var appointmentTop = parseInt(appointmentPosition.top);\n                      if (appointmentTop > position.top && appointmentTop < position.top + td.offsetHeight) {\n                        that.feedback.css('top', appointmentTop + \"px\");\n                      } else {\n                        that.feedback.css('top', that.selectedAppointment.height() + position.top - 2);\n                      }\n                      if (that.isTouchDevice()) {\n                        that.feedback.css('top', position.top + 2);\n                      }\n                      width = that.selectedAppointment.width();\n                      that.feedback.width(width);\n                      that.feedback.height(that.selectedAppointment.height());\n                      that._startTimers(x, y, appointment);\n                    } else if (view === \"timelineDayView\" || view === \"timelineMonthView\" || view === \"timelineWeekView\") {\n                      var appointmentPosition = that.selectedAppointmentTableBounds;\n                      var appointmentTop = parseInt(appointmentPosition.top);\n                      if (appointmentTop > position.top && appointmentTop < position.top + td.offsetHeight) {\n                        that.feedback.css('top', appointmentTop + \"px\");\n                      }\n                      that._startTimers(x, y, appointment);\n                    }\n                  }\n                  if (that.endDrag) {\n                    var canDrag = that.endDrag(appointment, td, that.feedback);\n                    if (!canDrag) that.feedback.width(oldWidth);\n                    that.feedback.height(oldHeight);\n                    that.feedback.css('top', oldTop);\n                    that.feedback.css('left', oldLeft);\n                    return true;\n                  }\n                  if (that.isTouchDevice() && that.touchMode !== true) {\n                    event.stopPropagation();\n                    return false;\n                  }\n                }\n              });\n              var mouseUpHandler = function (event) {\n                that.isMouseDown = false;\n                that.dragOrResize = false;\n                if (that.contextMenu && that.menu && event.which !== 3) {\n                  that.menu.jqxMenu('close');\n                  that._hasOpenedMenu = false;\n                }\n                if (event.which === 3) return true;\n                if (that.selectedAppointment && that.feedback) {\n                  if (that.editRecurrenceDialog.jqxWindow('isOpen')) return;\n                  that._handleMouseUp(that.selectedJQXAppointment, that._dragCell, that.resizing);\n                }\n              };\n              this.addHandler($(document), mouseup, function (event) {\n                return mouseUpHandler(event);\n              });\n              if (!this.isTouchDevice()) {\n                try {\n                  if (document.referrer != \"\" || window.frameElement) {\n                    if (window.top != null && window.top != window.self) {\n                      var parentLocation = null;\n                      if (window.parent && document.referrer) {\n                        parentLocation = document.referrer;\n                      }\n                      if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {\n                        var eventHandle = function (event) {\n                          if (!that.disabled) return mouseUpHandler(event);\n                        };\n                        that.addHandler($(window.top.document), 'mouseup' + '.jqxscheduler' + that.element.id, eventHandle);\n                      }\n                    }\n                  }\n                } catch (error) {}\n              }\n              this.addHandler(this.host, mousemove, function (event) {\n                var x = event.pageX;\n                var y = event.pageY;\n                if (that.disabled || event.which === 3) {\n                  return true;\n                }\n                if (that.selectedAppointment && that.isMouseDown) {\n                  return true;\n                }\n                if (that.hScrollInstance.isScrolling() || that.vScrollInstance.isScrolling()) {\n                  return true;\n                }\n                if (that._hasOpenedMenu) return true;\n                if (that.overlay[0].style.display !== \"none\") return true;\n                var appointment = null;\n                if (event.target.className.indexOf('jqx-scheduler-appointment') >= 0 && event.target.className.indexOf('jqx-scheduler-appointment-inner-content') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-content') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-resize-indicator') == -1) {\n                  appointment = event.target;\n                }\n                var element = event.target;\n                for (var i = 0; i < 4; i++) {\n                  if (element.parentNode) {\n                    if (element.className.indexOf('jqx-scheduler-appointment') >= 0 && element.className.indexOf('jqx-scheduler-appointment-innter-content') == -1 && element.className.indexOf('jqx-scheduler-appointment-content') == -1 && element.className.indexOf('jqx-scheduler-appointment-resize-indicator') == -1) {\n                      appointment = element;\n                    }\n                    element = element.parentNode;\n                  } else break;\n                }\n                if (appointment) {\n                  var view = that._views[that._view].type;\n                  var viewObject = that._views[that._view];\n                  var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                  if (jqxAppointment && jqxAppointment.resizable) {\n                    var duration = jqxAppointment.duration();\n                    var allDayAppointment = jqxAppointment.allDay || duration.days() >= 1 || duration.hours() == 23 && duration.minutes == 59 && duration.seconds == 59;\n                    var coord = $(appointment).coord();\n                    var position = $(appointment).position();\n                    that.selectedAppointmentBounds = {\n                      top: coord.top,\n                      left: coord.left,\n                      width: $(appointment).width(),\n                      height: $(appointment).height()\n                    };\n                    that.selectedAppointmentTableBounds = {\n                      top: position.top,\n                      left: position.left,\n                      width: $(appointment).width(),\n                      height: $(appointment).height()\n                    };\n                    var bounds = that.selectedAppointmentBounds;\n                    if (view == \"weekView\" || view == \"dayView\") {\n                      if (!allDayAppointment) {\n                        if (y >= bounds.top - 3 && y <= bounds.top + 6) {\n                          appointment.style.cursor = 'row-resize';\n                          that.topResize = true;\n                          that.bottomResize = false;\n                        } else if (y >= bounds.top + bounds.height - 6 && y <= bounds.top + bounds.height + 3) {\n                          appointment.style.cursor = 'row-resize';\n                          that.topResize = false;\n                          that.bottomResize = true;\n                        } else appointment.style.cursor = 'pointer';\n                      } else {\n                        if (view != \"dayView\") {\n                          if (x >= bounds.left - 3 && x <= bounds.left + 6) {\n                            appointment.style.cursor = 'col-resize';\n                            that.leftResize = true;\n                            that.rightResize = false;\n                          } else if (x >= bounds.left + bounds.width - 6 && x <= bounds.left + bounds.width + 3) {\n                            appointment.style.cursor = 'col-resize';\n                            that.leftResize = false;\n                            that.rightResize = true;\n                          } else {\n                            appointment.style.cursor = 'pointer';\n                          }\n                        } else appointment.style.cursor = 'pointer';\n                      }\n                    } else {\n                      if (view == \"monthView\" && jqxAppointment.elements.length > 1) {\n                        var hostCoord = that.table.coord();\n                        for (var i = 0; i < jqxAppointment.elements.length; i++) {\n                          var app = jqxAppointment.elements[i];\n                          var bounds = {\n                            top: hostCoord.top + app.y,\n                            left: hostCoord.left + app.x,\n                            width: app.width,\n                            height: app.height\n                          };\n                          if (i == 0 && !that.rtl || i == jqxAppointment.elements.length - 1 && that.rtl) {\n                            if (x >= bounds.left - 3 && x <= bounds.left + 6) {\n                              if (y >= bounds.top && y <= bounds.top + bounds.height) {\n                                appointment.style.cursor = 'col-resize';\n                                that.leftResize = true;\n                                that.rightResize = false;\n                                that.selectedAppointment = $(appointment);\n                                break;\n                              } else appointment.style.cursor = 'pointer';\n                            } else appointment.style.cursor = 'pointer';\n                          } else if (i == jqxAppointment.elements.length - 1 && !that.rtl || i == 0 && that.rtl) {\n                            if (x >= bounds.left + bounds.width - 6 && x <= bounds.left + bounds.width + 3) {\n                              if (y >= bounds.top && y <= bounds.top + bounds.height) {\n                                appointment.style.cursor = 'col-resize';\n                                that.leftResize = false;\n                                that.rightResize = true;\n                                that.selectedAppointment = $(appointment);\n                                break;\n                              } else appointment.style.cursor = 'pointer';\n                            } else appointment.style.cursor = 'pointer';\n                          }\n                        }\n                      } else {\n                        if (x >= bounds.left - 3 && x <= bounds.left + 6) {\n                          appointment.style.cursor = 'col-resize';\n                          that.leftResize = true;\n                          that.rightResize = false;\n                        } else if (x >= bounds.left + bounds.width - 6 && x <= bounds.left + bounds.width + 3) {\n                          appointment.style.cursor = 'col-resize';\n                          that.leftResize = false;\n                          that.rightResize = true;\n                        } else appointment.style.cursor = 'pointer';\n                      }\n                    }\n                  }\n                }\n                if (!that.enableHover) {\n                  return true;\n                }\n                if (event.target.nodeName.toLowerCase() === \"td\") {\n                  var td = event.target;\n                } else {\n                  var td = that.findCell(x, y);\n                }\n                if (!td) {\n                  return true;\n                }\n                that._removeHoveredCell();\n                if (that.renderedRecords && that.renderedRecords.length === 0) return true;\n                if (that.isMouseDown) {\n                  if (Math.abs(that.mousecaptureposition.left - x) > 3 || Math.abs(that.mousecaptureposition.top - y) > 3) {\n                    if (that.mousecaptureposition.clickedcell.length === 0) {\n                      that.selectionarea[0].style.visibility = \"hidden\";\n                      return;\n                    }\n                    if (that.lastHoveredCell != td) {\n                      if (that._selectRangeTimer) clearTimeout(that._selectRangeTimer);\n                      that._selectRangeTimer = setTimeout(function () {\n                        var view = that._views[that._view].type;\n                        if (view != \"agendaView\") {\n                          that._selectRange(td, that.mousecaptureposition.clickedcell[0]);\n                        }\n                      }, 1);\n                    }\n                    that.lastHoveredCell = td;\n                  }\n                } else if (!appointment) {\n                  if (that.rows.length == 1 && that.rows[0].cells.length == 1) return true;\n                  that._hoverCell(td);\n                }\n                return true;\n              });\n              this.addHandler($(document), 'keydown.jqxscheduler' + that.element.id, function (event) {\n                if (that.focused && event.ctrlKey) {\n                  if (event.keyCode == 68) {\n                    return false;\n                  }\n                }\n              });\n              this.addHandler(this.host, 'keydown', function (event) {\n                return that._handleKey(event);\n              });\n              if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                this.addHandler(this.table, 'dblclick', function (event) {\n                  that.table.trigger('mousedown', event);\n                });\n              }\n              // clicks\n              var clickHandler = function (event) {\n                var target = event.target;\n                var td = null;\n                if (that.disabled) {\n                  return true;\n                }\n                if (!that.menu && event.which == 3) {\n                  that._initMenu();\n                }\n                var tableOffset = that.table.coord();\n                var x = event.pageX;\n                var y = event.pageY;\n                if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                  if (arguments && arguments.length == 2) {\n                    x = arguments[1].pageX;\n                    y = arguments[1].pageY;\n                  }\n                }\n                if (that.isTouchDevice()) {\n                  var position = $.jqx.position(event);\n                  x = position.left;\n                  y = position.top;\n                  if (isNaN(x) || isNaN(y)) {\n                    var position = $.jqx.position(event.originalEvent);\n                    x = position.left;\n                    y = position.top;\n                  }\n                }\n                that.mouseDown = {\n                  top: y,\n                  left: x\n                };\n\n                // to remove\n                var td = that.findCell(x, y);\n                if (event.target.nodeName.toLowerCase() === \"td\") {\n                  var td = event.target;\n                } else {\n                  var td = that.findCell(x, y);\n                }\n                var view = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                if (view === \"monthView\" && viewObject.weekViewNavigation) {\n                  if (td && td.getAttribute('data-time-slot')) {\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    var cellJQXDate = new $.jqx.date(cellDate);\n                    that.date = cellJQXDate;\n                    that.setView('weekView');\n                  }\n                }\n                if (view === \"monthView\" && viewObject.dayViewNavigation) {\n                  var tdPos = $(td).coord().top;\n                  if (td && y >= tdPos && tdPos + 16 >= y) {\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    var cellJQXDate = new $.jqx.date(cellDate);\n                    that.date = cellJQXDate;\n                    that.setView('dayView');\n                  }\n                }\n                if (event.target.nodeName.toLowerCase() === \"span\" && (event.target.className.indexOf('jqx-icon-arrow-down') >= 0 || event.target.className.indexOf('jqx-icon-close') >= 0)) {\n                  if (event.target.mousedown) {\n                    event.target.mousedown();\n                  }\n                  return true;\n                }\n                var row = $(td).parent();\n                var key = row.attr('data-key');\n                that.mousecaptureposition = {\n                  left: event.pageX,\n                  top: event.pageY,\n                  clickedrow: $(row).index(),\n                  clickedcell: $(td)\n                };\n                if (event.which !== 3) {\n                  that.isMouseDown = true;\n                  that.isMouseDownDate = new Date();\n                } else {\n                  that.isMouseDown = false;\n                }\n                if (that.contextMenu && that.menu && event.which !== 3) {\n                  that.menu.jqxMenu('close');\n                  that._hasOpenedMenu = false;\n                }\n                var openMenu = function (firstItem) {\n                  if (event.which === 3) {\n                    if (that.contextMenu && that.menu) {\n                      if (firstItem) {\n                        that.menu.find('li:first').show();\n                      } else {\n                        that.menu.find('li:first').hide();\n                      }\n                      var menuPosition = that.menu.coord();\n                      if (that.menu.css('display') == \"block\" && menuPosition.left == event.pageX && menuPosition.top == event.pageY) {\n                        that._hasOpenedMenu = true;\n                        event.preventDefault();\n                        event.stopPropagation();\n                        return;\n                      }\n                      if (view === \"agendaView\") {\n                        //         return;\n                      }\n                      that.menuOpening = true;\n                      that.menu.jqxMenu('open', event.pageX, event.pageY);\n                      that.menuOpening = false;\n                      that._hasOpenedMenu = true;\n                      event.preventDefault();\n                      event.stopPropagation();\n                      setTimeout(function () {\n                        that.menu.jqxMenu('focus');\n                      }, 50);\n                    }\n                  }\n                };\n                var clearSelection = function () {\n                  for (var i = 0; i < rows.length; i++) {\n                    var cells = rows[i].cells;\n                    for (var j = 0; j < cells.length; j++) {\n                      cells[j].removeAttribute('data-selected');\n                    }\n                  }\n                };\n                var appointment = event.target.className.indexOf('jqx-scheduler-appointment') >= 0 && event.target.className.indexOf('jqx-scheduler-appointment-duration-status') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-inner-content') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-status') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-resize-indicator') == -1 && event.target.className.indexOf('jqx-scheduler-appointment-content') == -1 ? $(event.target) : $(event.target).parents('.jqx-scheduler-appointment');\n                if (appointment.length == 0) appointment = null;\n                if (appointment && appointment[0].className.indexOf('feedback') == -1) {\n                  if (appointment.parents('.jqx-scheduler-month-cell-popup').length > 0) {\n                    return true;\n                  }\n                  that.mouseDownPosition = {\n                    top: y,\n                    left: x\n                  };\n                  var coord = $(appointment).coord();\n                  that.selectedAppointmentBounds = {\n                    top: coord.top,\n                    left: coord.left,\n                    width: $(appointment).width(),\n                    height: $(appointment).height()\n                  };\n                  var position = $(appointment).position();\n                  that.selectedAppointmentTableBounds = {\n                    top: position.top,\n                    left: position.left,\n                    width: $(appointment).width(),\n                    height: $(appointment).height()\n                  };\n                  if (!that._dragStartCell) {\n                    that._dragStartCell = that.findCell(coord.left, coord.top);\n                  }\n                  var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                  that._selectAppointment(jqxAppointment, appointment, \"mouse\");\n                  if (jqxAppointment) {\n                    that._raiseEvent('appointmentClick', {\n                      appointment: jqxAppointment.boundAppointment\n                    });\n                  }\n                  that.clearSelection();\n                  var time = new Date().getTime();\n                  var timeInterval = 300;\n                  if ($.jqx.browser.msie && $.jqx.browser.version < 9) timeInterval = 1000;\n                  if (!that.clickTime) that.clickTime = new Date();\n                  if (time - that.clickTime.getTime() < timeInterval && that._lastSelectedAppointment && jqxAppointment.id == that._lastSelectedAppointment.id && event.which != 3) {\n                    if (!jqxAppointment.readOnly && !that.editRecurrenceDialog.jqxWindow('isOpen') && (!that._editDialog || that._editDialog && !that._editDialog.jqxWindow('isOpen'))) {\n                      var result = that._initDialog(jqxAppointment);\n                      if (result !== false) {\n                        that._openDialog();\n                      }\n                    }\n                    that.mouseDownPosition = null;\n                    that.isMouseDown = false;\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    that._raiseEvent('appointmentDoubleClick', {\n                      appointment: jqxAppointment.boundAppointment\n                    });\n                  } else {\n                    if (!jqxAppointment.readOnly) {\n                      if (event.which !== 3) {\n                        that.focus();\n                      }\n                    }\n                  }\n                  that._lastSelectedAppointment = jqxAppointment;\n                  if (event.preventDefault) {\n                    event.preventDefault();\n                  }\n                  event.stopPropagation();\n                  that.clickTime = new Date();\n                  if (!jqxAppointment.readOnly) {\n                    if (event.which == 3) {\n                      openMenu(true);\n                    }\n                  }\n                  return;\n                } else if (event.which === 3) {\n                  var selection = that.getSelection();\n                  if (selection !== null) {\n                    openMenu(false);\n                  } else {\n                    that.clearAppointmentsSelection();\n                    td.setAttribute('data-selected', \"true\");\n                    that._lastSelectedCell = td;\n                    that.focusedCell = td;\n                    that._updateCellsSelection(td);\n                    openMenu(false);\n                    var date = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                    that._raiseEvent('cellClick', {\n                      cell: td,\n                      date: date\n                    });\n                  }\n                } else if (event.which != 3) {\n                  that.clearAppointmentsSelection();\n                }\n                if (that.view == \"agendaView\") {\n                  var appointment = event.target.className.indexOf('jqx-scheduler-agenda-appointment') != -1;\n                  var isFromParent = false;\n                  if (!appointment && event.target && event.target.parentNode) {\n                    appointment = event.target.parentNode.className.indexOf('jqx-scheduler-agenda-appointment') != -1;\n                    isFromParent = true;\n                  }\n                  if (appointment) {\n                    appointment = event.target;\n                    if (isFromParent) {\n                      appointment = event.target.parentNode;\n                    }\n                    var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                    that._selectAppointment(jqxAppointment, appointment, \"mouse\");\n                    that._raiseEvent('appointmentClick', {\n                      appointment: jqxAppointment.boundAppointment\n                    });\n                    var time = new Date().getTime();\n                    var timeInterval = 300;\n                    if ($.jqx.browser.msie && $.jqx.browser.version < 9) timeInterval = 1000;\n                    if (!that.clickTime) that.clickTime = new Date();\n                    if (time - that.clickTime.getTime() < timeInterval && that._lastSelectedAppointment && jqxAppointment.id == that._lastSelectedAppointment.id && event.which != 3) {\n                      if (!jqxAppointment.readOnly && !that.editRecurrenceDialog.jqxWindow('isOpen') && (!that._editDialog || that._editDialog && !that._editDialog.jqxWindow('isOpen'))) {\n                        var result = that._initDialog(jqxAppointment);\n                        if (result !== false) {\n                          that._openDialog();\n                        }\n                      }\n                      that.mouseDownPosition = null;\n                      that.isMouseDown = false;\n                      if (event.preventDefault) {\n                        event.preventDefault();\n                      }\n                      that._raiseEvent('appointmentDoubleClick', {\n                        appointment: jqxAppointment.boundAppointment\n                      });\n                    }\n                    that._lastSelectedAppointment = jqxAppointment;\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                    event.stopPropagation();\n                    that.clickTime = new Date();\n                    if (!jqxAppointment.readOnly) {\n                      if (event.which == 3) {\n                        openMenu(true);\n                      }\n                    }\n                  }\n                }\n                var focus = function () {\n                  if (!that.enableBrowserSelection) {\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                  }\n                  var scrollTop = $(document).scrollTop();\n                  that.host.focus();\n                  $(document).scrollTop(scrollTop);\n                };\n                if (key !== undefined && event.which != 3) {\n                  that.clickedTD = td;\n                  var date = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                  var rowdata = that.rowinfo[key];\n                  var doubleClick = false;\n                  if (rowdata) {\n                    var time = new Date().getTime();\n                    var timeInterval = 300;\n                    if (!that.clickTime) that.clickTime = new Date();\n                    that.focus();\n                    if (that._lastSelectedCell && that._lastSelectedCell.getAttribute('data-selected') == \"true\" && td.getAttribute('data-selected') === \"true\" && time - that.clickTime.getTime() < timeInterval) {\n                      // double click.\n                      var date = new $.jqx.date(td.getAttribute('data-date'), that.timeZone);\n                      that._raiseEvent('cellDoubleClick', {\n                        cell: td,\n                        date: date\n                      });\n                      doubleClick = true;\n                      that._initDialog();\n                      that._openDialog();\n                      if (event.preventDefault) {\n                        event.preventDefault();\n                      }\n                    }\n                  }\n                  var rows = that.rows;\n                  if (td.getAttribute('data-selected') != 'true' || event.shiftKey || time - that.clickTime.getTime() > timeInterval) {\n                    if (td.getAttribute('data-time-slot') == 'true') {\n                      return;\n                    }\n\n                    // clear old selections.\n                    if (!event.shiftKey) {\n                      that.shiftSelectedCell = null;\n                    }\n                    if (event.shiftKey && that._lastSelectedCell && view != \"agendaView\") {\n                      if (!that.shiftSelectedCell) {\n                        that.shiftSelectedCell = that._lastSelectedCell;\n                      }\n                      if (td.getAttribute('data-view') === that.shiftSelectedCell.getAttribute('data-view')) {\n                        clearSelection();\n                      }\n                      that._selectRange(td, that.shiftSelectedCell);\n                    }\n                    if (!event.shiftKey) {\n                      clearSelection();\n                      var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                      if (cellDate >= that.min.toDate() && cellDate <= that.max.toDate()) {\n                        td.setAttribute('data-selected', \"true\");\n                      } else {\n                        td.setAttribute('data-selected', \"false\");\n                      }\n                    }\n                    $('[data-key=\"' + key + '\"]').removeClass(that.toTP('jqx-scheduler-selected-appointment'));\n                    that.selectedAppointment = null;\n                    var cellDate = that._getDateByString(td.getAttribute(\"data-date\"));\n                    if (cellDate >= that.min.toDate() && cellDate <= that.max.toDate()) {\n                      that._lastSelectedCell = td;\n                      that.focusedCell = td;\n                    }\n                    that._updateCellsSelection(td);\n                    if (that.openedMonthCellPopup) {\n                      that.openedMonthCellPopup.remove();\n                    }\n                  }\n                  that._raiseEvent('cellClick', {\n                    cell: td,\n                    date: date\n                  });\n                  that.clickTime = new Date();\n                  if (event.stopPropagation) event.stopPropagation();\n                }\n              };\n              this.addHandler(this.pinnedtable, eventname, function (event) {\n                var result = clickHandler(event);\n                if (result != undefined) return result;\n              });\n              this.addHandler(this.table, eventname, function (event) {\n                var result = clickHandler(event);\n                if (result != undefined) return result;\n              });\n            },\n            moveAppointment: function (uiappointment, date, resourceId, newCell, resizing) {\n              var that = this;\n              var allDayCell = newCell.getAttribute('data-end-date');\n              if (uiappointment) {\n                if (that.editRecurrenceDialog.jqxWindow('isOpen')) return;\n                clearInterval(that._verticalIntervalDragVelocity);\n                clearInterval(that._horizontalIntervalDragVelocity);\n                clearInterval(that._intervalDrag);\n                clearInterval(that._horizontalIntervalDrag);\n                var duration = uiappointment.duration();\n                var allDayAppointment = uiappointment.duration().days() >= 1 || uiappointment.allDay;\n                var commit = function (param) {\n                  if (!resizing) {\n                    var view = that._views[that._view].type;\n                    var viewObject = that._views[that._view];\n                    var jqxDate = date;\n                    uiappointment.from = jqxDate;\n                    if (view === \"dayView\" || view === \"weekView\") {\n                      if (!allDayAppointment && !allDayCell) {\n                        uiappointment.to = jqxDate.add(duration);\n                        uiappointment.allDay = false;\n                      } else if (!allDayAppointment && allDayCell) {\n                        uiappointment.to = $.jqx.scheduler.utilities.getEndOfDay(jqxDate);\n                        uiappointment.allDay = true;\n                      } else if (allDayAppointment && allDayCell) {\n                        uiappointment.to = jqxDate.add(duration);\n                      } else if (allDayAppointment && !allDayCell) {\n                        var minutes = 30;\n                        var scale = viewObject.timeRuler && viewObject.timeRuler.scale;\n                        switch (scale) {\n                          case 'sixtyMinutes':\n                          case 'hour':\n                            minutes = 60;\n                            break;\n                          case 'fifteenMinutes':\n                          case 'quarterHour':\n                            minutes = 15;\n                            break;\n                          case 'tenMinutes':\n                            minutes = 10;\n                            break;\n                          case 'fiveMinutes':\n                            minutes = 5;\n                            break;\n                        }\n                        uiappointment.to = jqxDate.addMinutes(minutes);\n                        uiappointment.allDay = false;\n                      }\n                    } else if (view === \"monthView\") {\n                      uiappointment.to = jqxDate.add(duration);\n                    } else if (view === \"timelineDayView\" || view === \"timelineWeekView\" || view === \"timelineMonthView\") {\n                      uiappointment.to = jqxDate.add(duration);\n                    }\n                  }\n                  that._saveChangesAfterDragOrResize(param, uiappointment, newCell, resizing);\n                  if (resourceId != null) {\n                    uiappointment.resourceId = resourceId;\n                  }\n                  that.table.find('.jqx-icon-arrow-down').hide();\n                  if (uiappointment.allDay || allDayAppointment) {\n                    that._renderrows();\n                  } else {\n                    var viewStart = that.getViewStart();\n                    var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                    that._prepareAppointmentsInView(viewStart, viewEnd);\n                    that._renderAppointments(viewStart, viewEnd);\n                  }\n                  that._raiseEvent('appointmentChange', {\n                    appointment: uiappointment.boundAppointment\n                  });\n                  that.changedAppointments[uiappointment.id] = {\n                    type: \"Update\",\n                    appointment: uiappointment.boundAppointment\n                  };\n                  that._ensureAppointmentVisible(that.selectedJQXAppointment);\n                };\n                if (uiappointment.isRecurrentAppointment()) {\n                  commit(false);\n                } else {\n                  commit(null);\n                }\n              }\n            },\n            getAppointmentProperty: function (key, propertyName) {\n              var that = this;\n              var appointment = null;\n              if (this.appointmentsByKey[key]) {\n                appointment = this.appointmentsByKey[key].jqxAppointment;\n              }\n              if (!appointment) return;\n              return appointment[propertyName];\n            },\n            setAppointmentProperty: function (key, propertyName, value) {\n              var that = this;\n              var appointment = null;\n              if (this.appointmentsByKey[key]) {\n                appointment = this.appointmentsByKey[key].jqxAppointment;\n              }\n              if (!appointment) return;\n              appointment[propertyName] = value;\n              that.changedAppointments[key] = {\n                type: propertyName,\n                appointment: appointment.boundAppointment\n              };\n              switch (key) {\n                case \"draggable\":\n                case \"resizable\":\n                  break;\n                case \"background\":\n                case \"color\":\n                case \"borderColor\":\n                case \"status\":\n                case \"tooltip\":\n                case \"subject\":\n                case \"location\":\n                case \"description\":\n                case \"style\":\n                  var viewStart = that.getViewStart();\n                  var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                  that._prepareAppointmentsInView(viewStart, viewEnd);\n                  that._renderAppointments(viewStart, viewEnd);\n                  break;\n                case \"hidden\":\n                case \"timeZone\":\n                  if (appointment.isAllDayAppointment()) {\n                    that._renderrows();\n                  } else {\n                    var viewStart = that.getViewStart();\n                    var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                    that._prepareAppointmentsInView(viewStart, viewEnd);\n                    that._renderAppointments(viewStart, viewEnd);\n                  }\n                  break;\n                default:\n                  that._renderrows();\n              }\n            },\n            deleteAppointment: function (key) {\n              if (this.appointmentsByKey[key]) {\n                this._deleteAppointment(this.appointmentsByKey[key].jqxAppointment);\n              }\n            },\n            _deleteAppointment: function (uiappointment) {\n              var that = this;\n              if (uiappointment.rootAppointment) {\n                if (!uiappointment.isException()) {\n                  if (uiappointment.rootAppointment != null) {\n                    uiappointment.rootAppointment.exceptions.push(that.editAppointment);\n                    uiappointment.rootAppointment.recurrenceException.push(that.editAppointment.occurrenceFrom);\n                  } else {\n                    uiappointment.exceptions.push(that.editAppointment);\n                    uiappointment.recurrenceException.push(that.editAppointment.occurrenceFrom);\n                  }\n                  that._raiseEvent('appointmentDelete', {\n                    appointment: that.editAppointment.boundAppointment\n                  });\n                } else {\n                  var exceptions = uiappointment.rootAppointment ? uiappointment.rootAppointment.exceptions : uiappointment.exceptions;\n                  for (var i = 0; i < exceptions.length; i++) {\n                    if (exceptions[i].occurrenceFrom.equals(that.editAppointment.occurrenceFrom)) {\n                      exceptions[i] = uiappointment;\n                      break;\n                    }\n                  }\n                  that._raiseEvent('appointmentDelete', {\n                    appointment: uiappointment.boundAppointment\n                  });\n                }\n                uiappointment.hidden = true;\n                that._renderrows();\n                return;\n              }\n              that._raiseEvent('appointmentDelete', {\n                appointment: uiappointment.boundAppointment\n              });\n              var key = uiappointment.id;\n              delete that.appointmentsByKey[key];\n              var deleteIndex = -1;\n              for (var i = 0; i < that.appointments.length; i++) {\n                if (that.appointments[i] == uiappointment.boundAppointment || that.appointments[i].id == uiappointment.boundAppointment.id) {\n                  deleteIndex = i;\n                  break;\n                }\n              }\n              if (deleteIndex != -1) {\n                that.appointments.splice(deleteIndex, 1);\n              }\n              deleteIndex = -1;\n              for (var i = 0; i < that.uiappointments.length; i++) {\n                if (that.uiappointments[i] == uiappointment || that.uiappointments[i].id == uiappointment.id) {\n                  deleteIndex = i;\n                  break;\n                }\n              }\n              if (deleteIndex != -1) {\n                that.uiappointments.splice(deleteIndex, 1);\n              }\n              if (that.selectedJQXAppointment == uiappointment) {\n                that.clearAppointmentsSelection();\n                if (that.uiappointments[deleteIndex + 1]) that.selectAppointment(that.uiappointments[deleteIndex + 1].id);else if (that.uiappointments[deleteIndex - 1]) that.selectAppointment(that.uiappointments[deleteIndex - 1].id);else if (that.uiappointments[0]) that.selectAppointment(that.uiappointments[0].id);\n              }\n              that.changedAppointments[key] = {\n                type: \"Delete\",\n                appointment: uiappointment.boundAppointment\n              };\n              that._renderrows();\n            },\n            addAppointment: function (uiappointment) {\n              var that = this;\n              if (!uiappointment.scheduler) {\n                uiappointment.scheduler = this;\n              }\n              if (!uiappointment.duration) {\n                if (!uiappointment.from && !uiappointment.to || !uiappointment.appointmentObject) {\n                  var row = uiappointment;\n                  var appointment = {};\n                  var defaultFields = [\"from\", \"to\", \"id\", \"style\", \"description\", \"location\", \"subject\", \"background\", \"color\", \"borderColor\", \"recurrencePattern\", \"recurrenceException\", \"draggable\", \"resizable\", \"tooltip\", \"hidden\", \"allDay\", \"timeZone\", \"ownerId\", \"resourceId\"];\n                  for (var key in that.appointmentDataFields) {\n                    var field = that.appointmentDataFields[key];\n                    var value = row[field];\n                    if (key == \"from\" || key == \"to\") {\n                      value = new $.jqx.date(value);\n                    }\n                    if (key == \"style\") {\n                      if (value) {\n                        var appointmentColors = that.getAppointmentColors(value);\n                        appointment.color = appointmentColors.color;\n                        appointment.background = appointmentColors.background;\n                        appointment.borderColor = appointmentColors.border;\n                      }\n                    }\n                    if (key == \"recurrencePattern\") {\n                      if (value) {\n                        value = new $.jqx.scheduler.recurrencePattern(value);\n                        value.timeZone = row.timeZone || that.timeZone;\n                      }\n                    }\n                    if (key == \"recurrenceException\") {\n                      var exceptions = new Array();\n                      if (value) {\n                        if (value.indexOf(\"EXDATE:\") >= 0) {\n                          value = value.substring(value.indexOf(\"EXDATE:\") + 7);\n                        }\n                        var exdates = new Array();\n                        if (value.indexOf(\",\") >= 0) {\n                          exdates = value.split(',');\n                        } else {\n                          exdates.push(value);\n                        }\n                        for (var exIndex = 0; exIndex < exdates.length; exIndex++) {\n                          var current = exdates[exIndex];\n                          if (current.indexOf(';') >= 0) {\n                            var canDisplay = current.split(';')[1];\n                            current = current.split(';')[0];\n                            if (canDisplay.toLowerCase().indexOf('display') >= 0 && canDisplay.toLowerCase().indexOf('none')) {\n                              appointment[\"hidden\"] = true;\n                            }\n                          }\n                          try {\n                            var date = $.jqx.scheduler.utilities.untilStringToDate(current);\n                            if (date != \"Invalid Date\") {\n                              if (appointment.timeZone) {\n                                date = new $.jqx.date(date, appointment.timeZone);\n                              } else if (that.timeZone) {\n                                date = date.toTimeZone(that.timeZone);\n                              } else {\n                                date = new $.jqx.date(date);\n                              }\n                            }\n                          } catch (er) {\n                            var date = new $.jqx.date(current, that.timeZone);\n                          }\n                          exceptions.push(date);\n                        }\n                      }\n                      value = exceptions;\n                    }\n                    appointment[key] = value;\n                  }\n                  for (var obj in defaultFields) {\n                    var key = defaultFields[obj];\n                    if (appointment[key] == undefined) {\n                      var value = \"\";\n                      if (key == \"originalData\") continue;\n                      if (key == \"ownerId\") value = null;\n                      if (key == \"timeZone\") value = null;\n                      if (key == \"recurrencePattern\") value = null;\n                      if (key == \"recurrenceException\") value = null;\n                      if (key == \"allDay\") value = false;\n                      if (key == \"draggable\") value = true;\n                      if (key == \"resizable\") value = true;\n                      if (key == \"hidden\") value = false;\n                      if (key == \"resourceId\") value = null;\n                      if (key == \"from\") {\n                        value = new $.jqx.date();\n                      }\n                      if (key == \"to\") {\n                        value = new $.jqx.date().addHours(1);\n                      }\n                      appointment[key] = value;\n                    }\n                  }\n                  appointment.originalData = row;\n                  appointment.scheduler = this;\n                  var uiappointment = new $.jqx.scheduler.appointment(appointment);\n                  if (appointment.timeZone) {\n                    uiappointment.from = uiappointment.from.toTimeZone(appointment.timeZone);\n                    uiappointment.to = uiappointment.to.toTimeZone(appointment.timeZone);\n                  }\n                  if (that.timeZone) {\n                    if (!appointment.timeZone) {\n                      uiappointment.timeZone = that.timeZone;\n                    }\n                    uiappointment.from = uiappointment.from.toTimeZone(that.timeZone);\n                    uiappointment.to = uiappointment.to.toTimeZone(that.timeZone);\n                  } else {\n                    uiappointment.from = uiappointment.from.toTimeZone(null);\n                    uiappointment.to = uiappointment.to.toTimeZone(null);\n                  }\n                } else {\n                  var app = new $.jqx.scheduler.appointment();\n                  for (var key in uiappointment) {\n                    app[key] = uiappointment[key];\n                  }\n                  uiappointment = app;\n                }\n              }\n              var key = that.dataview.generatekey();\n              uiappointment.id = key;\n              that.appointmentsByKey[key] = uiappointment;\n              that.appointments.push(uiappointment);\n              var boundAppointment = {};\n              var originalData = {};\n              for (var keyValue in that.appointmentDataFields) {\n                var field = that.appointmentDataFields[keyValue];\n                var value = uiappointment[keyValue];\n                boundAppointment[keyValue] = value;\n                if (keyValue == \"from\" || keyValue == \"to\") {\n                  if (value.toDate) {\n                    value = value.toDate();\n                  } else {\n                    value = new $.jqx.date(value).toDate();\n                  }\n                }\n                originalData[field] = value;\n              }\n              boundAppointment.originalData = originalData;\n              uiappointment.boundAppointment = boundAppointment;\n              boundAppointment.jqxAppointment = uiappointment;\n              uiappointment.jqxAppointment = uiappointment;\n              that._raiseEvent('appointmentAdd', {\n                appointment: uiappointment.boundAppointment\n              });\n              that.uiappointments.push(uiappointment);\n              that.changedAppointments[key] = {\n                type: \"Add\",\n                appointment: uiappointment.boundAppointment\n              };\n              if (that.hiddenResources && that.hiddenResources[uiappointment.resourceId]) {\n                that.hideAppointmentsByResource(uiappointment.resourceId);\n              } else {\n                that._renderrows();\n              }\n              that._selectAppointment(uiappointment);\n              that._lastSelectedAppointment = uiappointment;\n              if (that.resources) {\n                var resourceId = uiappointment.resourceId;\n                if (that._resources.indexOf(resourceId) === -1) {\n                  that._resources.push(resourceId);\n                  that._renderrows();\n                }\n              }\n            },\n            _updateCellsSelection: function () {\n              var that = this;\n              var rows = that.rows;\n              var start = 0;\n              var end = 0;\n              if (start > 0 && that.rtl) {\n                start = 0;\n                end = 1;\n              }\n              for (var i = 0; i < rows.length; i++) {\n                var cells = rows[i].cells;\n                for (var j = start; j < cells.length - end; j++) {\n                  var cell = cells[j];\n                  if (cell.getAttribute('data-selected') == \"true\") {\n                    var className = cell.jqxClassName || cell.className;\n                    if (className.indexOf(\"jqx-fill-state-pressed\") >= 0) {\n                      if (cell != that.focusedCell) {\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                      } else if (cell == that.focusedCell && that.focused) {\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                        if (!that.selectedAppointment) {\n                          className = className += \" \" + that.toTP('jqx-scheduler-cell-focus');\n                        }\n                      }\n                      if (cell.className != className) {\n                        cell.className = className;\n                      }\n                      cell.jqxClassName = className;\n                      continue;\n                    }\n                    className = className.replace(\" \" + 'jqx-fill-state-pressed', \"\");\n                    className = className.replace(\" \" + 'jqx-fill-state-pressed-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-grid-cell-selected', \"\");\n                    className = className.replace(\" \" + 'jqx-grid-cell-selected-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-selected', \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-selected-' + that.theme, \"\");\n                    className = className += \" \" + that.toTP('jqx-fill-state-pressed jqx-grid-cell-selected jqx-scheduler-cell-selected');\n                    if (cell == that.focusedCell && that.focused && !that.selectedAppointment) {\n                      className = className += \" \" + that.toTP('jqx-scheduler-cell-focus');\n                    }\n                    if (cell.className != className) {\n                      cell.className = className;\n                    }\n                    cell.jqxClassName = className;\n                  } else {\n                    var className = cell.jqxClassName || cell.className;\n                    if (className.indexOf(\"jqx-fill-state-pressed\") == -1) {\n                      if (cell != that.focusedCell) {\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                      } else if (cell == that.focusedCell && that.focused) {\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                        className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                        if (!that.selectedAppointment) {\n                          className = className += \" \" + that.toTP('jqx-scheduler-cell-focus');\n                        }\n                      }\n                      if (cell.className != className) {\n                        cell.className = className;\n                      }\n                      cell.jqxClassName = className;\n                      continue;\n                    } else if (cell == that.focusedCell && that.focused) {\n                      className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                      className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                      if (!that.selectedAppointment) {\n                        className = className += \" \" + that.toTP('jqx-scheduler-cell-focus');\n                      }\n                      if (cell.className != className) {\n                        cell.className = className;\n                      }\n                      cell.jqxClassName = className;\n                    }\n                    className = className.replace(\" \" + 'jqx-fill-state-pressed', \"\");\n                    className = className.replace(\" \" + 'jqx-fill-state-pressed-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-focus', \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-focus-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-grid-cell-selected', \"\");\n                    className = className.replace(\" \" + 'jqx-grid-cell-selected-' + that.theme, \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-selected', \"\");\n                    className = className.replace(\" \" + 'jqx-scheduler-cell-selected-' + that.theme, \"\");\n                    if (cell == that.focusedCell && that.focused && !that.selectedAppointment) {\n                      className = className += \" \" + that.toTP('jqx-scheduler-cell-focus');\n                    }\n                    if (cell.className != className) {\n                      cell.className = className;\n                    }\n                    cell.jqxClassName = className;\n                    cell.removeAttribute('data-selected');\n                  }\n                }\n              }\n            },\n            _getuikey: function (index, type) {\n              var key = null;\n              var children = this.table[0].rows;\n              key = $(children[index]).attr('data-key');\n              if ($(children[index]).attr('data-role')) {\n                var uirow = $(children[index]);\n                if (type == \"next\") {\n                  while (uirow) {\n                    uirow = uirow.next();\n                    if (uirow) {\n                      var role = uirow.attr('data-role');\n                      if (!role) {\n                        key = uirow.attr('data-key');\n                        return key;\n                      }\n                    }\n                  }\n                } else if (type == \"prev\") {\n                  while (uirow) {\n                    uirow = uirow.prev();\n                    if (uirow) {\n                      var role = uirow.attr('data-role');\n                      if (!role) {\n                        key = uirow.attr('data-key');\n                        return key;\n                      }\n                    }\n                  }\n                }\n                return null;\n              }\n              return key;\n            },\n            getRows: function () {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var scale = \"halfHour\";\n              if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                scale = viewObject.timeRuler.scale;\n              }\n              var hours = 24;\n              var showAllDayRow = this.showAllDayRow;\n              if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                var startHour = 0;\n                var endHour = 23;\n                if (viewObject.timeRuler.scaleStartHour != undefined) {\n                  var startHour = parseInt(viewObject.timeRuler.scaleStartHour);\n                }\n                if (viewObject.timeRuler.scaleEndHour != undefined) {\n                  var endHour = parseInt(viewObject.timeRuler.scaleEndHour);\n                }\n                if (startHour < 0) startHour = 0;\n                if (endHour < 0) endHour = 23;\n                if (startHour > 23) startHour = 0;\n                if (endHour > 23) endHour = 23;\n                hours = endHour - startHour + 1;\n                if (viewObject.timeRuler.showAllDayRow != undefined) {\n                  showAllDayRow = viewObject.timeRuler.showAllDayRow;\n                }\n              }\n              var rows = new Array();\n              var pageSize = 0;\n              switch (view) {\n                case \"dayView\":\n                case \"weekView\":\n                default:\n                  var pageSize = hours * 2;\n                  if (scale === \"hour\" || scale === \"sixtyMinutes\") {\n                    var pageSize = hours;\n                  } else if (scale === \"quarterHour\" || scale === \"fifteenMinutes\") {\n                    var pageSize = hours * 4;\n                  } else if (scale === \"tenMinutes\") {\n                    var pageSize = hours * 6;\n                  } else if (scale === \"fiveMinutes\") {\n                    var pageSize = hours * 12;\n                  }\n                  if (showAllDayRow) {\n                    pageSize++;\n                  }\n                  break;\n                case \"monthView\":\n                  var pageSize = 6;\n                  break;\n                case \"timelineDayView\":\n                case \"timelineWeekView\":\n                case \"timelineMonthView\":\n                  var pageSize = 1;\n                  break;\n                case \"agendaView\":\n                  var pageSize = this.appointments ? this.appointments.length : 0;\n                  break;\n              }\n              for (var i = 0; i < pageSize; i++) {\n                rows.push({\n                  uid: i\n                });\n              }\n              return rows;\n            },\n            _getDateByString: function (dateString) {\n              if (dateString && this._dateByStringCache && this._dateByStringCache[dateString]) {\n                var date = this._dateByStringCache[dateString];\n                return new Date(date.getTime());\n              }\n              var parts = dateString.split(\" \");\n              var dateParts = parts[0].split(\"-\");\n              var timeParts = parts[1].split(\":\");\n              var year = parseInt(dateParts[0], 10);\n              var month = parseInt(dateParts[1], 10) - 1;\n              var day = parseInt(dateParts[2], 10);\n              var hour = parseInt(timeParts[0], 10);\n              var minutes = parseInt(timeParts[1], 10);\n              var seconds = parseInt(timeParts[2], 10);\n              var date = new Date(year, month, day, hour, minutes, seconds);\n              if (year < 1970) date.setFullYear(year, month, day);\n              if (!this._dateByStringCache) {\n                this._dateByStringCache = [];\n              }\n              this._dateByStringCache[dateString] = date;\n              return date;\n            },\n            _getCellByDate: function (date, avoidAllDayCells, resource) {\n              var rows = this.rows;\n              if (avoidAllDayCells === undefined) avoidAllDayCells = false;\n              if (resource === undefined) {\n                if (this.focusedCell) resource = this.focusedCell.getAttribute(\"data-view\");\n              }\n              for (var i = 0; i < rows.length; i++) {\n                var row = rows[i];\n                if (row.element.getAttribute('data-group-row')) continue;\n                for (var j = 0; j < row.cells.length; j++) {\n                  var cell = row.cells[j];\n                  if (cell.getAttribute('rowspan') != null) continue;\n                  if (cell.getAttribute('data-view') !== resource) continue;\n                  if (cell.getAttribute('data-time-slot')) continue;\n                  if (avoidAllDayCells && cell.getAttribute('data-end-date') != null) continue;\n                  var dateString = cell.getAttribute('data-date');\n                  var cellDate = this._getDateByString(dateString);\n                  if (cellDate.valueOf() == date.valueOf()) return cell;\n                }\n              }\n            },\n            _rendercelltexts: function () {\n              //DEPRECATED\n            },\n            _handleKey: function (event) {\n              if (this._loading) {\n                return true;\n              }\n              var shift = event.shiftKey;\n              var ctrl = event.ctrlKey || event.metaKey;\n              var that = this;\n              var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;\n              if (that._hasOpenedMenu) {\n                if (key == 27) {\n                  that.closeMenu();\n                } else {\n                  that.menu.jqxMenu('focus');\n                }\n                return true;\n              }\n              if (key === 13 || that.selectedAppointment && key == 46) {\n                if (that.editRecurrenceDialog && that.editRecurrenceDialog.jqxWindow('isOpen')) return true;\n                if (that._editDialog && that._editDialog.jqxWindow('isOpen')) return true;\n                if (!that.selectedAppointment) {\n                  that._initDialog();\n                  that._openDialog();\n                } else {\n                  var jqxAppointment = that.getJQXAppointmentByElement(that.selectedAppointment);\n                  if (!jqxAppointment.readOnly) {\n                    if (key == 46) {\n                      var result = that._initDialog(jqxAppointment, 'delete');\n                      if (result !== false) {\n                        that._openDialog();\n                      }\n                    } else {\n                      var result = that._initDialog(jqxAppointment);\n                      if (result !== false) {\n                        that._openDialog();\n                      }\n                    }\n                  }\n                }\n              }\n              if (key === 27) {\n                if (that.dragOrResize) {\n                  that.table.find('.jqx-icon-arrow-down').hide();\n                  var viewStart = that.getViewStart();\n                  var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n                  that._prepareAppointmentsInView(viewStart, viewEnd);\n                  that._renderAppointments(viewStart, viewEnd);\n                  that._removeFeedbackAndStopResize();\n                  return false;\n                }\n              }\n              var move = function (type) {\n                var appointment = that.selectedAppointment;\n                var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                var cell = jqxAppointment.elements[0].cells[0].cell;\n                var lastCell = jqxAppointment.elements[jqxAppointment.elements.length - 1].cells[jqxAppointment.elements[jqxAppointment.elements.length - 1].cells.length - 1].cell;\n                var lastViewCell = that.rows[that.rows.length - 1].cells[that.rows[that.rows.length - 1].cells.length - 1];\n                if (shift || !shift && !ctrl && (type == \"down\" || type == \"right\")) {\n                  cell = lastCell;\n                }\n                var view = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                var newCell = cell;\n                switch (type) {\n                  case \"left\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    if (cellIndex > 0 && !shift) {\n                      newCell = row.cells[cellIndex - 1];\n                    } else if (view == \"monthView\" && !shift) {\n                      var aboveRow = row.aboveRow;\n                      if (aboveRow) {\n                        newCell = aboveRow.cells[aboveRow.cells.length - 1];\n                      }\n                    }\n                    break;\n                  case \"right\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    if (cellIndex < row.cells.length - 1) {\n                      newCell = row.cells[cellIndex + 1];\n                    } else if (view == \"monthView\") {\n                      var belowRow = row.belowRow;\n                      if (belowRow) {\n                        newCell = belowRow.cells[0];\n                      }\n                    }\n                    if (view == \"monthView\" && !shift && ctrl && lastCell == lastViewCell) {\n                      newCell = cell;\n                    }\n                    break;\n                  case \"up\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var aboveRow = row.aboveRow;\n                    if (aboveRow && !shift) {\n                      newCell = aboveRow.cells[cellIndex];\n                    }\n                    break;\n                  case \"down\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var belowRow = row.belowRow;\n                    if (belowRow) {\n                      newCell = belowRow.cells[cellIndex];\n                    }\n                    break;\n                }\n                var dateString = newCell.getAttribute('data-date');\n                var date = new $.jqx.date(dateString, that.timeZone);\n                var view = $(newCell).attr('data-view');\n                var resourceId = that._resources[parseInt(view) - 1];\n                if (shift) {\n                  var view = that._views[that._view].type;\n                  var viewObject = that._views[that._view];\n                  var changed = false;\n                  if (view === \"dayView\" || view === \"weekView\") {\n                    if (cell.getAttribute('data-end-date')) {\n                      if (type == \"left\" && (jqxAppointment.elements[0].cells.length > 1 || that.rtl)) {\n                        if (!that.rtl) {\n                          jqxAppointment.to = $.jqx.scheduler.utilities.getEndOfDay(date.addDays(-1));\n                        } else {\n                          jqxAppointment.to = $.jqx.scheduler.utilities.getEndOfDay(date.addDays(1));\n                        }\n                        changed = true;\n                      } else if (type == \"right\") {\n                        if (!that.rtl || that.rtl && jqxAppointment.elements[0].cells.length > 1) {\n                          jqxAppointment.to = $.jqx.scheduler.utilities.getEndOfDay(date);\n                        }\n                        changed = true;\n                      }\n                    } else {\n                      if (type == \"up\" && jqxAppointment.elements[0].cells.length > 1) {\n                        jqxAppointment.to = date;\n                        changed = true;\n                      } else if (type == \"down\") {\n                        jqxAppointment.to = date.addMinutes(that.getMinutesPerScale());\n                        changed = true;\n                      }\n                    }\n                  } else if (view.indexOf(\"month\") >= 0) {\n                    if (type == \"left\" && (jqxAppointment.elements[0].cells.length > 1 || jqxAppointment.elements.length > 1)) {\n                      jqxAppointment.to = $.jqx.scheduler.utilities.getEndOfDay(date.addDays(-1));\n                      changed = true;\n                    } else if (type == \"right\") {\n                      jqxAppointment.to = $.jqx.scheduler.utilities.getEndOfDay(date);\n                      changed = true;\n                    }\n                  } else {\n                    if (!that.rtl && type == \"left\" && jqxAppointment.elements[0].cells.length > 1 || that.rtl && type == \"right\" && jqxAppointment.elements[0].cells.length > 1) {\n                      jqxAppointment.to = date;\n                      if (that.rtl) {\n                        jqxAppointment.to = date.addMinutes(that.getMinutesPerScale());\n                      }\n                      changed = true;\n                    } else if (!that.rtl && type == \"right\" || that.rtl && type == \"left\") {\n                      jqxAppointment.to = date.addMinutes(that.getMinutesPerScale());\n                      if (that.rtl) {\n                        jqxAppointment.to = jqxAppointment.to.addMinutes(that.getMinutesPerScale());\n                      }\n                      changed = true;\n                    }\n                  }\n                  if (changed) {\n                    that.moveAppointment(jqxAppointment, date, resourceId, newCell, true);\n                  }\n                } else if (ctrl) {\n                  that.moveAppointment(jqxAppointment, date, resourceId, newCell);\n                } else {\n                  that.clearAppointmentsSelection();\n                  var allDay = true;\n                  if (type == \"down\") allDay = false;\n                  that.selectCell(date, allDay, view);\n                  that._ensureVisible(newCell);\n                }\n                if (that.selectedAppointment) {\n                  that.selectedAppointment.removeClass(that.toTP('jqx-scheduler-selected-appointment'));\n                  var key = that.selectedAppointment.attr('data-key');\n                  $('[data-key=\"' + key + '\"]').addClass(that.toTP('jqx-scheduler-selected-appointment'));\n                  that.clearSelection();\n                }\n              };\n              if (event.altKey && that._resourcesElements && that._resources && that._resources.length > 0) {\n                var toggleResource = function (label) {\n                  var element = that._resourcesElements[\"bottom\"][label];\n                  if (element.attr('data-toggle') == 'on') {\n                    that.hideAppointmentsByResource(label);\n                  } else {\n                    that.showAppointmentsByResource(label);\n                  }\n                };\n                var num = key >= 49 && key <= 58 ? num = key - 48 : -1;\n                if (num >= 1) {\n                  $.each(that._resources, function (index, value) {\n                    if (index == num - 1) {\n                      toggleResource(value);\n                      return false;\n                    }\n                  });\n                  return false;\n                }\n              }\n              if (event.ctrlKey) {\n                if (!that.selectedAppointment) {\n                  if (key == 37) {\n                    that.toolbarLeftButton.trigger('click');\n                    that._ensureVisible(that.focusedCell);\n                    return false;\n                  } else if (key == 39) {\n                    that.toolbarRightButton.trigger('click');\n                    that._ensureVisible(that.focusedCell);\n                    return false;\n                  }\n                }\n                if (key == 49) {\n                  that._setView(0);\n                  return false;\n                } else if (key == 50) {\n                  that._setView(1);\n                  return false;\n                } else if (key == 51) {\n                  that._setView(2);\n                  return false;\n                } else if (key == 52) {\n                  that._setView(3);\n                  return false;\n                } else if (key == 53) {\n                  that._setView(4);\n                  return false;\n                } else if (key == 54) {\n                  that._setView(5);\n                  return false;\n                } else if (key == 68) {\n                  that.dateTimeInput.jqxDateTimeInput('open');\n                  return false;\n                } else if (key == 77) {\n                  that.openMenu();\n                  return false;\n                }\n              }\n              if (key == 9) {\n                if (!event.shiftKey) {\n                  if (that.selectedAppointment) {\n                    that.clearSelection();\n                    var appointment = that.selectedAppointment;\n                    var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                    var index = that.tabKeyAppointments.indexOf(jqxAppointment);\n                    if (index < that.tabKeyAppointments.length - 1) {\n                      jqxAppointment = that.tabKeyAppointments[index + 1];\n                      that._selectAppointment(jqxAppointment);\n                      that._lastSelectedAppointment = jqxAppointment;\n                      that._ensureAppointmentVisible(jqxAppointment);\n                      return false;\n                    } else {\n                      that.clearAppointmentsSelection();\n                      return true;\n                    }\n                  } else {\n                    var jqxAppointment = that.tabKeyAppointments[0];\n                    if (jqxAppointment) {\n                      that._selectAppointment(jqxAppointment);\n                      that._lastSelectedAppointment = jqxAppointment;\n                      that._ensureAppointmentVisible(jqxAppointment);\n                      return false;\n                    } else if (!that.focusedCell) {\n                      that._updateFocusedCell();\n                      that._ensureVisible(that.focusedCell);\n                      return false;\n                    } else if (that.focusedCell) {\n                      if (that.focusedCell.className.indexOf('-focus') == -1) {\n                        that._updateCellsSelection();\n                        that._ensureVisible(that.focusedCell);\n                        return false;\n                      }\n                    }\n                  }\n                } else {\n                  if (that.selectedAppointment) {\n                    that.clearSelection();\n                    var appointment = that.selectedAppointment;\n                    var jqxAppointment = that.getJQXAppointmentByElement(appointment);\n                    if (jqxAppointment) {\n                      var index = that.tabKeyAppointments.indexOf(jqxAppointment);\n                      if (index > 0) {\n                        jqxAppointment = that.tabKeyAppointments[index - 1];\n                        that._selectAppointment(jqxAppointment);\n                        that._lastSelectedAppointment = jqxAppointment;\n                        that._ensureAppointmentVisible(jqxAppointment);\n                        return false;\n                      } else {\n                        that.clearAppointmentsSelection();\n                        if (!that.focusedCell) {\n                          that._updateFocusedCell();\n                          that._ensureVisible(that.focusedCell);\n                          return false;\n                        } else if (that.focusedCell) {\n                          if (that.focusedCell.className.indexOf('-focus') == -1) {\n                            that._updateCellsSelection();\n                            that._ensureVisible(that.focusedCell);\n                            return false;\n                          }\n                        }\n                        return true;\n                      }\n                    }\n                  } else {\n                    if (!that.focusedCell) {\n                      that._updateFocusedCell();\n                      that._ensureVisible(that.focusedCell);\n                    } else if (that.focusedCell) {\n                      if (that.focusedCell.className.indexOf('-focus') == -1) {\n                        that._updateCellsSelection();\n                        that._ensureVisible(that.focusedCell);\n                        return false;\n                      }\n                    }\n                  }\n                }\n              }\n              if (that.selectedAppointment) {\n                if (key == 37) {\n                  move(\"left\");\n                } else if (key == 38) {\n                  move(\"up\");\n                } else if (key == 40) {\n                  move(\"down\");\n                } else if (key == 39) {\n                  move(\"right\");\n                }\n                if (key >= 37 && key <= 40) return false;\n                return;\n              }\n              var td = this._lastSelectedCell;\n              if (!td) return;\n              if (!$(this._lastSelectedCell).parent()[0]) {\n                this._lastSelectedCell = this.rows[0].cells[0];\n                td = this._lastSelectedCell;\n              }\n              var rows = this.rows;\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var scale = \"halfHour\";\n              if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                scale = viewObject.timeRuler.scale;\n              }\n              var select = function (cell, type) {\n                var minutes = 30;\n                switch (scale) {\n                  case 'sixtyMinutes':\n                  case 'hour':\n                    minutes = 60;\n                    break;\n                  case 'thirtyMinutes':\n                  case 'halfHour':\n                    minutes = 30;\n                    break;\n                  case 'fifteenMinutes':\n                  case 'quarterHour':\n                    minutes = 15;\n                    break;\n                  case 'tenMinutes':\n                    minutes = 10;\n                    break;\n                  case 'fiveMinutes':\n                    minutes = 5;\n                    break;\n                }\n                var dateString = cell.getAttribute('data-date');\n                var selectNewCell = function (newCell, cell, date) {\n                  if (newCell && (newCell.getAttribute('rowspan') == null || view == \"agendaView\") && newCell.getAttribute('data-time-slot') == null) {\n                    if (date < that.min || date > that.max) return;\n                    var rows = that.rows;\n                    var prevCell = that._lastSelectedCell;\n                    that._lastSelectedCell = newCell;\n                    if (event.shiftKey && that._lastSelectedCell) {\n                      if (!that.shiftSelectedCell) {\n                        that.shiftSelectedCell = td;\n                      }\n                    } else if (!event.shiftKey) {\n                      that.shiftSelectedCell = null;\n                    }\n                    if (!that.shiftSelectedCell) {\n                      for (var i = 0; i < rows.length; i++) {\n                        var row = rows[i];\n                        if (row.element.getAttribute('data-group-row')) continue;\n                        for (var j = 0; j < row.cells.length; j++) {\n                          var cell = row.cells[j];\n                          cell.removeAttribute('data-selected', \"false\");\n                        }\n                      }\n                      newCell.setAttribute('data-selected', 'true');\n                      that.focusedCell = newCell;\n                    } else {\n                      if (newCell.getAttribute('data-end-date') && that.shiftSelectedCell.getAttribute('data-end-date')) {\n                        that.focusedCell = newCell;\n                        that._selectRange(newCell, that.shiftSelectedCell);\n                      } else if (!newCell.getAttribute('data-end-date') && !that.shiftSelectedCell.getAttribute('data-end-date')) {\n                        that.focusedCell = newCell;\n                        that._selectRange(newCell, that.shiftSelectedCell);\n                      } else {\n                        that.focusedCell = prevCell;\n                        that._lastSelectedCell = prevCell;\n                      }\n                    }\n                    that._ensureVisible(that.focusedCell);\n                  }\n                };\n                var date = new $.jqx.date(dateString, that.timeZone);\n                var resource = cell.getAttribute(\"data-view\");\n                switch (type) {\n                  case \"left\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    if (cellIndex > 0) {\n                      var newCell = row.cells[cellIndex - 1];\n                      var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                    }\n                    selectNewCell(newCell, cell, newDate);\n                    break;\n                  case \"right\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    if (cellIndex < row.cells.length - 1) {\n                      var newCell = row.cells[cellIndex + 1];\n                      var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                    }\n                    selectNewCell(newCell, cell, newDate);\n                    break;\n                  case \"up\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var aboveRow = row.aboveRow;\n                    if (aboveRow) {\n                      var newCell = aboveRow.cells[cellIndex];\n                      if (cellIndex == 0 && newCell.getAttribute('rowspan')) {\n                        var rowIndex = -1 + that.rows.indexOf(row);\n                        var newCell = cell;\n                        while (rowIndex >= 0) {\n                          if (that.rows[rowIndex].cells[0] == newCell) {\n                            rowIndex--;\n                          } else {\n                            newCell = that.rows[rowIndex].cells[0];\n                            break;\n                          }\n                        }\n                      }\n                      var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                      selectNewCell(newCell, cell, newDate);\n                    }\n                    break;\n                  case \"down\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var belowRow = row.belowRow;\n                    if (belowRow) {\n                      var newCell = belowRow.cells[cellIndex];\n                      if (cellIndex == 0 && newCell.getAttribute('rowspan')) {\n                        var rowIndex = 1 + that.rows.indexOf(row);\n                        var newCell = cell;\n                        while (rowIndex < that.rows.length) {\n                          if (that.rows[rowIndex].cells[0] == newCell) {\n                            rowIndex++;\n                          } else {\n                            newCell = that.rows[rowIndex].cells[0];\n                            break;\n                          }\n                        }\n                      }\n                      var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                      selectNewCell(newCell, cell, newDate);\n                    }\n                    break;\n                  case \"home\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var firstRow = that.rows[0];\n                    var newCell = firstRow.cells[cellIndex];\n                    var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                    selectNewCell(newCell, cell, newDate);\n                    break;\n                  case \"end\":\n                    var row = that.rowByCell[cell.getAttribute(\"data-key\")];\n                    var cellIndex = row.indexOf(cell);\n                    var lastRow = that.rows[that.rows.length - 1];\n                    var newCell = lastRow.cells[cellIndex];\n                    var newDate = new $.jqx.date(newCell.getAttribute(\"data-date\"), that.timeZone);\n                    selectNewCell(newCell, cell, newDate);\n                    break;\n                }\n                that._updateCellsSelection();\n              };\n              var home = function () {\n                select(td, \"home\");\n              };\n              var end = function () {\n                select(td, \"end\");\n              };\n              if (key == 36 || ctrl && key == 38) {\n                home();\n                return false;\n              } else if (key == 35 || ctrl && key == 40) {\n                end();\n                return false;\n              } else if (key == 37) {\n                // left\n                if (that.selectedAppointment) {\n                  move(td, \"left\");\n                } else {\n                  select(td, \"left\");\n                }\n                return false;\n              } else if (key == 38) {\n                // up\n                if (that.selectedAppointment) {\n                  move(td, \"up\");\n                } else {\n                  select(td, \"up\");\n                }\n                return false;\n              } else if (key == 40) {\n                // down\n                if (that.selectedAppointment) {\n                  move(td, \"down\");\n                } else {\n                  select(td, \"down\");\n                }\n                return false;\n              } else if (key == 39) {\n                // right\n                if (that.selectedAppointment) {\n                  move(td, \"right\");\n                } else {\n                  select(td, \"right\");\n                }\n                return false;\n              }\n            },\n            getSelectedCells: function () {\n              var that = this;\n              var rows = that.rows;\n              var length = rows.length;\n              var selectedCells = new Array();\n              for (var i = 0; i < length; i++) {\n                var cells = rows[i].cells;\n                for (var j = 0; j < cells.length; j++) {\n                  if (cells[j].getAttribute('data-selected')) {\n                    selectedCells.push(cells[j]);\n                  }\n                }\n              }\n              return selectedCells.sort(function (x, y) {\n                return that._sortByDate(x, y);\n              });\n            },\n            getSelection: function () {\n              var that = this;\n              var selectedCells = that.getSelectedCells();\n              if (selectedCells.length == 0) return null;\n              var date1 = selectedCells[0].getAttribute('data-date');\n              var date2 = selectedCells[selectedCells.length - 1].getAttribute('data-date');\n              var minutes = that.getMinutesPerScale();\n              var view = that._views[that._view].type;\n              if (view.toLowerCase().indexOf(\"month\") >= 0) {\n                minutes = 0;\n              }\n              if (selectedCells[0].getAttribute(\"data-end-date\")) {\n                minutes = 0;\n              }\n              date2 = new $.jqx.date(date2, that.timeZone).addMinutes(minutes);\n              var view = parseInt(selectedCells[0].getAttribute('data-view')) - 1;\n              var resource = that._resources[view];\n              if (that._views[that._view].type.toLowerCase().indexOf(\"month\") >= 0) {\n                return {\n                  from: new $.jqx.date(date1, that.timeZone),\n                  to: $.jqx.scheduler.utilities.getEndOfDay(date2),\n                  resourceId: resource\n                };\n              }\n              if (that._views[that._view].type.toLowerCase().indexOf(\"day\") >= 0 || that._views[that._view].type.toLowerCase().indexOf(\"week\") >= 0) {\n                date1 = new $.jqx.date(date1, that.timeZone);\n                if (date2.minute() === 0 && date2.hour() === 0 && date1.hour() === 0 && date1.minute() === 0) {\n                  if (date2.day() === date1.day()) {\n                    return {\n                      from: new $.jqx.date(date1, that.timeZone),\n                      to: $.jqx.scheduler.utilities.getEndOfDay(date2),\n                      resourceId: resource\n                    };\n                  } else {\n                    return {\n                      from: new $.jqx.date(date1, that.timeZone),\n                      to: $.jqx.scheduler.utilities.getEndOfDay(date2).addDays(-1),\n                      resourceId: resource\n                    };\n                  }\n                }\n                return {\n                  from: new $.jqx.date(date1, that.timeZone),\n                  to: date2,\n                  resourceId: resource\n                };\n              }\n              if (that._views[that._view].type.toLowerCase().indexOf(\"agenda\") >= 0) {\n                return {\n                  from: new $.jqx.date(date1, that.timeZone),\n                  to: $.jqx.scheduler.utilities.getEndOfDay(date2),\n                  resourceId: resource\n                };\n              }\n            },\n            clearSelection: function () {\n              var that = this;\n              var rows = that.rows;\n              var length = rows.length;\n              for (var i = 0; i < length; i++) {\n                var cells = rows[i].cells;\n                for (var j = 0; j < cells.length; j++) {\n                  cells[j].removeAttribute('data-selected');\n                }\n              }\n              that._updateCellsSelection();\n            },\n            _getvirtualcolumnsindexes: function (left, tablewidth, columnstart, columnend, hasgroups) {\n              //   if (this.rowdetails || this.editcell || (this.width && this.width.toString().indexOf('%') >= 0) || this.exporting) {\n              //       return { start: 0, end: columnstart + columnend };\n              //   }\n\n              if (this.rtl) {\n                left = this.hScrollInstance.max - left;\n              }\n              var xcolumn = 0;\n              var hcolumnstart = -1;\n              var hcolumnend = columnstart + columnend;\n              if (this.autorowheight) {\n                return {\n                  start: 0,\n                  end: columnstart + columnend\n                };\n              }\n              if (!hasgroups) {\n                for (var j = 0; j < columnstart + columnend; j++) {\n                  var rendercolumn = j;\n                  if (!this.columns.records[j].hidden) {\n                    xcolumn += this.columns.records[j].width;\n                  }\n                  if (xcolumn >= left && hcolumnstart == -1) {\n                    hcolumnstart = j;\n                  }\n                  if (xcolumn > tablewidth + left) {\n                    hcolumnend = j;\n                    break;\n                  }\n                }\n              }\n              hcolumnend++;\n              if (hcolumnend > columnstart + columnend) {\n                hcolumnend = columnstart + columnend;\n              }\n              if (hcolumnstart == -1) {\n                hcolumnstart = 0;\n              }\n              return {\n                start: hcolumnstart,\n                end: hcolumnend\n              };\n            },\n            _renderhorizontalscroll: function () {\n              var that = this;\n              var hScrollInstance = that.hScrollInstance;\n              var horizontalscrollvalue = hScrollInstance.value;\n              if (that.hScrollBar[0].style.visibility === 'hidden') {\n                hScrollInstance.value = 0;\n                horizontalscrollvalue = 0;\n              }\n              var left = parseInt(horizontalscrollvalue);\n              if (that.table == null) return;\n\n              //\n\n              var validParentNode = function (element) {\n                if (element.parentNode && element.parentNode.nodeName != \"#document-fragment\") {\n                  return true;\n                }\n                return false;\n              };\n              var virtualcolumnsindexes = that._getvirtualcolumnsindexes(left, that._hostWidth, 0, that.columns.records.length, false);\n              var hvirtualcolumnstart = virtualcolumnsindexes.start;\n              var hvirtualcolumnend = virtualcolumnsindexes.end;\n              var allrows = that.rows;\n              for (var cindex = 0; cindex < hvirtualcolumnstart; cindex++) {\n                var rendercolumn = cindex;\n                var columnrecord = that.columns.records[rendercolumn].element[0];\n                if (validParentNode(columnrecord)) {\n                  columnrecord.parentNode.removeChild(columnrecord);\n                }\n              }\n              for (var cindex = hvirtualcolumnend; cindex < that.columns.records.length; cindex++) {\n                var rendercolumn = cindex;\n                var columnrecord = that.columns.records[rendercolumn].element[0];\n                if (validParentNode(columnrecord)) {\n                  columnrecord.parentNode.removeChild(columnrecord);\n                }\n              }\n              for (var cindex = hvirtualcolumnstart; cindex < hvirtualcolumnend; cindex++) {\n                var rendercolumn = cindex;\n                columnrecord = that.columns.records[rendercolumn].element[0];\n                if (!validParentNode(columnrecord)) {\n                  that.columnsrow[0].appendChild(columnrecord);\n                }\n              }\n              //\n\n              var columnsrow = that.columnsrow;\n              var columnstart = 0;\n              var columnend = that.columns.records.length - columnstart;\n              var columns = that.columns.records;\n              var isempty = that.source.records.length == 0;\n              if (that.rtl) {\n                if (that.hScrollBar.css('visibility') != 'hidden') {\n                  left = hScrollInstance.max - left;\n                }\n              }\n              that.table[0].style.left = -left + 'px';\n              if (that.pinnedtable[0].style.display == \"block\") {\n                that.pinnedtable[0].style.left = -left + 'px';\n              }\n              if (that._resources.length > 0 && that.tableRows > 0) {\n                for (var i = 0; i < this.table[0].rows.length; i++) {\n                  var row = this.table[0].rows[i];\n                  if (row.getAttribute('data-group-row')) {\n                    $(row).find('span').css('left', 5 + left);\n                  }\n                }\n              }\n              columnsrow[0].style.marginLeft = -left + 'px';\n            },\n            _getDayName: function (day, format) {\n              if (day >= 7) day -= 7;\n              if (!format) {\n                format = this.dayNameFormat;\n                if (this.isTouchDevice()) {\n                  format = this.touchDayNameFormat;\n                }\n              }\n              var dayString = this.schedulerLocalization.days.names[day];\n              switch (format) {\n                case 'full':\n                  dayString = this.schedulerLocalization.days.names[day];\n                  break;\n                case 'abbr':\n                  dayString = this.schedulerLocalization.days.namesAbbr[day];\n                  break;\n                case 'shortest':\n                  dayString = this.schedulerLocalization.days.namesShort[day];\n                  break;\n                case 'firstTwoLetters':\n                  dayString = dayString.substring(0, 2);\n                  break;\n                case 'firstLetter':\n                  dayString = dayString.substring(0, 1);\n                  break;\n              }\n              return dayString;\n            },\n            _initializeColumns: function () {\n              if (this._views.length === 0) {\n                this._views.push({\n                  type: \"dayView\"\n                });\n              }\n              if (!this._views[this._view]) {\n                throw new Error(\"jqxScheduler: View is undefined. You need to define the View in the Views Array when you create jqxScheduler\");\n              }\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              if (viewObject.timeSlotWidth) {\n                viewObject.timeSlotWidth = Math.max(viewObject.timeSlotWidth, 30);\n                viewObject.columnWidth = viewObject.timeSlotWidth;\n              }\n              if (viewObject.columnWidth) {\n                if (viewObject.columnWidth < 30) {\n                  viewObject.columnWidth = 30;\n                }\n              }\n              if (this.columns && this.columns.records) {\n                for (var i = 0; i < this.columns.records.length; i++) {\n                  this._removecolumnhandlers(this.columns.records[i]);\n                }\n              }\n              this.columns = new Array();\n              var columnGroups = new Array();\n              var that = this;\n              var createtimelineDayColumns = function (date, resourceName) {\n                var scale = \"halfHour\";\n                if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                  scale = viewObject.timeRuler.scale;\n                }\n                var hours = 24;\n                var startHour = 0;\n                var endHour = 23;\n                if (viewObject.timeRuler) {\n                  if (viewObject.timeRuler.scaleStartHour != undefined) {\n                    var startHour = parseInt(viewObject.timeRuler.scaleStartHour);\n                  }\n                  if (viewObject.timeRuler.scaleEndHour != undefined) {\n                    var endHour = parseInt(viewObject.timeRuler.scaleEndHour);\n                  }\n                  if (startHour < 0) startHour = 0;\n                  if (endHour < 0) endHour = 23;\n                  if (startHour > 23) startHour = 0;\n                  if (endHour > 23) endHour = 23;\n                  hours = endHour - startHour + 1;\n                }\n                var minutes = 60;\n                var pow = 2;\n                if (scale) {\n                  switch (scale) {\n                    case 'sixtyMinutes':\n                    case 'hour':\n                      pow = 1;\n                      break;\n                    case 'thirtyMinutes':\n                    case 'halfHour':\n                      pow = 2;\n                      break;\n                    case 'fifteenMinutes':\n                    case 'quarterHour':\n                      pow = 4;\n                      break;\n                    case 'tenMinutes':\n                      pow = 6;\n                      break;\n                    case 'fiveMinutes':\n                      pow = 12;\n                      break;\n                  }\n                }\n                var rows = new Array();\n                var format = \"auto\";\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var currentHour = startHour;\n                var columnsCount = hours;\n                var currentDate = date.addHours(currentHour);\n                var width = \"auto\";\n                if (viewObject.columnWidth) {\n                  width = pow * viewObject.columnWidth;\n                } else {\n                  width = pow * 80;\n                }\n                for (var i = 0; i < columnsCount; i++) {\n                  var cellvalue = currentDate.toDate();\n                  if (format === \"auto\") {\n                    if (cellvalue.getHours() == 0 && cellvalue.getMinutes() == 0 || cellvalue.getHours() == 12 && cellvalue.getMinutes() == 0) {\n                      var cellsFormat = \"hh tt\";\n                    } else var cellsFormat = \"hh:mm\";\n                  } else if ($.isFunction(format)) {\n                    var cellsFormat = format(cellvalue);\n                  } else {\n                    cellsFormat = format;\n                  }\n                  if ($.jqx.dataFormat.isDate(cellvalue)) {\n                    cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                  }\n                  currentDate = currentDate.addMinutes(minutes, false);\n                  that.columns.push({\n                    columnGroup: resourceName,\n                    text: cellvalue,\n                    minwidth: 30,\n                    width: width\n                  });\n                }\n              };\n              for (var j = 0; j < this.tableColumns; j++) {\n                if (this.tableColumns > 1) {\n                  var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                  columnGroups.push({\n                    text: resourceName,\n                    name: resourceName\n                  });\n                }\n                var align = \"left\";\n                if (this.rtl) align = \"right\";\n                switch (view) {\n                  case \"dayView\":\n                    var viewStart = this.getViewStart();\n                    if (false === viewObject.showWeekends) {\n                      if (viewStart.dayOfWeek() === 0 || viewStart.dayOfWeek() === 6) viewStart = viewStart.addDays(1);\n                      if (viewStart.dayOfWeek() === 0 || viewStart.dayOfWeek() === 6) viewStart = viewStart.addDays(1);\n                    }\n                    var width = \"auto\";\n                    if (viewObject && viewObject.columnWidth) {\n                      width = viewObject.columnWidth;\n                    }\n                    var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                    this.columns.push({\n                      align: align,\n                      width: width,\n                      columnGroup: resourceName,\n                      text: this._getDayName(viewStart.dayOfWeek())\n                    });\n                    break;\n                  case \"weekView\":\n                  case \"monthView\":\n                    for (var i = 0; i < 7; i++) {\n                      var day = this.schedulerLocalization.firstDay + i;\n                      if (day > 6) {\n                        day = 0;\n                      }\n                      if (false === viewObject.showWeekends) {\n                        if (day === 0 || day === 6) continue;\n                      }\n                      var width = \"auto\";\n                      if (viewObject && viewObject.columnWidth) {\n                        width = viewObject.columnWidth;\n                      }\n                      var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                      this.columns.push({\n                        align: view == \"weekView\" ? align : \"center\",\n                        width: width,\n                        columnGroup: resourceName,\n                        text: this._getDayName(day)\n                      });\n                    }\n                    break;\n                  case \"timelineDayView\":\n                    var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                    createtimelineDayColumns(that.getViewStart(), resourceName);\n                    break;\n                  case \"timelineWeekView\":\n                    for (var i = 0; i < 7; i++) {\n                      var day = this.schedulerLocalization.firstDay + i;\n                      if (false === viewObject.showWeekends) {\n                        if (i === 0 || i === 6) continue;\n                      }\n                      var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                      columnGroups.push({\n                        align: that.rtl ? \"right\" : \"left\",\n                        parentGroup: resourceName,\n                        name: this._getDayName(day) + j,\n                        text: this._getDayName(day)\n                      });\n                      createtimelineDayColumns(that.getViewStart().addDays(i), this._getDayName(day) + j);\n                    }\n                    break;\n                  case \"timelineMonthView\":\n                    var currentDate = that.getViewStart();\n                    var format = \"auto\";\n                    if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                      format = viewObject.timeRuler.formatString;\n                    }\n                    for (var i = 0; i < 41; i++) {\n                      var day = currentDate.dayOfWeek();\n                      if (false === viewObject.showWeekends) {\n                        if (day === 0 || day === 6) continue;\n                      }\n                      var width = \"auto\";\n                      if (viewObject.columnWidth) {\n                        width = viewObject.columnWidth;\n                      } else {\n                        width = 100;\n                      }\n                      var cellvalue = currentDate.toDate();\n                      if (format === \"auto\") {\n                        var cellsFormat = \"dd\";\n                        cellvalue = currentDate.toDate();\n                        if (cellvalue.getDate() === 1) cellsFormat = \"MMM dd\";\n                      } else if ($.isFunction(format)) {\n                        var cellsFormat = format(cellvalue);\n                      } else {\n                        cellsFormat = format;\n                      }\n                      if ($.jqx.dataFormat.isDate(cellvalue)) {\n                        cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                      }\n                      currentDate = currentDate.addDays(1);\n                      var resourceName = that._resources[j] ? that._resources[j] : \"Resource\" + j;\n                      that.columns.push({\n                        minwidth: 30,\n                        columnGroup: resourceName,\n                        text: cellvalue,\n                        width: width\n                      });\n                    }\n                    break;\n                  case \"agendaView\":\n                    var dateColumnWidth = viewObject.dateColumnWidth;\n                    var timeColumnWidth = viewObject.timeColumnWidth;\n                    var appointmentColumnWidth = viewObject.appointmentColumnWidth;\n                    if (!appointmentColumnWidth) appointmentColumnWidth = \"70%\";\n                    if (!timeColumnWidth) timeColumnWidth = \"auto\";\n                    if (!dateColumnWidth) dateColumnWidth = \"auto\";\n                    that.columns.push({\n                      text: that.schedulerLocalization.agendaDateColumn,\n                      width: dateColumnWidth\n                    });\n                    that.columns.push({\n                      text: that.schedulerLocalization.agendaTimeColumn,\n                      width: timeColumnWidth\n                    });\n                    that.columns.push({\n                      text: that.schedulerLocalization.agendaAppointmentColumn,\n                      width: appointmentColumnWidth\n                    });\n                    break;\n                }\n              }\n              if (columnGroups.length > 0) {\n                this.columnGroups = columnGroups;\n              }\n              var that = this;\n              var _columns = new $.jqx.schedulerDataCollection(this.element);\n              var visibleindex = 0;\n              this._columns = this.columns;\n              var position = \"left\";\n              var column = new $.jqx.scheduler.column(that, this);\n              column.visibleindex = visibleindex++;\n              column.text = \"\";\n              column.width = that.timeRulerWidth;\n              column.editable = false;\n              column.timeColumn = true;\n              position = \"left\";\n              column.text = \"\";\n              column.hidden = false;\n              column.width = that.timeRulerWidth;\n              var gmtColumn = false;\n              if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                column._text = viewObject.timeRuler.text || \"\";\n                position = viewObject.timeRuler.position || \"left\";\n                column.hidden = viewObject.timeRuler.hidden || false;\n                column.width = viewObject.timeRuler.width || that.timeRulerWidth;\n                if (viewObject.timeRuler.timeZones) {\n                  gmtColumn = true;\n                }\n              } else if (view !== \"dayView\" && view !== \"weekView\") {\n                column.hidden = true;\n              }\n              var addTZColumn = function (index) {\n                var column = new $.jqx.scheduler.column(that, that);\n                column.visibleindex = visibleindex++;\n                column.text = \"\";\n                column.width = that.timeRulerWidth;\n                column.editable = false;\n                column.timeColumn = true;\n                position = \"left\";\n                column.text = \"\";\n                column.hidden = false;\n                column.timeZone = viewObject.timeRuler.timeZones[index].id;\n                column.width = that.timeRulerWidth;\n                if (viewObject.timeRuler && (view === \"dayView\" || view === \"weekView\")) {\n                  column._text = viewObject.timeRuler.timeZones[i].text || \"\";\n                  column.hidden = viewObject.timeRuler.hidden || false;\n                  column.width = viewObject.timeRuler.width || that.timeRulerWidth;\n                  _columns.add(column);\n                }\n              };\n              if (position === \"left\" && (view === \"dayView\" || view === \"weekView\")) {\n                if (viewObject.timeRuler && viewObject.timeRuler.timeZones) {\n                  for (var i = 0; i < viewObject.timeRuler.timeZones.length; i++) {\n                    addTZColumn(i);\n                  }\n                }\n                _columns.add(column);\n              }\n              if (position === \"left\" && view === \"monthView\" && viewObject.showWeekNumbers) {\n                column.hidden = false;\n                _columns.add(column);\n              }\n              var keys = new Array();\n              $.each(this.columns, function (index) {\n                if (that.columns[index] != undefined) {\n                  var column = new $.jqx.scheduler.column(that, this);\n                  column.visibleindex = visibleindex++;\n                  _columns.add(column);\n                }\n              });\n              if (position === \"right\" && (view === \"dayView\" || view === \"weekView\")) {\n                if (viewObject.timeRuler) {\n                  for (var i = 0; i < viewObject.timeRuler.timeZones.length; i++) {\n                    addTZColumn(i);\n                  }\n                }\n                _columns.add(column);\n              }\n              if (position === \"right\" && view === \"monthView\" && viewObject.showWeekNumbers) {\n                column.hidden = false;\n                _columns.add(column);\n              }\n              if (this.rtl) {\n                _columns.records.reverse();\n              }\n              this.columns = _columns;\n            },\n            _getColumnsLengthPerView: function () {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var columnsLengthPerView = 1;\n              switch (view) {\n                case \"dayView\":\n                  columnsLengthPerView = 1;\n                  break;\n                case \"weekView\":\n                  if (viewObject.showWeekends !== false) {\n                    columnsLengthPerView = 7;\n                  } else {\n                    columnsLengthPerView = 5;\n                  }\n                  break;\n                case \"monthView\":\n                  if (viewObject.showWeekends !== false) {\n                    columnsLengthPerView = 7;\n                  } else {\n                    columnsLengthPerView = 5;\n                  }\n                  break;\n                case \"timelineDayView\":\n                case \"timelineWeekView\":\n                case \"timelineMonthView\":\n                  columnsLengthPerView = this.columns.records.length;\n                  break;\n                case \"agendaView\":\n                  columnsLengthPerView = this.columns.records.length;\n                  break;\n              }\n              return columnsLengthPerView;\n            },\n            escapeHTML: function (value) {\n              var entityMap = {\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                '\"': '&quot;',\n                '\\'': '&#39;',\n                '/': '&#x2F;',\n                '`': '&#x60;',\n                '=': '&#x3D;'\n              };\n              return String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n                return entityMap[s];\n              });\n            },\n            sanitizeHTML: function (value) {\n              var that = this;\n              var regExp = new RegExp('<\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)[^>]*>(.*?)<\\s*/\\s*(applet|audio|base|bgsound|embed|form|iframe|isindex|keygen|layout|link|meta|object|script|svg|style|template|video)>', 'ig');\n              var result = String(value).replace(regExp, function (s) {\n                return that.escapeHTML(s);\n              });\n              return result;\n            },\n            escape_HTML: function (html_str) {\n              if (html_str && (html_str.indexOf('onclick') >= 0 || html_str.indexOf('onload') >= 0 || html_str.indexOf('onerror') >= 0)) {\n                return this.escapeHTML(html_str);\n              }\n              var sanitized = this.sanitizeHTML(html_str);\n              return sanitized;\n            },\n            _renderagenda: function () {\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var viewStart = that.getViewStart();\n              var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd().addDays(-1));\n              that._prepareAppointmentsInView(viewStart, viewEnd);\n              var pageSize = that.appointmentsToRender.length;\n              var dates = new Array();\n              var totalrows = 0;\n              for (var i = 0; i < that.appointmentsToRender.length; i++) {\n                var ownerAppointment = that.appointmentsToRender[i];\n                var date = ownerAppointment.from.clearTime();\n                while (date < $.jqx.scheduler.utilities.getEndOfDay(ownerAppointment.to)) {\n                  var dateMidnightString = date.toString();\n                  if (!dates[dateMidnightString]) {\n                    dates[dateMidnightString] = {\n                      date: date,\n                      appointments: new Array()\n                    };\n                    dates[dateMidnightString].appointments.push(ownerAppointment);\n                    dates[dates.length] = dates[dateMidnightString];\n                    totalrows++;\n                  } else {\n                    dates[dateMidnightString].appointments.push(ownerAppointment);\n                    totalrows++;\n                  }\n                  date = date.addDays(1).clearTime();\n                }\n              }\n              var start = 0;\n              var tablewidth = 0;\n              that.rows = new Array();\n              var isIE7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n              var firstIndex = 0;\n              var widthOffset = 0;\n              var rtlTableClassName = that.rtl ? \" \" + that.toTP('jqx-grid-table-rtl') : \"\";\n              var emptyWidth = 0;\n              var tableHTML = \"<table cellspacing='0' cellpadding='0' class='\" + that.toTP('jqx-grid-table') + rtlTableClassName + \"' id='table\" + that.element.id + \"'><colgroup>\";\n              var columnslength = that.columns.records.length;\n              for (var j = 0; j < columnslength; j++) {\n                var columnrecord = that.columns.records[j];\n                if (columnrecord.hidden) {\n                  firstIndex++;\n                  //  nonHiddenColumns--;\n                  continue;\n                }\n                var width = columnrecord.width;\n                if (width < columnrecord.minwidth) width = columnrecord.minwidth;\n                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;\n                width -= widthOffset;\n                if (width < 0) {\n                  width = 0;\n                }\n                if (isIE7) {\n                  var w = width;\n                  if (j == firstIndex) w++;\n                  tableHTML += \"<col style='max-width: \" + w + \"px; width: \" + w + \"px;'>\";\n                } else {\n                  tableHTML += \"<col style='max-width: \" + width + \"px; width: \" + width + \"px;'>\";\n                }\n                emptyWidth += width;\n              }\n              tableHTML += \"</colgroup>\";\n              if (pageSize == 0) {\n                var tablerow = '<tr role=\"row\">';\n                var height = this.host.height();\n                var headerHeight = 0;\n                if (!that.columnGroups) {\n                  headerHeight += that.showHeader ? that.columnsHeight : 0;\n                } else {\n                  headerHeight += that.showHeader ? that.columnsheader.height() : 0;\n                }\n                if (that.showToolbar) {\n                  headerHeight += that.toolbarHeight;\n                }\n                if (that.showLegend && that._resources.length > 0) {\n                  headerHeight += that.legendHeight;\n                }\n                height -= headerHeight;\n                var tablecolumn = '<td data-date=\"' + viewStart.toString() + '\" colspan=\"' + this.columns.records.length + '\" role=\"gridcell\" style=\"border: none; min-height: ' + height + 'px; height: ' + height + 'px; max-width:' + emptyWidth + 'px; width:' + emptyWidth + 'px;';\n                var cellclass = this.toTP('jqx-cell') + \" \" + this.toTP('jqx-grid-cell') + \" \" + this.toTP('jqx-item');\n                cellclass += ' ' + this.toTP('jqx-center-align');\n                tablecolumn += '\" class=\"' + cellclass + '\">';\n                tablecolumn += this.schedulerLocalization.emptyDataString;\n                tablecolumn += '</td>';\n                tablerow += tablecolumn;\n                tablerow += \"</tr>\";\n                tableHTML += tablerow;\n                this.table[0].style.width = emptyWidth + 2 + 'px';\n                tablewidth = emptyWidth;\n              }\n              var rowHeight = that.rowsHeight;\n              if (that.isTouchDevice()) {\n                rowHeight = that.touchRowsHeight;\n              }\n              for (var i = 0; i < dates.length; i++) {\n                var key = i;\n                var date = dates[i];\n                for (var r = 0; r < date.appointments.length; r++) {\n                  var left = 0;\n                  var tablerow = '<tr data-key=\"' + key + '\" role=\"row\">';\n                  start = 0;\n                  var appointment = date.appointments[r];\n                  for (var j = 0; j < columnslength; j++) {\n                    var column = that.columns.records[j];\n                    var columnIndex = j;\n                    if (that.rtl) {\n                      columnIndex = columnslength - 1 - j;\n                    }\n                    var width = column.width;\n                    if (width < column.minwidth) width = column.minwidth;\n                    if (width > column.maxwidth) width = column.maxwidth;\n                    width -= widthOffset;\n                    if (width < 0) {\n                      width = 0;\n                    }\n                    var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                    if (that.rtl) {\n                      cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                    }\n                    var colspan = \"\";\n                    var key = that.dataview.generatekey();\n                    var currentView = -1;\n                    var currentDate = date.date;\n                    var height = rowHeight + \"px\";\n                    var tablecolumn = '<td data-key=\"' + key + '\" data-view=\"' + currentView + '\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px; height: ' + height + '; min-height: ' + rowHeight + 'px;';\n                    if (columnIndex == 0 && r == 0) {\n                      var rowspan = date.appointments.length;\n                      var tablecolumn = '<td rowspan=\"' + rowspan + '\" data-key=\"' + key + '\" data-view=\"' + currentView + '\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px;  min-height: ' + rowHeight + 'px;';\n                      cellclass += ' ' + that.toTP('jqx-center-align');\n                    } else if (columnIndex == 0) {\n                      start++;\n                      continue;\n                    }\n                    if (that.rtl && columnIndex == 1) {\n                      cellclass += ' ' + that.toTP('jqx-right-align');\n                    }\n                    if (!column.hidden) {\n                      left += widthOffset + width;\n                      if (start == 0 && !that.rtl) {\n                        tablecolumn += 'border-left-width: 0px;';\n                      } else {\n                        tablecolumn += 'border-left-width: 1px;';\n                      }\n                      start++;\n                    } else {\n                      tablecolumn += 'display: none;';\n                      that._hiddencolumns = true;\n                    }\n                    tablecolumn += '\" class=\"' + cellclass + '\">';\n                    var cellvalue = \"\";\n                    if (columnIndex == 0 && r == 0) {\n                      var dayName = currentDate.toString(\"dddd\", that.schedulerLocalization);\n                      var monthYearName = currentDate.toString(\"MMMM, yyyy\", that.schedulerLocalization);\n                      var className = that.toTP(\"jqx-scheduler-agenda-date\");\n                      var className2 = that.toTP(\"jqx-scheduler-agenda-day\");\n                      var className3 = that.toTP(\"jqx-scheduler-agenda-week\");\n                      cellvalue = '<div class=\"' + className + '\"><strong class=\"' + className2 + '\">' + currentDate.day() + '</strong><br/><em class=\"' + className3 + '\">' + dayName + '</em><br/><span class=\"' + className + '\">' + monthYearName + '</span></div>';\n                    }\n                    if (columnIndex == 1) {\n                      var format = \"auto\";\n                      var viewObject = this._views[this._view];\n                      var from = appointment.from;\n                      var to = appointment.to;\n                      if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                        format = viewObject.timeRuler.formatString;\n                      }\n                      var fromFormat = format;\n                      var toFormat = format;\n                      if (format === \"auto\") {\n                        if (from.hour() == 0 && from.minute() == 0 || from.hour() == 12 && from.minute() == 0) {\n                          var fromFormat = \"hh tt\";\n                        } else var fromFormat = \"hh:mm\";\n                        if (to.hour() == 0 && to.minute() == 0 || to.hour() == 12 && to.minute() == 0) {\n                          var toFormat = \"hh tt\";\n                        } else var toFormat = \"hh:mm\";\n                      }\n                      var className = that.toTP(\"jqx-scheduler-agenda-time\");\n                      if (appointment.allDay) {\n                        cellvalue = \"<span class='\" + className + \"'>\" + that.schedulerLocalization.agendaAllDayString + \"</span>\";\n                      } else {\n                        if (!that.rtl) {\n                          cellvalue = \"<span class='\" + className + \"'>\" + from.toString(fromFormat, that.schedulerLocalization) + \" - \" + to.toString(toFormat, that.schedulerLocalization) + \"</span>\";\n                        } else {\n                          cellvalue = \"<span class='\" + className + \"'>\" + to.toString(toFormat, that.schedulerLocalization) + \" - \" + from.toString(fromFormat, that.schedulerLocalization) + \"</span>\";\n                        }\n                      }\n                    } else if (columnIndex == 2) {\n                      if (appointment.resourceId) {\n                        $.each(that._resources, function (index, value) {\n                          if (appointment.resourceId == value) {\n                            var colors = that.getColors(index);\n                            var label = this.toString();\n                            var className = that.toTP(\"jqx-scheduler-agenda-appointment-resource jqx-scheduler-legend\");\n                            if (that.rtl) {\n                              var className = that.toTP(\"jqx-scheduler-agenda-appointment-resource-rtl jqx-scheduler-legend\");\n                            }\n                            var element = \"<div data-key='\" + appointment.id + \"' class='\" + className + \"' style='margin-right: 5px; border-color: \" + colors.border + \"; background: \" + colors.background + \";' class='\" + that.toThemeProperty('jqx-scheduler-legend') + \"'></div>\";\n                            cellvalue = element;\n                          }\n                        });\n                      }\n                      var title = appointment.subject ? appointment.subject : \"(No Title)\";\n                      var location = appointment.location;\n                      var description = appointment.description;\n                      var status = appointment.status ? that.schedulerLocalization.editDialogStatuses[appointment.status] : \"\";\n                      var isRecurrent = appointment.isRecurrentAppointment();\n                      var isException = appointment.isException();\n                      var tooltip = \"\" + that.schedulerLocalization.editDialogSubjectString + \": \" + title + \"\";\n                      if (location) {\n                        tooltip += \"\\n\" + that.schedulerLocalization.editDialogLocationString + \": \" + location + \"\";\n                      }\n                      if (description) {\n                        tooltip += \"\\n\" + that.schedulerLocalization.editDialogDescriptionString + \": \" + description + \"\";\n                      }\n                      if (status) {\n                        tooltip += \"\\n\" + that.schedulerLocalization.editDialogStatusString + \": \" + status + \"\";\n                      }\n                      if (isRecurrent) {\n                        tooltip += \"\\n\" + that.schedulerLocalization.editDialogRepeatString + \": \" + isRecurrent + \"\";\n                      }\n                      var className = that.toTP(\"jqx-scheduler-agenda-appointment jqx-scheduler-legend-label\");\n                      if (that.rtl) {\n                        var className = that.toTP(\"jqx-scheduler-agenda-appointment-rtl jqx-scheduler-legend-label\");\n                      }\n                      cellvalue += \"<span data-key='\" + appointment.id + \"' title='\" + that.escape_HTML(tooltip) + \"' class='\" + className + \"'>\" + that.escape_HTML(title) + \"</span>\";\n                    }\n                    tablecolumn += cellvalue;\n                    tablecolumn += '</td>';\n                    tablerow += tablecolumn;\n                  }\n                  if (tablewidth == 0) {\n                    that.table[0].style.width = left + 2 + 'px';\n                    that.pinnedtable[0].style.width = left + 2 + 'px';\n                    tablewidth = left;\n                  }\n                  tablerow += \"</tr>\";\n                  tableHTML += tablerow;\n                }\n              }\n              tableHTML += '</table>';\n              that.table.html(tableHTML);\n              that.pinnedtable.html(tableHTML);\n              that.pinnedtable[0].style.display = \"none\";\n              var t = $(that.table[0].firstChild);\n              var t2 = $(that.pinnedtable[0].firstChild);\n              that._table = t;\n              that._pinnedtable = t2;\n              if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                that._table[0].style.width = tablewidth + 'px';\n                that._pinnedtable[0].style.width = tablewidth + 'px';\n              }\n              if (pageSize === 0) {\n                that._table[0].style.width = 2 + tablewidth + 'px';\n                that._pinnedtable[0].style.width = 2 + tablewidth + 'px';\n                that._pinnedtable[0].style.display = \"none\";\n              }\n              that._pinnedtable[0].style.display = \"none\";\n              that._table.addClass('jqx-grid-table-one-cell jqx-disableselect');\n              that.table[0].rows = that.table[0].firstChild.rows;\n              that.rowByCell = new Array();\n              that.columnCells = new Array();\n              function createRow() {\n                var obj = {};\n                obj.cells = new Array();\n                obj.indexOf = function (cell) {\n                  for (var i = 0; i < obj.cells.length; i++) {\n                    if (obj.cells[i].getAttribute('data-key') == cell.getAttribute('data-key')) return i;\n                  }\n                  return -1;\n                };\n                return obj;\n              }\n              that.cellWidth = 0;\n              that.cellHeight = 0;\n              var rowsLength = that.table[0].rows.length;\n              for (var i = 0; i < rowsLength; i++) {\n                var tableRow = that.table[0].rows[i];\n                if (tableRow.getAttribute('data-group-row')) continue;\n                var row = new createRow();\n                row.aboveRow = null;\n                row.belowRow = null;\n                if (that.rows.length > 0) {\n                  row.aboveRow = that.rows[that.rows.length - 1];\n                  that.rows[that.rows.length - 1].belowRow = row;\n                }\n                row.element = tableRow;\n                that.rows.push(row);\n                var addedCell = false;\n                for (var j = 0; j < tableRow.cells.length; j++) {\n                  if (tableRow.cells.length < that.columns.records.length && !addedCell) {\n                    var x = i;\n                    while (x >= 0) {\n                      var prevRow = that.table[0].rows[x];\n                      if (that.table[0].rows[x].cells.length == that.columns.records.length) {\n                        var cell = prevRow.cells[0];\n                        if (!that.columnCells[row.cells.length]) that.columnCells[row.cells.length] = new Array();\n                        that.columnCells[row.cells.length].push(cell);\n                        if (that.cellWidth == 0) {\n                          that.cellWidth = cell.clientWidth;\n                        }\n                        if (that.cellHeight == 0 && (rowsLength == 1 || i > 1)) {\n                          that.cellHeight = cell.clientHeight;\n                        }\n                        row.cells.push(cell);\n                        addedCell = true;\n                        break;\n                      }\n                      x--;\n                    }\n                  }\n                  var cell = tableRow.cells[j];\n                  if (cell.style.display === \"none\") continue;\n                  if (cell.className.indexOf('jqx-grid-cell-pinned') >= 0) continue;\n                  if (!that.columnCells[row.cells.length]) that.columnCells[row.cells.length] = new Array();\n                  that.columnCells[row.cells.length].push(cell);\n                  if (that.cellWidth == 0) {\n                    that.cellWidth = cell.clientWidth;\n                  }\n                  if (that.cellHeight == 0 && (rowsLength == 1 || i > 1)) {\n                    that.cellHeight = cell.clientHeight;\n                  }\n                  row.cells.push(cell);\n                  that.rowByCell[cell.getAttribute('data-key')] = row;\n                }\n              }\n              if (pageSize === 0) {\n                that._table[0].style.tableLayout = \"auto\";\n              }\n              that._updateScrollbars(that.host.height());\n              that._arrange();\n              if (that.rendered) {\n                that.rendered();\n              }\n              that.renderedTime = new Date();\n            },\n            _renderrows: function () {\n              var that = this;\n              if (that._loading) return;\n              if (that._updating || that._appupdating) {\n                return;\n              }\n              if (that.rendering) {\n                that.rendering();\n              }\n              var that = this;\n              var view = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              if (view == \"agendaView\") {\n                that._renderagenda();\n                return;\n              }\n              var allDayRowsCount = 1;\n              var viewStart = that.getViewStart();\n              var viewEnd = $.jqx.scheduler.utilities.getEndOfDay(that.getViewEnd());\n              that._prepareAppointmentsInView(viewStart, viewEnd);\n              var monthRowHeights = new Array();\n              if (view === \"weekView\" || view === \"dayView\") {\n                var allDayRowsCount = that.getMaxAllDayAppointments(that.appointmentsToRender);\n              } else if (view === \"monthView\" && viewObject.monthRowAutoHeight && that.rows && that.rows.length == 6) {\n                monthRowHeights = that._getMonthAppointmentsPerWeek();\n              }\n              var resourcesCount = that.tableRows > 1 ? that.tableRows : 0;\n              var scale = \"halfHour\";\n              var rowHeight = null;\n              var allDayRowHeight;\n              if (viewObject.rowHeight) {\n                rowHeight = viewObject.rowHeight;\n              }\n              if (viewObject && viewObject.allDayRowHeight) {\n                allDayRowHeight = viewObject.allDayRowHeight;\n              }\n              if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                scale = viewObject.timeRuler.scale;\n              }\n              var tablewidth = 0;\n              that.table[0].rows = new Array();\n              that.rows = new Array();\n              var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-widget-content');\n              if (that.rtl) {\n                cellclass += \" \" + that.toTP('jqx-cell-rtl');\n              }\n              var columnslength = that.columns.records.length;\n              var columnsLengthPerView = that._getColumnsLengthPerView();\n              var isIE7 = $.jqx.browser.msie && $.jqx.browser.version < 8;\n              if (isIE7) {\n                that.host.attr(\"hideFocus\", \"true\");\n              }\n              that._lastSelectedCell = null;\n              that.focusedCell = null;\n              var records = new Array();\n              var filterRecords = that.source.records;\n              filterRecords = that.dataview.evaluate(filterRecords);\n              that.dataViewRecords = filterRecords;\n              that.cells = new Array();\n              var records = that.dataViewRecords;\n              that.renderedRecords = that.getRows();\n              var zindex = that.tableZIndex;\n              var pageSize = that.getRows().length;\n              var widthOffset = 0;\n              var emptyWidth = 0;\n              if (isIE7) {\n                for (var j = 0; j < columnslength; j++) {\n                  var columnrecord = that.columns.records[j];\n                  var width = columnrecord.width;\n                  if (width < columnrecord.minwidth) width = columnrecord.minwidth;\n                  if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;\n                  var tablecolumn = $('<table><tr><td role=\"gridcell\" style=\"max-width: ' + width + 'px; width:' + width + 'px;\" class=\"' + cellclass + '\"></td></tr></table>');\n                  $(document.body).append(tablecolumn);\n                  var td = tablecolumn.find('td');\n                  widthOffset = 1 + parseInt(td.css('padding-left')) + parseInt(td.css('padding-right'));\n                  tablecolumn.remove();\n                  break;\n                }\n              }\n              var rtlTableClassName = that.rtl ? \" \" + that.toTP('jqx-grid-table-rtl') : \"\";\n              var tableHTML = \"<table cellspacing='0' cellpadding='0' class='\" + that.toTP('jqx-grid-table') + rtlTableClassName + \"' id='table\" + that.element.id + \"'><colgroup>\";\n              var firstIndex = 0;\n              var nonHiddenColumns = columnslength;\n              var pow = 2;\n              var minutes = 30;\n              switch (scale) {\n                case 'sixtyMinutes':\n                case 'hour':\n                  minutes = 60;\n                  pow = 1;\n                  break;\n                case 'thirtyMinutes':\n                case 'halfHour':\n                  minutes = 30;\n                  pow = 2;\n                  break;\n                case 'fifteenMinutes':\n                case 'quarterHour':\n                  minutes = 15;\n                  pow = 4;\n                  break;\n                case 'tenMinutes':\n                  minutes = 10;\n                  pow = 6;\n                  break;\n                case 'fiveMinutes':\n                  minutes = 5;\n                  pow = 12;\n                  break;\n              }\n              var columnsPow = 1;\n              if (view === \"timelineDayView\" || view === \"timelineWeekView\") {\n                columnslength = pow * columnslength;\n                columnsPow = pow;\n                columnsLengthPerView = columnslength / that.tableColumns;\n              } else if (view === \"timelineMonthView\") {\n                columnsLengthPerView = columnslength / that.tableColumns;\n              } else if (view === \"monthView\") {\n                if (viewObject.showWeekNumbers) {\n                  columnsLengthPerView = (columnslength - that.tableColumns) / that.tableColumns;\n                } else {\n                  columnsLengthPerView = columnslength / that.tableColumns;\n                }\n              }\n              var getColumnByIndex = function (index) {\n                var columnrecord = that.columns.records[index];\n                if (columnrecord) return columnrecord;\n                while (index >= that.columns.records.length) {\n                  index -= that.columns.records.length;\n                }\n                var columnrecord = that.columns.records[index];\n                return columnrecord;\n              };\n              for (var j = 0; j < columnslength; j++) {\n                var columnrecord = getColumnByIndex(j);\n                if (columnrecord.hidden) {\n                  firstIndex++;\n                  nonHiddenColumns--;\n                  continue;\n                }\n                var width = columnrecord.width / columnsPow;\n                if (width < columnrecord.minwidth) width = columnrecord.minwidth / columnsPow;\n                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth / columnsPow;\n                width -= widthOffset;\n                if (width < 0) {\n                  width = 0;\n                }\n                if (view == \"monthView\" && that.rtl && columnrecord.timeColumn) {\n                  width++;\n                }\n                if (isIE7) {\n                  var w = width;\n                  if (j == firstIndex) w++;\n                  tableHTML += \"<col style='max-width: \" + w + \"px; width: \" + w + \"px;'>\";\n                } else {\n                  tableHTML += \"<col style='max-width: \" + width + \"px; width: \" + width + \"px;'>\";\n                }\n                emptyWidth += width;\n              }\n              tableHTML += \"</colgroup>\";\n              that._hiddencolumns = false;\n              if (pageSize === 0) {\n                var tablerow = '<tr role=\"row\">';\n                var height = that.host.height();\n                if (that.pageable) {\n                  height -= that.pagerHeight;\n                  if (that.pagerPosition === \"both\") {\n                    height -= that.pagerHeight;\n                  }\n                }\n                height -= that.columnsHeight;\n                if (that.showLegend && that._resources.length > 0) {\n                  height -= that.legendHeight;\n                }\n                if (height < 25) {\n                  height = 25;\n                }\n                if (that.hScrollBar[0].style.visibility != \"hidden\") {\n                  height -= that.hScrollBar.outerHeight();\n                }\n                if (that.height === \"auto\" || that.height === null || that.autoheight) {\n                  height = 300;\n                }\n                var tablecolumn = '<td colspan=\"' + that.columns.records.length + '\" role=\"gridcell\" style=\"border: none; min-height: ' + height + 'px; height: ' + height + 'px; max-width:' + emptyWidth + 'px; width:' + emptyWidth + 'px;';\n                var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                if (that.rtl) {\n                  cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                }\n                cellclass += ' ' + that.toTP('jqx-center-align');\n                tablecolumn += '\" class=\"' + cellclass + '\">';\n                tablecolumn += that.schedulerLocalization.emptyDataString;\n                tablecolumn += '</td>';\n                tablerow += tablecolumn;\n                tableHTML += tablerow;\n                that.table[0].style.width = emptyWidth + 2 + 'px';\n                tablewidth = emptyWidth;\n              }\n              var tableRows = that.getRows();\n              var viewStart = that.getViewStart();\n              var height = that._hostHeight ? that._hostHeight : that.host.height();\n              var headerHeight = 0;\n              if (!that.columnGroups) {\n                headerHeight += that.showHeader ? that.columnsHeight : 0;\n              } else {\n                headerHeight += that.showHeader ? that.columnsheader.height() : 0;\n              }\n              if (that.showToolbar) {\n                headerHeight += that.toolbarHeight;\n              }\n              if (that.showLegend && that._resources.length > 0) {\n                headerHeight += that.legendHeight;\n              }\n              var showAllDayRow = that.showAllDayRow;\n              var resourcesHeight = 23;\n              if (viewObject.resourceHeaderRowHeight) {\n                resourcesHeight = viewObject.resourcesRowHeight;\n              }\n              resourcesHeight += 2;\n              if (viewObject.showAllDayRow != undefined) {\n                showAllDayRow = viewObject.showAllDayRow;\n              }\n              var hscroll = that._columnswidth > that._hostWidth;\n              var scrollSize = hscroll ? 3 + that.scrollBarSize : 0;\n              var resourcesInView = that.tableRows > 1 ? that.resources.unitsInView : 1;\n              if (resourcesInView == undefined) resourcesInView = that._resources.length;\n              if (that.resources && that.resources.resourceRowHeight) {\n                rowHeight = that.resources.resourceRowHeight;\n              }\n              if (rowHeight == null || rowHeight == \"auto\") {\n                var defaultRowHeight = that.rowsHeight;\n                var threeDefaultRowHeight = 3 * defaultRowHeight;\n                if (that.isTouchDevice()) {\n                  defaultRowHeight = that.touchRowsHeight;\n                  var threeDefaultRowHeight = 22 + defaultRowHeight;\n                }\n                if (that.tableRows == 1) {\n                  rowHeight = height > 0 ? height - headerHeight : defaultRowHeight;\n                  if (that.columns.records.length > 10) {\n                    rowHeight = height > 0 ? height - that.scrollBarSize - 5 - headerHeight : defaultRowHeight;\n                  }\n                } else {\n                  rowHeight = height > 0 ? (height - headerHeight - resourcesHeight) / pageSize : defaultRowHeight;\n                  if (that.columns.records.length > 10) {\n                    rowHeight = height > 0 ? (height - that.scrollBarSize - 5 - headerHeight - resourcesInView * resourcesHeight) / (resourcesInView * pageSize) : defaultRowHeight;\n                  }\n                }\n                if (view === \"dayView\" || view === \"weekView\") {\n                  if (showAllDayRow) {\n                    if (allDayRowHeight == null || allDayRowHeight == \"auto\") {\n                      rowHeight = height > 0 ? (height - headerHeight) / (that.tableRows * pageSize) : threeDefaultRowHeight;\n                      allDayRowHeight = rowHeight;\n                    } else {\n                      rowHeight = height > 0 ? (height - headerHeight - allDayRowHeight - resourcesInView * resourcesHeight) / (resourcesInView * (pageSize - 1)) : defaultRowHeight;\n                    }\n                  }\n                } else if (view === \"monthView\") {\n                  if (that.hScrollBar[0].style.visibility == \"hidden\") {\n                    scrollSize = 0;\n                  }\n                  if (that.tableRows == 1) {\n                    rowHeight = height > 0 ? (height - headerHeight - scrollSize) / pageSize : defaultRowHeight;\n                  } else {\n                    rowHeight = height > 0 ? (height - headerHeight - resourcesHeight - scrollSize) / pageSize : defaultRowHeight;\n                  }\n                }\n                rowHeight = Math.max(defaultRowHeight, rowHeight);\n                if (!allDayRowHeight) allDayRowHeight = threeDefaultRowHeight;\n                allDayRowHeight = Math.max(threeDefaultRowHeight, allDayRowHeight);\n                that._allDayRowHeight = allDayRowHeight;\n                that._defaultRowHeight = defaultRowHeight;\n                allDayRowHeight = allDayRowsCount * (defaultRowHeight - 2);\n                allDayRowHeight = Math.max(threeDefaultRowHeight, 17 + allDayRowHeight);\n                that._allDayRowFullHeight = allDayRowHeight;\n                if (viewObject.allDayRowHeight) {\n                  that._allDayRowHeight = viewObject.allDayRowHeight;\n                  allDayRowHeight = allDayRowsCount * (viewObject.allDayRowHeight - 2);\n                  that._allDayRowFullHeight = allDayRowHeight;\n                }\n              }\n              var colors = new Array();\n              if (that.resources && that.resources.colorScheme) {\n                for (var scheme = 0; scheme < that.colorSchemes.length; scheme++) {\n                  if (that.colorSchemes[scheme].name == that.resources.colorScheme) {\n                    colors = that.colorSchemes[scheme].colors;\n                    break;\n                  }\n                }\n                while (that._resources.length > colors.length - 1) {\n                  var schemeIndex = parseInt(that.resources.colorScheme.substring(6));\n                  if (schemeIndex >= 27) schemeIndex = 0;\n                  colors = colors.concat(that.colorSchemes[schemeIndex].colors);\n                  schemeIndex++;\n                }\n              }\n              for (var viewIndex = 0; viewIndex < that.tableRows; viewIndex++) {\n                var hour = 0;\n                var startHour = 0;\n                var endHour = 23;\n                if (viewObject.timeRuler && viewObject.timeRuler.scaleStartHour != undefined) {\n                  var startHour = parseInt(viewObject.timeRuler.scaleStartHour);\n                }\n                if (viewObject.timeRuler && viewObject.timeRuler.scaleEndHour != undefined) {\n                  var endHour = parseInt(viewObject.timeRuler.scaleEndHour);\n                }\n                var date = viewStart;\n                if (false === viewObject.showWeekends) {\n                  if (date.dayOfWeek() == 0 || date.dayOfWeek() == 6) {\n                    date = date.addDays(1);\n                  }\n                }\n                var slotDates = new Array();\n                var rowStart = view != \"monthView\" && view != \"timelineDayView\" && view != \"timelineWeekView\" && view != \"timelineMonthView\" && showAllDayRow ? 1 : 0;\n                if (that.tableRows > 1) {\n                  var tablerow = '<tr data-group-row=\"true\" role=\"row\">';\n                  var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                  if (that.rtl) {\n                    cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                  }\n                  if (!isIE7) {\n                    cellclass += ' ' + that.toTP('jqx-grid-cell-pinned');\n                    colspan += ' colspan=\"' + columnslength + '\"';\n                    var w = 0;\n                    for (var t = 0; t < columnslength; t++) {\n                      var c = getColumnByIndex(t);\n                      var columnWidth = c.width / columnsPow;\n                      if (columnWidth < c.minwidth) width = c.minwidth / columnsPow;\n                      if (columnWidth > c.maxwidth) width = c.maxwidth / columnsPow;\n                      columnWidth -= widthOffset;\n                      if (columnWidth < 0) {\n                        columnWidth = 0;\n                      }\n                      if (!c.hidden) {\n                        w += columnWidth;\n                      }\n                    }\n                    width = w;\n                  } else {\n                    cellclass += ' ' + that.toTP('jqx-grid-cell-pinned');\n                  }\n                  var tablecolumn = '<td style=\"height:' + resourcesHeight + 'px;';\n                  if (j == columnslength - 1 && columnslength == 1 && !that.rtl) {\n                    tablecolumn += 'border-right-color: transparent;';\n                  }\n                  if (that._resources.length > 0 && that.resources.colorScheme && that.resources.orientation != \"none\") {\n                    var background = \"\";\n                    var border = \"\";\n                    var color = \"\";\n                    var getTextElementByColor = function (color) {\n                      var nThreshold = 105;\n                      var bgDelta = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\n                      var foreColor = 255 - bgDelta < nThreshold ? 'Black' : 'White';\n                      return foreColor;\n                    };\n                    background = colors[viewIndex];\n                    background = that.hexToRgba(colors[viewIndex], 0.7).toString();\n                    color = getTextElementByColor(that.hexToRgba(colors[viewIndex], 0.7));\n                    border = colors[viewIndex];\n                    tablecolumn += 'background: ' + background + ';';\n                    tablecolumn += 'border-color: ' + border + ';';\n                    tablecolumn += 'color: ' + color + ';';\n                  }\n                  tablecolumn += '\" class=\"' + cellclass + '\" role=\"gridcell\" ' + colspan + '';\n                  var resourcevalue = that._resources[viewIndex];\n                  tablecolumn += \">\" + \"<span style='position: relative;'>\" + resourcevalue + \"</span>\";\n                  tablecolumn += \"</td>\";\n                  tablerow += tablecolumn;\n                  tableHTML += tablerow;\n                }\n                for (var i = 0; i < pageSize; i++) {\n                  var row = {};\n                  var key = \"jqx\" + that.element.id + \"_\" + i;\n                  row.uid = key;\n                  var tablerow = '<tr data-key=\"' + key + '\" role=\"row\">';\n                  var left = 0;\n                  var start = 0;\n                  if (slotDates[0] && i > rowStart) {\n                    var minutes = 30;\n                    if (view != \"monthView\") {\n                      switch (scale) {\n                        case 'sixtyMinutes':\n                        case 'hour':\n                          minutes = 60;\n                          break;\n                        case 'thirtyMinutes':\n                        case 'halfHour':\n                          minutes = 30;\n                          break;\n                        case 'fifteenMinutes':\n                        case 'quarterHour':\n                          minutes = 15;\n                          break;\n                        case 'tenMinutes':\n                          minutes = 10;\n                          break;\n                        case 'fiveMinutes':\n                          minutes = 5;\n                          break;\n                      }\n                      for (var q = 0; q < columnslength; q++) {\n                        slotDates[q] = slotDates[q].addMinutes(minutes, false);\n                      }\n                    } else {\n                      for (var q = 0; q < columnslength; q++) {\n                        slotDates[q] = slotDates[q].addDays(7, false);\n                      }\n                    }\n                  }\n                  var currentColumn = 0;\n                  var resourceIndex = 1;\n                  var minuteSlotCount = 0;\n                  if (viewObject.showWeekends || viewObject.showWeekends == undefined) {\n                    minuteSlotCount = that.columns.records.length / (7 * that.tableColumns);\n                    minuteSlotCount *= pow;\n                  } else {\n                    minuteSlotCount = that.columns.records.length / (5 * that.tableColumns);\n                    minuteSlotCount *= pow;\n                  }\n                  var currentMinuteSlotCount = 0;\n                  if (that.rtl) currentMinuteSlotCount = 1;\n                  var daysSlotCount = 0;\n                  for (var j = 0; j < columnslength; j++) {\n                    var column = getColumnByIndex(j);\n                    if (currentColumn >= columnsLengthPerView) {\n                      currentColumn = 0;\n                      daysSlotCount = 0;\n                      currentMinuteSlotCount = 0;\n                      if (that.rtl) currentMinuteSlotCount = 1;\n                      resourceIndex++;\n                    }\n                    if (!slotDates[j]) {\n                      if (!that.rtl) {\n                        if (view.toString().indexOf(\"timelineDayView\") >= 0) {\n                          var minutesPow = j;\n                          slotDates[j] = date.addHours(startHour).addMinutes(minutesPow * minutes, false);\n                        } else if (view.toString().indexOf(\"timelineWeekView\") >= 0) {\n                          slotDates[j] = date.addDays(daysSlotCount).addHours(startHour, false).addMinutes(currentMinuteSlotCount * minutes, false);\n                        } else {\n                          slotDates[j] = date.addDays(currentColumn).addHours(startHour, false);\n                        }\n                        if (that.timeZone) {\n                          slotDates[j].timeZone = that.timeZone;\n                        }\n                      } else {\n                        if (view.toString().indexOf(\"timelineDayView\") >= 0) {\n                          var minutesPow = 1 + j;\n                          slotDates[j] = date.addHours(1 + endHour).addMinutes(-minutesPow * minutes, false);\n                        } else if (view.toString().indexOf(\"timelineWeekView\") >= 0) {\n                          if (viewObject.showWeekends || viewObject.showWeekends == undefined) {\n                            slotDates[j] = date.addDays(6 - daysSlotCount).addHours(1 + endHour, false).addMinutes(-currentMinuteSlotCount * minutes, false);\n                          } else {\n                            slotDates[j] = date.addDays(4 - daysSlotCount).addHours(1 + endHour, false).addMinutes(-currentMinuteSlotCount * minutes, false);\n                          }\n                        } else if (view == \"dayView\" || view == \"monthView\" || view == \"weekView\") {\n                          if (viewObject.showWeekends || viewObject.showWeekends == undefined) {\n                            slotDates[j] = date.addDays(6 - currentColumn).addHours(startHour, false);\n                          } else {\n                            slotDates[j] = date.addDays(4 - currentColumn).addHours(startHour, false);\n                          }\n                        } else {\n                          slotDates[j] = date.addDays(columnsLengthPerView - currentColumn - 1).addHours(startHour, false);\n                        }\n                        if (that.timeZone) {\n                          slotDates[j].timeZone = that.timeZone;\n                        }\n                      }\n                    }\n                    currentMinuteSlotCount++;\n                    if (currentMinuteSlotCount >= minuteSlotCount) {\n                      currentMinuteSlotCount = 0;\n                      daysSlotCount++;\n                    }\n                    if (!column.timeColumn && (view === \"dayView\" || view === \"weekView\")) {\n                      currentColumn++;\n                    } else if (!column.timeColumn && view === \"monthView\" && viewObject.showWeekNumbers) {\n                      currentColumn++;\n                    } else if (view === \"monthView\" && !viewObject.showWeekNumbers || view === \"timelineMonthView\") {\n                      currentColumn++;\n                    } else if (view == \"timelineDayView\" || view == \"timelineWeekView\") {\n                      currentColumn++;\n                    }\n                    var currentDate = slotDates[j];\n                    var width = column.width / columnsPow;\n                    if (width < column.minwidth) width = column.minwidth / columnsPow;\n                    if (width > column.maxwidth) width = column.maxwidth / columnsPow;\n                    width -= widthOffset;\n                    if (width < 0) {\n                      width = 0;\n                    }\n                    var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                    if (column.pinned) {\n                      cellclass += ' ' + that.toTP('jqx-grid-cell-pinned');\n                    }\n                    if (that.sortcolumn === column.displayfield) {\n                      cellclass += ' ' + that.toTP('jqx-grid-cell-sort');\n                    }\n                    if (that.altRows && i % 2 != 0) {\n                      cellclass += ' ' + that.toTP('jqx-grid-cell-alt');\n                    }\n                    if (i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\")) {\n                      cellclass += ' ' + that.toTP('jqx-grid-cell-alt');\n                    }\n                    if (currentDate > that.max || currentDate < that.min) {\n                      cellclass += ' ' + that.toTP('jqx-scheduler-disabled-cell');\n                    }\n                    if (that.rtl) {\n                      cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                    }\n                    var colspan = \"\";\n                    var key = that.dataview.generatekey();\n                    var currentView = viewIndex + resourceIndex;\n                    if (that.resources && that.resources.orientation == \"none\") {\n                      currentView = -1;\n                    }\n                    if (that._resources.length == 0) {\n                      currentView = -1;\n                    }\n                    var tablecolumn = '<td data-key=\"' + key + '\" data-view=\"' + currentView + '\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px;  height:' + rowHeight + 'px;';\n                    if (i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\")) {\n                      var tablecolumn = '<td  data-key=\"' + key + '\" data-view=\"' + currentView + '\" data-end-date=\"' + $.jqx.scheduler.utilities.getEndOfDay(currentDate).toString() + '\" data-date=\"' + currentDate.clearTime().toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px; height:' + allDayRowHeight + 'px;';\n                    }\n                    if (view == \"monthView\" && viewObject.monthRowAutoHeight && monthRowHeights.length > 0) {\n                      if (monthRowHeights[i] && monthRowHeights[i] != \"auto\") {\n                        if (rowHeight < monthRowHeights[i]) {\n                          var tablecolumn = '<td data-key=\"' + key + '\" data-view=\"' + currentView + '\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px;  height:' + monthRowHeights[i] + 'px;';\n                        }\n                      }\n                    }\n                    if (that.date.month() != currentDate.month() && view === \"monthView\" && !viewObject.showOtherMonthDays) {\n                      //         tablecolumn += 'visibility: hidden;'\n                    }\n                    if (that.resources && that._resources.length > 0 && that.resources.colorScheme && that.resources.orientation !== \"none\") {\n                      var background = \"\";\n                      var border = \"\";\n                      background = colors[viewIndex + resourceIndex - 1];\n                      if (!(i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\"))) {\n                        background = that.hexToRgba(colors[viewIndex + resourceIndex - 1], 0.3).toString();\n                      } else {\n                        background = that.shadeColor(colors[viewIndex + resourceIndex - 1], 0.3).toString();\n                      }\n                      if (!(i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\"))) {\n                        if (view.indexOf(\"month\") == -1) {\n                          if (!column.timeColumn) {\n                            if (viewObject.showWorkTime !== false) {\n                              var dayOfWeekStart = 1;\n                              var dayOfWeekEnd = 5;\n                              var hourStart = 8;\n                              var hourEnd = 18;\n                              if (viewObject.workTime) {\n                                var dayOfWeekStart = viewObject.workTime.fromDayOfWeek ? viewObject.workTime.fromDayOfWeek : 0;\n                                var dayOfWeekEnd = viewObject.workTime.toDayOfWeek ? viewObject.workTime.toDayOfWeek : 0;\n                                var hourStart = viewObject.workTime.fromHour !== undefined ? viewObject.workTime.fromHour : 8;\n                                var hourEnd = viewObject.workTime.toHour ? viewObject.workTime.toHour : 8;\n                              }\n                              if (currentDate.dayOfWeek() >= dayOfWeekStart && currentDate.dayOfWeek() <= dayOfWeekEnd) {\n                                if (currentDate.hour() >= hourStart && currentDate.hour() < hourEnd) {\n                                  background = that.hexToRgba(colors[viewIndex + resourceIndex - 1], 0.1).toString();\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                      border = colors[resourceIndex + viewIndex - 1];\n                      tablecolumn += 'background: ' + background + ';';\n                      tablecolumn += 'border-color: ' + border + ';';\n                    }\n                    if (j == columnslength - 1 && columnslength == 1 && !that.rtl) {\n                      tablecolumn += 'border-right-color: transparent;';\n                    }\n                    if (column.timeColumn && !column.hidden && view === \"monthView\") {\n                      var cellclass = that.toTP('jqx-scheduler-time-column') + \" \" + that.toTP('jqx-widget-header') + \" \" + that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                      cellclass += \" \" + that.toTP('jqx-scheduler-week-number-column');\n                      if (that.tableRows > 1) {\n                        var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                      }\n                      if (that.rtl) {\n                        cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                      }\n                      if (currentDate.minute() === 0) {\n                        var tablecolumn = '<td classname=\"jqx-disableselect\" data-time-slot=\"true\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" style=\"max-width:' + width + 'px; width:' + width + 'px;';\n                        if (j == columnslength - 1 && columnslength == 1 && !that.rtl) {\n                          tablecolumn += 'border-right-color: transparent;';\n                        } else if (that.rtl && j == 0) {\n                          tablecolumn += 'border-left-color: transparent;';\n                        }\n                        if (j == columnslength - 1 && that.rtl) {\n                          tablecolumn += 'border-right-color: transparent;';\n                        }\n                      } else {\n                        start++;\n                        continue;\n                      }\n                    }\n                    if (column.timeColumn && !column.hidden && (view === \"dayView\" || view === \"weekView\")) {\n                      var cellclass = that.toTP('jqx-scheduler-time-column') + \" \" + that.toTP('jqx-widget-header') + \" \" + that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                      if (that.tableRows > 1) {\n                        var cellclass = that.toTP('jqx-cell') + \" \" + that.toTP('jqx-grid-cell') + \" \" + that.toTP('jqx-item');\n                      }\n                      if (that.rtl) {\n                        cellclass += ' ' + that.toTP('jqx-cell-rtl');\n                      }\n                      if (i > 0) {\n                        if (currentDate.minute() === 0) {\n                          var tablecolumn = '<td classname=\"jqx-disableselect\" data-time-slot=\"true\" data-date=\"' + currentDate.toString() + '\" rowspan=' + pow + ' role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px;';\n                          if (j == columnslength - 1 && columnslength == 1 && !that.rtl) {\n                            tablecolumn += 'border-right-color: transparent;';\n                          } else if (that.rtl && j == 0) {\n                            tablecolumn += 'border-left-color: transparent;';\n                          }\n                        } else {\n                          start++;\n                          continue;\n                        }\n                      } else {\n                        if (that.resources && that.resources.orientation == \"none\") {\n                          currentView = -1;\n                        }\n                        if (i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\")) {\n                          var tablecolumn = '<td data-view=\"' + currentView + '\" data-time-slot=\"true\" data-end-date=\"' + $.jqx.scheduler.utilities.getEndOfDay(currentDate).toString() + '\" data-date=\"' + currentDate.toString() + '\" role=\"gridcell\" ' + colspan + ' style=\"max-width:' + width + 'px; width:' + width + 'px;';\n                        }\n                        if (j == columnslength - 1 && columnslength == 1 && !that.rtl) {\n                          tablecolumn += 'border-right-color: transparent;';\n                        } else if (j == 0 && columnslength == 1 && that.rtl) {\n                          tablecolumn += 'border-right-color: transparent;';\n                        }\n                        if (that.rtl) tablecolumn += 'border-left-width: 1px;';\n                        if (that.tableRows > 1) {\n                          tablecolumn += 'background: ' + background + ';';\n                          tablecolumn += 'border-color: ' + border + ';';\n                        }\n                      }\n                    } else if (i > 0) {\n                      var borderLeftWidth = 'border-left-width: 1px;';\n                      if (that.rtl && j == 0 && view == \"monthView\" && viewObject.showWeekNumbers) {\n                        borderLeftWidth = 'border-left-width: 0px;';\n                      }\n                      tablecolumn += borderLeftWidth;\n                    }\n                    if (column.cellsalign != \"left\") {\n                      if (column.cellsalign === \"right\") {\n                        cellclass += ' ' + that.toTP('jqx-right-align');\n                      } else {\n                        cellclass += ' ' + that.toTP('jqx-center-align');\n                      }\n                    }\n                    if (!column.timeColumn) {\n                      if (that.rowinfo[row.uid]) {\n                        if (that.rowinfo[row.uid].selected) {\n                          if (that.editKey !== row.uid) {\n                            if (that.selectionMode !== \"none\") {\n                              cellclass += ' ' + that.toTP('jqx-grid-cell-selected');\n                              cellclass += ' ' + that.toTP('jqx-fill-state-pressed');\n                              cellclass += ' ' + that.toTP('jqx-scheduler-cell-selected');\n                            }\n                          }\n                        }\n                      }\n                    }\n                    if (!column.hidden) {\n                      left += widthOffset + width;\n                      if (start == 0 && !that.rtl) {\n                        tablecolumn += 'border-left-width: 0px;';\n                      }\n                      start++;\n                    } else {\n                      tablecolumn += 'display: none;';\n                      that._hiddencolumns = true;\n                    }\n                    if (!(i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\"))) {\n                      if (view.indexOf(\"month\") == -1) {\n                        cellclass += ' ' + that.toTP('jqx-grid-cell-nowrap');\n                        if (i % 2 == 1 && !column.timeColumn) {\n                          cellclass += ' ' + that.toTP('jqx-scheduler-middle-cell');\n                        }\n                        if (!column.timeColumn) {\n                          if (viewObject.showWorkTime !== false) {\n                            var dayOfWeekStart = 1;\n                            var dayOfWeekEnd = 5;\n                            var hourStart = 8;\n                            var hourEnd = 18;\n                            if (viewObject.workTime) {\n                              var dayOfWeekStart = viewObject.workTime.fromDayOfWeek ? viewObject.workTime.fromDayOfWeek : 0;\n                              var dayOfWeekEnd = viewObject.workTime.toDayOfWeek ? viewObject.workTime.toDayOfWeek : 0;\n                              var hourStart = viewObject.workTime.fromHour !== undefined ? viewObject.workTime.fromHour : 8;\n                              var hourEnd = viewObject.workTime.toHour ? viewObject.workTime.toHour : 8;\n                            }\n                            if (currentDate.dayOfWeek() >= dayOfWeekStart && currentDate.dayOfWeek() <= dayOfWeekEnd) {\n                              if (currentDate.hour() >= hourStart && currentDate.hour() < hourEnd) {\n                                cellclass += ' ' + that.toTP('jqx-scheduler-work-time-cell');\n                              } else {\n                                cellclass += ' ' + that.toTP('jqx-scheduler-not-work-time-cell');\n                              }\n                            } else {\n                              cellclass += ' ' + that.toTP('jqx-scheduler-not-work-time-cell');\n                            }\n                          }\n                        }\n                      }\n                    }\n                    var cellvalue = \"\";\n                    if (view === \"monthView\") {\n                      if (!that.touchDevice && !column.timeColumn) {\n                        cellclass += ' ' + that.toTP('jqx-top-align');\n                      }\n                      if (currentDate.isToday()) {\n                        cellclass += ' ' + that.toTP('jqx-scheduler-month-day-today-cell');\n                      }\n                      var monthDayFormat = \"dd\";\n                      cellvalue = currentDate.toDate();\n                      var otherMonth = that.toTP(\"jqx-scheduler-month-outer-cell\") + \" \";\n                      var weekend = that.toTP(\"jqx-scheduler-month-weekend-cell\");\n                      if (that.date.month() == currentDate.month()) {\n                        otherMonth = \"\";\n                      }\n                      if (!currentDate.isWeekend()) {\n                        weekend = \"\";\n                      } else {\n                        cellclass += ' ' + weekend;\n                      }\n                      if (cellvalue.getDate() === 1) {\n                        monthDayFormat = \"MMM dd\";\n                      }\n                      if (that.touchDevice) {\n                        if (rowHeight > 16) {\n                          cellvalue = \"<div class='\" + otherMonth + that.toTP(\"jqx-scheduler-month-cell-touch\") + \"'>\" + $.jqx.dataFormat.formatdate(cellvalue, monthDayFormat, that.schedulerLocalization) + \"<span style='display: none; float: right; cursor: pointer; width:16px; height: 16px;' class='\" + that.toTP('jqx-icon-arrow-down') + \"'></span></div>\";\n                        } else {\n                          cellvalue = \"<div class='\" + otherMonth + that.toTP(\"jqx-scheduler-month-cell-touch\") + \"'>\" + $.jqx.dataFormat.formatdate(cellvalue, monthDayFormat, that.schedulerLocalization) + \"<span style='display: none; float: right; cursor: pointer;' class='\" + that.toTP('jqx-icon-arrow-down') + \"'></span></div>\";\n                        }\n                      } else {\n                        if (rowHeight > 16) {\n                          cellvalue = \"<div class='\" + otherMonth + that.toTP(\"jqx-scheduler-month-cell\") + \"'>\" + $.jqx.dataFormat.formatdate(cellvalue, monthDayFormat, that.schedulerLocalization) + \"<span style='display: none; float: right; cursor: pointer; width:16px; height: 16px;' class='\" + that.toTP('jqx-icon-arrow-down') + \"'></span></div>\";\n                        } else {\n                          cellvalue = \"<div class='\" + otherMonth + that.toTP(\"jqx-scheduler-month-cell\") + \"'>\" + $.jqx.dataFormat.formatdate(cellvalue, monthDayFormat, that.schedulerLocalization) + \"<span style='display: none; float: right; cursor: pointer;' class='\" + that.toTP('jqx-icon-arrow-down') + \"'></span></div>\";\n                        }\n                      }\n                    } else if (view === \"timelineWeekView\" || view === \"timelineDayView\" || view === \"timelineMonthView\") {\n                      cellclass += ' ' + that.toTP('jqx-right-align jqx-bottom-align');\n                      cellvalue = \"<span style='display: none; float: right; cursor: pointer; width:16px; height: 16px;' class='\" + that.toTP('jqx-icon-arrow-down') + \"'></span>\";\n                    }\n                    if (i == 0 && showAllDayRow && (view === \"dayView\" || view === \"weekView\") && !column.timeColumn) {\n                      cellclass += ' ' + that.toTP('jqx-top-align');\n                      cellclass += ' ' + that.toTP('jqx-scheduler-all-day-cell');\n                      if (that.rtl) {\n                        cellclass += ' ' + that.toTP('jqx-rtl');\n                      }\n                      cellvalue = currentDate.toDate();\n                      if (currentDate.isToday()) {\n                        cellclass += ' ' + that.toTP('jqx-scheduler-all-day-today-cell');\n                      }\n                      cellvalue = \"<span>\" + $.jqx.dataFormat.formatdate(cellvalue, \"dd\", that.schedulerLocalization) + \"</span>\";\n                    }\n                    var cellsFormat = column.cellsFormat;\n                    if (column.timeColumn && !column.hidden) {\n                      cellvalue = currentDate.toDate();\n                      if (column.timeZone) {\n                        cellvalue = currentDate.clone().toTimeZone(column.timeZone);\n                        cellvalue = cellvalue.toDate();\n                      }\n                      var format = \"auto\";\n                      if (currentDate.isToday()) {\n                        cellclass += ' ' + that.toTP('jqx-scheduler-time-today-column-header-cell');\n                      }\n                      if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                        cellsFormat = viewObject.timeRuler.formatString;\n                      } else if (!column.timeColumn.format) {\n                        if (cellvalue.getHours() == 0 || cellvalue.getHours() == 12) {\n                          cellsFormat = \"hh tt\";\n                        } else cellsFormat = \"hh:mm\";\n                      }\n                      if ($.jqx.dataFormat.isDate(cellvalue)) {\n                        cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                      }\n                      if (i < rowStart) {\n                        if (!that.rtl) {\n                          cellclass += ' ' + that.toTP('jqx-scheduler-time-column-header-cell');\n                        } else {\n                          cellclass += ' ' + that.toTP('jqx-scheduler-time-column-header-cell-rtl');\n                        }\n                        cellvalue = \"\";\n                      }\n                      if (i < rowStart) {\n                        if (column._text) {\n                          cellclass += ' ' + that.toTP('jqx-bottom-align');\n                        }\n                        if (viewObject.timeRuler && viewObject.timeRuler.timeZones && viewObject.timeRuler.timeZones.length > 0) {\n                          if (j < viewObject.timeRuler.timeZones.length) {\n                            cellvalue = column._text;\n                          }\n                        }\n                      }\n                      if (view == \"monthView\") {\n                        cellvalue = currentDate.weekOfYear(that.schedulerLocalization.firstDay);\n                      }\n                    } else {\n                      if (cellsFormat != '') {\n                        if ($.jqx.dataFormat) {\n                          if ($.jqx.dataFormat.isDate(cellvalue)) {\n                            cellvalue = $.jqx.dataFormat.formatdate(cellvalue, cellsFormat, that.schedulerLocalization);\n                          } else if ($.jqx.dataFormat.isNumber(cellvalue) || !isNaN(parseFloat(cellvalue)) && isFinite(cellvalue)) {\n                            cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, cellsFormat, that.schedulerLocalization);\n                          }\n                        }\n                      }\n                    }\n                    if (column.cellclassname != '' && column.cellclassname) {\n                      if (typeof column.cellclassname == \"string\") {\n                        cellclass += ' ' + column.cellclassname;\n                      } else {\n                        var customclassname = column.cellclassname(i, column.datafield, cellvalue, row);\n                        if (customclassname) {\n                          cellclass += ' ' + customclassname;\n                        }\n                      }\n                    }\n                    if (column.cellsRenderer != '' && column.cellsRenderer) {\n                      var rowIndex = tableRows.indexOf(row);\n                      cellvalue = column.cellsRenderer(rowIndex, column.datafield, cellvalue, row);\n                    }\n                    tablecolumn += '\" class=\"' + cellclass + '\">';\n                    tablecolumn += cellvalue;\n                    tablecolumn += '</td>';\n                    tablerow += tablecolumn;\n                  }\n                  if (tablewidth == 0) {\n                    that.table[0].style.width = left + 2 + 'px';\n                    that.pinnedtable[0].style.width = left + 2 + 'px';\n                    tablewidth = left;\n                  }\n                  tablerow += '</tr>';\n                  tableHTML += tablerow;\n                  if (!that.rowinfo[row.uid]) {\n                    that.rowinfo[row.uid] = {\n                      row: row\n                    };\n                  } else {\n                    if (!(\"row\" in that.rowinfo[row.uid])) {\n                      that.rowinfo[row.uid].row = row;\n                    }\n                  }\n                }\n              }\n              tableHTML += '</table>';\n              that.table.html(tableHTML);\n              that.pinnedtable.html(tableHTML);\n              that.table[0].rows = that.table[0].firstChild.rows;\n              var isOldIE = $.jqx.browser.msie && $.jqx.browser.version < 9;\n              var pinnedTableRow = null;\n              if (showAllDayRow && (view === \"dayView\" || view === \"weekView\") && that.tableRows == 1) {\n                that.pinnedtable[0].style.display = \"block\";\n                that.pinnedtable[0].style.zIndex = \"400\";\n                that.pinnedtable[0].style.position = \"absolute\";\n                that.pinnedtable[0].style.top = \"0px\";\n                that.pinnedtable[0].style.height = allDayRowHeight + \"px\";\n                if (!isOldIE) {\n                  if (that.tableRows == 1) {\n                    that.oldRow = that.table[0].rows[0];\n                    try {\n                      that.table[0].rows[0] = that.pinnedtable.find('tr')[0];\n                    } catch (error) {}\n                    pinnedTableRow = that.pinnedtable.find('tr')[0];\n                    that.pinnedTableRow = pinnedTableRow;\n                  } else {\n                    that.oldRow = that.table[0].rows[1];\n                    try {\n                      that.table[0].rows[1] = that.pinnedtable.find('tr')[1];\n                    } catch (error) {}\n                    pinnedTableRow = that.pinnedtable.find('tr')[1];\n                    that.pinnedTableRow = pinnedTableRow;\n                  }\n                }\n              } else {\n                that.pinnedtable[0].style.display = \"none\";\n              }\n              var t = $(that.table[0].firstChild);\n              var t2 = $(that.pinnedtable[0].firstChild);\n              that._table = t;\n              that._pinnedtable = t2;\n              if ($.jqx.browser.msie && $.jqx.browser.version < 10) {\n                that._table[0].style.width = tablewidth + 'px';\n                that._pinnedtable[0].style.width = tablewidth + 'px';\n              }\n              if (pageSize === 0) {\n                that._table[0].style.width = 2 + tablewidth + 'px';\n                that._pinnedtable[0].style.width = 2 + tablewidth + 'px';\n              }\n              that._table.addClass('jqx-grid-table-one-cell jqx-disableselect');\n              that._pinnedtable.addClass('jqx-grid-table-one-cell jqx-disableselect');\n              that.rowByCell = new Array();\n              that.columnCells = new Array();\n              function createRow() {\n                var obj = {};\n                obj.cells = new Array();\n                obj.indexOf = function (cell) {\n                  for (var i = 0; i < obj.cells.length; i++) {\n                    if (obj.cells[i].getAttribute('data-key') == cell.getAttribute('data-key')) return i;\n                  }\n                  return -1;\n                };\n                return obj;\n              }\n              that.cellWidth = 0;\n              that.cellHeight = 0;\n              var rowsLength = that.table[0].rows.length;\n              for (var i = 0; i < rowsLength; i++) {\n                var tableRow = that.table[0].rows[i];\n                if (i == 0 && pinnedTableRow) tableRow = pinnedTableRow;\n                if (tableRow.getAttribute('data-group-row')) continue;\n                var row = new createRow();\n                row.aboveRow = null;\n                row.belowRow = null;\n                if (that.rows.length > 0) {\n                  row.aboveRow = that.rows[that.rows.length - 1];\n                  that.rows[that.rows.length - 1].belowRow = row;\n                }\n                row.element = tableRow;\n                that.rows.push(row);\n                for (var j = 0; j < tableRow.cells.length; j++) {\n                  var cell = tableRow.cells[j];\n                  if (cell.getAttribute('data-time-slot')) {\n                    continue;\n                  }\n                  if (cell.style.display === \"none\") {\n                    continue;\n                  }\n                  if (cell.className.indexOf('jqx-grid-cell-pinned') >= 0) {\n                    continue;\n                  }\n                  if (!that.columnCells[row.cells.length]) that.columnCells[row.cells.length] = new Array();\n                  that.columnCells[row.cells.length].push(cell);\n                  if (that.cellWidth == 0) {\n                    that.cellWidth = cell.clientWidth;\n                  }\n                  if (that.cellHeight == 0 && (rowsLength == 1 || i > 1)) {\n                    that.cellHeight = cell.clientHeight;\n                  }\n                  if (that._views[that._view].type == \"monthView\") {\n                    if (row.top == undefined) {\n                      row.top = parseInt($(cell).position().top);\n                    }\n                  }\n                  row.cells.push(cell);\n                  that.rowByCell[cell.getAttribute('data-key')] = row;\n                }\n              }\n              if (pageSize === 0) {\n                that._table[0].style.tableLayout = \"auto\";\n              }\n              that._renderAppointments(viewStart, viewEnd);\n              if (that.pinnedtable[0].style.display != \"none\" || (view == \"dayView\" || view == \"weekView\") && that.tableRows > 1) {\n                that._updateScrollbars(that.host.height());\n              }\n              if (view === \"monthView\" && viewObject.monthRowAutoHeight) {\n                if (monthRowHeights.length == 0) {\n                  that._renderrows();\n                } else {\n                  that._updateScrollbars(that.host.height());\n                }\n              }\n              if (that.rendered) {\n                that.rendered();\n              }\n              that.renderedTime = new Date();\n            },\n            showAppointmentsByResource: function (resource) {\n              var that = this;\n              for (var i = 0; i < that.uiappointments.length; i++) {\n                var app = that.uiappointments[i];\n                if (app.resourceId == resource) {\n                  app.hidden = false;\n                  app.hiddenByResourceId = false;\n                  if (app.exceptions) {\n                    for (var j = 0; j < app.exceptions.length; j++) {\n                      app.exceptions[j].hiddenByResourceId = false;\n                      //  app.exceptions[j].hidden = false;\n                    }\n                  }\n                }\n              }\n              if (that._resourcesElements) {\n                var colors = that.getColors(that._resources.indexOf(resource));\n                that._resourcesElements[\"top\"][resource].attr('data-toggle', 'on');\n                that._resourcesElements[\"top\"][resource].css('background', colors.background);\n                that._resourcesElements[\"bottom\"][resource].attr('data-toggle', 'on');\n                that._resourcesElements[\"bottom\"][resource].css('background', colors.background);\n              }\n              if (that.hiddenResources) {\n                delete that.hiddenResources[resource];\n              }\n              that._renderrows();\n            },\n            hideAppointmentsByResource: function (resource) {\n              var that = this;\n              for (var i = 0; i < that.uiappointments.length; i++) {\n                var app = that.uiappointments[i];\n                if (app.resourceId == resource) {\n                  app.hidden = true;\n                  app.hiddenByResourceId = true;\n                  if (app.exceptions) {\n                    for (var j = 0; j < app.exceptions.length; j++) {\n                      app.exceptions[j].hiddenByResourceId = true;\n                      app.exceptions[j].hidden = true;\n                    }\n                  }\n                }\n              }\n              if (that._resourcesElements) {\n                that._resourcesElements[\"top\"][resource].attr('data-toggle', 'off');\n                that._resourcesElements[\"top\"][resource].css('background', 'transparent');\n                that._resourcesElements[\"bottom\"][resource].attr('data-toggle', 'off');\n                that._resourcesElements[\"bottom\"][resource].css('background', 'transparent');\n              }\n              if (!that.hiddenResources) {\n                that.hiddenResources = new Array();\n              }\n              that.hiddenResources[resource] = true;\n              that._renderrows();\n            },\n            _prepareAppointmentsInView: function (viewStart, viewEnd) {\n              var that = this;\n              if (that._appupdating) {\n                return;\n              }\n              var appointmentsToRender = new Array();\n              for (var i = 0; i < this.uiappointments.length; i++) {\n                var app = this.uiappointments[i];\n                if (app.hidden && app.recurrencePattern == null) continue;\n                var inView = $.jqx.scheduler.utilities.rangeIntersection(app.from, app.to, viewStart, viewEnd);\n                if (inView && !app.recurrencePattern) {\n                  appointmentsToRender.push(app);\n                }\n                app.renderedAppointments = new Array();\n                var foundSelectedAppointment = false;\n                if (app.recurrencePattern) {\n                  var occurences = app.getOccurrences(viewStart, viewEnd);\n                  var exceptions = app.exceptions;\n                  for (var j = 0; j < occurences.length; j++) {\n                    var occurrence = occurences[j];\n                    if (occurrence.hidden) continue;\n                    var canAdd = true;\n                    for (var m = 0; m < exceptions.length; m++) {\n                      var exception = exceptions[m];\n                      var exceptionDate = exception.occurrenceFrom ? exception.occurrenceFrom : exception;\n                      if (that.selectedJQXAppointment && that.selectedJQXAppointment.rootAppointment) {\n                        if (!foundSelectedAppointment && that.selectedJQXAppointment.occurrenceFrom.clearTime().equals(exceptionDate.clearTime())) {\n                          that.selectedJQXAppointment = exception;\n                          foundSelectedAppointment = true;\n                        }\n                      }\n                      if (exceptionDate.clearTime().equals(occurrence.from.clearTime())) {\n                        canAdd = false;\n                        break;\n                      }\n                    }\n                    if (!canAdd) {\n                      continue;\n                    }\n                    if (that.selectedJQXAppointment && that.selectedJQXAppointment.rootAppointment) {\n                      if (!foundSelectedAppointment && that.selectedJQXAppointment.occurrenceFrom.clearTime().equals(occurrence.occurrenceFrom.clearTime())) {\n                        that.selectedJQXAppointment = occurrence;\n                        foundSelectedAppointment = true;\n                      }\n                    }\n                    app.renderedAppointments[occurrence.id] = occurrence;\n                    appointmentsToRender.push(occurrence);\n                  }\n                  for (var m = 0; m < exceptions.length; m++) {\n                    var exception = exceptions[m];\n                    var exceptionDate = exception.occurrenceFrom ? exception.from : exception;\n                    var exceptionAppointment = app.createOccurrence(exceptionDate);\n                    if (exception.occurrenceFrom) {\n                      exception.cloneAppointmentAttributes(exceptionAppointment);\n                      if (exception.hidden) continue;\n                    }\n                    if (exceptionAppointment != app) {\n                      appointmentsToRender.push(exception);\n                      app.renderedAppointments[exception.id] = exception;\n                    }\n                  }\n                }\n              }\n              var appointmentsToRenderWithTimeZone = new Array();\n              this.tabKeyAppointments = new Array();\n              for (var i = 0; i < appointmentsToRender.length; i++) {\n                var appointment = appointmentsToRender[i];\n                appointmentsToRenderWithTimeZone.push(appointment);\n                this.tabKeyAppointments.push(appointment);\n              }\n              appointmentsToRenderWithTimeZone.sort(this._sortAppointmentsByFrom);\n              if (this._resources.length > 0) {\n                this.tabKeyAppointments.sort(function (a, b) {\n                  return that._sortAppointmentsByResourceId(a, b, that);\n                });\n              } else {\n                this.tabKeyAppointments.sort(this._sortAppointmentsByFrom);\n              }\n              this.appointmentsToRender = appointmentsToRenderWithTimeZone;\n            },\n            _renderDayWeekAppointments: function () {\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var allElements = new Array();\n              var allDayElements = new Array();\n              var rows = this.rows;\n              var showAllDayRow = that.showAllDayRow;\n              var scaleMinutes = that.getMinutesPerScale();\n              if (viewObject.timeRuler && viewObject.timeRuler.showAllDayRow != undefined) {\n                showAllDayRow = viewObject.timeRuler.showAllDayRow;\n              }\n              for (var appIndex = 0; appIndex < this.appointmentsToRender.length; appIndex++) {\n                var appointment = this.appointmentsToRender[appIndex];\n                var from = appointment.from;\n                var to = appointment.to;\n                var toAllDay = $.jqx.scheduler.utilities.getEndOfDay(to);\n                var day = from.day();\n                var allDay = appointment.allDay;\n                var appointmentCells = new Array();\n                var appointmentDays = new Array();\n                var resourceId = appointment.resourceId;\n                var resourceIndex = that._resources.indexOf(resourceId);\n                if (that.resources && that.resources.orientation == \"none\") resourceIndex = -1;\n                var fromValue = from.toDate().valueOf();\n                var toValue = to.toDate().valueOf();\n                var toValueAllDay = toAllDay.toDate().valueOf();\n                var sortCells = function (value1, value2) {\n                  if (value1.date < value2.date) return -1;\n                  if (value1.date == value2.date) return 0;\n                  if (value1.date > value2.date) return 1;\n                };\n                if (!appointment.allDay && appointment.duration().days() < 1 || !showAllDayRow) {\n                  var toDate = to.toDate();\n                  var toLastCell = false;\n                  if (toDate.getHours() == 0 && toDate.getMinutes() == 0) {\n                    toLastCell = true;\n                  }\n                  for (var i = 0; i < that.columnCells.length; i++) {\n                    if (!that.columnCells[i]) continue;\n                    var cells = that.columnCells[i];\n                    if (that.rtl) {\n                      cells = that.columnCells[that.columnCells.length - 1 - i];\n                    }\n                    for (var j = 0; j < cells.length; j++) {\n                      if (cells[j].getAttribute(\"data-end-date\")) {\n                        continue;\n                      }\n                      var dateString = cells[j].getAttribute(\"data-date\");\n                      var date = that._getDateByString(dateString);\n                      var date2 = that._getDateByString(dateString);\n                      date2.setMinutes(date2.getMinutes() + scaleMinutes - 1);\n                      var dateValue = date.valueOf();\n                      var dateValue2 = date2.valueOf();\n                      if (dateValue > to) {\n                        continue;\n                      }\n                      if (fromValue <= dateValue && dateValue < toValue || fromValue <= dateValue2 && dateValue2 < toValue || fromValue >= dateValue && dateValue2 >= toValue) {\n                        if (resourceIndex != -1) {\n                          if (1 + resourceIndex != cells[j].getAttribute('data-view')) continue;\n                        }\n                        if (day != date.getDate()) {\n                          appointmentCells.sort(sortCells);\n                          appointmentDays.push(appointmentCells);\n                          appointmentCells = new Array();\n                          day = from.addDays(1).day();\n                        }\n                        appointmentCells.push({\n                          cell: cells[j],\n                          date: date\n                        });\n                      }\n                    }\n                  }\n                  appointmentCells.sort(sortCells);\n                  appointmentDays.push(appointmentCells);\n                  var appointmentElements = new Array();\n                  for (var i = 0; i < appointmentDays.length; i++) {\n                    var cells = appointmentDays[i];\n                    if (cells.length == 0) continue;\n                    var width = that.cellWidth;\n                    var bottom = cells[cells.length - 1].cell.offsetTop + that.cellHeight;\n                    var x = cells[0].cell.offsetLeft;\n                    var y = cells[0].cell.offsetTop;\n\n                    //    var bottom = $(cells[cells.length - 1].cell).position().top + that.cellHeight;\n                    //    var cellPosition = $(cells[0].cell).position();\n                    //    var x = cellPosition.left;\n                    //    var y = cellPosition.top;\n                    var minutes = that.getMinutesPerScale();\n                    var toDate = new $.jqx.date(cells[cells.length - 1].date, that.timeZone).addMinutes(minutes);\n                    var data = {\n                      cells: cells,\n                      x: x,\n                      y: y,\n                      height: bottom - y,\n                      width: width,\n                      appointment: appointment,\n                      from: new $.jqx.date(cells[0].date, that.timeZone),\n                      to: toDate\n                    };\n                    appointmentElements.push(data);\n                    allElements.push(data);\n                  }\n                  appointment.elements = appointmentElements;\n                  if (appointment.rootAppointment) {\n                    appointment.rootAppointment.elements = appointment.rootAppointment.elements.concat(appointment.elements);\n                  }\n                }\n                // all day.\n                else {\n                  var cells = rows[0].cells;\n                  if (this.tableRows > 1) {\n                    var rowsPerVew = rows.length / that.tableRows;\n                    var rowIndex = resourceIndex * rowsPerVew;\n                    cells = rows[rowIndex].cells;\n                  }\n                  for (var j = 0; j < cells.length; j++) {\n                    var dateString = cells[j].getAttribute(\"data-date\");\n                    var jsDate = that._getDateByString(dateString);\n                    var date = new $.jqx.date(jsDate, that.timeZone);\n                    date = $.jqx.scheduler.utilities.getEndOfDay(date);\n                    var dateValue = date.toDate().valueOf();\n                    if (dateValue > toAllDay) {\n                      continue;\n                    }\n                    if (from <= date && date <= toAllDay) {\n                      if (resourceIndex != -1) {\n                        if (1 + resourceIndex != cells[j].getAttribute('data-view')) continue;\n                      }\n                      if (appointmentCells.length == 0) {\n                        date = $.jqx.scheduler.utilities.getStartOfDay(date);\n                      }\n                      appointmentCells.push({\n                        cell: cells[j],\n                        date: date\n                      });\n                    }\n                  }\n                  appointmentCells.sort(sortCells);\n                  appointmentDays.push(appointmentCells);\n                  var appointmentElements = new Array();\n                  for (var i = 0; i < appointmentDays.length; i++) {\n                    var cells = appointmentDays[i];\n                    if (cells.length == 0) break;\n                    var cellPosition = $(cells[0].cell).position();\n                    var width = $(cells[cells.length - 1].cell).position().left + this.cellWidth - cellPosition.left;\n                    var bottom = $(cells[cells.length - 1].cell).position().top;\n                    var x = cellPosition.left;\n                    var y = cellPosition.top;\n                    if (this.rtl) {\n                      var cellPosition = $(cells[cells.length - 1].cell).position();\n                      var x = cellPosition.left;\n                      var width = $(cells[0].cell).position().left + this.cellWidth - cellPosition.left;\n                    }\n                    var toCellDate = cells[cells.length - 1].date;\n                    toCellDate = new $.jqx.date($.jqx.scheduler.utilities.getEndOfDay(toCellDate), that.timeZone);\n                    var data = {\n                      cells: cells,\n                      x: x,\n                      y: y,\n                      height: bottom - y + this.cellHeight,\n                      width: width,\n                      appointment: appointment,\n                      from: $.jqx.scheduler.utilities.getStartOfDay(new $.jqx.date(cells[0].date, that.timeZone)),\n                      to: toCellDate\n                    };\n                    appointmentElements.push(data);\n                    allDayElements.push(data);\n                  }\n                  appointment.elements = appointmentElements;\n                  if (appointment.rootAppointment) {\n                    appointment.rootAppointment.elements = appointment.rootAppointment.elements.concat(appointment.elements);\n                  }\n                }\n              }\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              if (this._resources.length < 2 || this.resources.orientation == \"none\") {\n                var appointmentsPerDay = new Array();\n                var currentDate = viewStart;\n                var index = 0;\n                while (currentDate < viewEnd) {\n                  appointmentsPerDay[index] = new Array();\n                  for (var i = 0; i < allElements.length; i++) {\n                    var element = allElements[i];\n                    if (element.from.day() == currentDate.day()) {\n                      element.column = -1;\n                      element.columnSpan = 1;\n                      appointmentsPerDay[index].push(element);\n                    }\n                  }\n                  index++;\n                  currentDate = currentDate.addDays(1);\n                }\n                for (var i = 0; i < appointmentsPerDay.length; i++) {\n                  this._renderAppointmentsInDay(appointmentsPerDay[i]);\n                }\n                this._renderAllDayAppointments(allDayElements);\n              } else {\n                for (var j = 0; j < this._resources.length; j++) {\n                  var id = this._resources[j];\n                  var appointmentsPerDay = new Array();\n                  var currentDate = viewStart;\n                  var index = 0;\n                  while (currentDate < viewEnd) {\n                    appointmentsPerDay[index] = new Array();\n                    for (var i = 0; i < allElements.length; i++) {\n                      var element = allElements[i];\n                      if (element.from.day() == currentDate.day()) {\n                        element.column = -1;\n                        element.columnSpan = 1;\n                        if (element.appointment.resourceId == id) {\n                          appointmentsPerDay[index].push(element);\n                        }\n                      }\n                    }\n                    index++;\n                    currentDate = currentDate.addDays(1);\n                  }\n                  for (var i = 0; i < appointmentsPerDay.length; i++) {\n                    this._renderAppointmentsInDay(appointmentsPerDay[i]);\n                  }\n                  var allDayAppointments = new Array();\n                  for (var i = 0; i < allDayElements.length; i++) {\n                    if (allDayElements[i].appointment.resourceId == id) {\n                      allDayAppointments.push(allDayElements[i]);\n                    }\n                  }\n                  this._renderAllDayAppointments(allDayAppointments);\n                }\n              }\n            },\n            _renderAllDayAppointments: function (appointments) {\n              var that = this;\n              var showAllDayRow = this.showAllDayRow;\n              var viewObject = this._views[this._view];\n              if (viewObject.timeRuler && viewObject.timeRuler.showAllDayRow != undefined) {\n                showAllDayRow = viewObject.timeRuler.showAllDayRow;\n              }\n              if (!showAllDayRow) return;\n              if (appointments.length == 0) return;\n              var dayAppointments = appointments;\n              var rowsCount = 1;\n              rowsCount = this.getMaxAllDayAppointments(appointments);\n              if (this.tableRows == 1) {\n                var allDayRowHeight = this.table[0].rows[0].clientHeight / rowsCount;\n              } else {\n                var allDayRowHeight = this.table[0].rows[1].clientHeight / rowsCount;\n              }\n              for (var j = 0; j < appointments.length; j++) {\n                var dayAppointment = appointments[j];\n                dayAppointment.row = -1;\n                var collisionAppointments = this.getCollisionAppointments(dayAppointment, appointments);\n                collisionAppointments.sort(this._sortAppointmentsByFrom);\n                var currentAppointmentIndex = collisionAppointments.indexOf(dayAppointment);\n                if (currentAppointmentIndex >= 0) {\n                  for (var p = currentAppointmentIndex; p < collisionAppointments.length; p++) {\n                    collisionAppointments[p].row = -1;\n                  }\n                }\n\n                // iterate through the collision appointments and set the column.\n                for (var m = 0; m < rowsCount; m++) {\n                  var currentRow = m;\n                  for (var index in collisionAppointments) {\n                    if (index == \"indexOf\") break;\n                    var collisionAppointment = collisionAppointments[index];\n                    if (collisionAppointment.row == -1 && !this.isBusyRow(currentRow, collisionAppointments)) {\n                      collisionAppointment.row = currentRow;\n                      var maxRowsCount = rowsCount;\n                      var currentColissions = this.getMaxAllDayAppointments(collisionAppointments);\n                      if (maxRowsCount > currentColissions) {\n                        maxRowsCount = currentColissions;\n                      }\n                      collisionAppointment.rowsCount = maxRowsCount;\n                    }\n                  }\n                }\n              }\n              for (var m = 0; m < dayAppointments.length; m++) {\n                var dayAppointment = dayAppointments[m];\n                var collisionAppointments = this.getCollisionAppointments(dayAppointment, dayAppointments);\n                collisionAppointments.sort(this._sortAppointmentsByFrom);\n                var maxRows = 1;\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  maxRows = Math.max(maxRows, item.rowsCount);\n                }\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  item.rowsCount = maxRows;\n                }\n\n                // set the column span\n                if (collisionAppointments.length == 1) {\n                  dayAppointment.rowSpan = maxRows;\n                } else {\n                  var span = 0;\n                  var canProceed = true;\n                  for (var p = dayAppointment.row; p < maxRows; p++) {\n                    for (var index in collisionAppointments) {\n                      if (index == \"indexOf\") break;\n                      var collisionAppointment = collisionAppointments[index];\n                      if (collisionAppointment == dayAppointment) continue;\n                      if (collisionAppointment.row == p) {\n                        canProceed = false;\n                      }\n                    }\n                    if (!canProceed) break;\n                    span++;\n                  }\n                  dayAppointment.rowSpan = span;\n                }\n              }\n              var appHeight = that.appointmentsMinHeight + 2;\n              if (that.isTouchDevice()) {\n                var appHeight = that.touchAppointmentsMinHeight + 2;\n              }\n              for (var x = 0; x < dayAppointments.length; x++) {\n                var currentRowHeight = appHeight;\n                var dayAppointment = dayAppointments[x];\n                dayAppointment.height = appHeight;\n                var yLocation = currentRowHeight * dayAppointment.row;\n                dayAppointment.y = 18 + dayAppointment.y + yLocation + 4 * dayAppointment.row;\n                dayAppointment.x += 3;\n                dayAppointment.width -= 8;\n                if (dayAppointment.appointment.from.hour() != 0 || dayAppointment.appointment.to.hour() != 23) {\n                  var viewStart = this.getViewStart();\n                  var viewEnd = this.getViewEnd();\n                  if (!that.rtl) {\n                    var xOffset = parseFloat(that.cellWidth / 24) * dayAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (dayAppointment.appointment.from.minute() / 30);\n                    if (dayAppointment.appointment.from < viewStart) {\n                      xOffset = 0;\n                    }\n                    dayAppointment.timewidth = dayAppointment.width;\n                    dayAppointment.timex = xOffset;\n                    var wOffset = parseFloat(that.cellWidth / 24) * dayAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (dayAppointment.appointment.to.minute() / 30);\n                    if (dayAppointment.appointment.to > viewEnd) {\n                      wOffset = 0;\n                    }\n                    dayAppointment.timewidth -= xOffset;\n                    if (wOffset > 0) {\n                      dayAppointment.timewidth -= that.cellWidth;\n                      dayAppointment.timewidth += wOffset;\n                    }\n                    if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                      dayAppointment.width = dayAppointment.timewidth;\n                      dayAppointment.x += xOffset;\n                    }\n                  } else {\n                    var xOffset = parseFloat(that.cellWidth / 24) * dayAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (dayAppointment.appointment.to.minute() / 30);\n                    var wOffset = parseFloat(that.cellWidth / 24) * dayAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (dayAppointment.appointment.from.minute() / 30);\n                    if (xOffset > 0) {\n                      xOffset = that.cellWidth - xOffset;\n                    }\n                    if (dayAppointment.appointment.from < viewStart) {\n                      wOffset = 0;\n                    }\n                    if (dayAppointment.appointment.to > viewEnd) {\n                      xOffset = 0;\n                    }\n                    if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                      dayAppointment.x += xOffset;\n                      dayAppointment.width -= xOffset;\n                      dayAppointment.width -= wOffset;\n                    }\n                    if (dayAppointment.appointment.duration().days() < 1) {\n                      if (dayAppointment.width < 15) {\n                        dayAppointment.width = 15;\n                      }\n                    }\n                    dayAppointment.timewidth = dayAppointment.width;\n                    if (viewObject.appointmentsRenderMode == \"exactTimeStatus\") {\n                      dayAppointment.timewidth -= xOffset;\n                      dayAppointment.timewidth -= wOffset;\n                    }\n                    dayAppointment.timex = xOffset;\n                  }\n                }\n              }\n              for (var x = 0; x < dayAppointments.length; x++) {\n                var uiappointment = dayAppointments[x];\n                var html = \"\";\n                var format = \"auto\";\n                var viewObject = this._views[this._view];\n                var from = uiappointment.appointment.from;\n                var to = uiappointment.appointment.to;\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var fromFormat = format;\n                if (format === \"auto\") {\n                  if (from.hour() == 0 && from.minute() == 0 || from.hour() == 12 && from.minute() == 0) {\n                    var fromFormat = \"hh tt\";\n                  } else var fromFormat = \"hh:mm\";\n                  if (to.hour() == 0 && to.minute() == 0 || to.hour() == 12 && to.minute() == 0) {\n                    var toFormat = \"hh tt\";\n                  } else var toFormat = \"hh:mm\";\n                }\n                var formattedFrom = from.toString(fromFormat);\n                var formattedTo = to.toString(toFormat);\n                var duration = uiappointment.appointment.duration();\n                var allDay = uiappointment.appointment.allDay || duration.hours === 23 && duration.minutes === 59 && duration.seconds === 59;\n                var bgColor = uiappointment.appointment.background;\n                var title = uiappointment.appointment.subject ? uiappointment.appointment.subject : \"(No Title)\";\n                var color = uiappointment.appointment.color;\n                var resourceId = uiappointment.appointment.resourceId;\n                var colors = that.getColors(that._resources.indexOf(resourceId));\n                var resourceAttribute = \" data-resourceId='\" + resourceId + \"' \";\n                var borderColor = uiappointment.appointment.borderColor;\n                var location = uiappointment.appointment.location;\n                if (location.length > 0) location = \", \" + location;\n                if (!bgColor) bgColor = colors.background;\n                if (!borderColor) borderColor = colors.border;\n                if (!color) color = colors.color;\n                var isRecurrent = uiappointment.appointment.isRecurrentAppointment();\n                var isException = uiappointment.appointment.isException();\n                var formatString = formattedFrom + \"-\" + formattedTo;\n                if (allDay) {\n                  formattedFrom = \"\";\n                  formattedTo = \"\";\n                }\n                var defaultHTML = \"\";\n\n                // define status\n                var statusClass = that.toTP('jqx-scheduler-appointment-status');\n                var statusElement = \"\";\n                var status = that.statuses[uiappointment.appointment.status];\n                var hasStatus = false;\n                if (status) {\n                  if (status == \"transparent\") {\n                    hasStatus = false;\n                  } else {\n                    statusElement = \"<div style='background: \" + status + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    if (status == \"tentative\") {\n                      statusClass = that.toTP('jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                      statusElement = \"<div style='background-color: \" + borderColor + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    }\n                    hasStatus = true;\n                  }\n                }\n                var bottomStatusClass = that.toTP('jqx-scheduler-appointment-duration-status');\n                var bottomStatus = \"<div style='width: \" + uiappointment.timewidth + \"px; left: \" + uiappointment.timex + \"px;' class='\" + bottomStatusClass + \"'></div>\";\n                if (allDay) bottomStatus = \"\";\n                var rtlStatusElement = \"\";\n                if (viewObject.appointmentsRenderMode != \"exactTimeStatus\") {\n                  bottomStatus = \"\";\n                }\n                if (that.rtl) {\n                  var statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status');\n                  statusElement = \"<div style='background: \" + status + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  if (status == \"tentative\") {\n                    statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                    statusElement = \"<div style='background-color: \" + borderColor + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  }\n                  rtlStatusElement = statusElement;\n                  statusElement = \"\";\n                }\n                var customCSSClass = \"\";\n                var defaultContent = title + location;\n                if (!allDay) {\n                  defaultContent = title + location + bottomStatus;\n                }\n                if (that.renderAppointment) {\n                  var appointmentFormatData = that.renderAppointment({\n                    appointment: uiappointment.appointment.boundAppointment,\n                    textColor: color,\n                    background: bgColor,\n                    borderColor: borderColor,\n                    html: defaultContent,\n                    cssClass: \"\",\n                    style: \"\",\n                    width: uiappointment.width,\n                    height: uiappointment.height,\n                    view: that._views[that._view].type\n                  });\n                  if (appointmentFormatData) {\n                    var html = appointmentFormatData.html;\n                    if (html != defaultContent) {\n                      defaultContent = html;\n                    }\n                    color = appointmentFormatData.textColor;\n                    bgColor = appointmentFormatData.background;\n                    borderColor = appointmentFormatData.borderColor;\n                    if (appointmentFormatData.cssClass) {\n                      customCSSClass = appointmentFormatData.cssClass + \" \";\n                    }\n                    if (appointmentFormatData.style != \"\") {\n                      var colors = that.getAppointmentColors(appointmentFormatData.style);\n                      bgColor = colors.background;\n                      borderColor = colors.border;\n                      color = colors.color;\n                    }\n                  }\n                }\n\n                // end status.\n                if (defaultHTML === \"\") {\n                  if (hasStatus) {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'>\" + statusElement + \"<div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div>\" + rtlStatusElement + \"</div>\";\n                  } else {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'><div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div></div>\";\n                  }\n                }\n                var rtlClass = \"\";\n                if (that.rtl) {\n                  rtlClass = that.toTP('jqx-rtl jqx-scheduler-appointment-rtl') + \" \";\n                }\n                if (isException) {\n                  var exceptionClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-exception-white') : that.toTP('jqx-icon-recurrence-exception');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + exceptionClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else if (isRecurrent) {\n                  var recurrenceClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-white') : that.toTP('jqx-icon-recurrence');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + recurrenceClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else {\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                }\n                var $appointment = $(html);\n                if (this.tableRows == 1) {\n                  $appointment.appendTo(this.pinnedtable);\n                } else {\n                  $appointment.appendTo(this.table);\n                }\n                uiappointment.element = $appointment;\n                if (this.appointmentTooltips) {\n                  if (!uiappointment.appointment.tooltip) {\n                    var tooltip = uiappointment.appointment.subject;\n                    if (formattedFrom) {\n                      tooltip = formattedFrom + \" - \" + formattedTo + \" \" + tooltip;\n                    }\n                    if (tooltip) {\n                      var location = uiappointment.appointment.location;\n                      if (location) tooltip += \"\\n\" + location;\n                      $appointment[0].setAttribute('title', tooltip);\n                    }\n                  } else {\n                    $appointment[0].setAttribute('title', uiappointment.appointment.tooltip);\n                  }\n                }\n              }\n            },\n            _renderAppointmentsInDay: function (appointments, i) {\n              if (appointments.length == 0) return;\n              var that = this;\n              var viewObject = this._views[this._view];\n              var dayAppointments = appointments;\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              var columnsCount = 1;\n              var dayWidth = 0;\n              ;\n              if (viewObject.timeRuler) {\n                dayWidth = this.columns.records[1].width;\n                if (viewObject.timeRuler.timeZones) {\n                  dayWidth = this.columns.records[1 + viewObject.timeRuler.timeZones.length].width;\n                }\n              } else {\n                dayWidth = this.columns.records[1].width;\n              }\n              columnsCount = this.getMaxColumnsInADay(appointments);\n              var columnWidth = dayWidth / columnsCount;\n              if (columnWidth < 0) {\n                return;\n              }\n              for (var j = 0; j < appointments.length; j++) {\n                var dayAppointment = appointments[j];\n                dayAppointment.column = -1;\n                var collisionAppointments = this.getCollisionAppointments(dayAppointment, appointments);\n                collisionAppointments.sort(this._sortAppointmentsByFrom);\n                var currentAppointmentIndex = collisionAppointments.indexOf(dayAppointment);\n                if (currentAppointmentIndex >= 0) {\n                  for (var p = currentAppointmentIndex; p < collisionAppointments.length; p++) {\n                    collisionAppointments[p].column = -1;\n                  }\n                }\n\n                // iterate through the collision appointments and set the column.\n                for (var m = 0; m < columnsCount; m++) {\n                  var currentColumn = m;\n                  for (var index in collisionAppointments) {\n                    if (index == \"indexOf\") break;\n                    var collisionAppointment = collisionAppointments[index];\n                    if (collisionAppointment.column == -1 && !this.isBusyColumn(currentColumn, collisionAppointments)) {\n                      collisionAppointment.column = currentColumn;\n                      var maxColumnsCount = columnsCount;\n                      var currentColissions = this.getMaxColumnsInADay(collisionAppointments);\n                      if (maxColumnsCount > currentColissions) {\n                        maxColumnsCount = currentColissions;\n                      }\n                      collisionAppointment.columnsCount = maxColumnsCount;\n                    }\n                  }\n                }\n              }\n              for (var m = 0; m < dayAppointments.length; m++) {\n                var dayAppointment = dayAppointments[m];\n                var collisionAppointments = this.getCollisionAppointments(dayAppointment, dayAppointments);\n                collisionAppointments.sort(this._sortAppointmentsByFrom);\n                var maxColumns = 1;\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  if (item.columnsCount == undefined) continue;\n                  maxColumns = Math.max(maxColumns, item.columnsCount);\n                }\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  item.columnsCount = maxColumns;\n                }\n\n                // set the column span\n                if (collisionAppointments.length == 1) {\n                  dayAppointment.columnSpan = maxColumns;\n                } else {\n                  var span = 0;\n                  var canProceed = true;\n                  for (var p = dayAppointment.column; p < maxColumns; p++) {\n                    for (var index in collisionAppointments) {\n                      if (index == \"indexOf\") break;\n                      var collisionAppointment = collisionAppointments[index];\n                      if (collisionAppointment.column == undefined) continue;\n                      if (collisionAppointment == dayAppointment) continue;\n                      if (collisionAppointment.column == p) {\n                        canProceed = false;\n                      }\n                    }\n                    if (!canProceed) break;\n                    span++;\n                  }\n                  dayAppointment.columnSpan = span;\n                }\n              }\n              for (var x = 0; x < dayAppointments.length; x++) {\n                var currentColumnWidth = dayWidth / dayAppointments[x].columnsCount;\n                var dayAppointment = dayAppointments[x];\n                dayAppointment.width = -5 + currentColumnWidth * dayAppointment.columnSpan;\n                var xLocation = currentColumnWidth * dayAppointment.column;\n                dayAppointment.x = 2 + dayAppointment.x + xLocation;\n                dayAppointment.height -= 5;\n                dayAppointment.y += 1;\n                if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                  var minutes = that.getMinutesPerScale();\n                  if (dayAppointment.appointment.from.minute() % minutes != 0) {\n                    var offsetMinutes = dayAppointment.appointment.from.minute() % minutes;\n                    var yOffset = parseFloat(that.cellHeight / minutes) * offsetMinutes;\n                  } else var yOffset = 0;\n                  if (dayAppointment.appointment.to.minute() % minutes != 0) {\n                    var offsetMinutes = dayAppointment.appointment.to.minute() % minutes;\n                    var hOffset = that.cellHeight - parseFloat(that.cellHeight / minutes) * offsetMinutes;\n                    if (dayAppointment.to.day() !== dayAppointment.appointment.to.day()) {\n                      hOffset = 0;\n                    }\n                  } else hOffset = 0;\n                  dayAppointment.y += yOffset;\n                  dayAppointment.height -= yOffset;\n                  dayAppointment.height -= hOffset;\n                }\n              }\n              for (var x = 0; x < dayAppointments.length; x++) {\n                var uiappointment = dayAppointments[x];\n                var html = \"\";\n                var format = \"auto\";\n                var viewObject = this._views[this._view];\n                var from = uiappointment.appointment.from;\n                var to = uiappointment.appointment.to;\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var fromFormat = format;\n                if (format === \"auto\") {\n                  if (from.hour() == 0 && from.minute() == 0 || from.hour() == 12 && from.minute() == 0) {\n                    var fromFormat = \"hh tt\";\n                  } else var fromFormat = \"hh:mm\";\n                  if (to.hour() == 0 && to.minute() == 0 || to.hour() == 12 && to.minute() == 0) {\n                    var toFormat = \"hh tt\";\n                  } else var toFormat = \"hh:mm\";\n                }\n                var formattedFrom = from.toString(fromFormat);\n                var formattedTo = to.toString(toFormat);\n                var bgColor = uiappointment.appointment.background;\n                var title = uiappointment.appointment.subject ? uiappointment.appointment.subject : \"(No Title)\";\n                var location = uiappointment.appointment.location ? uiappointment.appointment.location : \"\";\n                var color = uiappointment.appointment.color;\n                var resourceId = uiappointment.appointment.resourceId;\n                var colors = that.getColors(that._resources.indexOf(resourceId));\n                var resourceAttribute = \" data-resourceId='\" + resourceId + \"' \";\n                var borderColor = uiappointment.appointment.borderColor;\n                if (!bgColor) bgColor = colors.background;\n                if (!borderColor) borderColor = colors.border;\n                if (!color) color = colors.color;\n                var isRecurrent = uiappointment.appointment.isRecurrentAppointment();\n                var isException = uiappointment.appointment.isException();\n                var defaultHTML = \"\";\n\n                // define status\n                var statusClass = that.toTP('jqx-scheduler-appointment-status');\n                var statusElement = \"\";\n                var status = that.statuses[uiappointment.appointment.status];\n                var hasStatus = false;\n                if (status) {\n                  if (status == \"transparent\") {\n                    hasStatus = false;\n                  } else {\n                    statusElement = \"<div style='background: \" + status + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    if (status == \"tentative\") {\n                      statusClass = that.toTP('jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                      statusElement = \"<div style='background-color: \" + borderColor + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    }\n                    hasStatus = true;\n                  }\n                }\n                var rtlStatusElement = \"\";\n                if (that.rtl) {\n                  var statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status');\n                  statusElement = \"<div style='background: \" + status + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  if (status == \"tentative\") {\n                    statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                    statusElement = \"<div style='background-color: \" + borderColor + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  }\n                  rtlStatusElement = statusElement;\n                  statusElement = \"\";\n                }\n                var customCSSClass = \"\";\n                var defaultContent = title + \"<br/>\" + location;\n                if (!location) {\n                  var defaultContent = title;\n                }\n                if (that.renderAppointment) {\n                  var appointmentFormatData = that.renderAppointment({\n                    appointment: uiappointment.appointment.boundAppointment,\n                    textColor: color,\n                    background: bgColor,\n                    borderColor: borderColor,\n                    html: defaultContent,\n                    cssClass: \"\",\n                    style: \"\",\n                    width: uiappointment.width,\n                    height: uiappointment.height,\n                    view: that._views[that._view].type\n                  });\n                  if (appointmentFormatData) {\n                    var html = appointmentFormatData.html;\n                    if (html != defaultContent) {\n                      defaultContent = html;\n                    }\n                    color = appointmentFormatData.textColor;\n                    bgColor = appointmentFormatData.background;\n                    borderColor = appointmentFormatData.borderColor;\n                    if (appointmentFormatData.cssClass) {\n                      customCSSClass = appointmentFormatData.cssClass + \" \";\n                    }\n                    if (appointmentFormatData.style != \"\") {\n                      var colors = that.getAppointmentColors(appointmentFormatData.style);\n                      bgColor = colors.background;\n                      borderColor = colors.border;\n                      color = colors.color;\n                    }\n                  }\n                }\n\n                // end status.\n                if (defaultHTML === \"\") {\n                  if (hasStatus) {\n                    var defaultHTML = \"<div class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'>\" + statusElement + \"<div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div>\" + rtlStatusElement + \"</div>\";\n                  } else {\n                    var defaultHTML = \"<div class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'><div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div></div>\";\n                  }\n                }\n                var rtlClass = \"\";\n                if (that.rtl) {\n                  rtlClass = that.toTP('jqx-rtl jqx-scheduler-appointment-rtl') + \" \";\n                }\n                if (isException) {\n                  var exceptionClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-exception-white') : that.toTP('jqx-icon-recurrence-exception');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + exceptionClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-top-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-bottom-resize-indicator\") + \"'></div></div>\";\n                } else if (isRecurrent) {\n                  var recurrenceClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-white') : that.toTP('jqx-icon-recurrence');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + recurrenceClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-top-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-bottom-resize-indicator\") + \"'></div></div>\";\n                } else {\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-top-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-bottom-resize-indicator\") + \"'></div></div>\";\n                }\n                var $appointment = $(html);\n                $appointment.appendTo(this.table);\n                uiappointment.element = $appointment;\n                if (that.showCurrentAppointment) {\n                  var now = new Date();\n                  var from = uiappointment.from.toDate();\n                  var to = uiappointment.to.toDate();\n                  if (from <= now && now <= to && this.showCurrentAppointment) {\n                    uiappointment.element[0].classList.add('current-appointment');\n                  }\n                }\n                if (this.appointmentTooltips) {\n                  if (!uiappointment.appointment.tooltip) {\n                    var tooltip = uiappointment.appointment.subject;\n                    if (tooltip) {\n                      var location = uiappointment.appointment.location;\n                      if (location) tooltip += \"\\n\" + location;\n                      $appointment[0].setAttribute('title', tooltip);\n                    }\n                  } else {\n                    $appointment[0].setAttribute('title', uiappointment.appointment.tooltip);\n                  }\n                }\n              }\n            },\n            getCollisionAppointments: function (appointment, appointments) {\n              var collisionAppointments = new Array();\n              var from = appointment.from;\n              var to = appointment.to;\n              for (var i = 0; i < appointments.length; i++) {\n                var item = appointments[i];\n                var from2 = item.from;\n                var to2 = item.to;\n                if ($.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2)) {\n                  collisionAppointments.push(item);\n                  if (collisionAppointments.length > 30) {\n                    break;\n                  }\n                }\n              }\n              return collisionAppointments;\n            },\n            getAllDayCollisionAppointments: function (appointment, appointments) {\n              var collisionAppointments = new Array();\n              var from = $.jqx.scheduler.utilities.getStartOfDay(appointment.from);\n              var to = $.jqx.scheduler.utilities.getEndOfDay(appointment.to);\n              for (var i = 0; i < appointments.length; i++) {\n                var item = appointments[i];\n                var from2 = $.jqx.scheduler.utilities.getStartOfDay(item.from);\n                var to2 = $.jqx.scheduler.utilities.getEndOfDay(item.to);\n                if ($.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2)) {\n                  collisionAppointments.push(item);\n                }\n              }\n              return collisionAppointments;\n            },\n            _renderAppointments: function (viewStart, viewEnd) {\n              var that = this;\n              if (that._appupdating) {\n                return;\n              }\n              that.table.find('.jqx-scheduler-appointment').remove();\n              that.pinnedtable.find('.jqx-scheduler-appointment').remove();\n              var viewType = that._views[that._view].type;\n              if (viewType === \"dayView\" || viewType === \"weekView\") {\n                that._renderDayWeekAppointments(viewStart, viewEnd);\n              } else if (viewType === \"monthView\") {\n                that._renderMonthAppointments(viewStart, viewEnd);\n              } else if (viewType === \"timelineWeekView\" || viewType === \"timelineDayView\" || viewType === \"timelineMonthView\") {\n                that._renderTimelineAppointments(viewStart, viewEnd);\n              }\n              if (that.selectedJQXAppointment) {\n                that._selectAppointment(that.selectedJQXAppointment);\n              }\n            },\n            _renderTimelineAppointments: function (viewStart, viewEnd) {\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var allElements = new Array();\n              var rows = this.rows;\n              var cellHeight = this.cellHeight;\n              var cellWidth = this.cellWidth;\n              var minutes = that.getMinutesPerScale();\n              for (var appIndex = 0; appIndex < this.appointmentsToRender.length; appIndex++) {\n                var appointment = this.appointmentsToRender[appIndex];\n                var from = appointment.from;\n                var to = appointment.to;\n                var getDate = that._getDateByString;\n                var appointmentCells = new Array();\n                var fromValue = from.toDate().valueOf();\n                var toValue = to.toDate().valueOf();\n                if (viewType === \"timelineMonthView\") {\n                  fromValue = from.clearTime().toDate().valueOf();\n                }\n                var sortCells = function (value1, value2) {\n                  if (value1.date < value2.date) return -1;\n                  if (value1.date == value2.date) return 0;\n                  if (value1.date > value2.date) return 1;\n                };\n                var row = that.rows[0];\n                var resourceId = appointment.resourceId;\n                var resourceIndex = that._resources.indexOf(resourceId);\n                if (that._resources.length > 0) {\n                  if (that.resources.orientation !== \"horizontal\") {\n                    if (resourceIndex >= 1) {\n                      row = that.rows[resourceIndex];\n                    }\n                  }\n                }\n                if (that.resources && that.resources.orientation == \"none\") {\n                  resourceIndex = -1;\n                  var row = that.rows[0];\n                }\n                var cells = row.cells;\n                for (var j = 0; j < cells.length; j++) {\n                  var dateString = cells[j].getAttribute(\"data-date\");\n                  cells[j].appointments = new Array();\n                  var date = that._getDateByString(dateString);\n                  var dateValue = date.valueOf();\n                  var date2 = that._getDateByString(dateString);\n                  date2.setMinutes(date2.getMinutes() + minutes - 1);\n                  var dateValue2 = date2.valueOf();\n                  if (dateValue > to) {\n                    continue;\n                  }\n                  if (fromValue <= dateValue && dateValue < toValue || fromValue <= dateValue2 && dateValue2 < toValue || fromValue >= dateValue && fromValue <= dateValue2 && toValue <= dateValue2) {\n                    if (resourceIndex != -1) {\n                      if (1 + resourceIndex != cells[j].getAttribute('data-view')) continue;\n                    }\n                    appointmentCells.push({\n                      cell: cells[j],\n                      date: date\n                    });\n                    row = i;\n                  }\n                }\n                appointmentCells.sort(sortCells);\n                var appointmentElements = new Array();\n                var cells = appointmentCells;\n                if (cells.length == 0) continue;\n                var appointmentHeight = that.appointmentsMinHeight;\n                if (that.isTouchDevice()) {\n                  appointmentHeight = that.touchAppointmentsMinHeight;\n                }\n                if (viewObject.appointmentHeight) {\n                  appointmentHeight = viewObject.appointmentHeight;\n                }\n                var position = $(cells[0].cell).position();\n                var height = appointmentHeight;\n                var width = $(cells[cells.length - 1].cell).position().left - position.left + cellWidth;\n                var x = position.left;\n                var y = position.top;\n                if (that.rtl) {\n                  var position = $(cells[cells.length - 1].cell).position();\n                  var width = $(cells[0].cell).position().left - position.left + cellWidth;\n                  var x = position.left;\n                  var y = position.top;\n                }\n                var toDate = new $.jqx.date(cells[cells.length - 1].date, that.timeZone).addMinutes(minutes);\n                if (viewType === \"timelineMonthView\") {\n                  var toDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(cells[cells.length - 1].date, that.timeZone));\n                }\n                var data = {\n                  cellX: x,\n                  cellY: y,\n                  cellHeight: cellHeight,\n                  cells: cells,\n                  x: x,\n                  y: y,\n                  height: height,\n                  width: width,\n                  appointment: appointment,\n                  from: new $.jqx.date(cells[0].date, that.timeZone),\n                  to: toDate\n                };\n                if (viewObject.appointmentsRenderMode === 'exactTime') {\n                  data.from = appointment.from;\n                  data.to = appointment.to;\n                }\n                appointmentElements.push(data);\n                allElements.push(data);\n                appointment.elements = appointmentElements;\n                if (appointment.rootAppointment) {\n                  appointment.rootAppointment.elements = appointment.rootAppointment.elements.concat(appointment.elements);\n                }\n              }\n              if (this._resources.length < 2 || this.resources.orientation == \"none\") {\n                this._renderUITimelineAppointments(allElements, viewStart, viewEnd);\n              } else {\n                for (var j = 0; j < this._resources.length; j++) {\n                  var id = this._resources[j];\n                  var elements = new Array();\n                  for (var i = 0; i < allElements.length; i++) {\n                    if (allElements[i].appointment.resourceId == id) {\n                      elements.push(allElements[i]);\n                    }\n                  }\n                  this._renderUITimelineAppointments(elements, viewStart, viewEnd);\n                }\n              }\n            },\n            _renderUITimelineAppointments: function (appointments, viewStart, viewEnd) {\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var weekAppointments = appointments;\n              var rowsCount = 1;\n              var that = this;\n              var cacheCollisions = new Array();\n              rowsCount = that.getMaxTimelineAppointments(appointments, cacheCollisions, viewStart, viewEnd);\n              var appointmentHeight = that.appointmentsMinHeight;\n              if (that.isTouchDevice()) {\n                appointmentHeight = that.touchAppointmentsMinHeight;\n              }\n              if (viewObject.appointmentHeight) {\n                appointmentHeight = viewObject.appointmentHeight;\n              }\n              for (var j = 0; j < appointments.length; j++) {\n                var weekAppointment = appointments[j];\n                weekAppointment.row = -1;\n                var collisionAppointments = that.getCollisionAppointments(weekAppointment, appointments);\n                collisionAppointments.sort(that._sortAppointmentsByFrom);\n                var currentAppointmentIndex = collisionAppointments.indexOf(weekAppointment);\n                if (currentAppointmentIndex >= 0) {\n                  for (var p = currentAppointmentIndex; p < collisionAppointments.length; p++) {\n                    collisionAppointments[p].row = -1;\n                  }\n                }\n\n                // iterate through the collision appointments and set the row.\n                for (var m = 0; m < rowsCount; m++) {\n                  var currentRow = m;\n                  if (m > 30) {\n                    break;\n                  }\n                  for (var index in collisionAppointments) {\n                    if (index == \"indexOf\") break;\n                    if (index > 30) {\n                      break;\n                    }\n                    var collisionAppointment = collisionAppointments[index];\n                    if (collisionAppointment.row == -1 && !that.isBusyRow(currentRow, collisionAppointments)) {\n                      collisionAppointment.row = currentRow;\n                      var maxRowsCount = rowsCount;\n                      var currentColissions = that.getMaxTimelineAppointments(collisionAppointments, cacheCollisions, viewStart, viewEnd);\n                      if (maxRowsCount > currentColissions) {\n                        maxRowsCount = currentColissions;\n                      }\n                      collisionAppointment.rowsCount = maxRowsCount;\n                    }\n                  }\n                }\n              }\n              for (var m = 0; m < weekAppointments.length; m++) {\n                var weekAppointment = weekAppointments[m];\n                var collisionAppointments = that.getCollisionAppointments(weekAppointment, weekAppointments);\n                collisionAppointments.sort(that._sortAppointmentsByFrom);\n                var maxRows = 1;\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  maxRows = Math.max(maxRows, item.rowsCount);\n                }\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  item.rowsCount = maxRows;\n                }\n                if (collisionAppointments.length == 1) {\n                  weekAppointment.rowSpan = maxRows;\n                } else {\n                  var span = 0;\n                  var canProceed = true;\n                  for (var p = weekAppointment.row; p < maxRows; p++) {\n                    for (var index in collisionAppointments) {\n                      if (index == \"indexOf\") break;\n                      var collisionAppointment = collisionAppointments[index];\n                      if (collisionAppointment == weekAppointment) continue;\n                      if (collisionAppointment.row == p) {\n                        canProceed = false;\n                      }\n                    }\n                    if (!canProceed) break;\n                    span++;\n                  }\n                  weekAppointment.rowSpan = span;\n                }\n              }\n              for (var x = 0; x < weekAppointments.length; x++) {\n                var currentRowHeight = appointmentHeight;\n                var weekAppointment = weekAppointments[x];\n                weekAppointment.height = currentRowHeight;\n                var yLocation = 2 + (3 + currentRowHeight) * weekAppointment.row;\n                weekAppointment.y = weekAppointment.y + yLocation;\n                weekAppointment.x += 1;\n                weekAppointment.width -= 5;\n                var view = that._views[that._view].type;\n                var viewObject = that._views[that._view];\n                if (view == \"timelineMonthView\" && viewObject.appointmentsRenderMode) {\n                  if (weekAppointment.appointment.from.hour() != 0 || weekAppointment.appointment.to.hour() != 23) {\n                    if (!that.rtl) {\n                      var xOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.from.minute() / 30);\n                      var wOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.to.minute() / 30);\n                      weekAppointment.timewidth = weekAppointment.width;\n                      weekAppointment.timex = xOffset;\n                      weekAppointment.timewidth -= xOffset;\n                      weekAppointment.timewidth -= that.cellWidth;\n                      weekAppointment.timewidth += wOffset;\n                      if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                        weekAppointment.width = weekAppointment.timewidth;\n                        if (that.date.month() === weekAppointment.appointment.from.month()) {\n                          weekAppointment.x += xOffset;\n                        } else {\n                          weekAppointment.width = xOffset + weekAppointment.timewidth;\n                        }\n                        if (weekAppointment.appointment.duration().days() < 1) {\n                          if (weekAppointment.width < 15) {\n                            weekAppointment.width = 15;\n                            if (xOffset + 15 > that.cellWidth) {\n                              var xNegativeOffset = that.cellWidth - xOffset - 15;\n                              weekAppointment.x += xNegativeOffset;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      var xOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.to.minute() / 30);\n                      var wOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.from.minute() / 30);\n                      if (xOffset > 0) {\n                        xOffset = that.cellWidth - xOffset;\n                      }\n                      if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                        weekAppointment.x += xOffset;\n                        weekAppointment.width -= xOffset;\n                        weekAppointment.width -= wOffset;\n                      }\n                      if (weekAppointment.appointment.duration().days() < 1) {\n                        if (weekAppointment.width < 15) {\n                          weekAppointment.width = 15;\n                        }\n                      }\n                      weekAppointment.timewidth = weekAppointment.width;\n                      weekAppointment.timex = xOffset;\n                    }\n                  }\n                } else if (viewObject.appointmentsRenderMode) {\n                  if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                    var minutes = that.getMinutesPerScale();\n                    if (weekAppointment.appointment.from.minute() % minutes != 0) {\n                      var offsetMinutes = weekAppointment.appointment.from.minute() % minutes;\n                      var xOffset = parseFloat(that.cellWidth / minutes) * offsetMinutes;\n                      if (that.rtl) {\n                        var xOffset = parseFloat(that.cellWidth / minutes) * offsetMinutes;\n                      }\n                    } else var xOffset = 0;\n                    if (weekAppointment.appointment.to.minute() % minutes != 0) {\n                      var offsetMinutes = weekAppointment.appointment.to.minute() % minutes;\n                      var wOffset = that.cellWidth - parseFloat(that.cellWidth / minutes) * offsetMinutes;\n                      if (that.rtl) {\n                        var wOffset = that.cellWidth - parseFloat(that.cellWidth / minutes) * offsetMinutes;\n                      }\n                    } else wOffset = 0;\n                    if (!that.rtl) {\n                      weekAppointment.x += xOffset;\n                      weekAppointment.width -= xOffset;\n                      weekAppointment.width -= wOffset;\n                    } else {\n                      weekAppointment.x += wOffset;\n                      weekAppointment.width -= xOffset;\n                      weekAppointment.width -= wOffset;\n                    }\n                  }\n                }\n              }\n              var appointmentsHTML = \"\";\n              var filteredWeekAppointments = [];\n              for (var x = 0; x < weekAppointments.length; x++) {\n                var uiappointment = weekAppointments[x];\n                var html = \"\";\n                if (uiappointment.y < 0) {\n                  continue;\n                }\n                filteredWeekAppointments.push(uiappointment);\n                var format = \"auto\";\n                var viewObject = that._views[that._view];\n                var from = uiappointment.appointment.from;\n                var to = uiappointment.appointment.to;\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var bgColor = uiappointment.appointment.background;\n                var title = uiappointment.appointment.subject ? uiappointment.appointment.subject : \"(No Title)\";\n                var location = uiappointment.appointment.location;\n                if (location && location.length > 1) {\n                  location = \", \" + location;\n                }\n                var color = uiappointment.appointment.color;\n                var resourceId = uiappointment.appointment.resourceId;\n                var colors = that.getColors(that._resources.indexOf(resourceId));\n                var resourceAttribute = \" data-resourceId='\" + resourceId + \"' \";\n                var borderColor = uiappointment.appointment.borderColor;\n                if (!bgColor) bgColor = colors.background;\n                if (!borderColor) borderColor = colors.border;\n                if (!color) color = colors.color;\n                var isRecurrent = uiappointment.appointment.isRecurrentAppointment();\n                var isException = uiappointment.appointment.isException();\n                var defaultHTML = \"\";\n\n                // define status\n                var statusClass = that.toTP('jqx-scheduler-appointment-status');\n                var statusElement = \"\";\n                var status = that.statuses[uiappointment.appointment.status];\n                var hasStatus = false;\n                if (status) {\n                  if (status == \"transparent\") {\n                    hasStatus = false;\n                  } else {\n                    statusElement = \"<div style='background: \" + status + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    if (status == \"tentative\") {\n                      statusClass = that.toTP('jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                      statusElement = \"<div style='background-color: \" + borderColor + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    }\n                    hasStatus = true;\n                  }\n                }\n                var rtlStatusElement = \"\";\n                if (that.rtl) {\n                  var statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status');\n                  statusElement = \"<div style='background: \" + status + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  if (status == \"tentative\") {\n                    statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                    statusElement = \"<div style='background-color: \" + borderColor + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  }\n                  rtlStatusElement = statusElement;\n                  statusElement = \"\";\n                }\n                var customCSSClass = \"\";\n                var defaultContent = title + \"<br/>\" + location;\n                if (that.renderAppointment) {\n                  var appointmentFormatData = that.renderAppointment({\n                    appointment: uiappointment.appointment.boundAppointment,\n                    textColor: color,\n                    background: bgColor,\n                    borderColor: borderColor,\n                    html: defaultContent,\n                    cssClass: \"\",\n                    style: \"\",\n                    width: uiappointment.width,\n                    height: uiappointment.height,\n                    view: that._views[that._view].type\n                  });\n                  if (appointmentFormatData) {\n                    var html = appointmentFormatData.html;\n                    if (html != defaultContent) {\n                      defaultContent = html;\n                    }\n                    color = appointmentFormatData.textColor;\n                    bgColor = appointmentFormatData.background;\n                    borderColor = appointmentFormatData.borderColor;\n                    if (appointmentFormatData.cssClass) {\n                      customCSSClass = appointmentFormatData.cssClass + \" \";\n                    }\n                    if (appointmentFormatData.style != \"\") {\n                      var colors = that.getAppointmentColors(appointmentFormatData.style);\n                      bgColor = colors.background;\n                      borderColor = colors.border;\n                      color = colors.color;\n                    }\n                  }\n                }\n\n                // end status.\n                if (defaultHTML === \"\") {\n                  if (hasStatus) {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'>\" + statusElement + \"<div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div>\" + rtlStatusElement + \"</div>\";\n                  } else {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'><div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div></div>\";\n                  }\n                }\n                var rtlClass = \"\";\n                if (that.rtl) {\n                  rtlClass = that.toTP('jqx-rtl jqx-scheduler-appointment-rtl') + \" \";\n                }\n                if (isException) {\n                  var exceptionClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-exception-white') : that.toTP('jqx-icon-recurrence-exception');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; line-height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + exceptionClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else if (isRecurrent) {\n                  var recurrenceClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-white') : that.toTP('jqx-icon-recurrence');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; line-height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + recurrenceClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else {\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; height: \" + uiappointment.height + \"px; line-height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                }\n                appointmentsHTML = html;\n                var $appointment = $(html);\n                $appointment.appendTo(this.table);\n                uiappointment.element = $appointment;\n                var now = new Date();\n                var start = uiappointment.from.toDate();\n                var end = uiappointment.to.toDate();\n                if (start <= now && now <= end && this.showCurrentAppointment) {\n                  uiappointment.element[0].classList.add('current-appointment');\n                }\n                if (this.appointmentTooltips) {\n                  if (!uiappointment.appointment.tooltip) {\n                    var tooltip = uiappointment.appointment.subject;\n                    if (tooltip) {\n                      var location = uiappointment.appointment.location;\n                      if (location) tooltip += \"\\n\" + location;\n                      $appointment[0].setAttribute('title', tooltip);\n                    }\n                  } else {\n                    $appointment[0].setAttribute('title', uiappointment.appointment.tooltip);\n                  }\n                }\n              }\n              var renderedAppointments = that.table.find('.jqx-scheduler-appointment');\n              var getAppointmentByKey = function (key) {\n                for (var i = 0; i < renderedAppointments.length; i++) {\n                  var appKey = renderedAppointments[i].getAttribute('data-key');\n                  if (appKey == key) return renderedAppointments[i];\n                }\n              };\n              for (var x = 0; x < filteredWeekAppointments.length; x++) {\n                var uiappointment = filteredWeekAppointments[x];\n                var outOfBounds = false;\n                var $appointment = $(getAppointmentByKey(uiappointment.appointment.id));\n                $.each(uiappointment.cells, function (index) {\n                  var cell = $(this.cell);\n                  var top = uiappointment.cellY;\n                  var left = uiappointment.cellX;\n                  var cellHeight = uiappointment.cellHeight;\n                  if (!cell[0].appointments) cell[0].appointments = new Array();\n                  cell[0].appointments.push({\n                    ui: $appointment,\n                    appointment: uiappointment\n                  });\n                  $appointment = $appointment;\n                  if (uiappointment.y + uiappointment.height >= top + cellHeight - 12) {\n                    $appointment[0].style.visibility = \"hidden\";\n                    var arrow = cell.find('.jqx-icon-arrow-down');\n                    if (arrow.length > 0) {\n                      arrow[0].style.display = \"block\";\n                      arrow[0].mousedown = function () {\n                        if (that.openedMonthCellPopup) that.openedMonthCellPopup.remove();\n                        var popup = $(\"<div></div>\");\n                        var date = new $.jqx.date(cell.attr('data-date'), that.timeZone);\n                        var header = $(\"<div class='\" + that.toTP(\"jqx-scheduler-month-cell\") + \"'><span style='float: right; cursor: pointer; width:16px; height: 16px;' class='\" + that.toTP('jqx-icon-close') + \"'></span></div>\");\n                        header.height(16);\n                        header.find('span')[0].mousedown = function () {\n                          popup.remove();\n                        };\n                        header.addClass(that.toTP('jqx-widget-header'));\n                        popup.addClass(that.toTP('jqx-widget'));\n                        popup.addClass(that.toTP('jqx-window'));\n                        popup.addClass(that.toTP('jqx-scheduler-month-cell-popup'));\n                        popup.addClass(that.toTP('jqx-popup'));\n                        var content = $(\"<div></div>\");\n                        popup.append(header);\n                        popup.append(content);\n                        content.addClass(that.toTP('jqx-widget-content'));\n                        var width = cell.width();\n                        var height = 21;\n                        for (var i = 0; i < cell[0].appointments.length; i++) {\n                          var app = cell[0].appointments[i].ui.clone(true);\n                          app.css('left', '3px');\n                          app.css('top', '0px');\n                          app.css('margin-top', '2px');\n                          app.css('position', 'relative');\n                          app.css('visibility', 'visible');\n                          app.width(width - 6);\n                          app.click(function (event) {\n                            var appJQX = that.getJQXAppointmentByElement(that.getAppointmentElement(event.target));\n                            that._raiseEvent('appointmentClick', {\n                              appointment: appJQX.boundAppointment\n                            });\n                          });\n                          app.dblclick(function (event) {\n                            var appJQX = that.getJQXAppointmentByElement(that.getAppointmentElement(event.target));\n                            if (!appJQX.readOnly && !that.editRecurrenceDialog.jqxWindow('isOpen') && (!that._editDialog || that._editDialog && !that._editDialog.jqxWindow('isOpen'))) {\n                              var result = that._initDialog(appJQX);\n                              if (result !== false) {\n                                that._openDialog();\n                              }\n                            }\n                            that._raiseEvent('appointmentDoubleClick', {\n                              appointment: appJQX.boundAppointment\n                            });\n                          });\n                          height += app.outerHeight() + 4;\n                          content.append(app);\n                        }\n                        popup.css('overflow', 'hidden');\n                        popup.css('position', 'absolute');\n                        var maxHeight = that.table.height() - top - 25;\n                        if (maxHeight < cellHeight) maxHeight = cellHeight;\n                        popup.height(height);\n                        popup.width(width);\n                        popup.css('z-index', '9999');\n                        var position = cell.position();\n                        popup.css('top', position.top);\n                        popup.css('left', position.left);\n                        that.table.append(popup);\n                        if (height + position.top > that.host.offset().top + that.host.height()) {\n                          popup.css('top', position.top - height);\n                        }\n                        that.openedMonthCellPopup = popup;\n                      };\n                    }\n                  }\n                });\n              }\n            },\n            _renderMonthAppointments: function () {\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var allElements = new Array();\n              var rows = this.rows;\n              var monthCellHeight = 0; // this.host.find(\".jqx-scheduler-month-cell:first\").height();\n\n              if (this.host.find(\".jqx-scheduler-month-cell\").length > 0) {\n                monthCellHeight = $(this.host.find(\".jqx-scheduler-month-cell\")[0]).height();\n              }\n              for (var appIndex = 0; appIndex < this.appointmentsToRender.length; appIndex++) {\n                var appointment = this.appointmentsToRender[appIndex];\n                var from = $.jqx.scheduler.utilities.getStartOfDay(appointment.from);\n                var to = $.jqx.scheduler.utilities.getEndOfDay(appointment.to);\n                var allDay = appointment.allDay;\n                var appointmentCells = new Array();\n                var appointmentDays = new Array();\n                var fromValue = from.toDate().valueOf();\n                var toValue = to.toDate().valueOf();\n                var sortCells = function (value1, value2) {\n                  if (value1.date < value2.date) return -1;\n                  if (value1.date == value2.date) return 0;\n                  if (value1.date > value2.date) return 1;\n                };\n                var row = -1;\n                var resourceId = appointment.resourceId;\n                var resourceIndex = that._resources.indexOf(resourceId);\n                if (that.resources && that.resources.orientation == \"none\") resourceIndex = -1;\n                for (var i = 0; i < that.rows.length; i++) {\n                  var cells = that.rows[i].cells;\n                  for (var j = 0; j < cells.length; j++) {\n                    var dateString = cells[j].getAttribute(\"data-date\");\n                    var date = this._getDateByString(dateString);\n                    var dateValue = date.valueOf();\n                    if (dateValue > to) {\n                      continue;\n                    }\n                    cells[j].appointments = new Array();\n                    if (resourceIndex != -1) {\n                      if (1 + resourceIndex != cells[j].getAttribute('data-view')) continue;\n                    }\n                    if (fromValue <= dateValue && dateValue < toValue) {\n                      if (row != i && row != -1) {\n                        appointmentCells.sort(sortCells);\n                        appointmentDays.push(appointmentCells);\n                        appointmentCells = new Array();\n                      }\n                      appointmentCells.push({\n                        cell: cells[j],\n                        date: date\n                      });\n                      row = i;\n                    }\n                  }\n                }\n                appointmentCells.sort(sortCells);\n                appointmentDays.push(appointmentCells);\n                var appointmentElements = new Array();\n                for (var i = 0; i < appointmentDays.length; i++) {\n                  var cells = appointmentDays[i];\n                  if (cells.length == 0) break;\n                  var appointmentHeight = that.appointmentsMinHeight;\n                  if (that.isTouchDevice()) {\n                    appointmentHeight = that.touchAppointmentsMinHeight;\n                  }\n                  if (viewObject.appointmentHeight) {\n                    appointmentHeight = viewObject.appointmentHeight;\n                  }\n                  var height = appointmentHeight;\n                  /*                    var lastCellLeft = cells[cells.length - 1].cell.left;\r\n                                      var width = lastCellLeft - cells[0].cell.left + that.columns.records[0].width;\r\n                                            if (viewObject.showWeekNumbers) {\r\n                                          width = lastCellLeft - cells[0].cell.left + that.columns.records[1].width;\r\n                                      }\r\n                                            var pos = { left: cells[0].cell.left, top: cells[0].cell.top };\r\n                                      var x = pos.left;\r\n                                      var y = pos.top + monthCellHeight;\r\n                  */\n                  // /* old code\n\n                  var lastCellLeft = $(cells[cells.length - 1].cell).position().left;\n                  var width = lastCellLeft - $(cells[0].cell).position().left + that.columns.records[0].width;\n                  if (viewObject.showWeekNumbers) {\n                    var width = lastCellLeft - $(cells[0].cell).position().left + that.columns.records[1].width;\n                  }\n                  var pos = $(cells[0].cell).position();\n                  var x = pos.left;\n                  var y = pos.top + monthCellHeight;\n\n                  //\n\n                  var toDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(cells[cells.length - 1].date, that.timeZone));\n                  var fromDate = new $.jqx.date(cells[0].date, that.timeZone);\n                  if (that.rtl) {\n                    var toDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(cells[0].date, that.timeZone));\n                    var fromDate = new $.jqx.date(cells[cells.length - 1].date, that.timeZone);\n                    var pos = $(cells[cells.length - 1].cell).position();\n                    var x = pos.left;\n                    var y = pos.top + monthCellHeight;\n                    var lastCellLeft = $(cells[0].cell).position().left;\n                    var width = lastCellLeft - $(cells[cells.length - 1].cell).position().left + that.columns.records[0].width;\n                    if (viewObject.showWeekNumbers) {\n                      var width = lastCellLeft - $(cells[cells.length - 1].cell).position().left + that.columns.records[1].width;\n                    }\n                  }\n                  var data = {\n                    cells: cells,\n                    cellY: parseInt(pos.top),\n                    cellX: parseInt(pos.left),\n                    lastCellY: parseInt(pos.top),\n                    lastCellX: lastCellLeft,\n                    x: x,\n                    y: y,\n                    height: height,\n                    width: width,\n                    appointment: appointment,\n                    from: fromDate,\n                    to: toDate\n                  };\n                  appointmentElements.push(data);\n                  allElements.push(data);\n                }\n                appointment.elements = appointmentElements;\n                if (appointment.rootAppointment) {\n                  appointment.rootAppointment.elements = appointment.rootAppointment.elements.concat(appointment.elements);\n                }\n              }\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              if (this._resources.length < 2 || this.resources.orientation == \"none\") {\n                var appointmentsPerWeek = new Array();\n                var currentDate = viewStart;\n                var index = 0;\n                while (currentDate < viewEnd) {\n                  appointmentsPerWeek[index] = new Array();\n                  for (var i = 0; i < allElements.length; i++) {\n                    var element = allElements[i];\n                    if (currentDate <= element.from && element.to < currentDate.addDays(7)) {\n                      element.row = -1;\n                      element.rowSpan = 1;\n                      appointmentsPerWeek[index].push(element);\n                    }\n                  }\n                  index++;\n                  currentDate = currentDate.addDays(7);\n                }\n                currentDate = viewStart;\n                var currentWeek = viewStart;\n                for (var i = 0; i < appointmentsPerWeek.length; i++) {\n                  if (appointmentsPerWeek[i].length > 0) {\n                    var appointments = appointmentsPerWeek[i];\n                    var appointmentPerWeekToRender = [];\n                    for (var j = 0; j < 7; j++) {\n                      var appointmentsInThisDay = appointments.filter(function (appointment) {\n                        var result = $.jqx.scheduler.utilities.rangeIntersection(appointment.from, appointment.to, currentDate, $.jqx.scheduler.utilities.getEndOfDay(currentDate));\n                        return result;\n                      });\n                      currentDate = currentDate.addDays(1);\n                      for (var m = 0; m < appointmentsInThisDay.length; m++) {\n                        if (m >= this.maxAppointmentsPerDay) {\n                          break;\n                        }\n                        var appointment = appointmentsInThisDay[m];\n                        if (appointmentPerWeekToRender.indexOf(appointment) === -1) {\n                          appointmentPerWeekToRender.push(appointment);\n                        }\n                      }\n                    }\n                    this._renderUIMonthAppointments(appointmentPerWeekToRender);\n                  }\n                  currentWeek = currentWeek.addDays(7);\n                  currentDate = currentWeek;\n                }\n              } else {\n                for (var j = 0; j < this._resources.length; j++) {\n                  var id = this._resources[j];\n                  var elements = new Array();\n                  var appointmentsPerWeek = new Array();\n                  var currentDate = viewStart;\n                  var index = 0;\n                  while (currentDate < viewEnd) {\n                    appointmentsPerWeek[index] = new Array();\n                    for (var i = 0; i < allElements.length; i++) {\n                      var element = allElements[i];\n                      if (currentDate <= element.from && element.to < currentDate.addDays(7)) {\n                        element.row = -1;\n                        element.rowSpan = 1;\n                        if (element.appointment.resourceId == id) {\n                          appointmentsPerWeek[index].push(element);\n                        }\n                      }\n                    }\n                    index++;\n                    currentDate = currentDate.addDays(7);\n                  }\n                  for (var i = 0; i < appointmentsPerWeek.length; i++) {\n                    if (appointmentsPerWeek[i].length > 0) {\n                      this._renderUIMonthAppointments(appointmentsPerWeek[i]);\n                    }\n                  }\n                }\n              }\n            },\n            _getMonthAppointmentsPerWeek: function () {\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var allElements = new Array();\n              var rows = this.rows;\n              var monthCellHeight = 0; //$(\".jqx-scheduler-month-cell:first\").height();\n              if (this.host.find(\".jqx-scheduler-month-cell\").length > 0) {\n                monthCellHeight = $(this.host.find(\".jqx-scheduler-month-cell\")[0]).height();\n              }\n              if (!that.rows) return new Array();\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              for (var appIndex = 0; appIndex < this.appointmentsToRender.length; appIndex++) {\n                var appointment = this.appointmentsToRender[appIndex];\n                var from = $.jqx.scheduler.utilities.getStartOfDay(appointment.from);\n                var to = $.jqx.scheduler.utilities.getEndOfDay(appointment.to);\n                var allDay = appointment.allDay;\n                var getDate = that._getDateByString;\n                var appointmentCells = new Array();\n                var appointmentDays = new Array();\n                var fromValue = from.toDate().valueOf();\n                var toValue = to.toDate().valueOf();\n                var sortCells = function (value1, value2) {\n                  if (value1.date < value2.date) return -1;\n                  if (value1.date == value2.date) return 0;\n                  if (value1.date > value2.date) return 1;\n                };\n                var row = -1;\n                var resourceId = appointment.resourceId;\n                var resourceIndex = that._resources.indexOf(resourceId);\n                if (that.resources && that.resources.orientation == \"none\") resourceIndex = -1;\n                for (var i = 0; i < that.rows.length; i++) {\n                  var cells = that.rows[i].cells;\n                  for (var j = 0; j < cells.length; j++) {\n                    var dateString = cells[j].getAttribute(\"data-date\");\n                    var date = viewStart.addDays(i * 7 + j).toDate();\n                    var dateValue = date.valueOf();\n                    if (dateValue > to) {\n                      continue;\n                    }\n                    if (resourceIndex != -1) {\n                      if (1 + resourceIndex != cells[j].getAttribute('data-view')) continue;\n                    }\n                    if (fromValue <= dateValue && dateValue < toValue) {\n                      if (row != i && row != -1) {\n                        appointmentCells.sort(sortCells);\n                        appointmentDays.push(appointmentCells);\n                        appointmentCells = new Array();\n                      }\n                      appointmentCells.push({\n                        cell: cells[j],\n                        date: date\n                      });\n                      row = i;\n                    }\n                  }\n                }\n                appointmentCells.sort(sortCells);\n                appointmentDays.push(appointmentCells);\n                var appointmentElements = new Array();\n                for (var i = 0; i < appointmentDays.length; i++) {\n                  var cells = appointmentDays[i];\n                  if (cells.length == 0) break;\n                  var appointmentHeight = that.appointmentsMinHeight;\n                  if (that.isTouchDevice()) {\n                    appointmentHeight = that.touchAppointmentsMinHeight;\n                  }\n                  if (viewObject.appointmentHeight) {\n                    appointmentHeight = viewObject.appointmentHeight;\n                  }\n                  var height = appointmentHeight;\n                  var lastCellLeft = $(cells[cells.length - 1].cell).position().left;\n                  var width = lastCellLeft - $(cells[0].cell).position().left + that.columns.records[0].width;\n                  if (viewObject.showWeekNumbers) {\n                    var width = lastCellLeft - $(cells[0].cell).position().left + that.columns.records[1].width;\n                  }\n                  var pos = $(cells[0].cell).position();\n                  var x = pos.left;\n                  var y = pos.top + monthCellHeight;\n                  var toDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(cells[cells.length - 1].date, that.timeZone));\n                  var fromDate = new $.jqx.date(cells[0].date, that.timeZone);\n                  if (that.rtl) {\n                    var toDate = $.jqx.scheduler.utilities.getEndOfDay(new $.jqx.date(cells[0].date, that.timeZone));\n                    var fromDate = new $.jqx.date(cells[cells.length - 1].date, that.timeZone);\n                    var pos = $(cells[cells.length - 1].cell).position();\n                    var x = pos.left;\n                    var y = pos.top + monthCellHeight;\n                    var lastCellLeft = $(cells[0].cell).position().left;\n                    var width = lastCellLeft - $(cells[cells.length - 1].cell).position().left + that.columns.records[0].width;\n                    if (viewObject.showWeekNumbers) {\n                      var width = lastCellLeft - $(cells[cells.length - 1].cell).position().left + that.columns.records[1].width;\n                    }\n                  }\n                  var data = {\n                    cells: cells,\n                    cellY: parseInt(pos.top),\n                    cellX: parseInt(pos.left),\n                    lastCellY: parseInt(pos.top),\n                    lastCellX: lastCellLeft,\n                    x: x,\n                    y: y,\n                    height: height,\n                    width: width,\n                    appointment: appointment,\n                    from: fromDate,\n                    to: toDate\n                  };\n                  appointmentElements.push(data);\n                  allElements.push(data);\n                }\n              }\n              if (this._resources.length < 2 || this.resources.orientation == \"none\") {\n                var appointmentsPerWeek = new Array();\n                var currentDate = viewStart;\n                var index = 0;\n                while (currentDate < viewEnd) {\n                  appointmentsPerWeek[index] = new Array();\n                  for (var i = 0; i < allElements.length; i++) {\n                    var element = allElements[i];\n                    if (currentDate <= element.from && element.to < currentDate.addDays(7)) {\n                      element.row = -1;\n                      element.rowSpan = 1;\n                      appointmentsPerWeek[index].push(element);\n                    }\n                  }\n                  index++;\n                  currentDate = currentDate.addDays(7);\n                }\n                var weeks = new Array();\n                for (var i = 0; i < appointmentsPerWeek.length; i++) {\n                  if (appointmentsPerWeek[i].length > 0) {\n                    var result = this.getMaxMonthAppointments(appointmentsPerWeek[i]);\n                    var appointmentHeight = that.appointmentsMinHeight;\n                    if (that.isTouchDevice()) {\n                      appointmentHeight = that.touchAppointmentsMinHeight;\n                    }\n                    if (viewObject.appointmentHeight) {\n                      appointmentHeight = viewObject.appointmentHeight;\n                    }\n                    weeks.push(result * (appointmentHeight + 3) + 22);\n                  } else weeks.push(\"auto\");\n                }\n                return weeks;\n              } else {\n                var weeks = new Array();\n                for (var j = 0; j < this._resources.length; j++) {\n                  var id = this._resources[j];\n                  var elements = new Array();\n                  var appointmentsPerWeek = new Array();\n                  var currentDate = viewStart;\n                  var index = 0;\n                  while (currentDate < viewEnd) {\n                    appointmentsPerWeek[index] = new Array();\n                    for (var i = 0; i < allElements.length; i++) {\n                      var element = allElements[i];\n                      if (currentDate <= element.from && element.to < currentDate.addDays(7)) {\n                        element.row = -1;\n                        element.rowSpan = 1;\n                        if (element.appointment.resourceId == id) {\n                          appointmentsPerWeek[index].push(element);\n                        }\n                      }\n                    }\n                    index++;\n                    currentDate = currentDate.addDays(7);\n                  }\n                  for (var i = 0; i < appointmentsPerWeek.length; i++) {\n                    if (appointmentsPerWeek[i].length > 0) {\n                      var result = this.getMaxMonthAppointments(appointmentsPerWeek[i]);\n                      weeks.push(result * (appointmentHeight + 3) + 22);\n                    } else weeks.push(\"auto\");\n                  }\n                  return weeks;\n                }\n              }\n            },\n            _renderUIMonthAppointments: function (appointments) {\n              var viewObject = this._views[this._view];\n              var weekAppointments = appointments;\n              var viewStart = this.getViewStart();\n              var viewEnd = this.getViewEnd();\n              var rowsCount = 1;\n              var that = this;\n              rowsCount = this.getMaxMonthAppointments(appointments);\n              var appointmentHeight = that.appointmentsMinHeight;\n              if (that.isTouchDevice()) {\n                appointmentHeight = that.touchAppointmentsMinHeight;\n              }\n              if (viewObject.appointmentHeight) {\n                appointmentHeight = viewObject.appointmentHeight;\n              }\n              var sortFunction = this._sortAppointmentsByFrom;\n              if (this.rtl) {\n                sortFunction = this._sortAppointmentsByTo;\n              }\n              for (var j = 0; j < appointments.length; j++) {\n                var weekAppointment = appointments[j];\n                weekAppointment.row = -1;\n                var collisionAppointments = this.getCollisionAppointments(weekAppointment, appointments);\n                collisionAppointments.sort(sortFunction);\n                var currentAppointmentIndex = collisionAppointments.indexOf(weekAppointment);\n                if (currentAppointmentIndex >= 0) {\n                  for (var p = currentAppointmentIndex; p < collisionAppointments.length; p++) {\n                    collisionAppointments[p].row = -1;\n                  }\n                }\n\n                // iterate through the collision appointments and set the column.\n                for (var m = 0; m < rowsCount; m++) {\n                  var currentRow = m;\n                  for (var index in collisionAppointments) {\n                    if (index == \"indexOf\") break;\n                    var collisionAppointment = collisionAppointments[index];\n                    if (collisionAppointment.row == -1 && !this.isBusyRow(currentRow, collisionAppointments)) {\n                      collisionAppointment.row = currentRow;\n                      var maxRowsCount = rowsCount;\n                      var currentColissions = this.getMaxMonthAppointments(collisionAppointments);\n                      if (maxRowsCount > currentColissions) {\n                        maxRowsCount = currentColissions;\n                      }\n                      collisionAppointment.rowsCount = maxRowsCount;\n                    }\n                  }\n                }\n              }\n              for (var m = 0; m < weekAppointments.length; m++) {\n                var weekAppointment = weekAppointments[m];\n                var collisionAppointments = this.getCollisionAppointments(weekAppointment, weekAppointments);\n                collisionAppointments.sort(sortFunction);\n                var maxRows = 1;\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  maxRows = Math.max(maxRows, item.rowsCount);\n                }\n                for (var index in collisionAppointments) {\n                  if (index == \"indexOf\") break;\n                  var item = collisionAppointments[index];\n                  item.rowsCount = maxRows;\n                }\n                if (collisionAppointments.length == 1) {\n                  weekAppointment.rowSpan = maxRows;\n                } else {\n                  var span = 0;\n                  var canProceed = true;\n                  for (var p = weekAppointment.row; p < maxRows; p++) {\n                    for (var index in collisionAppointments) {\n                      if (index == \"indexOf\") break;\n                      var collisionAppointment = collisionAppointments[index];\n                      if (collisionAppointment == weekAppointment) continue;\n                      if (collisionAppointment.row == p) {\n                        canProceed = false;\n                      }\n                    }\n                    if (!canProceed) break;\n                    span++;\n                  }\n                  weekAppointment.rowSpan = span;\n                }\n              }\n              for (var x = 0; x < weekAppointments.length; x++) {\n                var currentRowHeight = appointmentHeight;\n                var weekAppointment = weekAppointments[x];\n                weekAppointment.height = currentRowHeight;\n                var yLocation = 2 + (3 + currentRowHeight) * weekAppointment.row;\n                weekAppointment.y = weekAppointment.y + yLocation;\n                weekAppointment.x += 1;\n                weekAppointment.width -= 5;\n                if (weekAppointment.appointment.from.hour() != 0 || weekAppointment.appointment.to.hour() != 23) {\n                  if (!that.rtl) {\n                    var xOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.from.minute() / 30);\n                    weekAppointment.timewidth = weekAppointment.width;\n                    if (weekAppointment.from.clearTime().toString() == weekAppointment.appointment.from.clearTime().toString()) {\n                      weekAppointment.timex = xOffset;\n                    } else {\n                      xOffset = 0;\n                    }\n                    if (weekAppointment.appointment.elements.length > 1) {\n                      if (weekAppointment.appointment.elements[0] != weekAppointment) {\n                        xOffset = 0;\n                      }\n                    }\n                    var wOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.to.minute() / 30);\n                    if (weekAppointment.appointment.elements.length > 1) {\n                      if (weekAppointment.appointment.elements[weekAppointment.appointment.elements.length - 1] != weekAppointment) {\n                        wOffset = 0;\n                      }\n                    }\n                    weekAppointment.timewidth -= xOffset;\n                    if (wOffset > 0) {\n                      weekAppointment.timewidth -= that.cellWidth;\n                      weekAppointment.timewidth += wOffset;\n                    }\n                    if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                      if (weekAppointment.from.clearTime().toString() == weekAppointment.appointment.from.clearTime().toString()) {\n                        weekAppointment.x += xOffset;\n                      }\n                      weekAppointment.width = weekAppointment.timewidth;\n                      if (weekAppointment.appointment.duration().days() < 1) {\n                        if (weekAppointment.width < 15) {\n                          weekAppointment.width = 15;\n                          if (xOffset + 15 > that.cellWidth) {\n                            var xNegativeOffset = that.cellWidth - xOffset - 15;\n                            weekAppointment.x += xNegativeOffset;\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    var xOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.to.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.to.minute() / 30);\n                    var wOffset = parseFloat(that.cellWidth / 24) * weekAppointment.appointment.from.hour() + parseFloat(that.cellWidth / 48) * (weekAppointment.appointment.from.minute() / 30);\n                    if (weekAppointment.appointment.elements.length > 1) {\n                      if (weekAppointment == weekAppointment.appointment.elements[0]) {\n                        if (wOffset > 0) {\n                          if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                            weekAppointment.width -= that.cellWidth - xOffset;\n                            weekAppointment.width -= wOffset;\n                          } else {\n                            weekAppointment.timewidth = weekAppointment.width - that.cellWidth + xOffset - wOffset;\n                          }\n                        } else {\n                          weekAppointment.timewidth = weekAppointment.width;\n                          weekAppointment.timex = 0;\n                        }\n                      } else if (weekAppointment == weekAppointment.appointment.elements[weekAppointment.appointment.elements.length - 1]) {\n                        if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                          weekAppointment.x += that.cellWidth;\n                          weekAppointment.x -= xOffset;\n                          weekAppointment.width += xOffset;\n                          weekAppointment.width -= that.cellWidth;\n                        }\n                        weekAppointment.timewidth = weekAppointment.width - that.cellWidth + xOffset;\n                        weekAppointment.timex = that.cellWidth - xOffset;\n                      }\n                    } else {\n                      if (viewObject.appointmentsRenderMode == \"exactTime\") {\n                        weekAppointment.x += that.cellWidth;\n                        weekAppointment.x -= xOffset;\n                        weekAppointment.width -= that.cellWidth - xOffset;\n                        weekAppointment.width -= wOffset;\n                      }\n                      if (weekAppointment.appointment.duration().days() < 1) {\n                        if (weekAppointment.width < 15) {\n                          weekAppointment.width = 15;\n                        }\n                      }\n                      weekAppointment.timewidth = weekAppointment.width - that.cellWidth + xOffset - wOffset;\n                      weekAppointment.timex = that.cellWidth - xOffset;\n                    }\n                  }\n                }\n              }\n              for (var x = 0; x < weekAppointments.length; x++) {\n                var uiappointment = weekAppointments[x];\n                var html = \"\";\n                var format = \"auto\";\n                var viewObject = this._views[this._view];\n                var from = uiappointment.appointment.from;\n                var to = uiappointment.appointment.to;\n                var format = \"auto\";\n                var viewObject = this._views[this._view];\n                var from = uiappointment.appointment.from;\n                var to = uiappointment.appointment.to;\n                if (viewObject.timeRuler && viewObject.timeRuler.formatString) {\n                  format = viewObject.timeRuler.formatString;\n                }\n                var fromFormat = format;\n                var toFormat = format;\n                if (format === \"auto\") {\n                  if (from.hour() == 0 && from.minute() == 0 || from.hour() == 12 && from.minute() == 0) {\n                    var fromFormat = \"hh tt\";\n                  } else var fromFormat = \"hh:mm\";\n                  if (to.hour() == 0 && to.minute() == 0 || to.hour() == 12 && to.minute() == 0) {\n                    var toFormat = \"hh tt\";\n                  } else var toFormat = \"hh:mm\";\n                }\n                var formattedFrom = from.toString(fromFormat);\n                var formattedTo = to.toString(toFormat);\n                var duration = uiappointment.appointment.duration();\n                var allDay = uiappointment.appointment.allDay || duration.hours === 23 && duration.minutes === 59 && duration.seconds === 59;\n                var bgColor = uiappointment.appointment.background;\n                var title = uiappointment.appointment.subject ? uiappointment.appointment.subject : \"(No Title)\";\n                var color = uiappointment.appointment.color;\n                var resourceId = uiappointment.appointment.resourceId;\n                var colors = that.getColors(that._resources.indexOf(resourceId));\n                var resourceAttribute = \" data-resourceId='\" + resourceId + \"' \";\n                var borderColor = uiappointment.appointment.borderColor;\n                var location = uiappointment.appointment.location;\n                if (location && location.length > 1) {\n                  location = \", \" + location;\n                }\n                if (!bgColor) bgColor = colors.background;\n                if (!borderColor) borderColor = colors.border;\n                if (!color) color = colors.color;\n                var isRecurrent = uiappointment.appointment.isRecurrentAppointment();\n                var isException = uiappointment.appointment.isException();\n                var defaultHTML = \"\";\n\n                // define status\n                var statusClass = that.toTP('jqx-scheduler-appointment-status');\n                var statusElement = \"\";\n                var status = that.statuses[uiappointment.appointment.status];\n                var hasStatus = false;\n                if (status) {\n                  if (status == \"transparent\") {\n                    hasStatus = false;\n                  } else {\n                    statusElement = \"<div style='background: \" + status + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    if (status == \"tentative\") {\n                      statusClass = that.toTP('jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                      statusElement = \"<div style='background-color: \" + borderColor + \"; border-right-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                    }\n                    hasStatus = true;\n                  }\n                }\n                var bottomStatusClass = that.toTP('jqx-scheduler-appointment-duration-status');\n                var bottomStatus = \"<div style='width: \" + uiappointment.timewidth + \"px; left: \" + uiappointment.timex + \"px;' class='\" + bottomStatusClass + \"'></div>\";\n                if (allDay) bottomStatus = \"\";\n                if (viewObject.appointmentsRenderMode != \"exactTimeStatus\") {\n                  bottomStatus = \"\";\n                }\n                var rtlStatusElement = \"\";\n                if (that.rtl) {\n                  var statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status');\n                  statusElement = \"<div style='background: \" + status + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  if (status == \"tentative\") {\n                    statusClass = that.toTP('jqx-scheduler-appointment-status-rtl jqx-scheduler-appointment-status jqx-scheduler-appointment-status-stripes');\n                    statusElement = \"<div style='background-color: \" + borderColor + \"; border-left-color: \" + borderColor + \"' class='\" + statusClass + \"'></div>\";\n                  }\n                  rtlStatusElement = statusElement;\n                  statusElement = \"\";\n                }\n                var customCSSClass = \"\";\n                var defaultContent = title + location;\n                if (!allDay) {\n                  defaultContent = title + location + bottomStatus;\n                }\n                if (that.renderAppointment) {\n                  var appointmentFormatData = that.renderAppointment({\n                    appointment: uiappointment.appointment.boundAppointment,\n                    textColor: color,\n                    background: bgColor,\n                    borderColor: borderColor,\n                    html: defaultContent,\n                    cssClass: \"\",\n                    style: \"\",\n                    width: uiappointment.width,\n                    height: uiappointment.height,\n                    view: that._views[that._view].type\n                  });\n                  if (appointmentFormatData) {\n                    var html = appointmentFormatData.html;\n                    if (html != defaultContent) {\n                      defaultContent = html;\n                    }\n                    color = appointmentFormatData.textColor;\n                    bgColor = appointmentFormatData.background;\n                    borderColor = appointmentFormatData.borderColor;\n                    if (appointmentFormatData.cssClass) {\n                      customCSSClass = appointmentFormatData.cssClass + \" \";\n                    }\n                    if (appointmentFormatData.style != \"\") {\n                      var colors = that.getAppointmentColors(appointmentFormatData.style);\n                      bgColor = colors.background;\n                      borderColor = colors.border;\n                      color = colors.color;\n                    }\n                  }\n                }\n\n                // end status.\n                if (defaultHTML === \"\") {\n                  if (hasStatus) {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'>\" + statusElement + \"<div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div>\" + rtlStatusElement + \"</div>\";\n                  } else {\n                    var defaultHTML = \"<div style='white-space:nowrap;' class='\" + that.toTP('jqx-scheduler-appointment-content') + \"'><div class='\" + that.toTP('jqx-scheduler-appointment-inner-content') + \"'>\" + defaultContent + \"</div></div>\";\n                  }\n                }\n                var rtlClass = \"\";\n                if (that.rtl) {\n                  rtlClass = that.toTP('jqx-rtl jqx-scheduler-appointment-rtl') + \" \";\n                }\n                if (isException) {\n                  var exceptionClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-exception-white') : that.toTP('jqx-icon-recurrence-exception');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + exceptionClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else if (isRecurrent) {\n                  var recurrenceClass = color.toLowerCase() == \"white\" ? that.toTP('jqx-icon-recurrence-white') : that.toTP('jqx-icon-recurrence');\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'><div class='\" + recurrenceClass + \"'></div>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                } else {\n                  html = \"<div data-key='\" + uiappointment.appointment.id + \"'\" + resourceAttribute + \"class='\" + rtlClass + customCSSClass + that.toTP('jqx-scheduler-appointment jqx-rc-all') + \"' style='position:absolute; z-index: 399; left: \" + uiappointment.x + \"px; top: \" + uiappointment.y + \"px; width: \" + uiappointment.width + \"px; line-height: \" + uiappointment.height + \"px; height: \" + uiappointment.height + \"px; border-color:\" + borderColor + \"; color:\" + color + \"; background:\" + bgColor + \";'>\" + defaultHTML + \"<div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-left-resize-indicator\") + \"'></div><div class='\" + that.toTP(\"jqx-scheduler-appointment-resize-indicator jqx-scheduler-appointment-right-resize-indicator\") + \"'></div>\";\n                }\n                var $appointment = $(html);\n                $appointment.appendTo(this.table);\n                uiappointment.element = $appointment;\n                var now = new Date();\n                var start = from.toDate();\n                var end = to.toDate();\n                if (start <= now && now <= end && this.showCurrentAppointment) {\n                  uiappointment.element[0].classList.add('current-appointment');\n                }\n                if (this.appointmentTooltips) {\n                  if (!uiappointment.appointment.tooltip) {\n                    var tooltip = uiappointment.appointment.subject;\n                    if (formattedFrom && !allDay) {\n                      tooltip = formattedFrom + \" - \" + formattedTo + \" \" + tooltip;\n                    }\n                    if (tooltip) {\n                      var location = uiappointment.appointment.location;\n                      if (location) tooltip += \"\\n\" + location;\n                      $appointment[0].setAttribute('title', tooltip);\n                    }\n                  } else {\n                    $appointment[0].setAttribute('title', uiappointment.appointment.tooltip);\n                  }\n                }\n                var outOfBounds = false;\n                $.each(uiappointment.cells, function () {\n                  var cell = $(this.cell);\n                  var position = cell.position();\n                  if (!cell[0].appointments) {\n                    cell[0].appointments = new Array();\n                  }\n                  cell[0].appointments.push({\n                    ui: $appointment,\n                    appointment: uiappointment\n                  });\n                  if (uiappointment.y + uiappointment.height + 2 >= position.top + cell.height()) {\n                    $appointment.css('visibility', 'hidden');\n                    var arrow = cell.find('.jqx-icon-arrow-down');\n                    arrow.show();\n                    if (arrow[0]) {\n                      arrow[0].mousedown = function () {\n                        if (that.openedMonthCellPopup) that.openedMonthCellPopup.remove();\n                        var popup = $(\"<div></div>\");\n                        var header = cell.find('div').clone(true);\n                        header.find('span').removeClass().addClass(that.toTP('jqx-icon-close'));\n                        header.find('span')[0].mousedown = function () {\n                          popup.remove();\n                        };\n                        header.addClass(that.toTP('jqx-widget-header'));\n                        popup.addClass(that.toTP('jqx-widget'));\n                        popup.addClass(that.toTP('jqx-window'));\n                        popup.addClass(that.toTP('jqx-scheduler-month-cell-popup'));\n                        popup.addClass(that.toTP('jqx-popup'));\n                        var content = $(\"<div></div>\");\n                        popup.append(header);\n                        popup.append(content);\n                        content.addClass(that.toTP('jqx-widget-content jqx-disableselect'));\n                        var width = cell.width();\n                        var height = 5 + cell.find('div').outerHeight();\n                        for (var i = 0; i < cell[0].appointments.length; i++) {\n                          var app = cell[0].appointments[i].ui.clone(true);\n                          app.css('left', '3px');\n                          app.css('top', '0px');\n                          app.css('margin-top', '2px');\n                          app.css('position', 'relative');\n                          app.css('visibility', 'visible');\n                          app.width(width - 6);\n                          height += app.outerHeight() + 4;\n                          content.append(app);\n                          app.click(function (event) {\n                            var appJQX = that.getJQXAppointmentByElement(that.getAppointmentElement(event.target));\n                            if (appJQX) {\n                              that._raiseEvent('appointmentClick', {\n                                appointment: appJQX.boundAppointment\n                              });\n                            }\n                          });\n                          app.dblclick(function (event) {\n                            var appJQX = that.getJQXAppointmentByElement(that.getAppointmentElement(event.target));\n                            if (!appJQX.readOnly && !that.editRecurrenceDialog.jqxWindow('isOpen') && (!that._editDialog || that._editDialog && !that._editDialog.jqxWindow('isOpen'))) {\n                              var result = that._initDialog(appJQX);\n                              if (result !== false) {\n                                that._openDialog();\n                              }\n                            }\n                            that._raiseEvent('appointmentDoubleClick', {\n                              appointment: appJQX.boundAppointment\n                            });\n                          });\n                        }\n                        popup.css('overflow', 'hidden');\n                        popup.css('position', 'absolute');\n                        popup.height(height);\n                        popup.width(width);\n                        popup.css('z-index', '9999');\n                        popup.css('top', position.top);\n                        popup.css('left', position.left);\n                        popup.css('max-height', 200);\n                        if (position.top + height > that.host.offset().top + that.host.height()) {\n                          popup.css('top', position.top - height);\n                        }\n                        that.table.append(popup);\n                        that.openedMonthCellPopup = popup;\n                      };\n                    }\n                  }\n                });\n              }\n            },\n            _sortByDate: function (x, y) {\n              var date1 = x.getAttribute('data-date');\n              date1 = this._getDateByString(date1);\n              var date2 = y.getAttribute('data-date');\n              date2 = this._getDateByString(date2);\n              if (date1 < date2) return -1;\n              if (date1 > date2) return 1;\n              if (date1 == date2) return 0;\n            },\n            _sortAppointmentsByFrom: function (x, y) {\n              if (x.from.dateData === y.from.dateData) {\n                var milliseconds = x.to.dateData - x.from.dateData;\n                var ticks = milliseconds * 10000;\n                var milliseconds = y.to.dateData - y.from.dateData;\n                var ticks2 = milliseconds * 10000;\n                if (ticks > ticks2) {\n                  return -1;\n                }\n              }\n              if (x.from.dateData < y.from.dateData) return -1;\n              if (x.from.dateData > y.from.dateData) return 1;\n              if (x.from.dateData == y.from.dateData) return 0;\n            },\n            _sortAppointmentsByTo: function (x, y) {\n              if (x.to.equals(y.to)) {\n                var milliseconds = x.to - x.from;\n                var ticks = milliseconds * 10000;\n                var milliseconds = y.to - y.from;\n                var ticks2 = milliseconds * 10000;\n                if (ticks > ticks2) {\n                  return -1;\n                }\n              }\n              if (x.to < y.to) return -1;\n              if (x.to > y.to) return 1;\n              if (x.to == y.to) return 0;\n            },\n            _sortAppointmentsByResourceId: function (x, y, that) {\n              var resourceIndex1 = that._resources.indexOf(x.resourceId);\n              var resourceIndex2 = that._resources.indexOf(y.resourceId);\n              if (resourceIndex1 == resourceIndex2) {\n                return 0;\n              }\n              if (resourceIndex1 < resourceIndex2) return -1;\n              if (resourceIndex1 > resourceIndex2) return -1;\n            },\n            isBusyRow: function (row, appointments) {\n              for (var i = 0; i < appointments.length; i++) {\n                var appointment = appointments[i];\n                if (appointment.row == row) {\n                  return true;\n                }\n              }\n              return false;\n            },\n            isBusyColumn: function (column, appointments) {\n              for (var i = 0; i < appointments.length; i++) {\n                var appointment = appointments[i];\n                if (appointment.column == column) {\n                  return true;\n                }\n              }\n              return false;\n            },\n            getMaxTimelineAppointments: function (appointments, cacheAppointments, viewStart, viewEnd) {\n              if (appointments.length == 0) return 1;\n              var that = this;\n              var viewType = that._views[that._view].type;\n              var viewObject = that._views[that._view];\n              var rows = 1;\n              var fromDate = viewStart;\n              var toDate = viewEnd;\n              var minutes = this.getMinutesPerScale();\n              var min = null;\n              var max = null;\n              var key = \"\";\n              for (var index in appointments) {\n                if (index == \"indexOf\") break;\n                var appointment = appointments[index];\n                if (!min) min = appointment.from.dateData;\n                if (!max) max = appointment.to.dateData;\n                if (appointment.from.dateData < min) {\n                  min = appointment.from.dateData;\n                }\n                if (appointment.to.dateData > max) {\n                  max = appointment.to.dateData;\n                }\n                key += appointment.appointment.id;\n              }\n              key += min;\n              key += max;\n              if (cacheAppointments[key]) return cacheAppointments[key];\n              min = new $.jqx.date(min, that.timeZone);\n              max = new $.jqx.date(max, that.timeZone);\n              var fromDate = min;\n              while (min < max) {\n                var from = fromDate;\n                if (viewType === \"timelineMonthView\") {\n                  var to = from.addDays(1);\n                } else {\n                  var to = from.addMinutes(minutes);\n                }\n                var currentPeriodIntersections = 0;\n                for (var index in appointments) {\n                  if (index == \"indexOf\") break;\n                  var appointment = appointments[index];\n                  var from2 = appointment.from;\n                  var to2 = appointment.to;\n                  var result = $.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2);\n                  if (result) {\n                    currentPeriodIntersections++;\n                  }\n                }\n                rows = Math.max(currentPeriodIntersections, rows);\n                if (viewType === \"timelineMonthView\") {\n                  fromDate = fromDate.addDays(1, false);\n                } else {\n                  fromDate = fromDate.addMinutes(minutes, false);\n                }\n              }\n              cacheAppointments[key] = rows;\n              return rows;\n            },\n            getMaxMonthAppointments: function (appointments) {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              if (appointments.length == 0) return 1;\n              var rows = 1;\n              var fromDate = this.getViewStart().clone();\n              var toDate = this.getViewEnd();\n              while (fromDate < toDate) {\n                var from = fromDate;\n                var to = $.jqx.scheduler.utilities.getEndOfDay(from);\n                var currentPeriodIntersections = 0;\n                for (var index in appointments) {\n                  if (index == \"indexOf\") break;\n                  var appointment = appointments[index];\n                  var from2 = appointment.from;\n                  var to2 = appointment.to;\n                  var result = $.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2);\n                  if (result) {\n                    currentPeriodIntersections++;\n                  }\n                }\n                rows = Math.max(currentPeriodIntersections, rows);\n                fromDate = fromDate.addDays(1, false);\n              }\n              return rows;\n            },\n            getMaxAllDayAppointments: function (uiappointments) {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var that = this;\n              if (uiappointments.length == 0) return 1;\n              var getRows = function (appointments) {\n                var rows = 1;\n                var fromDate = that.getViewStart();\n                var toDate = that.getViewEnd();\n                while (fromDate < toDate) {\n                  var from = fromDate;\n                  var to = $.jqx.scheduler.utilities.getEndOfDay(from);\n                  var currentPeriodIntersections = 0;\n                  for (var index in appointments) {\n                    if (index == \"indexOf\") break;\n                    var appointment = appointments[index];\n                    var jqxAppointment = appointment;\n                    if (appointment.appointment) {\n                      jqxAppointment = appointment.appointment;\n                    }\n                    if (jqxAppointment.hidden == true) {\n                      continue;\n                    }\n                    if (!jqxAppointment.duration) continue;\n                    if (jqxAppointment.allDay || jqxAppointment.duration().days() >= 1) {\n                      var from2 = appointment.from;\n                      var to2 = appointment.to;\n                      var result = $.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2);\n                      if (result) {\n                        currentPeriodIntersections++;\n                      }\n                    }\n                  }\n                  rows = Math.max(currentPeriodIntersections, rows);\n                  fromDate = fromDate.addDays(1, false);\n                }\n                return rows;\n              };\n              if (this._resources.length < 2 || !this.resources.orientation || this.resources.orientation == \"none\") {\n                var rows = getRows(uiappointments);\n              } else {\n                var maxRows = 1;\n                for (var j = 0; j < this._resources.length; j++) {\n                  var id = this._resources[j];\n                  var appointments = new Array();\n                  for (var i = 0; i < uiappointments.length; i++) {\n                    if (uiappointments[i].appointment && uiappointments[i].appointment.resourceId == id) {\n                      appointments.push(uiappointments[i]);\n                    } else if (uiappointments[i].resourceId != undefined && uiappointments[i].resourceId == id) {\n                      appointments.push(uiappointments[i]);\n                    }\n                  }\n                  var rows = getRows(appointments);\n                  maxRows = Math.max(maxRows, rows);\n                }\n                rows = maxRows;\n              }\n              return rows;\n            },\n            getMinutesPerScale: function () {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var minutes = 30;\n              var scale = \"halfHour\";\n              if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                scale = viewObject.timeRuler.scale;\n              }\n              switch (scale) {\n                case 'sixtyMinutes':\n                case 'hour':\n                  minutes = 60;\n                  break;\n                case 'thirtyMinutes':\n                case 'halfHour':\n                  minutes = 30;\n                  break;\n                case 'fifteenMinutes':\n                case 'quarterHour':\n                  minutes = 15;\n                  break;\n                case 'tenMinutes':\n                  minutes = 10;\n                  break;\n                case 'fiveMinutes':\n                  minutes = 5;\n                  break;\n              }\n              return minutes;\n            },\n            getMaxColumnsInADay: function (appointments) {\n              var view = this._views[this._view].type;\n              var viewObject = this._views[this._view];\n              var minutes = 30;\n              var scale = \"halfHour\";\n              if (viewObject.timeRuler && viewObject.timeRuler.scale) {\n                scale = viewObject.timeRuler.scale;\n              }\n              switch (scale) {\n                case 'sixtyMinutes':\n                case 'hour':\n                  minutes = 60;\n                  break;\n                case 'thirtyMinutes':\n                case 'halfHour':\n                  minutes = 30;\n                  break;\n                case 'fifteenMinutes':\n                case 'quarterHour':\n                  minutes = 15;\n                  break;\n                case 'tenMinutes':\n                  minutes = 10;\n                  break;\n                case 'fiveMinutes':\n                  minutes = 5;\n                  break;\n              }\n              if (appointments.length == 0) return 1;\n              var columns = 1;\n              var fromDate = appointments[0].from.clone();\n              var toDate = fromDate.addMinutes(minutes);\n              var endOfDay = $.jqx.scheduler.utilities.getEndOfDay(fromDate);\n              while (fromDate < endOfDay) {\n                var from = fromDate;\n                var to = toDate;\n                var currentPeriodIntersections = 0;\n                for (var index in appointments) {\n                  if (index == \"indexOf\") break;\n                  var appointment = appointments[index];\n                  if (!appointment.from && !appointment.to) continue;\n                  var from2 = appointment.from;\n                  var to2 = appointment.to;\n                  var result = $.jqx.scheduler.utilities.rangeIntersection(from, to, from2, to2);\n                  if (result) {\n                    currentPeriodIntersections++;\n                  }\n                }\n                columns = Math.max(currentPeriodIntersections, columns);\n                fromDate = fromDate.addMinutes(minutes, false);\n                toDate = toDate.addMinutes(minutes, false);\n              }\n              return columns;\n            },\n            getTouches: function (e) {\n              return $.jqx.mobile.getTouches(e);\n            },\n            _updatecolumnwidths: function () {\n              var that = this;\n              var totalwidth = this._hostWidth;\n              var hostwidth = totalwidth;\n              if (this.vScrollBar.css('visibility') !== \"hidden\" && this.scrollBarSize > 0) {\n                totalwidth -= parseInt(this.scrollBarSize) + 6;\n                if (this.rtl) {\n                  totalwidth += 3;\n                }\n                hostwidth = totalwidth;\n              }\n              var allcharacters = '';\n              if (this.columns == undefined || this.columns.records == undefined) return;\n              var that = this;\n              var requiresRowsRender = false;\n              var totalWidthColumns = new Array();\n              $.each(this.columns.records, function (i, value) {\n                if (!this.hidden) {\n                  if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {\n                    var value = 0;\n                    var offset = that.vScrollBar[0].style.visibility == 'hidden' ? 0 : that.scrollBarSize + 5;\n                    if (that.scrollBarSize == 0) offset = 0;\n                    value = parseFloat(this.width) * hostwidth / 100;\n                    if (this._percentagewidth != undefined) {\n                      value = parseFloat(this._percentagewidth) * hostwidth / 100;\n                    }\n                    if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;\n                    if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;\n                    totalwidth -= Math.round(value);\n                  } else if (this.width != 'auto' && !this._width) {\n                    totalwidth -= this.width;\n                  } else {\n                    allcharacters += this.text;\n                  }\n                  if (this._width == \"auto\") {\n                    totalWidthColumns[totalWidthColumns.length] = this;\n                  }\n                }\n              });\n              var columnheader = this.columnsheader.find('#columntable' + this.element.id);\n              if (columnheader.length == 0) return;\n              var totalOffset = 0;\n              var columns = columnheader.find('.jqx-grid-column-header');\n              var left = 0;\n              $.each(this.columns.records, function (i, value) {\n                var column = this.element;\n                var percentage = false;\n                var desiredwidth = this.width;\n                var oldwidth = this.width;\n                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {\n                  if (this._percentagewidth != undefined) {\n                    desiredwidth = parseFloat(this._percentagewidth) * hostwidth / 100;\n                  } else {\n                    desiredwidth = parseFloat(this.width) * hostwidth / 100;\n                  }\n                  desiredwidth = Math.round(desiredwidth);\n                  percentage = true;\n                }\n                if (this.width != 'auto' && !this._width && !percentage) {\n                  if (parseInt(column[0].style.width) != this.width) {\n                    column.width(this.width);\n                  }\n                } else if (percentage) {\n                  if (desiredwidth < this.minwidth && this.minwidth != 'auto') {\n                    desiredwidth = this.minwidth;\n                    this.width = desiredwidth;\n                  }\n                  if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {\n                    desiredwidth = this.maxwidth;\n                    this.width = desiredwidth;\n                  }\n                  if (parseInt(column[0].style.width) != desiredwidth) {\n                    column.width(desiredwidth);\n                    this.width = desiredwidth;\n                  }\n                } else {\n                  var columnsCount = that.columns.records.length;\n                  var viewType = that._views[that._view].type;\n                  if (viewType === \"dayView\" || viewType === \"weekView\") {\n                    var vw = that._views[that._view];\n                    if (vw.timeRuler) {\n                      if (vw.timeRuler.timeZones) {\n                        columnsCount -= vw.timeRuler.timeZones.length;\n                      }\n                      columnsCount--;\n                    } else {\n                      columnsCount--;\n                    }\n                  } else if (viewType === \"monthView\" && that._views[that._view].showWeekNumbers) {\n                    columnsCount--;\n                  }\n                  var width = Math.floor(totalwidth * (1 / columnsCount));\n                  if (that.resources && that.resources.resourceColumnWidth && that.resources.resourceColumnWidth != \"auto\") {\n                    width = that.resources.resourceColumnWidth;\n                  } else if (that.resources && that.resources.resourceColumnWidth && that.resources.resourceColumnWidth == \"auto\") {\n                    if (that.resources.orientation == \"horizontal\") {\n                      width = Math.round((2 + totalwidth) * (1 / that._getColumnsLengthPerView()));\n                    }\n                  }\n                  var diff = totalwidth * (1 / columnsCount) - width;\n                  totalOffset += diff;\n                  if (totalOffset >= 1) {\n                    totalOffset -= 1;\n                    width++;\n                  }\n                  if (totalOffset >= 0.5 && i == that.columns.records.length - 1) {\n                    width++;\n                  }\n                  if (viewType == \"agendaView\") {\n                    width = totalwidth / totalWidthColumns.length;\n                    width++;\n                  }\n                  if (width < 0) {\n                    var $element = $('<span>' + this.text + '</span>');\n                    $(document.body).append($element);\n                    width = 10 + $element.width();\n                    $element.remove();\n                  }\n                  if (width < this.minwidth) width = this.minwidth;\n                  if (width > this.maxwidth) {\n                    width = this.maxwidth;\n                  }\n                  this._width = 'auto';\n                  this.width = parseInt(width);\n                  column.width(this.width);\n                }\n                if (parseInt(column[0].style.left) != left) {\n                  column.css('left', left);\n                }\n                if (!this.hidden) {\n                  left += this.width;\n                }\n                this._requirewidthupdate = true;\n                if (oldwidth !== this.width) {\n                  requiresRowsRender = true;\n                }\n              });\n              this.columnsheader.width(2 + left);\n              columnheader.width(this.columnsheader.width());\n              this._resizecolumnGroups();\n              if (requiresRowsRender) {\n                this._renderrows();\n                that._arrange();\n              }\n            },\n            _rendercolumnheaders: function () {\n              var that = this;\n              if (this._updating) {\n                return;\n              }\n              var viewObject = this._views[this._view];\n              this._columnsbydatafield = new Array();\n              this.columnsheader.find('#columntable' + this.element.id).remove();\n              var columnheader = $('<div id=\"columntable' + this.element.id + '\" style=\"height: 100%; position: relative;\"></div>');\n              columnheader[0].cells = new Array();\n              var k = 0;\n              var left = 0;\n              var allcharacters = \"\";\n              var hWidth = this._hostWidth;\n              if (!hWidth) {\n                this._hostWidth = this.host.width();\n              }\n              var totalwidth = this._hostWidth;\n              var hostwidth = totalwidth;\n              var pageSize = this.getRows().length;\n              var defaultRowHeight = this.rowsHeight;\n              if (this.isTouchDevice()) {\n                defaultRowHeight = this.touchRowsHeight;\n              }\n              if (pageSize * defaultRowHeight > this.host.height()) {\n                this.vScrollBar[0].style.visibility = \"inherit\";\n              }\n              if (this.vScrollBar.css('visibility') !== \"hidden\" && this.scrollBarSize > 0) {\n                totalwidth -= parseInt(this.scrollBarSize) + 6;\n                if (this.rtl) {\n                  totalwidth += 3;\n                }\n                hostwidth = totalwidth;\n              }\n              var normalcolumns = new Array();\n              var totalWidthColumns = new Array();\n              $.each(this.columns.records, function (i, value) {\n                if (!this.hidden) {\n                  if (this.width != 'auto' && !this._width) {\n                    if (this.width < this.minwidth && this.minwidth != 'auto') {\n                      totalwidth -= this.minwidth;\n                    } else if (this.width > this.maxwidth && this.maxwidth != 'auto') {\n                      totalwidth -= this.maxwidth;\n                    } else if (this.width.toString().indexOf('%') != -1) {\n                      var value = 0;\n                      value = parseFloat(this.width) * hostwidth / 100;\n                      if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;\n                      if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;\n                      totalwidth -= value;\n                    } else {\n                      if (typeof this.width == 'string') this.width = parseInt(this.width);\n                      totalwidth -= this.width;\n                    }\n                  } else {\n                    allcharacters += this.text;\n                  }\n                }\n                if (this.width == null || this.width == \"auto\") {\n                  totalWidthColumns[totalWidthColumns.length] = this;\n                }\n                normalcolumns[normalcolumns.length] = this;\n              });\n              if (this.rtl) {\n                for (var j = 0; j < normalcolumns.length; j++) {\n                  this.columns.replace(j, normalcolumns[j]);\n                }\n              }\n              var zindex = this.headerZIndex;\n              var groupslength = 0;\n              var headerheight = that.columnsHeight;\n              var getcolumnheight = function (datafield, column) {\n                var height = that.columnGroupslevel * that.columnsHeight;\n                height = height - column.level * that.columnsHeight;\n                return height;\n              };\n              var totalOffset = 0;\n              var frag = document.createDocumentFragment();\n              $.each(this.columns.records, function (i, value) {\n                this.height = that.columnsHeight;\n                if (that.columnGroups) {\n                  if (that.columnGroups.length) {\n                    this.height = getcolumnheight(this.datafield, this);\n                    headerheight = this.height;\n                  }\n                }\n                var classname = that.toTP('jqx-grid-column-header') + \" \" + that.toTP('jqx-widget-header');\n                if (that.rtl) {\n                  classname += \" \" + that.toTP('jqx-grid-column-header-rtl');\n                }\n                if (!that.enableBrowserSelection) {\n                  classname += \" \" + that.toTP('jqx-disableselect');\n                }\n                var columnZIndex = !that.rtl ? zindex-- : zindex++;\n                var col = document.createElement(\"div\");\n                col.setAttribute('role', 'columnheader');\n                col.style.position = \"absolute\";\n                col.style.zIndex = columnZIndex;\n                col.style.height = \"100%\";\n                col.className = classname;\n                var column = $(col);\n                if (that.rtl && i === 0) {\n                  column[0].style.borderLeftColor = \"transparent\";\n                }\n                if (that.columnGroups) {\n                  column[0].style.height = headerheight + 'px';\n                  column[0].style.bottom = '0px';\n                } else if (!this.timeColumn) {\n                  column[0].style.height = -1 + headerheight + 'px';\n                }\n                this.uielement = column;\n                this.element = column;\n                if (this.classname != '' && this.classname) {\n                  column.addClass(this.classname);\n                }\n                var desiredwidth = this.width;\n                var percentage = false;\n                if (this.width === null) {\n                  this.width = \"auto\";\n                }\n                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {\n                  if (this._percentagewidth != undefined) {\n                    desiredwidth = parseFloat(this._percentagewidth) * hostwidth / 100;\n                  } else {\n                    desiredwidth = parseFloat(this.width) * hostwidth / 100;\n                  }\n                  desiredwidth = Math.round(desiredwidth);\n                  percentage = true;\n                }\n                if (this.width != 'auto' && !this._width && !percentage) {\n                  if (desiredwidth < this.minwidth && this.minwidth != 'auto') {\n                    desiredwidth = this.minwidth;\n                  }\n                  if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {\n                    desiredwidth = this.maxwidth;\n                  }\n                  column[0].style.width = parseInt(desiredwidth) + 'px';\n                } else if (percentage) {\n                  if (desiredwidth < this.minwidth && this.minwidth != 'auto') {\n                    desiredwidth = this.minwidth;\n                  }\n                  if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {\n                    desiredwidth = this.maxwidth;\n                  }\n                  if (this._percentagewidth == undefined || this.width.toString().indexOf('%') != -1) {\n                    this._percentagewidth = this.width;\n                  }\n                  column.width(desiredwidth);\n                  this.width = desiredwidth;\n                } else {\n                  var columnsCount = that.columns.records.length;\n                  var viewType = that._views[that._view].type;\n                  if (viewType === \"dayView\" || viewType === \"weekView\") {\n                    var vw = that._views[that._view];\n                    if (vw.timeRuler) {\n                      if (vw.timeRuler.timeZones) {\n                        columnsCount -= vw.timeRuler.timeZones.length;\n                      }\n                      columnsCount--;\n                    } else {\n                      columnsCount--;\n                    }\n                  } else if (viewType === \"monthView\" && that._views[that._view].showWeekNumbers) {\n                    columnsCount--;\n                  }\n                  var width = Math.floor(totalwidth * (1 / columnsCount));\n                  if (that.resources && that.resources.resourceColumnWidth && that.resources.resourceColumnWidth != \"auto\") {\n                    width = that.resources.resourceColumnWidth;\n                  } else if (that.resources && that.resources.resourceColumnWidth && that.resources.resourceColumnWidth == \"auto\") {\n                    if (that.resources.orientation == \"horizontal\") {\n                      width = Math.round((2 + totalwidth) * (1 / that._getColumnsLengthPerView()));\n                    }\n                  }\n                  var diff = totalwidth * (1 / columnsCount) - width;\n                  totalOffset += diff;\n                  if (totalOffset >= 1) {\n                    totalOffset -= 1;\n                    width++;\n                  }\n                  if (totalOffset >= 0.5 && i == that.columns.records.length - 1) {\n                    width++;\n                  }\n                  if (isNaN(width)) {\n                    width = this.minwidth;\n                  }\n                  if (viewType == \"agendaView\") {\n                    width = totalwidth / totalWidthColumns.length;\n                    width++;\n                  }\n                  if (width < 0) {\n                    var $element = $('<span>' + this.text + '</span>');\n                    $(document.body).append($element);\n                    width = 10 + $element.width();\n                    $element.remove();\n                  }\n                  if (width < this.minwidth) width = this.minwidth;\n                  if (width > this.maxwidth) {\n                    width = this.maxwidth;\n                  }\n                  this._width = 'auto';\n                  this.width = parseInt(width);\n                  desiredwidth = this.width;\n                  column.width(this.width);\n                }\n                if (this.timeColumn) {\n                  column.css('border-bottom-color', 'transparent');\n                  if (viewObject.timeRuler && viewObject.timeRuler.timeZones) {\n                    if (i < viewObject.timeRuler.timeZones.length) {\n                      column.css('border-right-color', 'transparent');\n                    }\n                  }\n                  if (this.tableRows == 1) {\n                    column.addClass(that.toTP(\"jqx-scheduler-time-column\"));\n                  }\n                }\n                if (this.hidden) {\n                  column.css('display', 'none');\n                }\n                var columncontentcontainer = $(column.children()[0]);\n                columnheader[0].cells[i] = column[0];\n                var columnContent = that._rendercolumnheader(this.text, this.align, headerheight, that);\n                column[0].innerHTML = columnContent;\n                frag.appendChild(column[0]);\n                var columnitem = this;\n                column[0].style.left = left + \"px\";\n                if (!this.hidden) {\n                  left += desiredwidth;\n                }\n              });\n              columnheader[0].appendChild(frag);\n              if (left > 0) {\n                this.columnsheader[0].style.width = 2 + left + \"px\";\n              } else {\n                this.columnsheader[0].style.width = left + \"px\";\n              }\n              this._columnswidth = left;\n              this.columnsrow = columnheader;\n              that.columnsheader.append(columnheader);\n              columnheader[0].style.width = left + \"px\";\n              if (this.columnGroups) {\n                this._rendercolumnGroups();\n              }\n              if (this.showCurrent) {\n                this._refreshColumnTitles();\n              }\n            },\n            _rendercolumnGroups: function () {\n              if (!this.columnGroups) return;\n              var zindex = this.headerZIndex + this.columns.records.length;\n              var that = this;\n              var classname = that.toTP('jqx-grid-column-header') + \" \" + that.toTP('jqx-grid-columngroup-header') + \" \" + that.toTP('jqx-widget-header');\n              if (that.rtl) {\n                classname += \" \" + that.toTP('jqx-grid-columngroup-header-rtl');\n              }\n              var columnheader = this.columnsheader.find('#columntable' + this.element.id);\n              columnheader.find('jqx-grid-columngroup-header').remove();\n              for (var j = 0; j < this.columnGroupslevel - 1; j++) {\n                for (var i = 0; i < this.columnGroups.length; i++) {\n                  var group = this.columnGroups[i];\n                  var level = group.level;\n                  if (level !== j) continue;\n                  var top = level * this.columnsHeight;\n                  var left = 99999;\n                  if (group.groups) {\n                    var getwidth = function (group) {\n                      var width = 0;\n                      for (var j = 0; j < group.groups.length; j++) {\n                        var currentgroup = group.groups[j];\n                        if (!currentgroup.groups) {\n                          if (!currentgroup.hidden) {\n                            width += currentgroup.width;\n                            left = Math.min(parseInt(currentgroup.element[0].style.left), left);\n                          }\n                        } else {\n                          width += getwidth(currentgroup);\n                        }\n                      }\n                      return width;\n                    };\n                    group.width = getwidth(group);\n                    group.left = left;\n                    var height = this.columnsHeight;\n                    var columnZIndex = zindex--;\n                    var column = $('<div role=\"columnheader\" style=\"z-index: ' + columnZIndex + ';position: absolute;\" class=\"' + classname + '\"></div>');\n                    var element = $(this._rendercolumnheader(group.text, group.align, this.columnsHeight, this));\n                    if (group.renderer) {\n                      group.renderer(column, group.text);\n                    }\n                    column.append(element);\n                    column[0].style.left = left + 'px';\n                    if (left === 0) {\n                      column[0].style.borderLeftColor = 'transparent';\n                    }\n                    column[0].style.top = top + 'px';\n                    column[0].style.height = height + 'px';\n                    column[0].style.width = -1 + group.width + 'px';\n                    columnheader.append(column);\n                    group.element = column;\n                  }\n                }\n              }\n            },\n            _resizecolumnGroups: function () {\n              if (!this.columnGroups) return;\n              for (var i = 0; i < this.columnGroups.length; i++) {\n                var group = this.columnGroups[i];\n                var level = group.level;\n                var top = level * this.columnsHeight;\n                var left = 99999;\n                if (group.groups) {\n                  var getwidth = function (group) {\n                    var width = 0;\n                    for (var j = 0; j < group.groups.length; j++) {\n                      var currentgroup = group.groups[j];\n                      if (!currentgroup.groups) {\n                        width += currentgroup.width;\n                        left = Math.min(parseInt(currentgroup.element[0].style.left), left);\n                      } else {\n                        width += getwidth(currentgroup);\n                      }\n                    }\n                    return width;\n                  };\n                  group.width = getwidth(group);\n                  group.left = left;\n                  var height = this.columnsHeight;\n                  var column = group.element;\n                  column[0].style.left = left + 'px';\n                  column[0].style.top = top + 'px';\n                  column[0].style.height = height + 'px';\n                  column[0].style.width = -1 + group.width + 'px';\n                }\n              }\n            },\n            _removecolumnhandlers: function (columnitem) {\n              var that = this;\n              var column = $(columnitem.element);\n              if (column.length > 0) {\n                that.removeHandler(column, 'mouseenter');\n                that.removeHandler(column, 'mouseleave');\n                var $filtericon = $(columnitem.filtericon);\n                that.removeHandler($filtericon, 'mousedown');\n                that.removeHandler($filtericon, 'click');\n                that.removeHandler(column, 'click');\n              }\n            },\n            destroy: function () {\n              var that = this;\n              that._removeHandlers();\n              if (that._editDialog) {\n                that._editDialog.jqxWindow('destroy');\n              }\n              if (that.menu) {\n                that.menu.jqxMenu('destroy');\n              }\n              if (that.editRecurrenceDialog) {\n                that.editRecurrenceDialog.jqxWindow('destroy');\n              }\n              that.vScrollBar.jqxScrollBar('destroy');\n              that.hScrollBar.jqxScrollBar('destroy');\n              delete that.vScrollBar;\n              delete that.hScrollBar;\n              delete that._mousewheelfunc;\n              $.jqx.utilities.resize(that.host, null, true);\n              that.host.remove();\n            },\n            propertiesChangedHandler: function (object, oldValues, newValues) {\n              if (newValues && newValues.width && newValues.height && Object.keys(newValues).length == 2) {\n                object.host.height(object.height);\n                object.host.width(object.width);\n                object._updatesize(false, true);\n              }\n            },\n            filterAppointments: function (value) {\n              var e = this;\n              for (var d = 0; d < e.uiappointments.length; d++) {\n                var g = e.uiappointments[d];\n                if (g.subject.includes(value)) {\n                  g.hidden = false;\n                } else {\n                  g.hidden = true;\n                }\n              }\n              e._renderrows();\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              if (this.isInitialized == undefined || this.isInitialized == false) return;\n              if (object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length == 2) {\n                return;\n              }\n              if (value !== oldvalue) {\n                if (key == \"filterable\") {\n                  object._render();\n                } else if (key == \"view\") {\n                  object.setView(value);\n                } else if (key == \"views\") {\n                  object._columns = null;\n                  object._views = new Array();\n                  object._view = object.view;\n                  for (var i = 0; i < object.views.length; i++) {\n                    if ($.type(object.views[i]) === \"string\") {\n                      object._views.push({\n                        type: object.views[i]\n                      });\n                    } else {\n                      object._views.push(object.views[i]);\n                    }\n                  }\n                  for (var i = 0; i < object._views.length; i++) {\n                    if (object._views[i].type == object.view) {\n                      object._view = i;\n                      break;\n                    }\n                  }\n                  object._render();\n                } else if (key === \"height\") {\n                  object._hostWidth = null;\n                  object._hostHeight = null;\n                  object.host.height(object.height);\n                  object.host.width(object.width);\n                  object._updatesize(false, true);\n                } else if (key === \"width\") {\n                  object._hostWidth = null;\n                  object._hostHeight = null;\n                  object.host.height(object.height);\n                  object.host.width(object.width);\n                  object._updatesize(true, false);\n                } else if (key === \"source\") {\n                  var value = object.vScrollBar.jqxScrollBar('value');\n                  object.updateBoundData('dataBind', function () {\n                    object.scrolltop(0);\n                    object.vScrollBar.jqxScrollBar({\n                      value: value\n                    });\n                  });\n                } else if (key == \"resources\") {\n                  var value = object.vScrollBar.jqxScrollBar('value');\n                  object.updateBoundData('dataBind', function () {\n                    object.scrolltop(0);\n                    object.vScrollBar.jqxScrollBar({\n                      value: value\n                    });\n                  });\n                } else if (key === \"columns\" || key === \"columnGroups\") {\n                  object._columns = null;\n                  object._render();\n                } else if (key === \"selectionMode\") {\n                  object.selectionMode = value.toLowerCase();\n                } else if (key == \"touchMode\") {\n                  object._removeHandlers();\n                  object.touchDevice = null;\n                  object.vScrollBar.jqxScrollBar({\n                    touchMode: value\n                  });\n                  object.hScrollBar.jqxScrollBar({\n                    touchMode: value\n                  });\n                  object.refresh();\n                  object._addHandlers();\n                } else if (key == \"enableHover\") {\n                  return;\n                } else if (key == \"showLegend\") {\n                  object.legendbartop.show();\n                  object.legendbarbottom.show();\n                  object.refresh();\n                } else if (key == 'disabled') {\n                  if (value) {\n                    object.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                  } else {\n                    object.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                  }\n                  object.host.find('.jqx-grid-group-collapse').css('cursor', value ? 'default' : 'pointer');\n                  object.host.find('.jqx-grid-group-expand').css('cursor', value ? 'default' : 'pointer');\n                } else if (key == 'columnsHeight') {\n                  object._render();\n                } else if (key == 'localization') {\n                  object._render();\n                  if (object.editRecurrenceDialog) {\n                    object.editRecurrenceDialog.jqxWindow('destroy');\n                    object.createEditRecurrenceDialog();\n                  }\n                } else if (key == 'theme') {\n                  $.jqx.utilities.setTheme(oldvalue, value, object.host);\n                  if (object._editDialog) {\n                    $.jqx.utilities.setTheme(oldvalue, value, object._editDialog);\n                  }\n                  if (object.editRecurrenceDialog) {\n                    $.jqx.utilities.setTheme(oldvalue, value, object.editRecurrenceDialog);\n                  }\n                  if (object.menu) {\n                    object.menu.jqxMenu({\n                      theme: object.theme\n                    });\n                  }\n                  object.vScrollBar.jqxScrollBar({\n                    theme: object.theme\n                  });\n                  object.hScrollBar.jqxScrollBar({\n                    theme: object.theme\n                  });\n                  object.refresh();\n                } else if (key === \"date\") {\n                  object.navigateTo(value);\n                } else {\n                  object.refresh();\n                }\n              }\n            },\n            _rendercolumnheader: function (text, align, headerheight, that) {\n              var margin = '4px';\n              if (that.columnGroups) {\n                margin = headerheight / 2 - this._columnheight / 2;\n                if (margin < 0) {\n                  margin = 4;\n                }\n                margin += 'px';\n              } else {\n                if (this.columnsHeight != 25) {\n                  margin = this.columnsHeight / 2 - this._columnheight / 2;\n                  if (margin < 0) {\n                    margin = 4;\n                  }\n                  margin += 'px';\n                }\n              }\n              var columnHTML = '<div style=\"overflow: hidden; text-overflow: ellipsis; text-align: ' + align + '; margin-left: 4px; margin-right: 4px; margin-bottom: ' + margin + '; margin-top: ' + margin + ';\">' + '<span style=\"text-overflow: ellipsis; cursor: default;\">' + text + '</span>' + '</div>';\n              if (this.columnRenderer) {\n                var result = this.columnRenderer(text, align, headerheight, columnHTML);\n                if (result != undefined) return result;\n              }\n              return columnHTML;\n            }\n          });\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/4240: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          $.jqx.jqxWidget(\"jqxScrollBar\", \"\", {});\n          $.extend($.jqx._jqxScrollBar.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: Number\n                // Default: null\n                // Sets the scrollbar height.\n                height: null,\n                // Type: Number\n                // Default: null\n                // Sets the scrollbar width.\n                width: null,\n                // Type: Number\n                // Default: false. This means that the scrollbar is horizontally oriented by default.\n                // Sets the scrollbar orientation.\n                vertical: false,\n                // Type: Number\n                // Default: 0\n                // Sets the minimum scroll value.\n                min: 0,\n                // Type: Number\n                // Default: 0\n                // Sets the maximum scroll value.\n                max: 1000,\n                // Type: Number\n                // Default: 0\n                // Sets the scroll value. The value can be between min and max.\n                value: 0,\n                // Type: Number\n                // Default: 0\n                // Sets the scroll step when any arrow button is clicked.\n                step: 10,\n                // Type: Number\n                // Default: 0\n                // Sets the scroll step when the user clicks on the empty scroll space between arrow button and thumb.\n                largestep: 50,\n                // Type: Number\n                // Default: 10\n                // sets the thumb's minimum size.\n                thumbMinSize: 10,\n                // Type: Number\n                // Default: 0\n                // sets the thumb's size.\n                thumbSize: 0,\n                // Type: Number or 'auto'\n                // Default: 'auto'\n                // sets the thumb's drag step.\n                thumbStep: 'auto',\n                // Type: String\n                // Default: 'all'\n                // sets the rounded corners string.\n                roundedCorners: 'all',\n                // Type: Boolean\n                // Default: true\n                // Sets whether the scroll buttons are visible.\n                showButtons: true,\n                // Type: Boolean\n                // Default: false\n                // Sets whether the scrollbar is disabled or not.\n                disabled: false,\n                // Sets whether the scrollbar is on touch device.\n                touchMode: 'auto',\n                touchModeStyle: 'auto',\n                thumbTouchSize: 0,\n                // disable jquery trigger function. It is very slow if you call it on mouse move. This could improve performance.\n                _triggervaluechanged: true,\n                rtl: false,\n                areaDownCapture: false,\n                areaUpCapture: false,\n                _initialLayout: false,\n                offset: 0,\n                reference: 0,\n                velocity: 0,\n                frame: 0,\n                timestamp: 0,\n                ticker: null,\n                amplitude: 0,\n                target: 0\n              };\n              if (this === $.jqx._jqxScrollBar.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function (args) {\n              this.render();\n            },\n            // createInstance\n\n            render: function () {\n              this._mouseup = new Date();\n              var self = this;\n              var html = \"<div id='jqxScrollOuterWrap' style='box-sizing: content-box; width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'>\" + \"<div id='jqxScrollWrap' style='box-sizing: content-box; width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'>\" + \"<div id='jqxScrollBtnUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div>\" + \"<div id='jqxScrollAreaUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='jqxScrollThumb' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='jqxScrollAreaDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>\" + \"<div id='jqxScrollBtnDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div>\" + \"</div>\" + \"</div>\";\n              if ($.jqx.utilities && $.jqx.utilities.scrollBarButtonsVisibility == \"hidden\") {\n                this.showButtons = false;\n              }\n              if (self.WinJS) {\n                MSApp.execUnsafeLocalFunction(function () {\n                  self.host.html(html);\n                });\n              } else {\n                this.element.innerHTML = html;\n              }\n              if (this.width != undefined && parseInt(this.width) > 0) {\n                this.host.width(parseInt(this.width));\n              }\n              if (this.height != undefined && parseInt(this.height) > 0) {\n                this.host.height(parseInt(this.height));\n              }\n              this.isPercentage = false;\n              if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n                this.host.width(this.width);\n                this.isPercentage = true;\n              }\n              if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n                this.host.height(this.height);\n                this.isPercentage = true;\n              }\n              if (this.isPercentage) {\n                var that = this;\n                $.jqx.utilities.resize(this.host, function () {\n                  that._arrange();\n                }, false);\n              }\n              this.thumbCapture = false;\n              this.scrollOuterWrap = $(this.element.firstChild);\n              this.scrollWrap = $(this.scrollOuterWrap[0].firstChild);\n              this.btnUp = $(this.scrollWrap[0].firstChild);\n              this.areaUp = $(this.btnUp[0].nextSibling);\n              this.btnThumb = $(this.areaUp[0].nextSibling);\n              this.arrowUp = $(this.btnUp[0].firstChild);\n              this.areaDown = $(this.btnThumb[0].nextSibling);\n              this.btnDown = $(this.areaDown[0].nextSibling);\n              this.arrowDown = $(this.btnDown[0].firstChild);\n              var elID = this.element.id;\n              this.btnUp[0].id = \"jqxScrollBtnUp\" + elID;\n              this.btnDown[0].id = \"jqxScrollBtnDown\" + elID;\n              this.btnThumb[0].id = \"jqxScrollThumb\" + elID;\n              this.areaUp[0].id = \"jqxScrollAreaUp\" + elID;\n              this.areaDown[0].id = \"jqxScrollAreaDown\" + elID;\n              this.scrollWrap[0].id = \"jqxScrollWrap\" + elID;\n              this.scrollOuterWrap[0].id = \"jqxScrollOuterWrap\" + elID;\n              if (!this.host.jqxRepeatButton) {\n                throw new Error('jqxScrollBar: Missing reference to jqxbuttons.js.');\n                return;\n              }\n              this.btnUp.jqxRepeatButton({\n                _ariaDisabled: true,\n                overrideTheme: true,\n                disabled: this.disabled\n              });\n              this.btnDown.jqxRepeatButton({\n                _ariaDisabled: true,\n                overrideTheme: true,\n                disabled: this.disabled\n              });\n              this.btnDownInstance = $.data(this.btnDown[0], 'jqxRepeatButton').instance;\n              this.btnUpInstance = $.data(this.btnUp[0], 'jqxRepeatButton').instance;\n              this.areaUp.jqxRepeatButton({\n                _scrollAreaButton: true,\n                _ariaDisabled: true,\n                overrideTheme: true\n              });\n              this.areaDown.jqxRepeatButton({\n                _scrollAreaButton: true,\n                _ariaDisabled: true,\n                overrideTheme: true\n              });\n              this.btnThumb.jqxButton({\n                _ariaDisabled: true,\n                overrideTheme: true,\n                disabled: this.disabled\n              });\n              this.propertyChangeMap['value'] = function (instance, key, oldVal, value) {\n                if (!isNaN(value)) {\n                  if (oldVal != value) {\n                    instance.setPosition(parseFloat(value), true);\n                  }\n                }\n              };\n              this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {\n                if (instance.width != undefined && parseInt(instance.width) > 0) {\n                  instance.host.width(parseInt(instance.width));\n                  instance._arrange();\n                }\n              };\n              this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {\n                if (instance.height != undefined && parseInt(instance.height) > 0) {\n                  instance.host.height(parseInt(instance.height));\n                  instance._arrange();\n                }\n              };\n              this.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {\n                instance.setTheme();\n              };\n              this.propertyChangeMap['max'] = function (instance, key, oldVal, value) {\n                if (!isNaN(value)) {\n                  if (oldVal != value) {\n                    instance.max = parseInt(value);\n                    if (instance.min > instance.max) instance.max = instance.min + 1;\n                    instance._arrange();\n                    instance.setPosition(instance.value);\n                  }\n                }\n              };\n              this.propertyChangeMap['min'] = function (instance, key, oldVal, value) {\n                if (!isNaN(value)) {\n                  if (oldVal != value) {\n                    instance.min = parseInt(value);\n                    if (instance.min > instance.max) instance.max = instance.min + 1;\n                    instance._arrange();\n                    instance.setPosition(instance.value);\n                  }\n                }\n              };\n              this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  if (value) {\n                    instance.host.addClass(instance.toThemeProperty('jqx-fill-state-disabled'));\n                  } else {\n                    instance.host.removeClass(instance.toThemeProperty('jqx-fill-state-disabled'));\n                  }\n                  instance.btnUp.jqxRepeatButton('disabled', instance.disabled);\n                  instance.btnDown.jqxRepeatButton('disabled', instance.disabled);\n                  instance.btnThumb.jqxButton('disabled', instance.disabled);\n                }\n              };\n              this.propertyChangeMap['touchMode'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  instance._updateTouchBehavior();\n                  if (value === true) {\n                    instance.showButtons = false;\n                    instance.refresh();\n                  } else if (value === false) {\n                    instance.showButtons = true;\n                    instance.refresh();\n                  }\n                }\n              };\n              this.propertyChangeMap['rtl'] = function (instance, key, oldVal, value) {\n                if (oldVal != value) {\n                  instance.refresh();\n                }\n              };\n              this.buttonUpCapture = false;\n              this.buttonDownCapture = false;\n              this._updateTouchBehavior();\n              this.setPosition(this.value);\n              this._addHandlers();\n              this.setTheme();\n            },\n            resize: function (width, height) {\n              this.width = width;\n              this.height = height;\n              this._arrange();\n            },\n            _updateTouchBehavior: function () {\n              this.isTouchDevice = $.jqx.mobile.isTouchDevice();\n              if (this.touchMode == true) {\n                if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                  this.setTheme();\n                  return;\n                }\n                this.isTouchDevice = true;\n                $.jqx.mobile.setMobileSimulator(this.btnThumb[0]);\n                this._removeHandlers();\n                this._addHandlers();\n                this.setTheme();\n              } else if (this.touchMode == false) {\n                this.isTouchDevice = false;\n              }\n            },\n            _addHandlers: function () {\n              var self = this;\n              var touchSupport = false;\n              try {\n                if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n                  touchSupport = true;\n                  this._touchSupport = true;\n                }\n              } catch (err) {}\n              if (self.isTouchDevice || touchSupport) {\n                this.addHandler(this.btnThumb, $.jqx.mobile.getTouchEventName('touchend'), function (event) {\n                  var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');\n                  var btnThumbPressedFillClass = self.toThemeProperty('jqx-fill-state-pressed');\n                  self.btnThumb.removeClass(btnThumbPressedClass);\n                  self.btnThumb.removeClass(btnThumbPressedFillClass);\n                  if (!self.disabled) self.handlemouseup(self, event);\n                  return false;\n                });\n                this.addHandler(this.btnThumb, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {\n                  if (!self.disabled) {\n                    if (self.touchMode == true) {\n                      event.clientX = event.originalEvent.clientX;\n                      event.clientY = event.originalEvent.clientY;\n                    } else {\n                      var e = event;\n                      if (e.originalEvent.touches && e.originalEvent.touches.length) {\n                        event.clientX = e.originalEvent.touches[0].clientX;\n                        event.clientY = e.originalEvent.touches[0].clientY;\n                      } else {\n                        event.clientX = event.originalEvent.clientX;\n                        event.clientY = event.originalEvent.clientY;\n                      }\n                    }\n                    self.handlemousedown(event);\n                    if (event.preventDefault) {\n                      event.preventDefault();\n                    }\n                  }\n                });\n                $.jqx.mobile.touchScroll(this.element, self.max, function (left, top, dx, dy, event) {\n                  if (self.host.css('visibility') == 'visible') {\n                    if (event) {\n                      if (self.touchMode == true) {\n                        event.clientX = event.originalEvent.clientX;\n                        event.clientY = event.originalEvent.clientY;\n                      } else {\n                        var e = event;\n                        if (e.originalEvent.touches && e.originalEvent.touches.length) {\n                          event.clientX = e.originalEvent.touches[0].clientX;\n                          event.clientY = e.originalEvent.touches[0].clientY;\n                        } else {\n                          event.clientX = event.originalEvent.clientX;\n                          event.clientY = event.originalEvent.clientY;\n                        }\n                      }\n                    }\n                    var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');\n                    self.btnThumb.addClass(btnThumbPressedClass);\n                    self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-pressed'));\n                    self.thumbCapture = true;\n                    self.element.setAttribute('touched', '');\n                    self.handlemousemove(event);\n                  }\n                }, self.element.id, self.host, self.host);\n              }\n              if (!this.isTouchDevice) {\n                try {\n                  if (document.referrer != \"\" || window.frameElement) {\n                    if (window.top != null && window.top != window.self) {\n                      var parentLocation = null;\n                      if (window.parent && document.referrer) {\n                        parentLocation = document.referrer;\n                      }\n                      if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {\n                        var eventHandle = function (event) {\n                          if (!self.disabled) self.handlemouseup(self, event);\n                        };\n                        if (window.top.document.addEventListener) {\n                          window.top.document.addEventListener('mouseup', eventHandle, false);\n                        } else if (window.top.document.attachEvent) {\n                          window.top.document.attachEvent(\"on\" + 'mouseup', eventHandle);\n                        }\n                      }\n                    }\n                  }\n                } catch (error) {}\n                var eventNames = 'click mouseup mousedown';\n                this.addHandler(this.btnDown, eventNames, function (event) {\n                  var step = self.step;\n                  if (Math.abs(self.max - self.min) <= step) step = 1;\n                  if (self.rtl && !self.vertical) step = -self.step;\n                  switch (event.type) {\n                    case 'click':\n                      if (self.buttonDownCapture && !self.isTouchDevice) {\n                        if (!self.disabled) self.setPosition(self.value + step);\n                      } else if (!self.disabled && self.isTouchDevice) {\n                        self.setPosition(self.value + step);\n                      }\n                      break;\n                    case 'mouseup':\n                      if (!self.btnDownInstance.base.disabled && self.buttonDownCapture) {\n                        self.buttonDownCapture = false;\n                        self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                        self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));\n                        self._removeArrowClasses('pressed', 'down');\n                        self.handlemouseup(self, event);\n                        self.setPosition(self.value + step);\n                        return false;\n                      }\n                      break;\n                    case 'mousedown':\n                      if (!self.btnDownInstance.base.disabled) {\n                        self.buttonDownCapture = true;\n                        self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-pressed'));\n                        self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                        self._addArrowClasses('pressed', 'down');\n                        return false;\n                      }\n                      break;\n                  }\n                });\n                this.addHandler(this.btnUp, eventNames, function (event) {\n                  var step = self.step;\n                  if (Math.abs(self.max - self.min) <= step) step = 1;\n                  if (self.rtl && !self.vertical) step = -self.step;\n                  switch (event.type) {\n                    case 'click':\n                      if (self.buttonUpCapture && !self.isTouchDevice) {\n                        if (!self.disabled) {\n                          self.setPosition(self.value - step);\n                        }\n                      } else if (!self.disabled && self.isTouchDevice) {\n                        self.setPosition(self.value - step);\n                      }\n                      break;\n                    case 'mouseup':\n                      if (!self.btnUpInstance.base.disabled && self.buttonUpCapture) {\n                        self.buttonUpCapture = false;\n                        self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                        self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));\n                        self._removeArrowClasses('pressed', 'up');\n                        self.handlemouseup(self, event);\n                        self.setPosition(self.value - step);\n                        return false;\n                      }\n                      break;\n                    case 'mousedown':\n                      if (!self.btnUpInstance.base.disabled) {\n                        self.buttonUpCapture = true;\n                        self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-pressed'));\n                        self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                        self._addArrowClasses('pressed', 'up');\n                        return false;\n                      }\n                      break;\n                  }\n                });\n              }\n              var eventName = 'click';\n              if (this.isTouchDevice) {\n                eventName = $.jqx.mobile.getTouchEventName('touchend');\n              }\n              this.addHandler(this.areaUp, eventName, function (event) {\n                if (!self.disabled) {\n                  var step = self.largestep;\n                  if (self.rtl && !self.vertical) {\n                    step = -self.largestep;\n                  }\n                  var canSetPosition = true;\n                  var thumbOffset = self.btnThumb.offset();\n                  if (!self.vertical) {\n                    if (self.areaClickOffset.x >= thumbOffset.left) {\n                      canSetPosition = false;\n                    }\n                  } else {\n                    if (self.areaClickOffset.y >= thumbOffset.top) {\n                      canSetPosition = false;\n                    }\n                  }\n                  if (canSetPosition) {\n                    self.setPosition(self.value - step);\n                  }\n                  return false;\n                }\n              });\n              this.addHandler(this.areaDown, eventName, function (event) {\n                if (!self.disabled) {\n                  var step = self.largestep;\n                  if (self.rtl && !self.vertical) {\n                    step = -self.largestep;\n                  }\n                  var canSetPosition = true;\n                  var thumbOffset = self.btnThumb.offset();\n                  if (!self.vertical) {\n                    if (self.areaClickOffset.x <= thumbOffset.left) {\n                      canSetPosition = false;\n                    }\n                  } else {\n                    if (self.areaClickOffset.y <= thumbOffset.top) {\n                      canSetPosition = false;\n                    }\n                  }\n                  if (canSetPosition) {\n                    self.setPosition(self.value + step);\n                  }\n                  return false;\n                }\n              });\n              this.addHandler(this.areaUp, 'mousedown', function (event) {\n                if (!self.disabled) {\n                  self.areaUpCapture = true;\n                  self.areaClickOffset = {\n                    x: event.pageX,\n                    y: event.pageY\n                  };\n                  return false;\n                }\n              });\n              this.addHandler(this.areaDown, 'mousedown', function (event) {\n                if (!self.disabled) {\n                  self.areaDownCapture = true;\n                  self.areaClickOffset = {\n                    x: event.pageX,\n                    y: event.pageY\n                  };\n                  return false;\n                }\n              });\n              this.addHandler(this.btnThumb, 'mousedown dragstart', function (event) {\n                if (event.type === \"dragstart\") return false;\n                if (!self.disabled) {\n                  self.handlemousedown(event);\n                }\n                if (event.preventDefault) {\n                  event.preventDefault();\n                }\n              });\n              this.addHandler($(document), 'mouseup.' + this.element.id, function (event) {\n                if (!self.disabled) self.handlemouseup(self, event);\n              });\n              if (!this.isTouchDevice) {\n                this.mousemoveFunc = function (event) {\n                  if (!self.disabled) {\n                    self.handlemousemove(event);\n                  }\n                };\n                this.addHandler($(document), 'mousemove.' + this.element.id, this.mousemoveFunc);\n                this.addHandler($(document), 'mouseleave.' + this.element.id, function (event) {\n                  if (!self.disabled) self.handlemouseleave(event);\n                });\n                this.addHandler($(document), 'mouseenter.' + this.element.id, function (event) {\n                  if (!self.disabled) self.handlemouseenter(event);\n                });\n                if (!self.disabled) {\n                  this.addHandler(this.btnUp, 'mouseenter mouseleave', function (event) {\n                    if (event.type === \"mouseenter\") {\n                      if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {\n                        self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));\n                        self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-hover'));\n                        self._addArrowClasses('hover', 'up');\n                      }\n                    } else {\n                      if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {\n                        self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));\n                        self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                        self._removeArrowClasses('hover', 'up');\n                      }\n                    }\n                  });\n                  var thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover');\n                  if (!self.vertical) {\n                    thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover-horizontal');\n                  }\n                  this.addHandler(this.btnThumb, 'mouseenter mouseleave', function (event) {\n                    if (event.type === \"mouseenter\") {\n                      if (!self.disabled && self.touchMode != true) {\n                        self.btnThumb.addClass(thumbHoverClass);\n                        self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-hover'));\n                      }\n                    } else {\n                      if (!self.disabled && self.touchMode != true) {\n                        self.btnThumb.removeClass(thumbHoverClass);\n                        self.btnThumb.removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                      }\n                    }\n                  });\n                  this.addHandler(this.btnDown, 'mouseenter mouseleave', function (event) {\n                    if (event.type === \"mouseenter\") {\n                      if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {\n                        self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));\n                        self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-hover'));\n                        self._addArrowClasses('hover', 'down');\n                      }\n                    } else {\n                      if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {\n                        self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));\n                        self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-hover'));\n                        self._removeArrowClasses('hover', 'down');\n                      }\n                    }\n                  });\n                }\n              }\n            },\n            destroy: function () {\n              var btnUp = this.btnUp;\n              var btnDown = this.btnDown;\n              var btnThumb = this.btnThumb;\n              var elWrap = this.scrollWrap;\n              var areaUp = this.areaUp;\n              var areaDown = this.areaDown;\n              this.arrowUp.remove();\n              delete this.arrowUp;\n              this.arrowDown.remove();\n              delete this.arrowDown;\n              areaDown.removeClass();\n              areaUp.removeClass();\n              btnDown.removeClass();\n              btnUp.removeClass();\n              btnThumb.removeClass();\n              btnUp.jqxRepeatButton('destroy');\n              btnDown.jqxRepeatButton('destroy');\n              areaUp.jqxRepeatButton('destroy');\n              areaDown.jqxRepeatButton('destroy');\n              btnThumb.jqxButton('destroy');\n              var vars = $.data(this.element, \"jqxScrollBar\");\n              this._removeHandlers();\n              this.btnUp = null;\n              this.btnDown = null;\n              this.scrollWrap = null;\n              this.areaUp = null;\n              this.areaDown = null;\n              this.scrollOuterWrap = null;\n              delete this.mousemoveFunc;\n              delete this.btnDownInstance;\n              delete this.btnUpInstance;\n              delete this.scrollOuterWrap;\n              delete this.scrollWrap;\n              delete this.btnDown;\n              delete this.areaDown;\n              delete this.areaUp;\n              delete this.btnDown;\n              delete this.btnUp;\n              delete this.btnThumb;\n              delete this.propertyChangeMap['value'];\n              delete this.propertyChangeMap['min'];\n              delete this.propertyChangeMap['max'];\n              delete this.propertyChangeMap['touchMode'];\n              delete this.propertyChangeMap['disabled'];\n              delete this.propertyChangeMap['theme'];\n              delete this.propertyChangeMap;\n              if (vars) {\n                delete vars.instance;\n              }\n              this.host.removeData();\n              this.host.remove();\n              delete this.host;\n              delete this.set;\n              delete this.get;\n              delete this.call;\n              delete this.element;\n            },\n            _removeHandlers: function () {\n              this.removeHandler(this.btnUp, 'mouseenter');\n              this.removeHandler(this.btnDown, 'mouseenter');\n              this.removeHandler(this.btnThumb, 'mouseenter');\n              this.removeHandler(this.btnUp, 'mouseleave');\n              this.removeHandler(this.btnDown, 'mouseleave');\n              this.removeHandler(this.btnThumb, 'mouseleave');\n              this.removeHandler(this.btnUp, 'click');\n              this.removeHandler(this.btnDown, 'click');\n              this.removeHandler(this.btnDown, 'mouseup');\n              this.removeHandler(this.btnUp, 'mouseup');\n              this.removeHandler(this.btnDown, 'mousedown');\n              this.removeHandler(this.btnUp, 'mousedown');\n              this.removeHandler(this.areaUp, 'mousedown');\n              this.removeHandler(this.areaDown, 'mousedown');\n              this.removeHandler(this.areaUp, 'click');\n              this.removeHandler(this.areaDown, 'click');\n              this.removeHandler(this.btnThumb, 'mousedown');\n              this.removeHandler(this.btnThumb, 'dragstart');\n              this.removeHandler($(document), 'mouseup.' + this.element.id);\n              if (!this.mousemoveFunc) {\n                this.removeHandler($(document), 'mousemove.' + this.element.id);\n              } else {\n                this.removeHandler($(document), 'mousemove.' + this.element.id, this.mousemoveFunc);\n              }\n              this.removeHandler($(document), 'mouseleave.' + this.element.id);\n              this.removeHandler($(document), 'mouseenter.' + this.element.id);\n              var self = this;\n            },\n            _addArrowClasses: function (state, button) {\n              if (state == 'pressed') state = 'selected';\n              if (state != '') {\n                state = '-' + state;\n              }\n              if (this.vertical) {\n                if (button == 'up' || button == undefined) {\n                  this.arrowUp.addClass(this.toThemeProperty(\"jqx-icon-arrow-up\" + state));\n                }\n                if (button == 'down' || button == undefined) {\n                  this.arrowDown.addClass(this.toThemeProperty(\"jqx-icon-arrow-down\" + state));\n                }\n              } else {\n                if (button == 'up' || button == undefined) {\n                  this.arrowUp.addClass(this.toThemeProperty(\"jqx-icon-arrow-left\" + state));\n                }\n                if (button == 'down' || button == undefined) {\n                  this.arrowDown.addClass(this.toThemeProperty(\"jqx-icon-arrow-right\" + state));\n                }\n              }\n            },\n            _removeArrowClasses: function (state, button) {\n              if (state == 'pressed') state = 'selected';\n              if (state != '') {\n                state = '-' + state;\n              }\n              if (this.vertical) {\n                if (button == 'up' || button == undefined) {\n                  this.arrowUp.removeClass(this.toThemeProperty(\"jqx-icon-arrow-up\" + state));\n                }\n                if (button == 'down' || button == undefined) {\n                  this.arrowDown.removeClass(this.toThemeProperty(\"jqx-icon-arrow-down\" + state));\n                }\n              } else {\n                if (button == 'up' || button == undefined) {\n                  this.arrowUp.removeClass(this.toThemeProperty(\"jqx-icon-arrow-left\" + state));\n                }\n                if (button == 'down' || button == undefined) {\n                  this.arrowDown.removeClass(this.toThemeProperty(\"jqx-icon-arrow-right\" + state));\n                }\n              }\n            },\n            setTheme: function () {\n              var btnUp = this.btnUp;\n              var btnDown = this.btnDown;\n              var btnThumb = this.btnThumb;\n              var elWrap = this.scrollWrap;\n              var areaUp = this.areaUp;\n              var areaDown = this.areaDown;\n              var arrowUp = this.arrowUp;\n              var arrowDown = this.arrowDown;\n              this.scrollWrap[0].className = this.toThemeProperty('jqx-reset');\n              this.scrollOuterWrap[0].className = this.toThemeProperty('jqx-reset');\n              var areaClassName = this.toThemeProperty('jqx-reset');\n              this.areaDown[0].className = areaClassName;\n              this.areaUp[0].className = areaClassName;\n              var hostClass = this.toThemeProperty('jqx-scrollbar') + \" \" + this.toThemeProperty('jqx-widget') + \" \" + this.toThemeProperty('jqx-widget-content');\n              this.host.addClass(hostClass);\n              if (this.isTouchDevice) {\n                this.host.addClass(this.toThemeProperty('jqx-scrollbar-mobile'));\n              }\n              btnDown[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');\n              btnUp[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');\n              var thumbClass = \"\";\n              if (this.vertical) {\n                arrowUp[0].className = areaClassName + \" \" + this.toThemeProperty(\"jqx-icon-arrow-up\");\n                arrowDown[0].className = areaClassName + \" \" + this.toThemeProperty(\"jqx-icon-arrow-down\");\n                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal');\n              } else {\n                arrowUp[0].className = areaClassName + \" \" + this.toThemeProperty(\"jqx-icon-arrow-left\");\n                arrowDown[0].className = areaClassName + \" \" + this.toThemeProperty(\"jqx-icon-arrow-right\");\n                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal-horizontal');\n              }\n              thumbClass += \" \" + this.toThemeProperty('jqx-fill-state-normal');\n              btnThumb[0].className = thumbClass;\n              if (this.disabled) {\n                elWrap.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                elWrap.removeClass(this.toThemeProperty('jqx-scrollbar-state-normal'));\n              } else {\n                elWrap.addClass(this.toThemeProperty('jqx-scrollbar-state-normal'));\n                elWrap.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              }\n              if (this.roundedCorners == 'all') {\n                this.host.addClass(this.toThemeProperty('jqx-rc-all'));\n                if (this.vertical) {\n                  var rct = $.jqx.cssroundedcorners('top');\n                  rct = this.toThemeProperty(rct);\n                  btnUp.addClass(rct);\n                  var rcb = $.jqx.cssroundedcorners('bottom');\n                  rcb = this.toThemeProperty(rcb);\n                  btnDown.addClass(rcb);\n                } else {\n                  var rcl = $.jqx.cssroundedcorners('left');\n                  rcl = this.toThemeProperty(rcl);\n                  btnUp.addClass(rcl);\n                  var rcr = $.jqx.cssroundedcorners('right');\n                  rcr = this.toThemeProperty(rcr);\n                  btnDown.addClass(rcr);\n                }\n              } else {\n                var rc = $.jqx.cssroundedcorners(this.roundedCorners);\n                rc = this.toThemeProperty(rc);\n                btnUp.addClass(rc);\n                btnDown.addClass(rc);\n              }\n              var rc = $.jqx.cssroundedcorners(this.roundedCorners);\n              rc = this.toThemeProperty(rc);\n              if (!btnThumb.hasClass(rc)) {\n                btnThumb.addClass(rc);\n              }\n              if (btnUp.css('display') === 'none') {\n                this.showButtons = false;\n                this.touchModeStyle = true;\n                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-normal-touch'));\n              }\n              if (this.isTouchDevice && this.touchModeStyle != false) {\n                this.showButtons = false;\n                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-normal-touch'));\n              }\n            },\n            // returns true, if the user is dragging the thumb or the increase or decrease button is pressed.\n            isScrolling: function () {\n              if (this.thumbCapture == undefined || this.buttonDownCapture == undefined || this.buttonUpCapture == undefined || this.areaDownCapture == undefined || this.areaUpCapture == undefined) return false;\n              return this.thumbCapture || this.buttonDownCapture || this.buttonUpCapture || this.areaDownCapture || this.areaUpCapture;\n            },\n            track: function () {\n              var now, elapsed, delta, v;\n              now = Date.now();\n              elapsed = now - this.timestamp;\n              this.timestamp = now;\n              delta = this.offset - this.frame;\n              this.frame = this.offset;\n              v = 1000 * delta / (1 + elapsed);\n              this.velocity = 0.2 * v + 0.2 * this.velocity;\n            },\n            handlemousedown: function (event) {\n              if (this.thumbCapture == undefined || this.thumbCapture == false) {\n                this.thumbCapture = true;\n                var btnThumb = this.btnThumb;\n                if (btnThumb != null) {\n                  btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                  if (this.vertical) {\n                    btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));\n                  } else {\n                    btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));\n                  }\n                  this.element.setAttribute('touched', '');\n                }\n              }\n              var that = this;\n              function tap(e) {\n                that.reference = parseInt(that.btnThumb[0].style.top);\n                that.offset = parseInt(that.btnThumb[0].style.top);\n                if (!that.vertical) {\n                  that.reference = parseInt(that.btnThumb[0].style.left);\n                  that.offset = parseInt(that.btnThumb[0].style.left);\n                }\n                that.velocity = that.amplitude = 0;\n                that.frame = that.offset;\n                that.timestamp = Date.now();\n                clearInterval(that.ticker);\n                that.ticker = setInterval(function () {\n                  that.track();\n                }, 100);\n              }\n              if (this.thumbCapture && $.jqx.scrollAnimation) {\n                tap(event);\n              }\n              this.dragStartX = event.clientX;\n              this.dragStartY = event.clientY;\n              this.dragStartValue = this.value;\n            },\n            toggleHover: function (event, element) {\n              //element.toggleClass('jqx-fill-state-hover');\n            },\n            refresh: function () {\n              this._arrange();\n            },\n            _setElementPosition: function (element, x, y) {\n              if (!isNaN(x)) {\n                if (parseInt(element[0].style.left) != parseInt(x)) {\n                  element[0].style.left = x + 'px';\n                }\n              }\n              if (!isNaN(y)) {\n                if (parseInt(element[0].style.top) != parseInt(y)) {\n                  element[0].style.top = y + 'px';\n                }\n              }\n            },\n            _setElementTopPosition: function (element, y) {\n              if (!isNaN(y)) {\n                element[0].style.top = y + 'px';\n              }\n            },\n            _setElementLeftPosition: function (element, x) {\n              if (!isNaN(x)) {\n                element[0].style.left = x + 'px';\n              }\n            },\n            handlemouseleave: function (event) {\n              var btnUp = this.btnUp;\n              var btnDown = this.btnDown;\n              if (this.buttonDownCapture || this.buttonUpCapture) {\n                btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                this._removeArrowClasses('pressed');\n              }\n              if (this.thumbCapture != true) return;\n              var btnThumb = this.btnThumb;\n              var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');\n              btnThumb.removeClass(btnThumbPressedClass);\n              btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.element.removeAttribute('touched');\n            },\n            handlemouseenter: function (event) {\n              var btnUp = this.btnUp;\n              var btnDown = this.btnDown;\n              if (this.buttonUpCapture) {\n                btnUp.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                btnUp.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this._addArrowClasses('pressed', 'up');\n                this.element.setAttribute('touched', '');\n              }\n              if (this.buttonDownCapture) {\n                btnDown.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                btnDown.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this._addArrowClasses('pressed', 'down');\n                this.element.setAttribute('touched', '');\n              }\n              if (this.thumbCapture != true) return;\n              var btnThumb = this.btnThumb;\n              if (this.vertical) {\n                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));\n              } else {\n                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));\n              }\n              btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));\n              this.element.setAttribute('touched', '');\n            },\n            handlemousemove: function (event) {\n              var btnUp = this.btnUp;\n              var btnDown = this.btnDown;\n              var which = 0;\n              if (btnDown == null || btnUp == null) return;\n              if (btnUp != null && btnDown != null && this.buttonDownCapture != undefined && this.buttonUpCapture != undefined) {\n                if (this.buttonDownCapture && event.which == which) {\n                  btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                  btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                  this._removeArrowClasses('pressed', 'down');\n                  this.buttonDownCapture = false;\n                } else if (this.buttonUpCapture && event.which == which) {\n                  btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                  btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                  this._removeArrowClasses('pressed', 'up');\n                  this.buttonUpCapture = false;\n                }\n              }\n              if (this.thumbCapture != true) return false;\n              var btnThumb = this.btnThumb;\n              if (event.which == which && !this.isTouchDevice && !this._touchSupport) {\n                this.thumbCapture = false;\n                this._arrange();\n                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');\n                btnThumb.removeClass(btnThumbPressedClass);\n                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                return true;\n              }\n              if (event.preventDefault != undefined) {\n                event.preventDefault();\n              }\n              if (event.originalEvent != null) {\n                event.originalEvent.mouseHandled = true;\n              }\n              if (event.stopPropagation != undefined) {\n                event.stopPropagation();\n              }\n              var diff = 0;\n              try {\n                if (!this.vertical) {\n                  diff = event.clientX - this.dragStartX;\n                } else {\n                  diff = event.clientY - this.dragStartY;\n                }\n                var btnAndThumbSize = this._btnAndThumbSize;\n                if (!this._btnAndThumbSize) {\n                  btnAndThumbSize = this.vertical ? btnUp.height() + btnDown.height() + btnThumb.height() : btnUp.width() + btnDown.width() + btnThumb.width();\n                }\n                var ratio = (this.max - this.min) / (this.scrollBarSize - btnAndThumbSize);\n                if (this.thumbStep == 'auto') {\n                  diff *= ratio;\n                } else {\n                  diff *= ratio;\n                  if (Math.abs(this.dragStartValue + diff - this.value) >= parseInt(this.thumbStep)) {\n                    var step = Math.round(parseInt(diff) / this.thumbStep) * this.thumbStep;\n                    if (this.rtl && !this.vertical) {\n                      this.setPosition(this.dragStartValue - step);\n                    } else {\n                      this.setPosition(this.dragStartValue + step);\n                    }\n                    return false;\n                  } else {\n                    return false;\n                  }\n                }\n                var step = diff;\n                if (this.rtl && !this.vertical) {\n                  step = -diff;\n                }\n                this.setPosition(this.dragStartValue + step);\n                this.offset = parseInt(btnThumb[0].style.left);\n                if (this.vertical) {\n                  this.offset = parseInt(btnThumb[0].style.top);\n                }\n              } catch (error) {\n                alert(error);\n              }\n              return false;\n            },\n            handlemouseup: function (self, event) {\n              var prevent = false;\n              if (this.thumbCapture) {\n                this.thumbCapture = false;\n                var btnThumb = this.btnThumb;\n                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');\n                btnThumb.removeClass(btnThumbPressedClass);\n                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this.element.removeAttribute('touched');\n                prevent = true;\n                this._mouseup = new Date();\n                if ($.jqx.scrollAnimation) {\n                  var that = this;\n                  function autoScroll() {\n                    var elapsed, delta;\n                    if (that.amplitude) {\n                      elapsed = Date.now() - that.timestamp;\n                      delta = -that.amplitude * Math.exp(-elapsed / 325);\n                      if (delta > 0.5 || delta < -0.5) {\n                        var ratio = (that.max - that.min) / (that.scrollBarSize - that._btnAndThumbSize);\n                        var newValue = ratio * (that.target + delta);\n                        var step = newValue;\n                        if (that.rtl && !that.vertical) {\n                          step = -newValue;\n                        }\n                        that.setPosition(that.dragStartValue + step);\n                        requestAnimationFrame(autoScroll);\n                      } else {\n                        var ratio = (that.max - that.min) / (that.scrollBarSize - that._btnAndThumbSize);\n                        var newValue = ratio * (that.target + delta);\n                        var step = newValue;\n                        if (that.rtl && !that.vertical) {\n                          step = -newValue;\n                        }\n                        that.setPosition(that.dragStartValue + step);\n                      }\n                    }\n                  }\n                  clearInterval(this.ticker);\n                  if (this.velocity > 25 || this.velocity < -25) {\n                    this.amplitude = 0.8 * this.velocity;\n                    this.target = Math.round(this.offset + this.amplitude);\n                    if (!this.vertical) {\n                      this.target -= this.reference;\n                    } else {\n                      this.target -= this.reference;\n                    }\n                    this.timestamp = Date.now();\n                    requestAnimationFrame(autoScroll);\n                  }\n                }\n              }\n              this.areaDownCapture = this.areaUpCapture = false;\n              if (this.buttonUpCapture || this.buttonDownCapture) {\n                var btnUp = this.btnUp;\n                var btnDown = this.btnDown;\n                this.buttonUpCapture = false;\n                this.buttonDownCapture = false;\n                btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));\n                btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));\n                this._removeArrowClasses('pressed');\n                this.element.removeAttribute('touched');\n                prevent = true;\n                this._mouseup = new Date();\n              }\n              if (prevent) {\n                if (event.preventDefault != undefined) {\n                  event.preventDefault();\n                }\n                if (event.originalEvent != null) {\n                  event.originalEvent.mouseHandled = true;\n                }\n                if (event.stopPropagation != undefined) {\n                  event.stopPropagation();\n                }\n              }\n            },\n            // sets the value.\n            // @param Number. Sets the ScrollBar's value.\n            setPosition: function (position, update) {\n              var element = this.element;\n              if (position == undefined || position == NaN) position = this.min;\n              if (position >= this.max) {\n                position = this.max;\n              }\n              if (position < this.min) {\n                position = this.min;\n              }\n              if (this.value !== position || update == true) {\n                if (position == this.max) {\n                  var completeEvent = new $.Event('complete');\n                  this.host.trigger(completeEvent);\n                }\n                var oldvalue = this.value;\n                if (this._triggervaluechanged) {\n                  var event = new $.Event('valueChanged');\n                  event.previousValue = this.value;\n                  event.currentValue = position;\n                }\n                this.value = position;\n                this._positionelements();\n                //this._arrange();\n\n                if (this._triggervaluechanged) {\n                  this.host.trigger(event);\n                }\n                if (this.valueChanged) {\n                  this.valueChanged({\n                    currentValue: this.value,\n                    previousvalue: oldvalue\n                  });\n                }\n              }\n              return position;\n            },\n            val: function (value) {\n              var isEmpty = function (obj) {\n                for (var key in obj) {\n                  if (obj.hasOwnProperty(key)) return false;\n                }\n                if (typeof value == \"number\") return false;\n                if (typeof value == \"date\") return false;\n                if (typeof value == \"boolean\") return false;\n                if (typeof value == \"string\") return false;\n                return true;\n              };\n              if (isEmpty(value) || arguments.length == 0) {\n                return this.value;\n              } else {\n                this.setPosition(value);\n                return value;\n              }\n            },\n            _getThumbSize: function (scrollAreaSize) {\n              var positions = this.max - this.min;\n              var size = 0;\n              if (positions > 1) {\n                size = scrollAreaSize / (positions + scrollAreaSize) * scrollAreaSize;\n              } else if (positions == 1) {\n                size = scrollAreaSize - 1;\n              } else if (positions == 0) size = scrollAreaSize;\n              if (this.thumbSize > 0) {\n                size = this.thumbSize;\n              }\n              if (size < this.thumbMinSize) size = this.thumbMinSize;\n              return Math.min(size, scrollAreaSize);\n            },\n            _positionelements: function () {\n              var element = this.element;\n              var elAreaUp = this.areaUp;\n              var elAreaDown = this.areaDown;\n              var elBtnUp = this.btnUp;\n              var elBtnDown = this.btnDown;\n              var elThumb = this.btnThumb;\n              var elWrap = this.scrollWrap;\n              var height = this._height ? this._height : this.host.height();\n              var width = this._width ? this._width : this.host.width();\n              var btnSize = !this.vertical ? height : width;\n              if (!this.showButtons) {\n                btnSize = 0;\n              }\n              var scrollBarSize = !this.vertical ? width : height;\n              this.scrollBarSize = scrollBarSize;\n              var thumbSize = this._getThumbSize(scrollBarSize - 2 * btnSize);\n              thumbSize = Math.floor(thumbSize);\n              if (thumbSize < this.thumbMinSize) thumbSize = this.thumbMinSize;\n              if (height == NaN || height < 10) height = 10;\n              if (width == NaN || width < 10) width = 10;\n              btnSize += 2;\n              this.btnSize = btnSize;\n              var btnAndThumbSize = this._btnAndThumbSize;\n              if (!this._btnAndThumbSize) {\n                var btnAndThumbSize = this.vertical ? 2 * this.btnSize + elThumb.outerHeight() : 2 * this.btnSize + elThumb.outerWidth();\n                btnAndThumbSize = Math.round(btnAndThumbSize);\n              }\n              var upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.value - this.min);\n              if (this.rtl && !this.vertical) {\n                upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.max - this.value - this.min);\n              }\n              upAreaSize = Math.round(upAreaSize);\n              if (upAreaSize < 0) {\n                upAreaSize = 0;\n              }\n              if (this.vertical) {\n                var newDownSize = scrollBarSize - upAreaSize - btnAndThumbSize;\n                if (newDownSize < 0) newDownSize = 0;\n                elAreaDown[0].style.height = newDownSize + 'px';\n                elAreaUp[0].style.height = upAreaSize + 'px';\n                this._setElementTopPosition(elAreaUp, btnSize);\n                this._setElementTopPosition(elThumb, btnSize + upAreaSize);\n                this._setElementTopPosition(elAreaDown, btnSize + upAreaSize + thumbSize);\n              } else {\n                elAreaUp[0].style.width = upAreaSize + 'px';\n                if (scrollBarSize - upAreaSize - btnAndThumbSize >= 0) {\n                  elAreaDown[0].style.width = scrollBarSize - upAreaSize - btnAndThumbSize + 'px';\n                } else {\n                  elAreaDown[0].style.width = '0px';\n                }\n                this._setElementLeftPosition(elAreaUp, btnSize);\n                this._setElementLeftPosition(elThumb, btnSize + upAreaSize);\n                this._setElementLeftPosition(elAreaDown, 2 + btnSize + upAreaSize + thumbSize);\n              }\n            },\n            _arrange: function () {\n              var self = this;\n              if (self._initialLayout) {\n                self._initialLayout = false;\n                return;\n              }\n              if (self.min > self.max) {\n                var tmp = self.min;\n                self.min = self.max;\n                self.max = tmp;\n              }\n              if (self.min < 0) {\n                var diff = self.max - self.min;\n                self.min = 0;\n                self.max = diff;\n              }\n              var element = self.element;\n              var elAreaUp = self.areaUp;\n              var elAreaDown = self.areaDown;\n              var elBtnUp = self.btnUp;\n              var elBtnDown = self.btnDown;\n              var elThumb = self.btnThumb;\n              var elWrap = self.scrollWrap;\n              var height = parseInt(self.element.style.height);\n              var width = parseInt(self.element.style.width);\n              if (self.isPercentage) {\n                var height = self.host.height();\n                var width = self.host.width();\n              }\n              if (isNaN(height)) height = 0;\n              if (isNaN(width)) width = 0;\n              self._width = width;\n              self._height = height;\n              var btnSize = !self.vertical ? height : width;\n              if (!self.showButtons) {\n                btnSize = 0;\n              }\n              elBtnUp[0].style.width = btnSize + 'px';\n              elBtnUp[0].style.height = btnSize + 'px';\n              elBtnDown[0].style.width = btnSize + 'px';\n              elBtnDown[0].style.height = btnSize + 'px';\n              if (self.vertical) {\n                elWrap[0].style.width = width + 2 + 'px';\n              } else {\n                elWrap[0].style.height = height + 2 + 'px';\n              }\n\n              // position the up button\n              self._setElementPosition(elBtnUp, 0, 0);\n              var btnSizeAndBorder = btnSize + 2;\n\n              // position the down button\n              if (self.vertical) {\n                self._setElementPosition(elBtnDown, 0, height - btnSizeAndBorder);\n              } else {\n                self._setElementPosition(elBtnDown, width - btnSizeAndBorder, 0);\n              }\n              var scrollBarSize = !self.vertical ? width : height;\n              self.scrollBarSize = scrollBarSize;\n              var thumbSize = self._getThumbSize(scrollBarSize - 2 * btnSizeAndBorder);\n              thumbSize = Math.floor(thumbSize - 2);\n              if (thumbSize < self.thumbMinSize) thumbSize = self.thumbMinSize;\n              var touchStyle = false;\n              if (self.isTouchDevice && self.touchModeStyle != false) {\n                touchStyle = true;\n              }\n              if (!self.vertical) {\n                elThumb[0].style.width = thumbSize + 'px';\n                elThumb[0].style.height = height + 'px';\n                if (touchStyle && self.thumbTouchSize !== 0) {\n                  elThumb.css({\n                    height: self.thumbTouchSize + 'px'\n                  });\n                  elThumb.css('margin-top', (self.host.height() - self.thumbTouchSize) / 2);\n                }\n              } else {\n                elThumb[0].style.width = width + 'px';\n                elThumb[0].style.height = thumbSize + 'px';\n                if (touchStyle && self.thumbTouchSize !== 0) {\n                  elThumb.css({\n                    width: self.thumbTouchSize + 'px'\n                  });\n                  elThumb.css('margin-left', (self.host.width() - self.thumbTouchSize) / 2);\n                }\n              }\n              if (height == NaN || height < 10) height = 10;\n              if (width == NaN || width < 10) width = 10;\n\n              //btnSize += 2;\n              self.btnSize = btnSize;\n              var btnAndThumbSize = self.vertical ? 2 * btnSizeAndBorder + (2 + parseInt(elThumb[0].style.height)) : 2 * btnSizeAndBorder + (2 + parseInt(elThumb[0].style.width));\n              btnAndThumbSize = Math.round(btnAndThumbSize);\n              self._btnAndThumbSize = btnAndThumbSize;\n              var upAreaSize = (scrollBarSize - btnAndThumbSize) / (self.max - self.min) * (self.value - self.min);\n              if (self.rtl && !self.vertical) upAreaSize = (scrollBarSize - btnAndThumbSize) / (self.max - self.min) * (self.max - self.value - self.min);\n              upAreaSize = Math.round(upAreaSize);\n              if (isNaN(upAreaSize) || upAreaSize < 0 || upAreaSize === -Infinity || upAreaSize === Infinity) upAreaSize = 0;\n              if (self.vertical) {\n                var newAreaHeight = scrollBarSize - upAreaSize - btnAndThumbSize;\n                if (newAreaHeight < 0) newAreaHeight = 0;\n                elAreaDown[0].style.height = newAreaHeight + 'px';\n                elAreaDown[0].style.width = width + 'px';\n                elAreaUp[0].style.height = upAreaSize + 'px';\n                elAreaUp[0].style.width = width + 'px';\n                var hostHeight = parseInt(self.element.style.height);\n                if (self.isPercentage) hostHeight = self.host.height();\n                elThumb[0].style.visibility = 'inherit';\n                if (hostHeight - 3 * parseInt(btnSize) < 0 || hostHeight < btnAndThumbSize) elThumb[0].style.visibility = 'hidden';\n                self._setElementPosition(elAreaUp, 0, btnSizeAndBorder);\n                self._setElementPosition(elThumb, 0, btnSizeAndBorder + upAreaSize);\n                self._setElementPosition(elAreaDown, 0, btnSizeAndBorder + upAreaSize + thumbSize);\n              } else {\n                if (upAreaSize > 0) {\n                  elAreaUp[0].style.width = upAreaSize + 'px';\n                }\n                if (height > 0) {\n                  elAreaUp[0].style.height = height + 'px';\n                }\n                var newAreaWidth = scrollBarSize - upAreaSize - btnAndThumbSize;\n                if (newAreaWidth < 0) newAreaWidth = 0;\n                elAreaDown[0].style.width = newAreaWidth + 'px';\n                elAreaDown[0].style.height = height + 'px';\n                var hostWidth = parseInt(self.element.style.width);\n                if (self.isPercentage) hostWidth = self.host.width();\n                elThumb[0].style.visibility = 'inherit';\n                if (hostWidth - 3 * parseInt(btnSize) < 0 || hostWidth < btnAndThumbSize) elThumb[0].style.visibility = 'hidden';\n                self._setElementPosition(elAreaUp, btnSizeAndBorder, 0);\n                self._setElementPosition(elThumb, btnSizeAndBorder + upAreaSize, 0);\n                self._setElementPosition(elAreaDown, btnSizeAndBorder + upAreaSize + thumbSize, 0);\n              }\n            }\n          }); // jqxScrollBar\n        })(jqxBaseFramework);\n      })();\n\n      /***/\n    }),\n    /***/3899: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          $.jqx.jqxWidget('jqxTooltip', '', {});\n          $.extend($.jqx._jqxTooltip.prototype, {\n            defineInstance: function () {\n              var settings = {\n                //// properties\n                width: 'auto',\n                height: 'auto',\n                position: 'default',\n                // possible values: top, bottom, left, right, top-left, bottom-left, top-right, bottom-right, absolute, mouse, mouseenter, default\n                enableBrowserBoundsDetection: true,\n                // possible values: true, false\n                content: '',\n                left: 0,\n                top: 0,\n                absolutePositionX: 0,\n                absolutePositionY: 0,\n                trigger: 'hover',\n                // possible values: hover, click, none\n                showDelay: 100,\n                autoHide: true,\n                // possible values: true, false\n                autoHideDelay: 3000,\n                closeOnClick: true,\n                // possible values: true, false\n                disabled: false,\n                // possible values: true, false\n                animationShowDelay: 200,\n                animationHideDelay: 'fast',\n                showArrow: true,\n                // possible values: true, false\n                name: '',\n                opacity: 0.9,\n                rtl: false,\n                _isOpen: false,\n                selector: null,\n                opening: null,\n                value: null,\n                _eventsMap: {\n                  'mousedown': $.jqx.mobile.getTouchEventName('touchstart'),\n                  'mouseup': $.jqx.mobile.getTouchEventName('touchend')\n                },\n                //// events\n                events: ['open', 'close', 'opening', 'closing']\n              };\n              if (this === $.jqx._jqxTooltip.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function () {\n              this._isTouchDevice = $.jqx.mobile.isTouchDevice();\n\n              // creates an array based on the name property for storing tooltip IDs\n              var idArray = $.data(document.body, '_tooltipIDArray' + this.name);\n              if (!idArray) {\n                this.IDArray = [];\n                $.data(document.body, '_tooltipIDArray' + this.name, this.IDArray);\n              } else {\n                this.IDArray = idArray;\n              }\n\n              // generates a new ID and adds it to an array, based on the name property\n              var key = this._generatekey();\n              var newID = 'jqxtooltip' + key;\n              this.IDArray.push({\n                tooltipID: newID,\n                tooltipHost: this.host\n              });\n\n              // appends the tooltip div to the body\n              var tooltip = document.createElement('div');\n              tooltip.setAttribute('id', newID);\n              tooltip.innerHTML = '<div id=\"' + newID + 'Main\"><div id=\"' + newID + 'Text\"></div></div><div id=\"' + newID + 'Arrow\"></div>';\n              if ($.jqx.browser.msie) {\n                tooltip.className = this.toThemeProperty('jqx-noshadow');\n              }\n              document.body.appendChild(tooltip);\n              this._tooltip = tooltip;\n              this._tooltipHelper = $(tooltip);\n              if (this._tooltipHelper.initAnimate) {\n                this._tooltipHelper.initAnimate();\n              }\n\n              // hides the tooltip divs\n              tooltip.style.visibility = 'hidden';\n              tooltip.style.display = 'none';\n              tooltip.style.opacity = 0;\n              tooltip.style.zIndex = 99999;\n\n              // hides the tooltip's arrow\n              var arrow = document.getElementById(newID + 'Arrow');\n              this._arrow = arrow;\n              if (this.showArrow === false) {\n                arrow.style.visibility = 'hidden';\n                arrow.style.display = 'none';\n              }\n              this._main = document.getElementById(newID + 'Main');\n              this._text = document.getElementById(newID + 'Text');\n\n              // sets the tooltips theme and classes\n              this._setTheme();\n\n              // sets the width and height of the tooltip\n              this._setSize();\n\n              // sets the content of the tooltip\n              this._setContent();\n\n              //sets the initial position of the tooltip\n              //            this._initialPosition();\n\n              // triggers the tooltip\n              if (this.disabled === false) {\n                this._trigger();\n                if (this.closeOnClick === true) {\n                  this._clickHide();\n                }\n              }\n            },\n            //// public methods\n\n            // opens (shows) the tooltip\n            open: function () {\n              if (arguments) {\n                if (arguments.length) {\n                  if (arguments.length === 2) {\n                    this.position = 'absolute';\n                    this.left = arguments[0];\n                    this.top = arguments[1];\n                    this.absolutePositionX = arguments[0];\n                    this.absolutePositionY = arguments[1];\n                  }\n                }\n              }\n              if (this.disabled === false && this._id() !== 'removed') {\n                if (this.position === 'mouse' || this.position === 'mouseenter') {\n                  var tempPosition = this.position;\n                  this.position = 'default';\n                  this._raiseEvent('2');\n                  this._setPosition();\n                  this._animateShow();\n                  this.position = tempPosition;\n                } else {\n                  this._raiseEvent('2');\n                  this._setPosition();\n                  this._animateShow();\n                }\n              }\n            },\n            close: function (delay) {\n              var me = this,\n                oldIE = $.jqx.browser.msie && $.jqx.browser.version < 9;\n              if (typeof delay === 'object' && $.isEmptyObject(delay)) {\n                delay = this.animationHideDelay;\n              }\n              var opacityValue = parseFloat(me._tooltip.style.opacity);\n              var hide = function () {\n                clearTimeout(me.autoHideTimeout);\n                me._raiseEvent('3');\n                me._tooltipHelper.animate({\n                  opacity: 0\n                }, delay, function () {\n                  me._tooltip.style.visibility = 'hidden';\n                  me._tooltip.style.display = 'none';\n                  me._raiseEvent('1');\n                  me._isOpen = false;\n                });\n              };\n              if (this._isOpen === false && opacityValue !== 0) {\n                //me._tooltipHelper.stop();\n                hide();\n                return;\n              }\n              if (this._isOpen === true && (!oldIE && opacityValue === this.opacity || oldIE)) {\n                hide();\n              }\n            },\n            // removes the tooltip\n            destroy: function () {\n              var length = this.IDArray.length;\n              this._removeHandlers();\n              this._tooltipHelper.remove();\n              for (var i = 0; i < length; i++) {\n                if (this.IDArray[i].tooltipHost === this.host) {\n                  this.IDArray.splice(i, 1);\n                  break;\n                }\n              }\n              this.host.removeData('jqxTooltip');\n            },\n            //// private methods\n\n            // refreshes the tooltip\n            refresh: function (initialRefresh) {\n              if (initialRefresh === true) {\n                return;\n              }\n              var me = this;\n              if (this.rtl) {\n                me._text.className += ' ' + me.toThemeProperty('jqx-rtl');\n                me._text.style.direction = 'rtl';\n              }\n              var opacityValue = parseFloat(me._tooltip.style.opacity);\n              if (this._id() !== 'removed') {\n                if (this.disabled === true && this._isOpen === true && opacityValue === this.opacity) {\n                  clearTimeout(this.autoHideTimeout);\n                  //this._tooltipHelper.stop();\n                  this._tooltipHelper.animate({\n                    opacity: 0\n                  }, this.animationHideDelay, function () {\n                    me._tooltip.style.visibility = 'hidden';\n                    me._tooltip.style.display = 'none';\n                    me._isOpen = false;\n                  });\n                }\n                this._setTheme();\n                this._setContent();\n                this._setSize();\n                if (this.position !== 'mouse' && this.position !== 'mouseenter') {\n                  this._setPosition();\n                }\n                this._removeHandlers();\n                if (this.disabled === false) {\n                  this._trigger();\n                  if (this.closeOnClick === true) {\n                    this._clickHide();\n                  }\n                }\n              }\n            },\n            // executed when a property is changed\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              //ignore jslint\n              if (key === 'content') {\n                this.changeContentFlag = true;\n              }\n              object.refresh();\n            },\n            // raises an event\n            _raiseEvent: function (id, args) {\n              var evt = this.events[id];\n              var event = new $.Event(evt);\n              event.owner = this;\n              event.args = args;\n              var result;\n              try {\n                result = this.host.trigger(event);\n              } catch (error) {}\n              return result;\n            },\n            // generates a random number, used for unique id\n            _generatekey: function () {\n              var S4 = function () {\n                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n              };\n              return S4() + S4();\n            },\n            // selects the id of the current tooltip\n            _id: function () {\n              var tempId, TrueID;\n              var length = this.IDArray.length;\n              for (var i = 0; i < length; i++) {\n                if (this.IDArray[i].tooltipHost === this.host) {\n                  tempId = this.IDArray[i].tooltipID;\n                  TrueID = '#' + tempId;\n                  break;\n                }\n              }\n              if (TrueID === undefined) {\n                TrueID = 'removed';\n              }\n              return TrueID;\n            },\n            // positions the tooltip\n            _setPosition: function (event) {\n              var me = this,\n                tooltip = me._tooltip;\n              if (this._isOpen === false && parseFloat(tooltip.style.opacity) === 0 || this.changeContentFlag === true) {\n                if (!event && (this.position === 'mouse' || this.position === 'mouseenter')) {\n                  return;\n                }\n                tooltip.style.display = 'block';\n                this.changeContentFlag = false;\n                this.documentTop = document.documentElement.scrollTop;\n                this.documentLeft = document.documentElement.scrollLeft;\n                this.windowWidth = window.innerWidth;\n                this.windowHeight = window.innerHeight;\n                this.hostWidth = me.element.offsetWidth;\n                this.hostHeight = me.element.offsetHeight;\n                this.tooltipWidth = tooltip.offsetWidth;\n                this.tooltipHeight = tooltip.offsetHeight;\n                this.hostOffset = this.host.offset();\n                this.tooltipOffset = me._tooltipHelper.offset();\n                this.defaultOffset = 30;\n                this.offsetHorizontal = parseInt(this.left, 10); // horizontal offset\n                this.offsetVertical = parseInt(this.top, 10); // vertical offset\n\n                var $arrow = me._arrow,\n                  arrowHelper = $($arrow),\n                  $main = me._main,\n                  mainHelper = $($main),\n                  mainWidth = $main.offsetWidth,\n                  mainHeight = $main.offsetHeight,\n                  style;\n                this.arrowSize = 5; // defines the size of the tooltip arrow\n                if (this.isMaterialized()) {\n                  var elementStyle = window.getComputedStyle(this.element);\n                  var arrowSize = elementStyle.getPropertyValue('--jqx-tooltip-arrow-width');\n                  if (arrowSize) {\n                    this.arrowSize = parseInt(arrowSize);\n                  } else if (this.theme === \"fluent\") {\n                    this.arrowSize = 8;\n                  }\n                }\n                this.tooltipMainOffset = mainHelper.offset();\n                this.tooltipArrowOffset = {};\n                switch (this.position) {\n                  case 'top':\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth / 2 - this.tooltipWidth / 2 + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top - this.tooltipHeight - this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px 0px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + (mainWidth / 2 - this.arrowSize);\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'bottom':\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth / 2 - this.tooltipWidth / 2 + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight + this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = '0 ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + (mainWidth / 2 - this.arrowSize);\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'left':\n                    if (window.getComputedStyle) {\n                      style = window.getComputedStyle($main);\n                    } else {\n                      style = $main.currentStyle;\n                    }\n                    this.tooltipOffset.left = this.hostOffset.left - this.tooltipWidth - this.arrowSize + this.offsetHorizontal - (parseInt(style.borderLeftWidth, 10) + parseInt(style.borderRightWidth, 10));\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight / 2 - this.tooltipHeight / 2 + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-t-b'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-l-r');\n                    $arrow.style.borderWidth = this.arrowSize + 'px 0px ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                    this.tooltipMainOffset = mainHelper.offset();\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + mainWidth;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight / 2 - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'right':\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth + this.arrowSize + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight / 2 - this.tooltipHeight / 2 + this.offsetVertical;\n                    this.tooltipOffset.top = parseInt(this.tooltipOffset.top, 10);\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-t-b'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-l-r');\n                    $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px ' + this.arrowSize + 'px 0px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left - this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top + $main.offsetHeight / 2 - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'top-left':\n                    this.tooltipOffset.left = this.hostOffset.left + this.defaultOffset - this.tooltipWidth + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top - this.tooltipHeight - this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px  0px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + mainWidth - 6 * this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'bottom-left':\n                    this.tooltipOffset.left = this.hostOffset.left + this.defaultOffset - this.tooltipWidth + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight + this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = '0 ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + mainWidth - 6 * this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'top-right':\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth - this.defaultOffset + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top - this.tooltipHeight - this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px  0px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + 4 * this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'bottom-right':\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth - this.defaultOffset + this.offsetHorizontal;\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight + this.arrowSize + this.offsetVertical;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = '0 ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + 4 * this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                  case 'absolute':\n                    me._tooltipHelper.offset({\n                      top: this.absolutePositionY,\n                      left: this.absolutePositionX\n                    });\n\n                    // arrow specifications, NO arrow\n                    $arrow.style.borderWidth = '0px';\n                    break;\n                  case 'mouse':\n                    if (this._isTouchDevice === false) {\n                      switch (this.trigger) {\n                        case 'hover':\n                          if (this.mouseHoverTimeout) {\n                            clearTimeout(this.mouseHoverTimeout);\n                          }\n                          this.mouseHoverTimeout = setTimeout(function () {\n                            me.tooltipOffset.left = event.pageX + 10;\n                            me.tooltipOffset.top = event.pageY + 10;\n                            me._detectBrowserBounds();\n                          }, this.showDelay);\n                          break;\n                        case 'click':\n                          this.tooltipOffset.left = event.pageX + 10;\n                          this.tooltipOffset.top = event.pageY + 10;\n                          this._detectBrowserBounds();\n                          break;\n                      }\n                    } else {\n                      var x = event.pageX;\n                      var y = event.pageY;\n                      if (event.originalEvent) {\n                        var touch;\n                        if (event.originalEvent.touches && event.originalEvent.touches.length) {\n                          touch = event.originalEvent.touches[0];\n                        } else if (event.originalEvent.changedTouches && event.originalEvent.changedTouches.length) {\n                          touch = event.originalEvent.changedTouches[0];\n                        }\n                        if (touch !== undefined) {\n                          x = touch.pageX;\n                          y = touch.pageY;\n                        }\n                      }\n                      this.tooltipOffset.left = x + 10;\n                      this.tooltipOffset.top = y + 10;\n                      this._detectBrowserBounds();\n                    }\n\n                    // arrow specifications, NO arrow\n                    $arrow.style.borderWidth = '0px';\n                    break;\n                  case 'mouseenter':\n                    var mousecoordinates = {\n                      top: event.pageY,\n                      left: event.pageX\n                    };\n\n                    // mouse from TOP\n                    if (mousecoordinates.top < this.hostOffset.top + 10 && mousecoordinates.top > this.hostOffset.top - 10) {\n                      this.tooltipOffset.left = mousecoordinates.left - this.tooltipWidth / 2;\n                      this.tooltipOffset.top = this.hostOffset.top - this.tooltipHeight - this.arrowSize;\n                      this._detectBrowserBounds();\n\n                      // arrow specifications, the same as TOP arrow\n                      this.tooltipMainOffset = mainHelper.offset();\n                      me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                      $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                      $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px  0px';\n                      this.tooltipArrowOffset.left = this.tooltipMainOffset.left + (mainWidth / 2 - this.arrowSize);\n                      this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight;\n                      arrowHelper.offset({\n                        top: this.tooltipArrowOffset.top,\n                        left: this.tooltipArrowOffset.left\n                      });\n                    }\n                    // mouse from BOTTOM\n                    else if (mousecoordinates.top < this.hostOffset.top + this.hostHeight + 10 && mousecoordinates.top > this.hostOffset.top + this.hostHeight - 10) {\n                      this.tooltipOffset.left = mousecoordinates.left - this.tooltipWidth / 2;\n                      this.tooltipOffset.top = this.hostOffset.top + this.hostHeight + this.arrowSize;\n                      this._detectBrowserBounds();\n\n                      // arrow specifications, the same as BOTTOM arrow\n                      this.tooltipMainOffset = mainHelper.offset();\n                      me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                      $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                      $arrow.style.borderWidth = '0 ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                      this.tooltipArrowOffset.left = this.tooltipMainOffset.left + (mainWidth / 2 - this.arrowSize);\n                      this.tooltipArrowOffset.top = this.tooltipMainOffset.top - this.arrowSize;\n                      arrowHelper.offset({\n                        top: this.tooltipArrowOffset.top,\n                        left: this.tooltipArrowOffset.left\n                      });\n                    }\n                    // mouse from LEFT\n                    else if (mousecoordinates.left < this.hostOffset.left + 10 && mousecoordinates.left > this.hostOffset.left - 10) {\n                      if (window.getComputedStyle) {\n                        style = window.getComputedStyle($main);\n                      } else {\n                        style = $main.currentStyle;\n                      }\n                      this.tooltipOffset.left = this.hostOffset.left - this.tooltipWidth - this.arrowSize - (parseInt(style.borderLeftWidth, 10) + parseInt(style.borderRightWidth, 10));\n                      this.tooltipOffset.top = mousecoordinates.top - this.tooltipHeight / 2;\n                      this._detectBrowserBounds();\n\n                      // arrow specifications, the same as LEFT arrow\n                      this.tooltipMainOffset = mainHelper.offset();\n                      me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-t-b'));\n                      $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-l-r');\n                      $arrow.style.borderWidth = this.arrowSize + 'px 0px ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                      this.tooltipMainOffset = mainHelper.offset();\n                      this.tooltipArrowOffset.left = this.tooltipMainOffset.left + mainWidth;\n                      this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight / 2 - this.arrowSize;\n                      arrowHelper.offset({\n                        top: this.tooltipArrowOffset.top,\n                        left: this.tooltipArrowOffset.left\n                      });\n                    }\n                    // mouse from RIGHT\n                    else if (mousecoordinates.left < this.hostOffset.left + this.hostWidth + 10 && mousecoordinates.left > this.hostOffset.left + this.hostWidth - 10) {\n                      this.tooltipOffset.left = this.hostOffset.left + this.hostWidth + this.arrowSize;\n                      this.tooltipOffset.top = mousecoordinates.top - this.tooltipHeight / 2;\n                      this._detectBrowserBounds();\n\n                      // arrow specifications, the same as RIGHT arrow\n                      this.tooltipMainOffset = mainHelper.offset();\n                      me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-t-b'));\n                      $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-l-r');\n                      $arrow.style.borderWidth = this.arrowSize + 'px ' + this.arrowSize + 'px ' + this.arrowSize + 'px 0px';\n                      this.tooltipMainOffset = mainHelper.offset();\n                      this.tooltipArrowOffset.left = this.tooltipMainOffset.left - this.arrowSize;\n                      this.tooltipArrowOffset.top = this.tooltipMainOffset.top + mainHeight / 2 - this.arrowSize;\n                      arrowHelper.offset({\n                        top: this.tooltipArrowOffset.top,\n                        left: this.tooltipArrowOffset.left\n                      });\n                    }\n                    break;\n                  case 'default':\n                    // similar to 'bottom-right' but without this.offsetHorizontal and this.offsetVertical\n                    this.tooltipOffset.left = this.hostOffset.left + this.hostWidth - this.defaultOffset;\n                    this.tooltipOffset.top = this.hostOffset.top + this.hostHeight + this.arrowSize;\n                    this._detectBrowserBounds();\n\n                    // arrow specifications\n                    this.tooltipMainOffset = mainHelper.offset();\n                    me._removeClass($arrow, me.toThemeProperty('jqx-tooltip-arrow-l-r'));\n                    $arrow.className += ' ' + me.toThemeProperty('jqx-tooltip-arrow-t-b');\n                    $arrow.style.borderWidth = '0 ' + this.arrowSize + 'px ' + this.arrowSize + 'px';\n                    this.tooltipArrowOffset.left = this.tooltipMainOffset.left + 4 * this.arrowSize;\n                    this.tooltipArrowOffset.top = this.tooltipMainOffset.top - this.arrowSize;\n                    arrowHelper.offset({\n                      top: this.tooltipArrowOffset.top,\n                      left: this.tooltipArrowOffset.left\n                    });\n                    break;\n                }\n              }\n            },\n            // sets the content of the tooltip\n            _setContent: function () {\n              this._text.innerHTML = this.content;\n            },\n            opened: function () {\n              return this._isOpen && this.host.css('display') == 'block' && this.host.css('visibility') == 'visible';\n            },\n            // shows the tooltip with animation\n            _animateShow: function () {\n              this._closeAll();\n              clearTimeout(this.autoHideTimeout);\n              var opacityValue = parseFloat(this._tooltip.style.opacity);\n              if (this._isOpen === false && opacityValue === 0) {\n                var me = this;\n                me._tooltip.style.visibility = 'visible';\n                me._tooltip.style.display = 'block';\n                //me._tooltipHelper.stop();\n                me._tooltip.style.opacity = 0;\n                if (this.opening) {\n                  var canOpen = this.opening(this);\n                  if (canOpen === false) {\n                    return;\n                  }\n                }\n                me._tooltipHelper.animate({\n                  opacity: this.opacity\n                }, this.animationShowDelay, function () {\n                  me._raiseEvent('0');\n                  me._isOpen = true;\n\n                  // creates a variable, showing the instance of the opened tooltip\n                  //var opened_tooltip = $.data(document.body, \"_openedTooltip\" + me.name);\n\n                  me.openedTooltip = me;\n                  $.data(document.body, '_openedTooltip' + me.name, me);\n                  if (me.autoHideTimeout) {\n                    clearTimeout(me.autoHideTimeout);\n                  }\n                  if (me.autoHideDelay > 0 && me.autoHide === true) {\n                    me.autoHideTimeout = setTimeout(function () {\n                      me._autoHide();\n                    }, me.autoHideDelay);\n                  }\n                });\n              }\n            },\n            // triggers the tooltip\n            _trigger: function () {\n              if (this._id() !== 'removed') {\n                var me = this;\n                var targetElement = this.host;\n                if (this.selector) {\n                  targetElement = $(\"#\" + this.selector);\n                }\n                if (this._isTouchDevice === false) {\n                  switch (this.trigger) {\n                    case 'hover':\n                      if (this.position === 'mouse') {\n                        this.addHandler(targetElement, 'mousemove.tooltip', function (event) {\n                          if (me._enterFlag === 1) {\n                            me._raiseEvent('2');\n                            me._setPosition(event);\n                            clearTimeout(me.hoverShowTimeout);\n                            me.hoverShowTimeout = setTimeout(function () {\n                              me._animateShow();\n                              me._enterFlag = 0;\n                            }, me.showDelay);\n                          }\n                        });\n                        this.addHandler(targetElement, 'mouseenter.tooltip', function () {\n                          if (me._leaveFlag !== 0) {\n                            me._enterFlag = 1;\n                          }\n                        });\n                        this.addHandler(targetElement, 'mouseleave.tooltip', function (event) {\n                          me._leaveFlag = 1;\n                          clearTimeout(me.hoverShowTimeout);\n                          var tooltipbounds = me._tooltipHelper.offset();\n                          var width = me._tooltip.offsetWidth;\n                          var height = me._tooltip.offsetHeight;\n                          if (parseInt(event.pageX, 10) < parseInt(tooltipbounds.left, 10) || parseInt(event.pageX, 10) > parseInt(tooltipbounds.left, 10) + width) {\n                            me.close();\n                          }\n                          if (parseInt(event.pageY, 10) < parseInt(tooltipbounds.top, 10) || parseInt(event.pageY, 10) > parseInt(tooltipbounds.top, 10) + height) {\n                            me.close();\n                          }\n                        });\n                        this.addHandler(me._tooltipHelper, 'mouseleave.tooltip', function (event) {\n                          me._checkBoundariesAuto(event);\n                          if (me._clickFlag !== 0 && me._autoFlag !== 0) {\n                            me._leaveFlag = 0;\n                          } else {\n                            me._leaveFlag = 1;\n                            me.close();\n                          }\n                        });\n                      } else {\n                        this.addHandler(targetElement, 'mouseenter.tooltip', function (event) {\n                          clearTimeout(me.hoverShowTimeout);\n                          me.hoverShowTimeout = setTimeout(function () {\n                            me._raiseEvent('2');\n                            me._setPosition(event);\n                            me._animateShow();\n                          }, me.showDelay);\n                        });\n                        this.addHandler(targetElement, 'mouseleave.tooltip', function (event) {\n                          me._leaveFlag = 1;\n                          clearTimeout(me.hoverShowTimeout);\n                          if (me.autoHide) {\n                            var x = event.pageX;\n                            var y = event.pageY;\n                            var tooltipbounds = me._tooltipHelper.offset();\n                            var left = tooltipbounds.left;\n                            var top = tooltipbounds.top;\n                            var width = me._tooltip.offsetWidth;\n                            var height = me._tooltip.offsetHeight;\n                            if (parseInt(x, 10) < parseInt(left, 10) || parseInt(x, 10) > parseInt(left, 10) + width || parseInt(y, 10) < parseInt(top, 10) || parseInt(y, 10) > parseInt(top, 10) + height) {\n                              me.close();\n                            }\n                          }\n                        });\n                        this.addHandler(me._tooltipHelper, 'mouseleave.tooltip', function (event) {\n                          me._checkBoundariesAuto(event);\n                          if (me._clickFlag !== 0 && me._autoFlag !== 0) {\n                            me._leaveFlag = 0;\n                          } else {\n                            me._leaveFlag = 1;\n                            if (me.autoHide) {\n                              me.close();\n                            }\n                          }\n                        });\n                      }\n                      break;\n                    case 'click':\n                      this.addHandler(targetElement, 'click.tooltip', function (event) {\n                        if (me.position === 'mouseenter') {\n                          me.position = 'mouse';\n                        }\n                        me._raiseEvent('2');\n                        me._setPosition(event);\n                        me._animateShow();\n                      });\n                      break;\n                    case 'none':\n                      break;\n                  }\n                } else {\n                  // if the device is touch\n                  if (this.trigger !== 'none') {\n                    this.addHandler(targetElement, 'touchstart.tooltip', function (event) {\n                      if (me.position === 'mouseenter') {\n                        me.position = 'mouse';\n                      }\n                      me._raiseEvent('2');\n                      me._setPosition(event);\n                      me._animateShow();\n                    });\n                  }\n                }\n              }\n            },\n            // automatically hides the tooltip\n            _autoHide: function () {\n              var me = this;\n              var opacityValue = parseFloat(me._tooltip.style.opacity);\n              if (this.autoHide === true && this._isOpen === true && opacityValue >= this.opacity) {\n                me._raiseEvent('3');\n                me._tooltipHelper.animate({\n                  opacity: 0\n                }, me.animationHideDelay, function () {\n                  me._tooltip.style.visibility = 'hidden';\n                  me._tooltip.style.display = 'none';\n                  me._raiseEvent('1');\n                  me._isOpen = false;\n                });\n              }\n            },\n            // hides the tooltip when it is clicked\n            _clickHide: function () {\n              var me = this;\n              this.addHandler(me._tooltipHelper, 'click.tooltip', function (event) {\n                me._checkBoundariesClick(event);\n                me.close();\n              });\n            },\n            // sets the width and height of the tooltip\n            _setSize: function () {\n              var that = this;\n              that._tooltip.style.width = that._toPx(that.width);\n              that._tooltip.style.height = that._toPx(that.height);\n            },\n            resize: function () {\n              this._setSize();\n            },\n            // sets the tooltips theme and classes\n            _setTheme: function () {\n              var that = this;\n              if (that._tooltip.className.indexOf('jqx-tooltip') === -1) {\n                that._tooltip.className += ' ' + that.toThemeProperty('jqx-tooltip jqx-popup');\n                that._main.className += ' ' + that.toThemeProperty('jqx-widget jqx-fill-state-normal jqx-tooltip-main');\n                that._text.className += ' ' + that.toThemeProperty('jqx-widget jqx-fill-state-normal jqx-tooltip-text');\n                if (that._arrow) {\n                  that._arrow.className += ' ' + that.toThemeProperty('jqx-widget jqx-fill-state-normal jqx-tooltip-arrow');\n                }\n              }\n            },\n            // sets the initial position of the tooltip as 'default'\n            _initialPosition: function () {\n              var tempPosition = this.position;\n              this.position = 'default';\n              this._setPosition();\n              this.position = tempPosition;\n            },\n            // checks the tooltip for browser bounds conflicts and sets the tooltip's offset accordingly (if enableBrowserBoundsDetection == true), otherwise just sets the tooltip's offset\n            _detectBrowserBounds: function () {\n              var me = this,\n                tooltip = me._tooltipHelper;\n              if (this.enableBrowserBoundsDetection) {\n                // top and left\n                if (this.tooltipOffset.top < this.documentTop && this.tooltipOffset.left < 0) {\n                  tooltip.offset({\n                    top: this.documentTop,\n                    left: this.documentLeft\n                  });\n                  // top and right\n                } else if (this.tooltipOffset.top < this.documentTop && this.tooltipOffset.left + this.tooltipWidth > this.windowWidth + this.documentLeft) {\n                  tooltip.offset({\n                    top: this.documentTop,\n                    left: this.windowWidth + this.documentLeft - this.tooltipWidth\n                  });\n                  // top\n                } else if (this.tooltipOffset.top < this.documentTop) {\n                  tooltip.offset({\n                    top: this.documentTop,\n                    left: this.tooltipOffset.left\n                  });\n                  // bottom and left\n                } else if (this.tooltipOffset.top + this.tooltipHeight > this.windowHeight + this.documentTop && this.tooltipOffset.left < 0) {\n                  tooltip.offset({\n                    top: this.windowHeight + this.documentTop - this.tooltipHeight,\n                    left: this.documentLeft\n                  });\n                  // bottom and right\n                } else if (this.tooltipOffset.top + this.tooltipHeight > this.windowHeight + this.documentTop && this.tooltipOffset.left + this.tooltipWidth > this.windowWidth + this.documentLeft) {\n                  tooltip.offset({\n                    top: this.windowHeight + this.documentTop - this.tooltipHeight,\n                    left: this.windowWidth + this.documentLeft - this.tooltipWidth\n                  });\n                  // bottom\n                } else if (this.tooltipOffset.top + this.tooltipHeight > this.windowHeight + this.documentTop) {\n                  tooltip.offset({\n                    top: this.windowHeight + this.documentTop - this.tooltipHeight,\n                    left: this.tooltipOffset.left\n                  });\n                  // left\n                } else if (this.tooltipOffset.left < 0) {\n                  tooltip.offset({\n                    top: this.tooltipOffset.top,\n                    left: this.documentLeft\n                  });\n                  // right\n                } else if (this.tooltipOffset.left + this.tooltipWidth > this.windowWidth + this.documentLeft) {\n                  tooltip.offset({\n                    top: this.tooltipOffset.top,\n                    left: this.windowWidth + this.documentLeft - this.tooltipWidth\n                  });\n                  // no conflict\n                } else {\n                  tooltip.offset({\n                    top: this.tooltipOffset.top,\n                    left: this.tooltipOffset.left\n                  });\n                }\n                // if enableBrowserBoundsDetection == false, the same as no conflict case\n              } else {\n                tooltip.offset({\n                  top: this.tooltipOffset.top,\n                  left: this.tooltipOffset.left\n                });\n              }\n            },\n            // checks if a mouseevent was within the boundaries of the host\n            _checkBoundaries: function (event) {\n              if (event.pageX >= this.hostOffset.left && event.pageX <= this.hostOffset.left + this.hostWidth && event.pageY >= this.hostOffset.top && event.pageY <= this.hostOffset.top + this.hostHeight) {\n                return true;\n              } else {\n                return false;\n              }\n            },\n            // checks if a click was within the boundaries of the host\n            _checkBoundariesClick: function (event) {\n              if (this._checkBoundaries(event)) {\n                this._clickFlag = 1;\n              } else {\n                this._clickFlag = 0;\n              }\n            },\n            // checks if the mouse was was within the boundaries of the host when the tooltip was automatically closed\n            _checkBoundariesAuto: function (event) {\n              if (this._checkBoundaries(event)) {\n                this._autoFlag = 1;\n              } else {\n                this._autoFlag = 0;\n              }\n            },\n            // removes all event handlers\n            _removeHandlers: function () {\n              this.removeHandler(this.host, 'mouseenter.tooltip');\n              this.removeHandler(this.host, 'mousemove.tooltip');\n              this.removeHandler(this.host, 'mouseleave.tooltip');\n              this.removeHandler(this.host, 'click.tooltip');\n              this.removeHandler(this.host, 'touchstart.tooltip');\n              this.removeHandler(this._tooltipHelper, 'click.tooltip');\n              this.removeHandler(this._tooltipHelper, 'mouseleave.tooltip');\n            },\n            // closes all tooltips, created together\n            _closeAll: function () {\n              for (var i = 0; i < this.IDArray.length; i++) {\n                var iterationID = this.IDArray[i].tooltipID,\n                  element = document.getElementById(iterationID);\n                if (element !== this._tooltip) {\n                  element.style.opacity = 0;\n                  element.style.visibility = 'hidden';\n                  element.style.display = 'none';\n                  this._isOpen = false;\n                }\n              }\n            },\n            _toPx: function (value) {\n              if (typeof value === 'number') {\n                return value + 'px';\n              } else {\n                return value;\n              }\n            },\n            _removeClass: function (element, classToRemove) {\n              $(element).removeClass(classToRemove);\n            }\n          });\n        })(jqxBaseFramework); //ignore jslint\n      })();\n\n      /***/\n    }),\n    /***/7762: ( /***/() => {\n      /* tslint:disable */\n      /* eslint-disable */\n      (function () {\n        if (typeof document === 'undefined') {\n          return;\n        }\n        (function ($) {\n          'use strict';\n\n          $.jqx.jqxWidget('jqxWindow', '', {});\n          $.extend($.jqx._jqxWindow.prototype, {\n            defineInstance: function () {\n              var settings = {\n                // Type: String, Number\n                // Default: auto\n                // Sets or gets window's height.\n                height: 'auto',\n                // Type: Number\n                // Default: 200\n                // Sets or gets window's width.\n                width: 200,\n                // Type: Number\n                // Default: 50\n                // Gets or sets window's minimum height.\n                minHeight: 50,\n                // Type: Number\n                // Default: 1200\n                // Gets or sets window's maximum height.\n                maxHeight: 1200,\n                // Type: Number\n                // Default: 50\n                // Gets or sets window's minimum height.\n                minWidth: 50,\n                // Type: Number\n                // Default: 1200\n                // Gets or sets window's maximum width.\n                maxWidth: 1200,\n                // Type: Bool\n                // Default: true\n                // Gets or sets whether the close button will be shown.\n                showCloseButton: true,\n                // Type: Bool\n                // Default: false\n                // Gets or sets whether the window is disabled.\n                disabled: false,\n                // Type: Bool\n                // Default: true\n                // Sets or gets whether the window will be shown after it's creation.\n                autoOpen: true,\n                // Type: Bool\n                // Default: true\n                // Sets or gets whether the window could be closed with Escape or another keyboard key.\n                keyboardCloseKey: 'esc',\n                // Type: String\n                // Default: ''\n                // Sets or gets window's title.\n                title: '',\n                // Type: String\n                // Default: ''\n                // Sets or gets window's content.\n                content: '',\n                // Type: Bool\n                // Default: true\n                // Sets or gets whether the window is draggale.\n                draggable: true,\n                // Type: Bool\n                // Default: true\n                // Sets or gets whether the window is resizable.\n                resizable: true,\n                // Type: Bool\n                // Default: 'fade'\n                // Sets or gets window's animation type. Possible values ['none', 'fade', 'slide', 'combined']\n                animationType: 'fade',\n                // Type: Number\n                // Default: 250\n                // Sets or gets window's hide animation duration.\n                closeAnimationDuration: 250,\n                // Type: Number\n                // Default: 250\n                // Sets or gets window's show animation duration.\n                showAnimationDuration: 250,\n                // Type: Bool\n                // Default: false\n                // Sets or gets whether the window is modal.\n                isModal: false,\n                // Type: String, Array, Object\n                // Default: 'center'\n                // Sets or gets window's position. Possible values - 'center', 'bottom, left', [232, 45], { x: 42, y: 34 }.\n                position: 'center',\n                // Type: Number\n                // Default: 16\n                // Sets or gets close button's size.\n                closeButtonSize: 16,\n                // Type: String\n                // Default: hide\n                // Sets or gets close button action. Possible values ['hide', 'close']. When closeButtonAction is close we are removing the widget.\n                closeButtonAction: 'hide',\n                // Type: Number\n                // Default: 0.5\n                // Sets or gets modal background's opacity\n                modalOpacity: 0.3,\n                // Type: Object\n                // Default: null\n                // Sets or gets the dragging area. Example { left: 300, top: 300, width: 600, height: 600 }\n                dragArea: null,\n                // Type: Object\n                // Default: null\n                // Sets or gets submit button\n                okButton: null,\n                // Type: Object\n                // Default: null\n                // Sets or gets the cancel button\n                cancelButton: null,\n                // Type: Object\n                // Default: { OK: false, Cancel: false, None: true }\n                // Sets or gets the dialog result\n                dialogResult: {\n                  OK: false,\n                  Cancel: false,\n                  None: true\n                },\n                // Type: Bool\n                // Default: false\n                // Sets or gets whether the window is collapsed\n                collapsed: false,\n                // Type: Bool\n                // Default: true\n                // Sets or gets whether the collapse button is going to be shown\n                showCollapseButton: false,\n                // Type: Number\n                // Default: 150\n                // Sets or gets the collapse animation duration\n                collapseAnimationDuration: 150,\n                // Type: Number\n                // Default: 16\n                // Sets or gets the collapse button size\n                collapseButtonSize: 16,\n                rtl: false,\n                keyboardNavigation: true,\n                headerHeight: null,\n                //To move show into 4th place into the array and to remove open\n                _events: ['created', 'closed', 'moving', 'moved', 'open', 'collapse', 'expand', 'open', 'close', 'resize'],\n                initContent: null,\n                enableResize: true,\n                restricter: null,\n                autoFocus: true,\n                closing: null,\n                _invalidArgumentExceptions: {\n                  'invalidHeight': 'Invalid height!',\n                  'invalidWidth': 'Invalid width!',\n                  'invalidMinHeight': 'Invalid minHeight!',\n                  'invalidMaxHeight': 'Invalid maxHeight!',\n                  'invalidMinWidth': 'Invalid minWidth!',\n                  'invalidMaxWidth': 'Invalid maxWidth',\n                  'invalidKeyCode': 'Invalid keyCode!',\n                  'invalidAnimationType': 'Invalid animationType!',\n                  'invalidCloseAnimationDuration': 'Invalid closeAnimationDuration!',\n                  'invalidShowAnimationDuration': 'Invalid showAnimationDuration!',\n                  'invalidPosition': 'Invalid position!',\n                  'invalidCloseButtonSize': 'Invalid closeButtonSize!',\n                  'invalidCollapseButtonSize': 'Invalid collapseButtonSize!',\n                  'invalidCloseButtonAction': 'Invalid cluseButtonAction!',\n                  'invalidModalOpacity': 'Invalid modalOpacity!',\n                  'invalidDragArea': 'Invalid dragArea!',\n                  'invalidDialogResult': 'Invalid dialogResult!',\n                  'invalidIsModal': 'You can have just one modal window!'\n                },\n                _enableResizeCollapseBackup: null,\n                _enableResizeBackup: undefined,\n                _heightBeforeCollapse: null,\n                _minHeightBeforeCollapse: null,\n                _mouseDown: false,\n                _isDragging: false,\n                _rightContentWrapper: null,\n                _leftContentWrapper: null,\n                _headerContentWrapper: null,\n                _closeButton: null,\n                _collapseButton: null,\n                _title: null,\n                _content: null,\n                _mousePosition: {},\n                _windowPosition: {},\n                _modalBackground: null,\n                _SCROLL_WIDTH: 21,\n                _visible: true,\n                modalBackgroundZIndex: 1299,\n                modalZIndex: 1800,\n                zIndex: 1000,\n                _touchEvents: {\n                  'mousedown': $.jqx.mobile.getTouchEventName('touchstart'),\n                  'mouseup': $.jqx.mobile.getTouchEventName('touchend'),\n                  'mousemove': $.jqx.mobile.getTouchEventName('touchmove'),\n                  'mouseenter': 'mouseenter',\n                  'mouseleave': 'mouseleave',\n                  'click': $.jqx.mobile.getTouchEventName('touchstart')\n                }\n              };\n              if (this === $.jqx._jqxWindow.prototype) {\n                return settings;\n              }\n              $.extend(true, this, settings);\n              return settings;\n            },\n            createInstance: function () {\n              if (this.host.initAnimate) {\n                this.host.initAnimate();\n              }\n              this.host.attr('role', 'dialog');\n              this.host.removeAttr('data-bind');\n              this.host.appendTo(document.body);\n              var that = this;\n              var sanitizeProperties = function (properties) {\n                for (var i = 0; i < properties.length; i++) {\n                  var propertyName = properties[i];\n                  if (that[propertyName] && that[propertyName].toString().indexOf('px') >= 0) {\n                    that[propertyName] = parseInt(that[propertyName], 10);\n                  }\n                }\n              };\n              sanitizeProperties(['minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'width', 'height']);\n              var initRestricter = function () {\n                var paddingTop = parseInt($(that.restricter).css('padding-top'), 10);\n                var paddingLeft = parseInt($(that.restricter).css('padding-left'), 10);\n                var paddingBottom = parseInt($(that.restricter).css('padding-bottom'), 10);\n                var paddingRight = parseInt($(that.restricter).css('padding-right'), 10);\n                var coord = $(that.restricter).coord();\n                that.dragArea = {\n                  left: paddingLeft + coord.left,\n                  top: paddingTop + coord.top,\n                  width: 1 + paddingRight + $(that.restricter).width(),\n                  height: 1 + paddingBottom + $(that.restricter).height()\n                };\n              };\n              if (this.restricter) {\n                initRestricter();\n              }\n              if (this.restricter) {\n                this.addHandler($(window), 'resize.' + this.element.id, function () {\n                  initRestricter();\n                });\n                this.addHandler($(window), 'orientationchanged.' + this.element.id, function () {\n                  initRestricter();\n                });\n                this.addHandler($(window), 'orientationchange.' + this.element.id, function () {\n                  initRestricter();\n                });\n              }\n              this._isTouchDevice = $.jqx.mobile.isTouchDevice();\n              this._validateProperties();\n              this._createStructure();\n              this._refresh();\n              if (!this.autoOpen) {\n                this.element.style.display = 'none';\n              }\n              if ($.jqx.browser.msie) {\n                this.host.addClass(this.toThemeProperty('jqx-noshadow'));\n              }\n              if (!this.isModal) {\n                this._fixWindowZIndex();\n              }\n              this._setStartupSettings();\n              this._positionWindow();\n              this._raiseEvent(0);\n              if (this.autoOpen) {\n                this._performLayout();\n                var self = this;\n                if (this.isModal) {\n                  this._fixWindowZIndex('modal-show');\n                }\n                if (self.initContent) {\n                  self.initContent();\n                  self._contentInitialized = true;\n                }\n                this._raiseEvent(7);\n                this._raiseEvent(9);\n              }\n            },\n            refresh: function () {\n              this._performLayout();\n            },\n            _setStartupSettings: function () {\n              if (this.disabled) {\n                this.disable();\n              }\n              if (this.collapsed) {\n                this.collapsed = false;\n                this.collapse(0);\n              }\n              if (!this.autoOpen) {\n                this.hide(null, 0.001, true);\n                this._visible = false;\n              }\n              if (this.title !== null && this.title !== '') {\n                this.setTitle(this.title);\n              }\n              if (this.content !== null && this.content !== '') {\n                this.setContent(this.content);\n              }\n              this.title = this._headerContentWrapper.html();\n              this.content = this._content.html();\n            },\n            //Fixing window's z-index and adding it to the collection of all windows\n            //saved in $.data. In the end of the method we are sorting the window list in ascending z-index order.\n            _fixWindowZIndex: function (type) {\n              var windowsList = $.data(document.body, 'jqxwindows-list') || [],\n                zIndex = this.zIndex;\n              if (!this.isModal) {\n                if (this._indexOf(this.host, windowsList) < 0) {\n                  windowsList.push(this.host);\n                }\n                $.data(document.body, 'jqxwindows-list', windowsList);\n                if (windowsList.length > 1) {\n                  var upperWindow = windowsList[windowsList.length - 2];\n                  if (upperWindow.css('z-index') == 'auto') {\n                    zIndex = this.zIndex + windowsList.length + 1;\n                  } else {\n                    var zIndexByProperty = this.zIndex;\n                    zIndex = parseInt(upperWindow.css('z-index'), 10) + 1;\n                    if (zIndex < zIndexByProperty) {\n                      zIndex = zIndexByProperty;\n                    }\n                  }\n                }\n              } else {\n                if (windowsList) {\n                  windowsList = this._removeFromArray(this.host, windowsList);\n                  $.data(document.body, 'jqxwindows-list', windowsList);\n                }\n                var modalWindows = $.data(document.body, 'jqxwindows-modallist');\n                if (!modalWindows) {\n                  if (type == 'modal-show') {\n                    var list = [];\n                    list.push(this.host);\n                    $.data(document.body, 'jqxwindows-modallist', list);\n                    modalWindows = list;\n                  } else {\n                    $.data(document.body, 'jqxwindows-modallist', []);\n                    modalWindows = [];\n                  }\n                } else {\n                  if (type == 'modal-show') {\n                    modalWindows.push(this.host);\n                  } else {\n                    var index = modalWindows.indexOf(this.host);\n                    if (index != -1) {\n                      modalWindows.splice(index, 1);\n                    }\n                  }\n                }\n                zIndex = this.modalZIndex;\n                $.each(modalWindows, function () {\n                  if (this.data()) {\n                    if (this.data().jqxWindow) {\n                      var instance = this.data().jqxWindow.instance;\n                      instance._modalBackground.style.zIndex = zIndex;\n                      instance.element.style.zIndex = zIndex + 1;\n                      zIndex += 2;\n                    }\n                  }\n                });\n                $.data(document.body, 'jqxwindow-modal', this.host);\n                return;\n              }\n              this.element.style.zIndex = zIndex;\n              this._sortByStyle('z-index', windowsList);\n            },\n            _validateProperties: function () {\n              try {\n                this._validateSize();\n                this._validateAnimationProperties();\n                this._validateInteractionProperties();\n                this._validateModalProperties();\n                if (!this.position) {\n                  throw new Error(this._invalidArgumentExceptions.invalidPosition);\n                }\n                if (isNaN(this.closeButtonSize) || parseInt(this.closeButtonSize, 10) < 0) {\n                  throw new Error(this._invalidArgumentExceptions.invalidCloseButtonSize);\n                }\n                if (isNaN(this.collapseButtonSize) || parseInt(this.collapseButtonSize, 10) < 0) {\n                  throw new Error(this._invalidArgumentExceptions.invalidCollapseButtonSize);\n                }\n              } catch (exception) {\n                throw new Error(exception);\n              }\n            },\n            _validateModalProperties: function () {\n              if (this.modalOpacity < 0 || this.modalOpacity > 1) {\n                throw new Error(this._invalidArgumentExceptions.invalidModalOpacity);\n              }\n              if (this.isModal && !this._singleModalCheck()) {\n                throw new Error(this._invalidArgumentExceptions.invalidIsModal);\n              }\n            },\n            //If window's height is less than minHeight we are stting height to minHeight the same when the width is less than minWidth.\n            //If window's height is greater than maxHeight we are setting height to maxHeight the same with the width.\n            _validateSize: function () {\n              this._validateSizeLimits();\n              if (this.height !== 'auto' && isNaN(parseInt(this.height, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidHeight);\n              }\n              if (this.width !== 'auto' && isNaN(parseInt(this.width, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidWidth);\n              }\n              if (this.height !== 'auto' && this.height < this.minHeight) {\n                this.height = this.minHeight;\n              }\n              if (this.width < this.minWidth) {\n                this.width = this.minWidth;\n              }\n              if (this.height !== 'auto' && this.height > this.maxHeight) {\n                this.height = this.maxHeight;\n              }\n              if (this.width > this.maxWidth) {\n                this.width = this.maxWidth;\n              }\n              if (this.dragArea === null) {\n                return;\n              }\n              if (this.dragArea && (this.dragArea.height !== null && this.host.height() > this.dragArea.height || parseInt(this.height, 10) > this.dragArea.height) || this.dragArea.width !== null && this.width > this.dragArea.width || this.maxHeight > this.dragArea.height || this.maxWidth > this.dragArea.width) {\n                //throw new Error(this._invalidArgumentExceptions['invalidDragArea']);\n              }\n            },\n            _validateSizeLimits: function () {\n              if (this.maxHeight == null) {\n                this.maxHeight = 9999;\n              }\n              if (this.minWidth == null) {\n                this.minWidth = 0;\n              }\n              if (this.maxWidth == null) {\n                this.maxWidth = 9999;\n              }\n              if (this.minHeight == null) {\n                this.minHeight = 0;\n              }\n              if (isNaN(parseInt(this.minHeight, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidMinHeight);\n              }\n              if (isNaN(parseInt(this.maxHeight, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidMaxHeight);\n              }\n              if (isNaN(parseInt(this.minWidth, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidMinWidth);\n              }\n              if (isNaN(parseInt(this.maxWidth, 10))) {\n                throw new Error(this._invalidArgumentExceptions.invalidMaxWidth);\n              }\n              if (this.minHeight && this.maxHeight) {\n                if (parseInt(this.minHeight, 10) > parseInt(this.maxHeight, 10) && this.maxHeight != Number.MAX_VALUE) {\n                  throw new Error(this._invalidArgumentExceptions.invalidMinHeight);\n                }\n              }\n              if (this.minWidth && this.maxWidth) {\n                if (parseInt(this.minWidth, 10) > parseInt(this.maxWidth, 10) && this.maxWidth != Number.MAX_VALUE) {\n                  throw new Error(this._invalidArgumentExceptions.invalidMinWidth);\n                }\n              }\n            },\n            _validateAnimationProperties: function () {\n              if (this.animationType !== 'fade' && this.animationType !== 'slide' && this.animationType !== 'combined' && this.animationType !== 'none') {\n                throw new Error(this._invalidArgumentExceptions.invalidAnimationType);\n              }\n              if (isNaN(parseInt(this.closeAnimationDuration, 10)) || this.closeAnimationDuration < 0) {\n                throw new Error(this._invalidArgumentExceptions.invalidCloseAnimationDuration);\n              }\n              if (isNaN(parseInt(this.showAnimationDuration, 10)) || this.showAnimationDuration < 0) {\n                throw new Error(this._invalidArgumentExceptions.invalidShowAnimationDuration);\n              }\n            },\n            _validateInteractionProperties: function () {\n              if (parseInt(this.keyCode, 10) < 0 || parseInt(this.keyCode, 10) > 130 && this.keyCode !== 'esc') {\n                throw new Error(this._invalidArgumentExceptions.invalidKeyCode);\n              }\n              if (this.dragArea !== null && (typeof this.dragArea.width === 'undefined' || typeof this.dragArea.height === 'undefined' || typeof this.dragArea.left === 'undefined' || typeof this.dragArea.top === 'undefined')) {\n                throw new Error(this._invalidArgumentExceptions.invalidDragArea);\n              }\n              if (!this.dialogResult || !this.dialogResult.OK && !this.dialogResult.Cancel && !this.dialogResult.None) {\n                throw new Error(this._invalidArgumentExceptions.invalidDialogResult);\n              }\n              if (this.closeButtonAction !== 'hide' && this.closeButtonAction !== 'close') {\n                throw new Error(this._invalidArgumentExceptions.invalidCloseButtonAction);\n              }\n            },\n            _singleModalCheck: function () {\n              var windowsList = $.data(document.body, 'jqxwindows-list') || [],\n                count = windowsList.length;\n              while (count) {\n                count -= 1;\n                if ($(windowsList[count].attr('id')).length > 0) {\n                  if ($(windowsList[count].attr('id')).jqxWindow('isModal')) {\n                    return false;\n                  }\n                }\n              }\n              return true;\n            },\n            //This method is constructing the window from two type's of structures.\n            //The first one is containing two divs. The first one is window's host and contain 'caption' attribute. The second\n            //div is window's content.\n            //The second one is containing three divs. The first one is representing the window. Second one (first inner)\n            //window's header and the third one window's content.\n            _createStructure: function () {\n              var children = this.host.children();\n              if (children.length === 1) {\n                this._content = children[0];\n                this._header = document.createElement('div');\n                this._header.innerHTML = this.host.attr('caption');\n                this.element.insertBefore(this._header, this._content);\n                this.host.attr('caption', '');\n                this._header = $(this._header);\n                this._content = $(this._content);\n              } else if (children.length === 2) {\n                this._header = $(children[0]);\n                this._content = $(children[1]);\n              } else {\n                throw new Error('Invalid structure!');\n              }\n            },\n            _refresh: function () {\n              this._render();\n              this._addStyles();\n              this._performLayout();\n              this._removeEventHandlers();\n              this._addEventHandlers();\n              this._initializeResize();\n            },\n            _render: function () {\n              this._addHeaderWrapper();\n              this._addCloseButton();\n              this._addCollapseButton();\n              this._removeModal();\n              this._makeModal();\n            },\n            _addHeaderWrapper: function () {\n              if (!this._headerContentWrapper) {\n                this._header[0].innerHTML = '<div style=\"float:left;\">' + this._header[0].innerHTML + '</div>';\n                this._headerContentWrapper = $(this._header.children()[0]);\n                if (this.headerHeight !== null) {\n                  this._header.height(this.headerHeight);\n                }\n              }\n            },\n            _addCloseButton: function () {\n              if (!this._closeButton) {\n                // the wrapper's purpose is to be a background of the close button's image.\n                this._closeButtonWrapper = document.createElement('div');\n                this._closeButtonWrapper.className = this.toThemeProperty('jqx-window-close-button-background');\n                this._closeButton = document.createElement('div');\n                this._closeButton.className = this.toThemeProperty('jqx-window-close-button jqx-icon-close');\n                this._closeButton.style.width = '100%';\n                this._closeButton.style.height = '100%';\n                this._closeButtonWrapper.appendChild(this._closeButton);\n                this._header[0].appendChild(this._closeButtonWrapper);\n                this._closeButtonWrapper = $(this._closeButtonWrapper);\n                this._closeButton = $(this._closeButton);\n              }\n            },\n            _addCollapseButton: function () {\n              if (!this._collapseButton) {\n                // the wrapper's purpose is to be a background of the close button's image.\n                this._collapseButtonWrapper = document.createElement('div');\n                this._collapseButtonWrapper.className = this.toThemeProperty('jqx-window-collapse-button-background');\n                this._collapseButton = document.createElement('div');\n                this._collapseButton.className = this.toThemeProperty('jqx-window-collapse-button jqx-icon-arrow-up');\n                this._collapseButton.style.width = '100%';\n                this._collapseButton.style.height = '100%';\n                this._collapseButtonWrapper.appendChild(this._collapseButton);\n                this._header[0].appendChild(this._collapseButtonWrapper);\n                this._collapseButtonWrapper = $(this._collapseButtonWrapper);\n                this._collapseButton = $(this._collapseButton);\n              }\n            },\n            _removeModal: function () {\n              if (!this.isModal && typeof this._modalBackground === 'object' && this._modalBackground !== null) {\n                $('.' + this.toThemeProperty('jqx-window-modal')).remove();\n                this._modalBackground = null;\n              }\n            },\n            focus: function () {\n              try {\n                this.host.focus();\n                var me = this;\n                setTimeout(function () {\n                  me.host.focus();\n                }, 10);\n              } catch (error) {}\n            },\n            _makeModal: function () {\n              if (this.isModal && !this._modalBackground) {\n                var windows = $.data(document.body, 'jqxwindows-list');\n                if (windows) {\n                  this._removeFromArray(this.host, windows);\n                  $.data(document.body, 'jqxwindows-list', windows);\n                }\n                this._modalBackground = document.createElement('div');\n                this._modalBackground.className = this.toThemeProperty('jqx-window-modal');\n                this._setModalBackgroundStyles();\n                document.body.appendChild(this._modalBackground);\n                this.addHandler(this._modalBackground, this._getEvent('click'), function () {\n                  return false;\n                });\n                var me = this;\n                var ischildof = function (element, filterString) {\n                  return filterString.contains(element);\n                };\n                this.addHandler(this._modalBackground, 'mouseup', function (event) {\n                  me._stopResizing(me);\n                  event.preventDefault();\n                  //     return false;\n                });\n                this.addHandler(this._modalBackground, 'mousedown', function (event) {\n                  var tabbables = me._getTabbables();\n                  if (tabbables.length > 0) {\n                    tabbables[0].focus();\n                    setTimeout(function () {\n                      tabbables[0].focus();\n                    }, 100);\n                  }\n                  event.preventDefault();\n                  return false;\n                });\n                this.addHandler($(document), 'keydown.window' + this.element.id, function (event) {\n                  if (event.keyCode !== 9) {\n                    return;\n                  }\n                  var modalWindows = $.data(document.body, 'jqxwindows-modallist');\n                  if (modalWindows.length > 1) {\n                    if (modalWindows[modalWindows.length - 1][0] != me.element) {\n                      return;\n                    }\n                  }\n                  var tabbables = me._getTabbables();\n                  var first = null;\n                  var last = null;\n                  if (me.element.offsetWidth === 0 || me.element.offsetHeight === 0) {\n                    return;\n                  }\n                  if (tabbables.length > 0) {\n                    first = tabbables[0];\n                    last = tabbables[tabbables.length - 1];\n                  }\n                  if (event.target == me.element) {\n                    return;\n                  }\n                  if (first == null) {\n                    return;\n                  }\n                  if (!ischildof(event.target, me.element)) {\n                    first.focus();\n                    return false;\n                  }\n                  if (event.target === last && !event.shiftKey) {\n                    first.focus();\n                    return false;\n                  } else if (event.target === first && event.shiftKey) {\n                    last.focus();\n                    return false;\n                  }\n                });\n              }\n            },\n            _addStyles: function () {\n              this.host.addClass(this.toThemeProperty('jqx-rc-all'));\n              this.host.addClass(this.toThemeProperty('jqx-window'));\n              this.host.addClass(this.toThemeProperty('jqx-popup'));\n              if ($.jqx.browser.msie) {\n                this.host.addClass(this.toThemeProperty('jqx-noshadow'));\n              }\n              this.host.addClass(this.toThemeProperty('jqx-widget'));\n              this.host.addClass(this.toThemeProperty('jqx-widget-content'));\n              this._header.addClass(this.toThemeProperty('jqx-window-header'));\n              this._content.addClass(this.toThemeProperty('jqx-window-content'));\n              this._header.addClass(this.toThemeProperty('jqx-widget-header'));\n              this._content.addClass(this.toThemeProperty('jqx-widget-content'));\n              this._header.addClass(this.toThemeProperty('jqx-disableselect'));\n              this._header.addClass(this.toThemeProperty('jqx-rc-t'));\n              this._content.addClass(this.toThemeProperty('jqx-rc-b'));\n              if (!this.host.attr('tabindex')) {\n                this.element.tabIndex = 0;\n                this._header[0].tabIndex = 0;\n                this._content[0].tabIndex = 0;\n              }\n              this.element.setAttribute('hideFocus', 'true');\n              this.element.style.outline = 'none';\n            },\n            _performHeaderLayout: function () {\n              this._handleHeaderButtons();\n              this._header[0].style.position = 'relative';\n              if (this.rtl) {\n                this._headerContentWrapper[0].style.direction = 'rtl';\n                this._headerContentWrapper[0].style['float'] = 'right';\n              } else {\n                this._headerContentWrapper[0].style.direction = 'ltr';\n                this._headerContentWrapper[0].style['float'] = 'left';\n              }\n              this._performHeaderCloseButtonLayout();\n              this._performHeaderCollapseButtonLayout();\n              this._centerElement(this._headerContentWrapper, this._header, 'y', 'margin');\n              if (this.headerHeight) {\n                this._centerElement(this._closeButtonWrapper, this._header, 'y', 'margin');\n                this._centerElement(this._collapseButtonWrapper, this._header, 'y', 'margin');\n              }\n            },\n            _handleHeaderButtons: function () {\n              if (!this._closeButtonWrapper) {\n                return;\n              }\n              if (!this.showCloseButton) {\n                this._closeButtonWrapper[0].style.visibility = 'hidden';\n              } else {\n                this._closeButtonWrapper[0].style.visibility = 'visible';\n                var closeButtonSize = this._toPx(this.closeButtonSize);\n                this._closeButtonWrapper[0].style.width = closeButtonSize;\n                this._closeButtonWrapper[0].style.height = closeButtonSize;\n              }\n              if (!this.showCollapseButton) {\n                this._collapseButtonWrapper[0].style.visibility = 'hidden';\n              } else {\n                this._collapseButtonWrapper[0].style.visibility = 'visible';\n                var collapseButtonSize = this._toPx(this.collapseButtonSize);\n                this._collapseButtonWrapper[0].style.width = collapseButtonSize;\n                this._collapseButtonWrapper[0].style.height = collapseButtonSize;\n              }\n            },\n            _performHeaderCloseButtonLayout: function () {\n              if (!this._closeButtonWrapper) {\n                return;\n              }\n              var paddingRight = parseInt(this._header.css('padding-right'), 10);\n              if (!isNaN(paddingRight)) {\n                this._closeButtonWrapper.width(this._closeButton.width());\n                if (!this.rtl) {\n                  this._closeButtonWrapper[0].style.marginRight = this._toPx(paddingRight);\n                  this._closeButtonWrapper[0].style.marginLeft = '0px';\n                } else {\n                  this._closeButtonWrapper[0].style.marginRight = '0px';\n                  this._closeButtonWrapper[0].style.marginLeft = this._toPx(paddingRight);\n                }\n              }\n              this._closeButtonWrapper[0].style.position = 'absolute';\n              if (!this.rtl) {\n                this._closeButtonWrapper[0].style.right = '0px';\n                this._closeButtonWrapper[0].style.left = '';\n              } else {\n                this._closeButtonWrapper[0].style.right = '';\n                this._closeButtonWrapper[0].style.left = '0px';\n              }\n            },\n            _performHeaderCollapseButtonLayout: function () {\n              if (!this._closeButtonWrapper) {\n                return;\n              }\n              var paddingRight = parseInt(this._header.css('padding-right'), 10);\n              if (!isNaN(paddingRight)) {\n                var collapseButtonSize = this._toPx(this.collapseButtonSize);\n                this._collapseButtonWrapper[0].style.width = collapseButtonSize;\n                this._collapseButtonWrapper[0].style.height = collapseButtonSize;\n                if (!this.rtl) {\n                  this._collapseButtonWrapper[0].style.marginRight = this._toPx(paddingRight);\n                  this._collapseButtonWrapper[0].style.marginLeft = '0px';\n                } else {\n                  this._collapseButtonWrapper[0].style.marginRight = '0px';\n                  this._collapseButtonWrapper[0].style.marginLeft = this._toPx(paddingRight);\n                }\n              }\n              this._collapseButtonWrapper[0].style.position = 'absolute';\n              var rightLeft = this._toPx(this.showCloseButton ? this._closeButton.outerWidth(true) : 0);\n              if (!this.rtl) {\n                this._collapseButtonWrapper[0].style.right = rightLeft;\n                this._collapseButtonWrapper[0].style.left = '';\n              } else {\n                this._collapseButtonWrapper[0].style.right = '';\n                this._collapseButtonWrapper[0].style.left = rightLeft;\n              }\n              this._centerElement(this._collapseButton, $(this._collapseButton[0].parentElement), 'y');\n            },\n            _performWidgetLayout: function () {\n              var isValid;\n              if (this.width !== 'auto') {\n                if (this.width && this.width.toString().indexOf('%') >= 0) {\n                  this.element.style.width = this.width;\n                } else {\n                  this.element.style.width = this._toPx(this.width);\n                }\n              }\n              if (!this.collapsed) {\n                if (this.height !== 'auto') {\n                  if (this.height && this.height.toString().indexOf('%') >= 0) {\n                    this.element.style.height = this.height;\n                  } else {\n                    this.element.style.height = this._toPx(this.height);\n                  }\n                } else {\n                  this.element.style.height = this.host.height() + 'px';\n                }\n                this.element.style.minHeight = this._toPx(this.minHeight);\n              }\n              this._setChildrenLayout();\n              isValid = this._validateMinSize();\n              this.element.style.maxHeight = this._toPx(this.maxHeight);\n              this.element.style.minWidth = this._toPx(this.minWidth);\n              this.element.style.maxWidth = this._toPx(this.maxWidth);\n              if (!isValid) {\n                this._setChildrenLayout();\n              }\n            },\n            _setChildrenLayout: function () {\n              this._header.width(this.host.width() - (this._header.outerWidth(true) - this._header.width()));\n              this._content.width(this.host.width() - (this._content.outerWidth(true) - this._content.width()));\n              this._content.height(this.host.height() - this._header.outerHeight(true) - (this._content.outerHeight(true) - this._content.height()));\n            },\n            _validateMinSize: function () {\n              var returnValue = true;\n              if (this.minHeight < this._header.height()) {\n                this.minHeight = this._header.height();\n                returnValue = false;\n              }\n              var headerContentWidth = $(this._header.children()[0]).outerWidth(),\n                closeButtonWidth = this._header.children()[1] ? $(this._header.children()[1]).outerWidth() : 0,\n                headerInnerWidth = headerContentWidth + closeButtonWidth;\n              if (this.minWidth < 100) {\n                this.minWidth = Math.min(headerInnerWidth, 100);\n                returnValue = false;\n              }\n              return returnValue;\n            },\n            _centerElement: function (child, parent, axis, attribute) {\n              if (typeof parent.left === 'number' && typeof parent.top === 'number' && typeof parent.height === 'number' && typeof parent.width === 'number') {\n                this._centerElementInArea(child, parent, axis);\n              } else {\n                this._centerElementInParent(child, parent, axis, attribute);\n              }\n            },\n            _centerElementInParent: function (child, parent, axis, attribute) {\n              var hiddenChild = child.css('display') === 'none';\n              var cssPropertyY, cssPropertyX;\n              axis = axis.toLowerCase();\n              if (attribute) {\n                cssPropertyY = attribute + 'Top';\n                cssPropertyX = attribute + 'Left';\n              } else {\n                cssPropertyY = 'top';\n                cssPropertyX = 'left';\n              }\n              if (axis.indexOf('y') >= 0) {\n                if (hiddenChild) {\n                  child[0].style.display = 'block';\n                }\n                var childHeight = child.outerHeight(true),\n                  parentHeight;\n                if (hiddenChild) {\n                  child[0].style.display = 'none';\n                }\n                parentHeight = parent.height();\n                var verticalDisplacement = Math.max(0, parentHeight - childHeight) / 2;\n                child[0].style[cssPropertyY] = verticalDisplacement + 'px';\n              }\n              if (axis.indexOf('x') >= 0) {\n                if (hiddenChild) {\n                  child[0].style.display = 'block';\n                }\n                var childWidth = child.outerWidth(true),\n                  parentWidth;\n                if (hiddenChild) {\n                  child[0].style.display = 'none';\n                }\n                parentWidth = parent.width();\n                var horizontalDisplacement = Math.max(0, parentWidth - childWidth) / 2;\n                child[0].style[cssPropertyX] = horizontalDisplacement + 'px';\n              }\n            },\n            _centerElementInArea: function (child, area, axis) {\n              axis = axis.toLowerCase();\n              if (axis.indexOf('y') >= 0) {\n                var childHeight = child.outerHeight(true);\n                var parentHeight = area.height;\n                var verticalDisplacement = (parentHeight - childHeight) / 2;\n                child[0].style.top = verticalDisplacement + area.top + 'px';\n              }\n              if (axis.indexOf('x') >= 0) {\n                var childWidth = child.outerWidth(true);\n                var parentWidth = area.width;\n                var horizontalDisplacement = (parentWidth - childWidth) / 2;\n                child[0].style.left = horizontalDisplacement + area.left + 'px';\n              }\n            },\n            _removeEventHandlers: function () {\n              this.removeHandler(this._header, this._getEvent('mousedown'));\n              this.removeHandler(this._header, this._getEvent('mousemove'));\n              this.removeHandler(this._header, 'focus');\n              this.removeHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'));\n              this.removeHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'));\n              this.removeHandler(this.host, 'keydown');\n              this.removeHandler(this._closeButton, this._getEvent('click'));\n              this.removeHandler(this._closeButton, this._getEvent('mouseenter'));\n              this.removeHandler(this._closeButton, this._getEvent('mouseleave'));\n              this.removeHandler(this._collapseButton, this._getEvent('click'));\n              this.removeHandler(this._collapseButton, this._getEvent('mouseenter'));\n              this.removeHandler(this._collapseButton, this._getEvent('mouseleave'));\n              this.removeHandler(this.host, this._getEvent('mousedown'));\n              if (this.okButton) {\n                this.removeHandler($(this.okButton), this._getEvent('click'), this._setDialogResultHandler);\n              }\n              if (this.cancelButton) {\n                this.removeHandler($(this.cancelButton), this._getEvent('click'), this._setDialogResultHandler);\n              }\n              this.removeHandler(this._header, this._getEvent('mouseenter'));\n              this.removeHandler(this._header, this._getEvent('mouseleave'));\n              this.removeHandler(this.host, 'resizing', this._windowResizeHandler);\n            },\n            _removeFromArray: function (element, array) {\n              var indexOfElement = this._indexOf(element, array);\n              if (indexOfElement >= 0) {\n                return array.splice(this._indexOf(element, array), 1);\n              } else {\n                return array;\n              }\n            },\n            _sortByStyle: function (attr, collection) {\n              for (var i = 0; i < collection.length; i++) {\n                for (var j = collection.length - 1; j > i; j--) {\n                  var itemOne = collection[j],\n                    itemTwo = collection[j - 1],\n                    tmp;\n                  if (parseInt(itemOne.css(attr), 10) < parseInt(itemTwo.css(attr), 10)) {\n                    tmp = itemOne;\n                    collection[j] = itemTwo;\n                    collection[j - 1] = tmp;\n                  }\n                }\n              }\n            },\n            _initializeResize: function () {\n              if (this.resizable) {\n                var self = this;\n                this.initResize({\n                  target: this.host,\n                  alsoResize: self._content,\n                  maxWidth: self.maxWidth,\n                  minWidth: self.minWidth,\n                  maxHeight: self.maxHeight,\n                  minHeight: self.minHeight,\n                  indicatorSize: 10,\n                  resizeParent: self.dragArea\n                });\n              }\n            },\n            _removeResize: function () {\n              this.removeResize();\n            },\n            _getEvent: function (event) {\n              if (this._isTouchDevice) {\n                return this._touchEvents[event];\n              } else {\n                return event;\n              }\n            },\n            _addEventHandlers: function () {\n              this._addDragDropHandlers();\n              this._addCloseHandlers();\n              this._addCollapseHandlers();\n              this._addFocusHandlers();\n              this._documentResizeHandlers();\n              this._closeButtonHover();\n              this._collapseButtonHover();\n              this._addDialogButtonsHandlers();\n              this._addHeaderHoverEffect();\n              this._addResizeHandlers();\n              var me = this;\n              this.addHandler(this._header, this._getEvent('mousemove'), function () {\n                me._addHeaderCursorHandlers(me);\n              });\n            },\n            _addResizeHandlers: function () {\n              var that = this;\n              that.addHandler(that.host, 'resizing', that._windowResizeHandler, {\n                self: that\n              });\n              this.addHandler($(window), 'orientationchanged.' + this.element.id, function () {\n                that._performLayout();\n              });\n              this.addHandler($(window), 'orientationchange.' + this.element.id, function () {\n                that._performLayout();\n              });\n            },\n            _windowResizeHandler: function (event) {\n              var self = event.data.self;\n              self._header.width(self.host.width() - (self._header.outerWidth(true) - self._header.width()));\n              if (self.width && self.width.toString().indexOf('%') >= 0) {\n                var onePercent = $(document.body).width() / 100;\n                var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                self.width = onePixelToPercentage * event.args.width + '%';\n              } else {\n                self.width = event.args.width;\n              }\n              if (self.height && self.height.toString().indexOf('%') >= 0) {\n                var onePercent = $(document.body).height() / 100;\n                var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                self.height = onePixelToPercentage * event.args.height + '%';\n              } else {\n                self.height = event.args.height;\n              }\n            },\n            _addHeaderHoverEffect: function () {\n              var self = this;\n              this.addHandler(this._header, this._getEvent('mouseenter'), function () {\n                $(this).addClass(self.toThemeProperty('jqx-window-header-hover'));\n              });\n              this.addHandler(this._header, this._getEvent('mouseleave'), function () {\n                $(this).removeClass(self.toThemeProperty('jqx-window-header-hover'));\n              });\n            },\n            _addDialogButtonsHandlers: function () {\n              if (this.okButton) {\n                this.addHandler($(this.okButton), this._getEvent('click'), this._setDialogResultHandler, {\n                  self: this,\n                  result: 'ok'\n                });\n              }\n              if (this.cancelButton) {\n                this.addHandler($(this.cancelButton), this._getEvent('click'), this._setDialogResultHandler, {\n                  self: this,\n                  result: 'cancel'\n                });\n              }\n            },\n            _documentResizeHandlers: function () {\n              var self = this;\n              if (this.isModal) {\n                this.addHandler($(window), 'resize.window' + this.element.id, function () {\n                  if (typeof self._modalBackground === 'object' && self._modalBackground !== null) {\n                    if (self.isOpen()) {\n                      self._modalBackground.style.display = 'none';\n                    }\n                    if (!self.restricter) {\n                      var documentSize = self._getDocumentSize();\n                      self._modalBackground.style.width = documentSize.width + 'px';\n                      self._modalBackground.style.height = documentSize.height + 'px';\n                    } else {\n                      self._modalBackground.style.left = self._toPx(self.dragArea.left);\n                      self._modalBackground.style.top = self._toPx(self.dragArea.top);\n                      self._modalBackground.style.width = self._toPx(self.dragArea.width);\n                      self._modalBackground.style.height = self._toPx(self.dragArea.height);\n                    }\n                    if (self.isOpen()) {\n                      self._modalBackground.style.display = 'block';\n                    }\n                  }\n                });\n              }\n            },\n            _setDialogResultHandler: function (event) {\n              var self = event.data.self;\n              self._setDialogResult(event.data.result);\n              self.closeWindow();\n            },\n            _setDialogResult: function (result) {\n              this.dialogResult.OK = false;\n              this.dialogResult.None = false;\n              this.dialogResult.Cancel = false;\n              result = result.toLowerCase();\n              switch (result) {\n                case 'ok':\n                  this.dialogResult.OK = true;\n                  break;\n                case 'cancel':\n                  this.dialogResult.Cancel = true;\n                  break;\n                default:\n                  this.dialogResult.None = true;\n              }\n            },\n            _getDocumentSize: function () {\n              var isIEBefore9 = $.jqx.browser.msie && $.jqx.browser.version < 9;\n              var scrollTop = isIEBefore9 ? 4 : 0;\n              var scrollLeft = scrollTop;\n              if (document.body.scrollHeight > document.body.clientHeight && isIEBefore9) {\n                scrollTop = this._SCROLL_WIDTH;\n              }\n              if (document.body.scrollWidth > document.body.clientWidth && isIEBefore9) {\n                scrollLeft = this._SCROLL_WIDTH;\n              }\n              return {\n                width: $(document).width() - scrollTop,\n                height: $(document).height() - scrollLeft\n              };\n            },\n            _closeButtonHover: function () {\n              var self = this;\n              this.addHandler(this._closeButton, this._getEvent('mouseenter'), function () {\n                self._closeButton.addClass(self.toThemeProperty('jqx-window-close-button-hover'));\n              });\n              this.addHandler(this._closeButton, this._getEvent('mouseleave'), function () {\n                self._closeButton.removeClass(self.toThemeProperty('jqx-window-close-button-hover'));\n              });\n            },\n            _collapseButtonHover: function () {\n              var self = this;\n              this.addHandler(this._collapseButton, this._getEvent('mouseenter'), function () {\n                self._collapseButton.addClass(self.toThemeProperty('jqx-window-collapse-button-hover'));\n              });\n              this.addHandler(this._collapseButton, this._getEvent('mouseleave'), function () {\n                self._collapseButton.removeClass(self.toThemeProperty('jqx-window-collapse-button-hover'));\n              });\n            },\n            _setModalBackgroundStyles: function () {\n              if (this.isModal) {\n                var documentSize = this._getDocumentSize();\n                if (!($.jqx.browser.msie && $.jqx.browser.version < 9)) {\n                  this._modalBackground.style.opacity = this.modalOpacity;\n                } else {\n                  this._modalBackground.style.filter = 'alpha(opacity=' + this.modalOpacity * 100 + ')';\n                }\n                this._modalBackground.style.position = 'absolute';\n                this._modalBackground.style.top = '0px';\n                this._modalBackground.style.left = '0px';\n                this._modalBackground.style.width = documentSize.width;\n                this._modalBackground.style.height = documentSize.height;\n                this._modalBackground.style.zIndex = this.modalBackgroundZIndex;\n                if (!this.autoOpen) {\n                  this._modalBackground.style.display = 'none';\n                }\n              }\n            },\n            _addFocusHandlers: function () {\n              var self = this;\n              this.addHandler(this.host, this._getEvent('mousedown'), function () {\n                if (!self.isModal) {\n                  self.bringToFront();\n                }\n              });\n            },\n            _indexOf: function (host, collection) {\n              for (var i = 0; i < collection.length; i++) {\n                if (collection[i][0] === host[0]) {\n                  return i;\n                }\n              }\n              return -1;\n            },\n            _addCloseHandlers: function () {\n              var self = this;\n              this.addHandler(this._closeButton, this._getEvent('click'), function (event) {\n                return self._closeWindow(event);\n              });\n              if (this.keyboardCloseKey !== 'none') {\n                if (typeof this.keyboardCloseKey !== 'number' && this.keyboardCloseKey.toLowerCase() === 'esc') {\n                  this.keyboardCloseKey = 27;\n                }\n              }\n              this.addHandler(this.host, 'keydown', function (event) {\n                if (event.keyCode === self.keyboardCloseKey && self.keyboardCloseKey != null && self.keyboardCloseKey != 'none') {\n                  self._closeWindow(event);\n                } else {\n                  self._handleKeys(event);\n                }\n              }, {\n                self: this\n              });\n              this.addHandler(this.host, 'keyup', function () {\n                if (!self.keyboardNavigation) {\n                  return;\n                }\n                if (self._moved) {\n                  var offset = self.host.coord();\n                  var left = offset.left;\n                  var top = offset.top;\n                  self._raiseEvent(3, left, top, left, top);\n                  self._moved = false;\n                }\n              });\n            },\n            _handleKeys: function (event) {\n              if (!this.keyboardNavigation) {\n                return;\n              }\n              if (!this._headerFocused) {\n                return;\n              }\n              if ($(document.activeElement).ischildof(this._content)) {\n                return;\n              }\n              var ctrl = event.ctrlKey;\n              var key = event.keyCode;\n              var offset = this.host.coord();\n              var left = offset.left;\n              var top = offset.top;\n              var area = this._getDraggingArea();\n              var width = this.host.width();\n              var height = this.host.height();\n              var result = true;\n              var step = 10;\n              switch (key) {\n                case 37:\n                  if (!ctrl) {\n                    if (this.draggable) {\n                      if (left - step >= 0) {\n                        this.move(left - step, top);\n                      }\n                    }\n                  } else {\n                    if (this.resizable) {\n                      this.resize(width - step, height);\n                    }\n                  }\n                  result = false;\n                  break;\n                case 38:\n                  if (!ctrl) {\n                    if (this.draggable) {\n                      if (top - step >= 0) {\n                        this.move(left, top - step);\n                      }\n                    }\n                  } else {\n                    if (this.resizable) {\n                      this.resize(width, height - step);\n                    }\n                  }\n                  result = false;\n                  break;\n                case 39:\n                  if (!ctrl) {\n                    if (this.draggable) {\n                      if (left + width + step <= area.width) {\n                        this.move(left + step, top);\n                      }\n                    }\n                  } else {\n                    if (this.resizable) {\n                      this.resize(width + step, height);\n                    }\n                  }\n                  result = false;\n                  break;\n                case 40:\n                  if (!ctrl) {\n                    if (this.draggable) {\n                      if (top + height + step <= area.height) {\n                        this.move(left, top + step);\n                      }\n                    }\n                  } else {\n                    if (this.resizable) {\n                      this.resize(width, height + step);\n                    }\n                  }\n                  result = false;\n                  break;\n              }\n              if (!result) {\n                if (event.preventDefault) {\n                  event.preventDefault();\n                }\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n              }\n              return result;\n            },\n            _addCollapseHandlers: function () {\n              var self = this;\n              this.addHandler(this._collapseButton, this._getEvent('click'), function () {\n                if (!self.collapsed) {\n                  self.collapse();\n                } else {\n                  self.expand();\n                }\n              });\n            },\n            _closeWindow: function () {\n              this.closeWindow();\n              return false;\n            },\n            _addHeaderCursorHandlers: function (self) {\n              if (self.resizeArea && self.resizable && !self.collapsed) {\n                self._header[0].style.cursor = self._resizeWrapper.style.cursor;\n                return;\n              } else if (self.draggable) {\n                self._header[0].style.cursor = 'move';\n                return;\n              }\n              self._header[0].style.cursor = 'default';\n              if (self._resizeWrapper) {\n                self._resizeWrapper.style.cursor = 'default';\n              }\n            },\n            _addDragDropHandlers: function () {\n              if (this.draggable) {\n                var self = this;\n                this.addHandler(this.host, 'focus', function () {\n                  self._headerFocused = true;\n                });\n                this.addHandler(this.host, 'blur', function () {\n                  self._headerFocused = false;\n                });\n                this.addHandler(this._header, 'focus', function () {\n                  self._headerFocused = true;\n                  return false;\n                });\n                this.addHandler(this._header, this._getEvent('mousedown'), function (event, x, y) {\n                  if (x) {\n                    event.pageX = x;\n                  }\n                  if (y) {\n                    event.pageY = y;\n                  }\n                  self._headerMouseDownHandler(self, event);\n                  return true;\n                });\n                this.addHandler(this._header, 'dragstart', function (event) {\n                  if (event.preventDefault) {\n                    event.preventDefault();\n                  }\n                  return false;\n                });\n                this.addHandler(this._header, this._getEvent('mousemove'), function (event) {\n                  return self._headerMouseMoveHandler(self, event);\n                });\n                this.addHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'), function (event) {\n                  return self._dragHandler(self, event);\n                });\n                this.addHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'), function (event) {\n                  return self._dropHandler(self, event);\n                });\n                try {\n                  if (document.referrer !== '' || window.frameElement) {\n                    var parentLocation = null;\n                    if (window.top != null && window.top != window.self) {\n                      if (window.parent && document.referrer) {\n                        parentLocation = document.referrer;\n                      }\n                    }\n                    if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {\n                      var eventHandle = function (event) {\n                        self._dropHandler(self, event);\n                      };\n                      if (window.top.document.addEventListener) {\n                        window.top.document.addEventListener('mouseup', eventHandle, false);\n                      } else if (window.top.document.attachEvent) {\n                        window.top.document.attachEvent('onmouseup', eventHandle);\n                      }\n                    }\n                  }\n                } catch (error) {}\n              }\n            },\n            _headerMouseDownHandler: function (self, event) {\n              if (!self.isModal) {\n                self.bringToFront();\n              }\n              if (self._resizeDirection == null) {\n                var position = $.jqx.position(event);\n                self._mousePosition.x = position.left;\n                self._mousePosition.y = position.top;\n                self._mouseDown = true;\n                self._isDragging = false;\n              }\n            },\n            _headerMouseMoveHandler: function (self, event) {\n              if (self._mouseDown && !self._isDragging) {\n                var touches = $.jqx.mobile.getTouches(event);\n                var touch = touches[0];\n                var pageX = touch.pageX,\n                  pageY = touch.pageY;\n                var position = $.jqx.position(event);\n                pageX = position.left;\n                pageY = position.top;\n                if (pageX + 3 < self._mousePosition.x || pageX - 3 > self._mousePosition.x || pageY + 3 < self._mousePosition.y || pageY - 3 > self._mousePosition.y) {\n                  self._isDragging = true;\n                  self._mousePosition = {\n                    x: pageX,\n                    y: pageY\n                  };\n                  //self._windowPosition = { x: parseInt(self.host.css('left'), 10), y: parseInt(self.host.css('top'), 10) };\n                  self._windowPosition = {\n                    x: self.host.coord().left,\n                    y: self.host.coord().top\n                  };\n                  $(document.body).addClass(self.toThemeProperty('jqx-disableselect'));\n                }\n                if (self._isTouchDevice) {\n                  event.preventDefault();\n                  return true;\n                }\n                return false;\n              }\n              if (self._isDragging) {\n                if (self._isTouchDevice) {\n                  event.preventDefault();\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            },\n            _dropHandler: function (self, event) {\n              var result = true;\n              if (self._isDragging && !self.isResizing && !self._resizeDirection) {\n                var x = parseInt(self.host.css('left'), 10),\n                  y = parseInt(self.host.css('top'), 10),\n                  pageX = self._isTouchDevice ? 0 : event.pageX,\n                  pageY = self._isTouchDevice ? 0 : event.pageY;\n                self.enableResize = self._enableResizeBackup;\n                self._enableResizeBackup = 'undefined';\n                self._raiseEvent(3, x, y, pageX, pageY);\n                result = false;\n                if (event.preventDefault != 'undefined') {\n                  event.preventDefault();\n                }\n                if (event.originalEvent != null) {\n                  event.originalEvent.mouseHandled = true;\n                }\n                if (event.stopPropagation != 'undefined') {\n                  event.stopPropagation();\n                }\n              }\n              self._isDragging = false;\n              self._mouseDown = false;\n              $(document.body).removeClass(self.toThemeProperty('jqx-disableselect'));\n              return result;\n            },\n            _dragHandler: function (self, event) {\n              if (self._isDragging && !self.isResizing && !self._resizeDirection) {\n                var eventWhich = self._isTouchDevice ? event.originalEvent.which : event.which;\n                if (typeof self._enableResizeBackup === 'undefined') {\n                  self._enableResizeBackup = self.enableResize;\n                }\n                self.enableResize = false;\n                if (eventWhich === 0 && $.jqx.browser.msie && $.jqx.browser.version < 8) {\n                  return self._dropHandler(self, event);\n                }\n                var position = $.jqx.position(event);\n                var pageX = position.left,\n                  pageY = position.top,\n                  displacementX = pageX - self._mousePosition.x,\n                  displacementY = pageY - self._mousePosition.y,\n                  newX = self._windowPosition.x + displacementX,\n                  newY = self._windowPosition.y + displacementY;\n                self.move(newX, newY, event);\n                event.preventDefault();\n                return false;\n              }\n              return true;\n            },\n            _validateCoordinates: function (x, y, scrollTop, scrollLeft) {\n              var dragArea = this._getDraggingArea();\n              x = x < dragArea.left ? dragArea.left : x;\n              y = y < dragArea.top ? dragArea.top : y;\n              var hostwidth = this.host.outerWidth(true);\n              var hostheight = this.host.outerHeight(true);\n              if (x + hostwidth >= dragArea.width + dragArea.left - 2 * scrollLeft) {\n                x = dragArea.width + dragArea.left - hostwidth - scrollLeft;\n              }\n              if (y + hostheight >= dragArea.height + dragArea.top - scrollTop) {\n                y = dragArea.height + dragArea.top - hostheight - scrollTop;\n              }\n              return {\n                x: x,\n                y: y\n              };\n            },\n            _performLayout: function () {\n              this._performHeaderLayout();\n              this._performWidgetLayout();\n            },\n            _parseDragAreaAttributes: function () {\n              if (this.dragArea !== null) {\n                this.dragArea.height = parseInt(this.dragArea.height, 10);\n                this.dragArea.width = parseInt(this.dragArea.width, 10);\n                this.dragArea.top = parseInt(this.dragArea.top, 10);\n                this.dragArea.left = parseInt(this.dragArea.left, 10);\n              }\n            },\n            _positionWindow: function () {\n              this._parseDragAreaAttributes();\n              if (this.position instanceof Array && this.position.length === 2 && typeof this.position[0] === 'number' && typeof this.position[1] === 'number') {\n                this.element.style.left = this._toPx(this.position[0]);\n                this.element.style.top = this._toPx(this.position[1]);\n              } else if (this.position instanceof Object) {\n                if (this.position.left) {\n                  this.host.offset(this.position);\n                } else if (this.position.x !== undefined && this.position.y !== undefined) {\n                  this.element.style.left = this._toPx(this.position.x);\n                  this.element.style.top = this._toPx(this.position.y);\n                } else if (this.position.center) {\n                  this._centerElement(this.host, this.position.center, 'xy');\n                  var coord = this.position.center.coord();\n                  var left = parseInt(this.host.css('left'), 10);\n                  var top = parseInt(this.host.css('top'), 10);\n                  this.element.style.left = this._toPx(left + coord.left);\n                  this.element.style.top = this._toPx(top + coord.top);\n                }\n              } else {\n                this._positionFromLiteral();\n              }\n            },\n            _getDraggingArea: function () {\n              var draggingArea = {};\n              draggingArea.left = this.dragArea && this.dragArea.left ? this.dragArea.left : 0;\n              draggingArea.top = this.dragArea && this.dragArea.top ? this.dragArea.top : 0;\n              draggingArea.width = this.dragArea && this.dragArea.width ? this.dragArea.width : this._getDocumentSize().width;\n              draggingArea.height = this.dragArea && this.dragArea.height ? this.dragArea.height : this._getDocumentSize().height;\n              return draggingArea;\n            },\n            _positionFromLiteral: function () {\n              if (!(this.position instanceof Array)) {\n                this.position = this.position.split(',');\n              }\n              var count = this.position.length,\n                dragArea = this._getDraggingArea();\n              while (count) {\n                count -= 1;\n                this.position[count] = this.position[count].replace(/ /g, '');\n                switch (this.position[count]) {\n                  case 'top':\n                    this.element.style.top = this._toPx(dragArea.top);\n                    break;\n                  case 'left':\n                    this.element.style.left = this._toPx(dragArea.left);\n                    break;\n                  case 'bottom':\n                    this.element.style.top = this._toPx(dragArea.height - this.host.height() + dragArea.top);\n                    break;\n                  case 'right':\n                    this.element.style.left = this._toPx(dragArea.left + dragArea.width - this.host.width());\n                    break;\n                  default:\n                    if (!this.dragArea) {\n                      dragArea = $(window);\n                    }\n                    this._centerElement(this.host, dragArea, 'xy');\n                    break;\n                }\n              }\n            },\n            _raiseEvent: function (eventId) {\n              var eventType = this._events[eventId],\n                event = $.Event(eventType),\n                args = {};\n              if (eventId === 2 || eventId === 3) {\n                args.x = arguments[1];\n                args.y = arguments[2];\n                args.pageX = arguments[3];\n                args.pageY = arguments[4];\n              }\n              if (eventType === 'closed' || eventType === 'close') {\n                args.dialogResult = this.dialogResult;\n              }\n              event.args = args;\n              return this.host.trigger(event);\n            },\n            destroy: function () {\n              this.removeHandler($(window), 'resize.window' + this.element.id);\n              this._removeEventHandlers();\n              this._destroy();\n            },\n            _destroy: function () {\n              if (this.isModal) {\n                if (this._modalBackground !== null) {\n                  $(this._modalBackground).remove();\n                }\n                this.host.jqxWindow({\n                  isModal: false\n                });\n              }\n              if (this.restricter) {\n                this.removeHandler($(window), 'resize.' + this.element.id);\n                this.removeHandler($(window), 'orientationchanged.' + this.element.id);\n                this.removeHandler($(window), 'orientationchange.' + this.element.id);\n              }\n              this.host.remove();\n              if (this._modalBackground !== null) {\n                $(this._modalBackground).remove();\n              }\n            },\n            _toClose: function (closeCurrent, target) {\n              return closeCurrent && target[0] === this.element || target[0] !== this.element && typeof target[0] === 'object';\n            },\n            propertyChangedHandler: function (object, key, oldvalue, value) {\n              this._validateProperties();\n              switch (key) {\n                case 'rtl':\n                  this._performLayout();\n                  break;\n                case 'dragArea':\n                  this._positionWindow();\n                  break;\n                case 'collapseButtonSize':\n                  this._performLayout();\n                  break;\n                case 'closeButtonSize':\n                  this._performLayout();\n                  break;\n                case 'isModal':\n                  this._refresh();\n                  this._fixWindowZIndex();\n                  if (value === false) {\n                    var modalWindows = $.data(document.body, 'jqxwindows-modallist');\n                    var updatedModalWindows = [];\n                    for (var i = 0; i < modalWindows.length; i++) {\n                      var currentWindow = modalWindows[i][0];\n                      if (currentWindow !== this.element) {\n                        updatedModalWindows.push(modalWindows[i]);\n                      }\n                    }\n                  }\n                  $.data(document.body, 'jqxwindows-modallist', updatedModalWindows);\n                  break;\n                case 'keyboardCloseKey':\n                  this._removeEventHandlers();\n                  this._addEventHandlers();\n                  break;\n                case 'disabled':\n                  if (value) {\n                    this.disable();\n                  } else {\n                    this.disabled = true;\n                    this.enable();\n                  }\n                  break;\n                case 'showCloseButton':\n                case 'showCollapseButton':\n                  this._performLayout();\n                  break;\n                case 'height':\n                  this._performLayout();\n                  break;\n                case 'width':\n                  this._performLayout();\n                  break;\n                case 'title':\n                  this.setTitle(value);\n                  this.title = value;\n                  break;\n                case 'content':\n                  this.setContent(value);\n                  break;\n                case 'draggable':\n                  this._removeEventHandlers();\n                  this._addEventHandlers();\n                  this._removeResize();\n                  this._initializeResize();\n                  break;\n                case 'resizable':\n                  this.enableResize = value;\n                  if (value) {\n                    this._initializeResize();\n                  } else {\n                    this._removeResize();\n                  }\n                  break;\n                case 'position':\n                  this._positionWindow();\n                  break;\n                case 'modalOpacity':\n                  this._setModalBackgroundStyles();\n                  break;\n                case 'okButton':\n                  if (value) {\n                    this._addDialogButtonsHandlers();\n                  } else {\n                    this.removeHandler(this.okButton);\n                  }\n                  break;\n                case 'cancelButton':\n                  if (value) {\n                    this._addDialogButtonsHandlers();\n                  } else {\n                    this.removeHandler(this.cancelButton);\n                  }\n                  break;\n                case 'collapsed':\n                  if (value) {\n                    if (!oldvalue) {\n                      this.collapsed = false;\n                      this.collapse(0);\n                    }\n                  } else {\n                    if (oldvalue) {\n                      this.collapsed = true;\n                      this.expand(0);\n                    }\n                  }\n                  break;\n                case 'theme':\n                  $.jqx.utilities.setTheme(oldvalue, value, this.host);\n                  break;\n                case 'enableResize':\n                  return;\n                case 'maxWidth':\n                case 'maxHeight':\n                case 'minWidth':\n                case 'minHeight':\n                  object._performLayout();\n                  object._removeResize();\n                  object._initializeResize();\n                  return;\n                default:\n                  return;\n              }\n            },\n            collapse: function (duration) {\n              if (!this.collapsed && this._animationInProgress !== true) {\n                if (this.host.css('display') == 'none') {\n                  return;\n                }\n                var self = this,\n                  collapseHeight = this._header.outerHeight(true),\n                  bottomBorder = parseInt(this._header.css('border-bottom-width'), 10),\n                  bottomMargin = parseInt(this._header.css('margin-bottom'), 10);\n                duration = !isNaN(parseInt(duration, 10)) ? duration : this.collapseAnimationDuration;\n                if (!isNaN(bottomBorder)) {\n                  collapseHeight -= 2 * bottomBorder;\n                }\n                if (!isNaN(bottomMargin)) {\n                  collapseHeight += bottomMargin;\n                }\n                this._heightBeforeCollapse = this.host.height();\n                this._minHeightBeforeCollapse = this.host.css('min-height');\n                this.element.style.minHeight = this._toPx(collapseHeight);\n                self._animationInProgress = true;\n                this.host.animate({\n                  height: collapseHeight\n                }, {\n                  duration: duration,\n                  complete: function () {\n                    self._animationInProgress = false;\n                    self.collapsed = true;\n                    self._collapseButton.addClass(self.toThemeProperty('jqx-window-collapse-button-collapsed'));\n                    self._collapseButton.addClass(self.toThemeProperty('jqx-icon-arrow-down'));\n                    self._content[0].style.display = 'none';\n                    self._raiseEvent(5);\n                    self._raiseEvent(9);\n                    $.jqx.aria(self, 'aria-expanded', false);\n                  }\n                });\n              }\n            },\n            expand: function (duration) {\n              if (this.collapsed && this._animationInProgress !== true) {\n                var self = this;\n                duration = !isNaN(parseInt(duration, 10)) ? duration : this.collapseAnimationDuration;\n                self._animationInProgress = true;\n                this.host.animate({\n                  'height': this._heightBeforeCollapse\n                }, {\n                  duration: duration,\n                  complete: function () {\n                    self._animationInProgress = false;\n                    self.collapsed = false;\n                    self.element.style.minHeight = self._toPx(self._minHeightBeforeCollapse);\n                    self._collapseButton.removeClass(self.toThemeProperty('jqx-window-collapse-button-collapsed'));\n                    self._collapseButton.removeClass(self.toThemeProperty('jqx-icon-arrow-down'));\n                    self._content[0].style.display = 'block';\n                    self._raiseEvent(6);\n                    self._performWidgetLayout();\n                    self._raiseEvent(9);\n                    $.jqx.aria(self, 'aria-expanded', true);\n                  }\n                });\n              }\n            },\n            //Closing all open windows which are not modal\n            closeAll: function (closeCurrent) {\n              closeCurrent = true;\n              var windows = $.data(document.body, 'jqxwindows-list'),\n                count = windows.length,\n                modal = $.data(document.body, 'jqxwindow-modal') || [];\n              while (count) {\n                count -= 1;\n                if (this._toClose(closeCurrent, windows[count])) {\n                  windows[count].jqxWindow('closeWindow', 'close');\n                  windows.splice(count, 1);\n                }\n              }\n              if (this._toClose(closeCurrent, modal)) {\n                modal.jqxWindow('closeWindow', 'close');\n                $.data(document.body, 'jqxwindow-modal', []);\n              }\n              $.data(document.body, 'jqxwindows-list', windows);\n            },\n            //Setting window's title\n            setTitle: function (title) {\n              if (typeof title === 'string') {\n                this._headerContentWrapper.html(title);\n              } else if (typeof title === 'object') {\n                try {\n                  this._headerContentWrapper[0].innerHTML = '';\n                  if (title instanceof HTMLElement) {\n                    this._headerContentWrapper[0].appendChild(title);\n                  } else if (title.appendTo) {\n                    title.appendTo(this._headerContentWrapper);\n                  }\n                } catch (error) {\n                  throw new Error(error);\n                }\n              }\n              this.title = title;\n              this._performLayout();\n            },\n            //Setting window's content\n            setContent: function (content) {\n              this._contentInitialized = false;\n              var parent = this._content,\n                finished = false;\n              while (!finished) {\n                parent[0].style.width = 'auto';\n                parent[0].style.height = 'auto';\n                if (parent.hasClass('jqx-window')) {\n                  finished = true;\n                } else {\n                  parent = $(parent[0].parentNode);\n                }\n              }\n              if ($.isArray(content)) {\n                for (var i = 0; i < content.length; i++) {\n                  content[i].appendTo(this._content);\n                }\n              } else if (typeof content === 'string') {\n                $(this._content[0]).html(content);\n              } else if (typeof content === 'object') {\n                try {\n                  this._content[0].innerHTML = '';\n                  if (content instanceof HTMLElement) {\n                    this._content[0].appendChild(content);\n                  } else if (content.appendTo) {\n                    content.appendTo(this._content);\n                  }\n                } catch (error) {\n                  throw new Error(error);\n                }\n              }\n              this.content = content;\n              this._performLayout();\n            },\n            //Disabling the window\n            disable: function () {\n              this.disabled = true;\n              this._removeEventHandlers();\n              this._header.addClass(this.toThemeProperty('jqx-window-header-disabled'));\n              this._closeButton.addClass(this.toThemeProperty('jqx-window-close-button-disabled'));\n              this._collapseButton.addClass(this.toThemeProperty('jqx-window-collapse-button-disabled'));\n              this._content.addClass(this.toThemeProperty('jqx-window-content-disabled'));\n              this.host.addClass(this.toThemeProperty('jqx-window-disabled'));\n              this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));\n              this._removeResize();\n            },\n            //Enabling the window\n            enable: function () {\n              if (this.disabled) {\n                this._addEventHandlers();\n                this._header.removeClass(this.toThemeProperty('jqx-window-header-disabled'));\n                this._content.removeClass(this.toThemeProperty('jqx-window-content-disabled'));\n                this._closeButton.removeClass(this.toThemeProperty('jqx-window-close-button-disabled'));\n                this._collapseButton.removeClass(this.toThemeProperty('jqx-window-collapse-button-disabled'));\n                this.host.removeClass(this.toThemeProperty('jqx-window-disabled'));\n                this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));\n                this.disabled = false;\n                this._initializeResize();\n              }\n            },\n            //Returning true if the window is open (not hidden) and false if it is closed (hidden)\n            isOpen: function () {\n              return this._visible;\n            },\n            //Closing the window\n            closeWindow: function (action) {\n              var self = this;\n              action = typeof action === 'undefined' ? this.closeButtonAction : action;\n              this.hide(function () {\n                if (action === 'close') {\n                  self._destroy();\n                }\n              });\n            },\n            //Bringing the window to the front\n            bringToFront: function () {\n              var windows = $.data(document.body, 'jqxwindows-list');\n              if (this.isModal) {\n                windows = $.data(document.body, 'jqxwindows-modallist');\n                this._fixWindowZIndex('modal-hide');\n                this._fixWindowZIndex('modal-show');\n                return;\n              }\n              var upperWindow = windows[windows.length - 1],\n                zIndex = parseInt(upperWindow.css('z-index'), 10),\n                currentElementIndex = this._indexOf(this.host, windows);\n              for (var i = windows.length - 1; i > currentElementIndex; i -= 1) {\n                var currentZIndex = parseInt(windows[i].css('z-index'), 10) - 1;\n                windows[i][0].style.zIndex = currentZIndex;\n              }\n              this.element.style.zIndex = zIndex;\n              this._sortByStyle('z-index', windows);\n            },\n            //Hiding/closing the current window\n            hide: function (callback, duration, notRaiseEvent) {\n              var that = this;\n              if (this.closing) {\n                var res = this.closing();\n                if (res === false) {\n                  return;\n                }\n              }\n              duration = duration || this.closeAnimationDuration;\n              switch (this.animationType) {\n                case 'none':\n                  this.element.style.display = 'none';\n                  break;\n                case 'fade':\n                  that._animationInProgress = true;\n                  this.host.fadeOut({\n                    duration: duration,\n                    callback: function () {\n                      that._animationInProgress = false;\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n                case 'slide':\n                  that._animationInProgress = true;\n                  this.host.slideUp({\n                    duration: duration,\n                    callback: function () {\n                      that._animationInProgress = false;\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n                case 'combined':\n                  that._animationInProgress = true;\n                  this.host.animate({\n                    opacity: 0,\n                    width: '0px',\n                    height: '0px'\n                  }, {\n                    duration: duration,\n                    complete: function () {\n                      that._animationInProgress = false;\n                      that.element.style.display = 'none';\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n              }\n              this._visible = false;\n              if (this.isModal) {\n                $(this._modalBackground).hide();\n                this._fixWindowZIndex('modal-hide');\n              }\n              if (notRaiseEvent !== true) {\n                this._raiseEvent(1);\n                this._raiseEvent(8);\n              }\n            },\n            open: function (callback, duration) {\n              this.show(callback, duration);\n            },\n            close: function (callback, duration, notRaiseEvent) {\n              this.hide(callback, duration, notRaiseEvent);\n            },\n            //Opening/showing the current window\n            show: function (callback, duration) {\n              var that = this;\n              this._setDialogResult('none');\n              duration = duration || this.showAnimationDuration;\n              switch (this.animationType) {\n                case 'none':\n                  this.element.style.display = 'block';\n                  break;\n                case 'fade':\n                  that._animationInProgress = true;\n                  this.host.fadeIn({\n                    duration: duration,\n                    complete: function () {\n                      that._animationInProgress = false;\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n                case 'slide':\n                  that._animationInProgress = true;\n                  this.host.slideDown({\n                    duration: duration,\n                    callback: function () {\n                      that._animationInProgress = false;\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n                case 'combined':\n                  this.element.style.display = 'block';\n                  var targetWidth = that.host.width();\n                  var targetHeight = that.host.height();\n                  this.element.style.minWidth = '0px';\n                  this.element.style.minHeight = '0px';\n                  this.element.style.opacity = 0;\n                  this.element.style.width = '0px';\n                  this.element.style.height = '0px';\n                  that._animationInProgress = true;\n                  this.host.animate({\n                    opacity: 1,\n                    width: targetWidth + 'px',\n                    height: targetHeight + 'px'\n                  }, {\n                    duration: duration,\n                    complete: function () {\n                      that._animationInProgress = false;\n                      that._performLayout();\n                      if (callback instanceof Function) {\n                        callback();\n                      }\n                    }\n                  });\n                  break;\n              }\n              if (this.isModal) {\n                $(this._modalBackground).show();\n                this._fixWindowZIndex('modal-show');\n              }\n              var me = this;\n              if (!this._visible) {\n                //To remove this._raiseEvent(4); in the next version\n                //  this._raiseEvent(4);\n                if (duration > 150 && this.animationType != 'none') {\n                  setTimeout(function () {\n                    if (!me._contentInitialized) {\n                      if (me.initContent) {\n                        me.initContent();\n                        me._contentInitialized = true;\n                      }\n                    }\n                    me._raiseEvent(7);\n                    me._raiseEvent(9);\n                  }, duration - 150);\n                } else {\n                  if (!me._contentInitialized) {\n                    if (me.initContent) {\n                      me.initContent();\n                      me._contentInitialized = true;\n                    }\n                  }\n                  this._raiseEvent(7);\n                  me._raiseEvent(9);\n                }\n              }\n              this._visible = true;\n              if (that.animationType !== 'combined') {\n                this._performLayout();\n              }\n              if (this.autoFocus) {\n                // focus the displayed window.\n                var focusContent = function () {\n                  if (!me._isTouchDevice) {\n                    me._content[0].focus();\n                  }\n                };\n                focusContent();\n                setTimeout(function () {\n                  focusContent();\n                }, 100);\n              }\n            },\n            _getTabbables: function () {\n              var elements;\n              if ($.jqx.browser.msie && $.jqx.browser.version < 9) {\n                elements = this._content.find('*');\n              } else {\n                elements = this._content[0].querySelectorAll('*');\n              }\n              var tabbables = [];\n              $.each(elements, function () {\n                if (tabbable(this)) {\n                  tabbables[tabbables.length] = this;\n                }\n              });\n              return tabbables;\n            },\n            //Moving the current window\n            move: function (x, y, event, raiseEvent) {\n              var scrollLeft = 0,\n                scrollTop = 0,\n                position,\n                pageX,\n                pageY;\n              x = parseInt(x, 10);\n              y = parseInt(y, 10);\n              if ($.jqx.browser.msie) {\n                if ($(window).width() > $(document).width() && !this.dragArea) {\n                  scrollTop = this._SCROLL_WIDTH;\n                }\n                if ($(window).height() < $(document).height() && document.documentElement.clientWidth > document.documentElement.scrollWidth && !this.dragArea) {\n                  scrollLeft = this._SCROLL_WIDTH;\n                }\n              }\n              position = this._validateCoordinates(x, y, scrollTop, scrollLeft);\n              if (parseInt(this.host.css('left'), 10) !== position.x || parseInt(this.host.css('top'), 10) !== position.y) {\n                if (event) {\n                  var pos = $.jqx.position(event);\n                  pageX = pos.left;\n                  pageY = pos.top;\n                }\n                if (pageX === undefined) {\n                  pageX = x;\n                }\n                if (pageY === undefined) {\n                  pageY = y;\n                }\n                if (raiseEvent !== false) {\n                  this._raiseEvent(2, position.x, position.y, pageX, pageY);\n                }\n              }\n              this.element.style.left = position.x + 'px';\n              this.element.style.top = position.y + 'px';\n              this._moved = true;\n            },\n            _toPx: function (value) {\n              if (typeof value === 'number') {\n                return value + 'px';\n              } else {\n                return value;\n              }\n            }\n          });\n          function focusable(element, isTabIndexNotNaN) {\n            var nodeName = element.nodeName.toLowerCase();\n            if ('area' === nodeName) {\n              var map = element.parentNode,\n                mapName = map.name,\n                img;\n              if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {\n                return false;\n              }\n              img = $('img[usemap=#' + mapName + ']')[0];\n              return !!img && visible(img);\n            }\n            return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 'a' == nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element); // the element and all of its ancestors must be visible\n          }\n          function visible(element) {\n            var elementHelper = $(element);\n            return elementHelper.css('display') !== 'none' && elementHelper.css('visibility') !== 'hidden';\n          }\n          function tabbable(element) {\n            var tabIndex = element.getAttribute('tabindex'),\n              isTabIndexNaN = tabIndex === null;\n            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);\n          }\n        })(jqxBaseFramework); //ignore jslint\n\n        (function ($) {\n          'use strict';\n\n          var resizeModule = function ($) {\n            return {\n              resizeConfig: function () {\n                // Resize target\n                this.resizeTarget = null;\n                // Indicator's size\n                this.resizeIndicatorSize = 5;\n                // All children are saved here\n                this.resizeTargetChildren = null;\n                // Indicates if it's resizing\n                this.isResizing = false;\n                // Indicates if the cursor is in the resize area. It is usefull when you are using different cursors in your resize target\n                this.resizeArea = false;\n                // Setting target's minimal width\n                this.minWidth = 1;\n                // Setting target's max width\n                this.maxWidth = 100;\n                // Setting target's min height\n                this.minHeight = 1;\n                // Setting target's max height\n                this.maxHeight = 100;\n                // Setting target's parent\n                this.resizeParent = null;\n                // Setting whether the resize is disabled\n                this.enableResize = true;\n\n                //this._cursorBackup;\n                this._resizeEvents = ['resizing', 'resized', 'resize'];\n\n                //Private variables\n                this._resizeMouseDown = false;\n                this._resizeCurrentMode = null;\n                this._mouseResizePosition = {};\n                this._resizeMethods = null;\n                this._SCROLL_WIDTH = 21;\n              },\n              _resizeExceptions: {\n                'invalidTarget': 'Invalid target!',\n                'invalidMinHeight': 'Invalid minimal height!',\n                'invalidMaxHeight': 'Invalid maximum height!',\n                'invalidMinWidth': 'Invalid minimum width!',\n                'invalidMaxWidth': 'Invalid maximum width!',\n                'invalidIndicatorSize': 'Invalid indicator size!',\n                'invalidSize': 'Invalid size!'\n              },\n              removeResize: function () {\n                if (this.resizeTarget) {\n                  var resizer = $(this.resizeTarget.children('.jqx-resize'));\n                  resizer.detach();\n                  var content = resizer.children();\n                  this._removeResizeEventListeners();\n                  for (var i = 0; i < content.length; i += 1) {\n                    $(content[i]).detach();\n                    this.resizeTarget.append(content[i]);\n                  }\n                  resizer.remove();\n                }\n                this._resizeDirection = null;\n                //resizer.remove();\n              },\n              //Initializing all variables\n              initResize: function (config) {\n                this.resizeConfig();\n                this.resizeTarget = $(config.target);\n                this.resizeIndicatorSize = config.indicatorSize || 10;\n                this.maxWidth = config.maxWidth || 100;\n                this.minWidth = config.minWidth || 1;\n                this.maxHeight = config.maxHeight || 100;\n                this.minHeight = config.minHeight || 1;\n                this.resizeParent = config.resizeParent;\n                this._parseResizeParentProperties();\n                this._validateResizeProperties();\n                this._validateResizeTargetDimensions();\n                this._getChildren(this.resizeTarget.maxWidth, this.resizeTarget.minWidth, this.resizeTarget.maxHeight, this.resizeTarget.minHeight, config.alsoResize);\n                this._refreshResize();\n                this._cursorBackup = this.resizeTarget.css('cursor');\n                if (this._cursorBackup === 'auto') {\n                  this._cursorBackup = 'default';\n                }\n              },\n              _validateResizeTargetDimensions: function () {\n                this.resizeTarget.maxWidth = this.maxWidth;\n                this.resizeTarget.minWidth = 3 * this.resizeIndicatorSize > this.minWidth ? 3 * this.resizeIndicatorSize : this.minWidth;\n                this.resizeTarget.maxHeight = this.maxHeight;\n                this.resizeTarget.minHeight = 3 * this.resizeIndicatorSize > this.minHeight ? 3 * this.resizeIndicatorSize : this.minHeight;\n              },\n              _parseResizeParentProperties: function () {\n                if (this.resizeParent) {\n                  this.resizeParent.left = parseInt(this.resizeParent.left, 10);\n                  this.resizeParent.top = parseInt(this.resizeParent.top, 10);\n                  this.resizeParent.width = parseInt(this.resizeParent.width, 10);\n                  this.resizeParent.height = parseInt(this.resizeParent.height, 10);\n                }\n              },\n              //Getting all children and setting their max and min height/width. First we are calculating their ratio\n              //to the main container which we are going to modify to be resizable.\n              _getChildren: function (maxWidth, minWidth, maxHeight, minHeight, selector) {\n                this.resizeTargetChildren = $(selector);\n                this.resizeTargetChildren = this.resizeTargetChildren.toArray();\n                var count = this.resizeTargetChildren.length;\n                while (count) {\n                  count -= 1;\n                  this.resizeTargetChildren[count] = $(this.resizeTargetChildren[count]);\n                }\n              },\n              _refreshResize: function () {\n                this._renderResize();\n                this._performResizeLayout();\n                this._removeResizeEventListeners();\n                this._addResizeEventHandlers();\n              },\n              //Creating inner wrapper which is going to be our resize helper\n              _renderResize: function () {\n                var that = this;\n                if (that._resizeWrapper !== undefined && $(that._resizeWrapper).parents().length > 0) {\n                  return;\n                }\n                var wrapper = document.createElement('div');\n                wrapper.className = 'jqx-resize jqx-rc-all';\n                wrapper.style.zIndex = 8000;\n                wrapper.appendChild(that._header[0]);\n                wrapper.appendChild(that._content[0]);\n                that.resizeTarget[0].appendChild(wrapper);\n                that._resizeWrapper = wrapper;\n              },\n              _performResizeLayout: function () {\n                this._resizeWrapper.style.height = this.resizeTarget.height() + 'px';\n                this._resizeWrapper.style.width = this.resizeTarget.width() + 'px';\n              },\n              _removeResizeEventListeners: function () {\n                var resizetargetid = this.resizeTarget.attr('id');\n                this.removeHandler(this._resizeWrapper, 'mousemove.resize' + resizetargetid);\n                this.removeHandler(this._resizeWrapper, 'mousedown.resize' + resizetargetid);\n                this.removeHandler($(document), 'mousemove.resize' + resizetargetid);\n                this.removeHandler($(document), 'mouseup.resize' + resizetargetid);\n              },\n              _addResizeEventHandlers: function () {\n                var resizetargetid = this.resizeTarget.attr('id');\n                var self = this;\n                if (self._isTouchDevice) {\n                  this.addHandler(this._resizeWrapper, 'touchmove.resize.' + resizetargetid, function (event) {\n                    self._resizeCursorChangeHandler(self, event);\n                  });\n                  this.addHandler(this._resizeWrapper, 'touchstart.resize.' + resizetargetid, function (event) {\n                    self._resizeCursorChangeHandler(self, event);\n                    self._resizeMouseDownHandler(self, event);\n                  });\n                  this.addHandler($(document), 'touchmove.resize.' + resizetargetid, function (event) {\n                    return self._resizeHandler(self, event);\n                  });\n                  this.addHandler($(document), 'touchend.resize.' + resizetargetid, function (event) {\n                    self._stopResizing(self, event);\n                  });\n                } else {\n                  this.addHandler(this._resizeWrapper, 'mousemove.resize.' + resizetargetid, function (event) {\n                    self._resizeCursorChangeHandler(self, event);\n                  });\n                  this.addHandler(this._resizeWrapper, 'mousedown.resize.' + resizetargetid, function (event) {\n                    self._resizeMouseDownHandler(self, event);\n                  });\n                  this.addHandler($(document), 'mousemove.resize.' + resizetargetid, function (event) {\n                    return self._resizeHandler(self, event);\n                  });\n                  this.addHandler($(document), 'mouseup.resize.' + resizetargetid, function (event) {\n                    self._stopResizing(self, event);\n                  });\n                }\n                try {\n                  if (document.referrer !== '' || window.frameElement) {\n                    var eventHandle = function (event) {\n                      self._stopResizing(self, event);\n                    };\n                    if (window.top.document.addEventListener) {\n                      window.top.document.addEventListener('mouseup', eventHandle, false);\n                    } else if (window.top.document.attachEvent) {\n                      window.top.document.attachEvent('on' + 'mouseup', eventHandle);\n                    }\n                  }\n                } catch (error) {}\n              },\n              _stopResizing: function (self) {\n                if (self.enableResize) {\n                  if (self.isResizing) {\n                    self._raiseResizeEvent(1);\n                  }\n                  self._resizeMouseDown = false;\n                  self.isResizing = false;\n                  self._resizeDirection = null;\n                  if (self.resizeTarget) {\n                    self.resizeTarget.removeClass('jqx-disableselect');\n                  }\n                }\n                if (self._cursorBackup == 'undefined') {\n                  self._cursorBackup = 'default';\n                }\n                if (self._resizeWrapper) {\n                  self._resizeWrapper.style.cursor = self._cursorBackup;\n                }\n              },\n              _resizeHandler: function (self, event) {\n                if (self.enableResize && !self.collapsed) {\n                  if (self.isResizing && self._resizeDirection) {\n                    if (event.which === 0 && $.jqx.browser.msie && $.jqx.browser.version < 9) {\n                      self._stopResizing(event);\n                    }\n                    if (self._isTouchDevice) {\n                      var position = $.jqx.position(event);\n                      self._performResize(position.left, position.top);\n                      return false;\n                    }\n                    self._performResize(event.pageX, event.pageY);\n                    return false;\n                  } else {\n                    if (self._isTouchDevice) {\n                      var position = $.jqx.position(event);\n                      return self._resizeCaptureCursor(position.left, position.top);\n                    }\n                    return self._resizeCaptureCursor(event.pageX, event.pageY);\n                  }\n                }\n              },\n              _resizeCaptureCursor: function (mouseX, mouseY) {\n                if (this._resizeMouseDown && !this.isResizing && this._resizeDirection) {\n                  var offset = 3;\n                  if (this._isTouchDevice) {\n                    this._changeCursor(mouseX - parseInt(this.resizeTarget.css('left'), 10), mouseY - parseInt(this.resizeTarget.css('top'), 10));\n                    this._mouseResizePosition = {\n                      x: mouseX,\n                      y: mouseY\n                    };\n                    this._prepareResizeMethods(this._resizeDirection);\n                    this._resizeBackupData();\n                    this.isResizing = true;\n                    this.resizeTarget.addClass('jqx-disableselect');\n                    return false;\n                  }\n                  if (mouseX + offset < this._mouseResizePosition.x || mouseX - offset > this._mouseResizePosition.x || mouseY + offset < this._mouseResizePosition.y || mouseY - offset > this._mouseResizePosition.y) {\n                    this._changeCursor(mouseX - parseInt(this.resizeTarget.css('left'), 10), mouseY - parseInt(this.resizeTarget.css('top'), 10));\n                    this._mouseResizePosition = {\n                      x: mouseX,\n                      y: mouseY\n                    };\n                    this._prepareResizeMethods(this._resizeDirection);\n                    this._resizeBackupData();\n                    this.isResizing = true;\n                    this.resizeTarget.addClass('jqx-disableselect');\n                    return false;\n                  }\n                }\n              },\n              _resizeBackupData: function () {\n                this.resizeTarget.lastWidth = this.resizeTarget.width();\n                this.resizeTarget.lastHeight = this.resizeTarget.height();\n                this.resizeTarget.x = parseInt(this.resizeTarget.css('left'), 10);\n                this.resizeTarget.y = parseInt(this.resizeTarget.css('top'), 10);\n                this._resizeBackupChildrenSize();\n              },\n              _resizeBackupChildrenSize: function () {\n                var count = this.resizeTargetChildren.length,\n                  child;\n                while (count) {\n                  count -= 1;\n                  child = this.resizeTargetChildren[count];\n                  this.resizeTargetChildren[count].lastWidth = child.width();\n                  this.resizeTargetChildren[count].lastHeight = child.height();\n                }\n              },\n              _performResize: function (mouseX, mouseY) {\n                var differenceX = mouseX - this._mouseResizePosition.x,\n                  differenceY = mouseY - this._mouseResizePosition.y;\n                if (this._resizeDirection) {\n                  this._resize(this.resizeTarget, differenceX, differenceY);\n                }\n              },\n              _resizeCursorChangeHandler: function (self, event) {\n                if (self.enableResize && !self.collapsed) {\n                  if (!self.isResizing) {\n                    if (self._isTouchDevice) {\n                      var position = $.jqx.position(event);\n                      self._changeCursor(position.left - parseInt(self.resizeTarget.css('left'), 10), position.top - parseInt(self.resizeTarget.css('top'), 10));\n                      return;\n                    }\n                    self._changeCursor(event.pageX - parseInt(self.resizeTarget.css('left'), 10), event.pageY - parseInt(self.resizeTarget.css('top'), 10));\n                  }\n                }\n              },\n              _resizeMouseDownHandler: function (self, event) {\n                if (self.enableResize) {\n                  if (self._resizeDirection !== null) {\n                    self._resizeMouseDown = true;\n                    if (self._isTouchDevice) {\n                      var position = $.jqx.position(event);\n                      self._mouseResizePosition.x = position.left;\n                      self._mouseResizePosition.y = position.top;\n                    } else {\n                      self._mouseResizePosition.x = event.pageX;\n                      self._mouseResizePosition.y = event.pageY;\n                    }\n                    event.preventDefault();\n                  }\n                }\n              },\n              _validateResizeProperties: function () {\n                try {\n                  if (!this.resizeTarget || this.resizeTarget.length !== 1) {\n                    throw new Error(this._resizeExceptions.invalidTarget);\n                  }\n                  if (this.minHeight < 0 || isNaN(parseInt(this.minHeight, 10))) {\n                    throw new Error(this._resizeExceptions.invalidMinHeight);\n                  }\n                  if (this.maxHeight <= 0 || isNaN(parseInt(this.maxHeight, 10))) {\n                    throw new Error(this._resizeExceptions.invalidMaxHeight);\n                  }\n                  if (this.minWidth < 0 || isNaN(parseInt(this.minWidth, 10))) {\n                    throw new Error(this._resizeExceptions.invalidMinWidth);\n                  }\n                  if (this.maxWidth < 0 || isNaN(parseInt(this.maxWidth, 10))) {\n                    throw new Error(this._resizeExceptions.invalidMaxWidth);\n                  }\n                  if (this.resizeIndicatorSize < 0 || isNaN(parseInt(this.resizeIndicatorSize, 10))) {\n                    throw new Error(this._resizeExceptions.invalidIndicatorSize);\n                  }\n                  if (this.minHeight > this.maxHeight || this.minWidth > this.maxWidth) {\n                    throw new Error(this._resizeExceptions.invalidSize);\n                  }\n                  //if (this.resizeParent && this.resizeParent.width && this.resizeParent.height && this.resizeParent.left &&\n                  //    this.resizeParent.top && ((this.resizeParent.width < this.resizeTarget.width() || this.resizeParent.width < this.maxWidth) ||\n                  //    (this.resizeParent.height < this.resizeTarget.height() || this.resizeParent.height < this.maxHeight))) {\n                  //    throw new Error(this._resizeExceptions['invalidSize']);\n                  //}\n                } catch (exception) {\n                  throw new Error(exception);\n                }\n              },\n              //This method is checking cursor's position and setting specific pointer depending on mouse coordinates.\n              //It's also detecting resize direction and creating string with it. For example for top-left resize the string is going to be 'topleft'.\n              _changeCursor: function (x, y) {\n                if (this.isResizing || this._resizeMouseDown) {\n                  return;\n                }\n                this.resizeArea = true;\n                if (x <= this.resizeIndicatorSize && x >= 0 && y <= this.resizeIndicatorSize && y > 0) {\n                  //top left\n                  this._resizeWrapper.style.cursor = 'nw-resize';\n                  this._resizeDirection = 'topleft';\n                } else if (y <= this.resizeIndicatorSize && y > 0 && x >= this.resizeTarget.width() - this.resizeIndicatorSize) {\n                  //top right\n                  this._resizeWrapper.style.cursor = 'ne-resize';\n                  this._resizeDirection = 'topright';\n                } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize &&\n                //bottom left\n                y < this.resizeTarget.height() && x <= this.resizeIndicatorSize && x >= 0) {\n                  this._resizeWrapper.style.cursor = 'sw-resize';\n                  this._resizeDirection = 'bottomleft';\n                } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize &&\n                //bottom right\n                y < this.resizeTarget.height() && x >= this.resizeTarget.width() - this.resizeIndicatorSize && x < this.resizeTarget.width()) {\n                  this._resizeWrapper.style.cursor = 'se-resize';\n                  this._resizeDirection = 'bottomright';\n                } else if (x <= this.resizeIndicatorSize && x >= 0) {\n                  //left\n                  this._resizeWrapper.style.cursor = 'e-resize';\n                  this._resizeDirection = 'left';\n                } else if (y <= this.resizeIndicatorSize && y > 0) {\n                  //top\n                  this._resizeWrapper.style.cursor = 'n-resize';\n                  this._resizeDirection = 'top';\n                } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize &&\n                //bottom\n                y < this.resizeTarget.height()) {\n                  this._resizeWrapper.style.cursor = 'n-resize';\n                  this._resizeDirection = 'bottom';\n                } else if (x >= this.resizeTarget.width() - this.resizeIndicatorSize &&\n                //right\n                x < this.resizeTarget.width()) {\n                  this._resizeWrapper.style.cursor = 'e-resize';\n                  this._resizeDirection = 'right';\n                } else {\n                  this._resizeWrapper.style.cursor = this._cursorBackup;\n                  this._resizeDirection = null;\n                  this.resizeArea = false;\n                }\n              },\n              //Putting all methods which are going to be used along the resize action (for example _resizeRight, _resizeTop) into an array.\n              //We are performing this because if we are checking and calling the right methods along the resizing (on mousemove)\n              //we should make more checks.\n              _prepareResizeMethods: function (direction) {\n                this._resizeMethods = [];\n                if (direction.indexOf('left') >= 0) {\n                  this._resizeMethods.push(this._resizeLeft);\n                }\n                if (direction.indexOf('top') >= 0) {\n                  this._resizeMethods.push(this._resizeTop);\n                }\n                if (direction.indexOf('right') >= 0) {\n                  this._resizeMethods.push(this._resizeRight);\n                }\n                if (direction.indexOf('bottom') >= 0) {\n                  this._resizeMethods.push(this._resizeBottom);\n                }\n              },\n              _validateResize: function (newWidth, newHeight, direction, element, side) {\n                if (direction === 'horizontal' || direction === 'both') {\n                  return this._validateWidth(newWidth, element, side);\n                } else if (direction === 'vertical' || direction === 'both') {\n                  return this._validateHeight(newHeight, element, side);\n                }\n                return {\n                  result: false,\n                  fix: 0\n                };\n              },\n              _getParent: function () {\n                if (this.resizeParent !== null && this.resizeParent !== 'undefined' && this.resizeParent.height && this.resizeParent.width && this.resizeParent.top && this.resizeParent.left) {\n                  return this.resizeParent;\n                }\n                return {\n                  left: 0,\n                  top: 0,\n                  width: $(document).width(),\n                  height: $(document).height()\n                };\n              },\n              _validateHeight: function (newHeight, element, side) {\n                var scrollTop = 0,\n                  heightDisplacement = 2,\n                  resizeParent = this._getParent();\n                if ($(window).width() > $(document).width() && $.jqx.browser.msie && resizeParent.height === $(document).height()) {\n                  scrollTop = this._SCROLL_WIDTH;\n                }\n                if (side === 'bottom' && newHeight + element.position().top + scrollTop + heightDisplacement > resizeParent.height + resizeParent.top) {\n                  //fixing if user is trying to resize it more than the window\n                  return {\n                    fix: resizeParent.height - element.position().top - scrollTop - heightDisplacement + resizeParent.top,\n                    result: false\n                  };\n                }\n                if (side === 'top' && element.lastHeight - newHeight + element.y < resizeParent.top) {\n                  //check if the user is trying to drag it in the window's top\n                  return {\n                    fix: newHeight + (element.lastHeight - newHeight + element.y) - resizeParent.top,\n                    result: false\n                  };\n                }\n                if (newHeight < element.minHeight) {\n                  return {\n                    fix: element.minHeight,\n                    result: false\n                  };\n                }\n                if (newHeight > element.maxHeight) {\n                  return {\n                    fix: element.maxHeight,\n                    result: false\n                  };\n                }\n                return {\n                  result: true,\n                  fix: newHeight\n                };\n              },\n              _validateWidth: function (newWidth, element, side) {\n                var scrollLeft = 0,\n                  widthDisplacement = 2,\n                  resizeParent = this._getParent();\n                if ($(window).height() < $(document).height() && $.jqx.browser.msie && document.documentElement.clientWidth >= document.documentElement.scrollWidth && resizeParent.width === $(document).width()) {\n                  //check if there is a right but there is not a bottom one \n                  scrollLeft = this._SCROLL_WIDTH;\n                }\n                if (side === 'right' && newWidth + element.position().left + scrollLeft + widthDisplacement > resizeParent.width + resizeParent.left) {\n                  return {\n                    fix: resizeParent.width - element.position().left - scrollLeft - widthDisplacement + resizeParent.left,\n                    result: false\n                  };\n                }\n                if (side === 'left' && element.lastWidth - newWidth + element.x < resizeParent.left) {\n                  //check if the user is trying to drag it in the window's left\n                  return {\n                    fix: newWidth + (element.lastWidth - newWidth + element.x) - resizeParent.left,\n                    result: false\n                  };\n                }\n                if (newWidth < element.minWidth) {\n                  return {\n                    fix: element.minWidth,\n                    result: false\n                  };\n                }\n                if (newWidth > element.maxWidth) {\n                  return {\n                    fix: element.maxWidth,\n                    result: false\n                  };\n                }\n                return {\n                  result: true,\n                  fix: newWidth\n                };\n              },\n              _resize: function (element, differenceX, differenceY) {\n                var length = this._resizeMethods.length;\n                for (var i = 0; i < length; i++) {\n                  if (this._resizeMethods[i] instanceof Function) {\n                    var properties = {\n                      element: element,\n                      x: differenceX,\n                      y: differenceY,\n                      self: this\n                    };\n                    this._resizeMethods[i](properties);\n                  }\n                }\n                this._performResizeLayout();\n              },\n              resize: function (width, height) {\n                if (this.resizable) {\n                  var differenceX = width - this.host.width();\n                  var differenceY = height - this.host.height();\n                  var direction = 'right';\n                  if (differenceY !== 0) {\n                    direction = 'bottom';\n                  }\n                  this._resizeDirection = direction;\n                  this._prepareResizeMethods(this._resizeDirection);\n                  this._resizeBackupData();\n                  this.isResizing = true;\n                  this._resize(this.resizeTarget, differenceX, differenceY);\n                  this.isResizing = false;\n                  if (differenceX < 0 && differenceY !== 0) {\n                    this._resizeDirection = 'right';\n                    this._prepareResizeMethods(this._resizeDirection);\n                    this._resizeBackupData();\n                    this.isResizing = true;\n                    this._resize(this.resizeTarget, differenceX, differenceY);\n                    this.isResizing = false;\n                  }\n                  if (differenceX > 0 && differenceY > 0) {\n                    this._resizeDirection = 'right';\n                    this._prepareResizeMethods(this._resizeDirection);\n                    this._resizeBackupData();\n                    this.isResizing = true;\n                    this._resize(this.resizeTarget, differenceX, differenceY);\n                    this.isResizing = false;\n                  }\n                }\n              },\n              _setResizeChildrenSize: function (size, dimention) {\n                var count = this.resizeTargetChildren.length;\n                while (count) {\n                  count--;\n                  if (dimention === 'width') {\n                    var newWidth = this.resizeTargetChildren[count].lastWidth - (this.resizeTarget.lastWidth - size);\n                    if (newWidth < this.resizeTarget.maxWidth && newWidth > 0) {\n                      this.resizeTargetChildren[count].width(newWidth);\n                    }\n                  } else {\n                    var newHeight = this.resizeTargetChildren[count].lastHeight - (this.resizeTarget.lastHeight - size);\n                    if (newHeight < this.resizeTarget.maxHeight && newHeight > 0) {\n                      this.resizeTargetChildren[count].height(newHeight);\n                    }\n                  }\n                }\n              },\n              _resizeRight: function (properties) {\n                var width = properties.element.lastWidth + properties.x,\n                  result = properties.self._validateResize(width, 0, 'horizontal', properties.element, 'right');\n                if (!result.result) {\n                  width = result.fix;\n                }\n                if (properties.element.width() !== width) {\n                  properties.self._setResizeChildrenSize(width, 'width');\n                  properties.element.width(width);\n                  if (properties.self.width.toString().indexOf('%') >= 0) {\n                    var onePercent = $(document.body).width() / 100;\n                    var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                    properties.element[0].style.width = onePixelToPercentage * width + '%';\n                    ;\n                    properties.self._setChildrenLayout();\n                  }\n                  properties.self._raiseResizeEvent(0);\n                }\n                return width;\n              },\n              _resizeLeft: function (properties) {\n                var width = properties.element.lastWidth - properties.x,\n                  result = properties.self._validateResize(width, 0, 'horizontal', properties.element, 'left'),\n                  x = properties.element.x + properties.x;\n                if (!result.result) {\n                  x = properties.element.x + (properties.element.lastWidth - result.fix);\n                  width = result.fix;\n                  return;\n                }\n                if (properties.element.width() !== width) {\n                  properties.self._setResizeChildrenSize(width, 'width');\n                  properties.element.width(width);\n                  if (properties.self.width.toString().indexOf('%') >= 0) {\n                    var onePercent = $(document.body).width() / 100;\n                    var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                    properties.element[0].style.width = onePixelToPercentage * width + '%';\n                    properties.self._setChildrenLayout();\n                  }\n                  properties.element[0].style.left = properties.self._toPx(x);\n                  properties.self._raiseResizeEvent(0);\n                }\n                return width;\n              },\n              _resizeBottom: function (properties) {\n                var height = properties.element.lastHeight + properties.y,\n                  result = properties.self._validateResize(0, height, 'vertical', properties.element, 'bottom');\n                if (!result.result) {\n                  height = result.fix;\n                }\n                if (properties.element.height() !== height) {\n                  properties.self._setResizeChildrenSize(height, 'height');\n                  properties.element.height(height);\n                  if (properties.self.height.toString().indexOf('%') >= 0) {\n                    var onePercent = $(document.body).height() / 100;\n                    var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                    properties.element[0].style.height = onePixelToPercentage * height + '%';\n                    properties.self._setChildrenLayout();\n                  }\n                  properties.self._raiseResizeEvent(0);\n                }\n                return height;\n              },\n              _resizeTop: function (properties) {\n                var height = properties.element.lastHeight - properties.y,\n                  result = properties.self._validateResize(0, height, 'vertical', properties.element, 'top'),\n                  y = properties.element.y + properties.y;\n                if (!result.result) {\n                  y = properties.element.y + (properties.element.lastHeight - result.fix);\n                  height = result.fix;\n                  return;\n                }\n                if (properties.element.height() !== height) {\n                  properties.self._setResizeChildrenSize(height, 'height');\n                  properties.element.height(height);\n                  if (properties.self.height.toString().indexOf('%') >= 0) {\n                    var onePercent = $(document.body).height() / 100;\n                    var onePixelToPercentage = 1 / onePercent; // one pixel is equal to this amount of percentages.\n\n                    properties.element[0].style.height = onePixelToPercentage * height + '%';\n                    properties.self._setChildrenLayout();\n                  }\n                  properties.element[0].style.top = properties.self._toPx(y);\n                  properties.self._raiseResizeEvent(0);\n                }\n                return height;\n              },\n              _raiseResizeEvent: function (eventId) {\n                var eventType = this._resizeEvents[eventId],\n                  event = $.Event(eventType),\n                  args = {};\n                args.width = parseInt(this.resizeTarget[0].style.width, 10);\n                args.height = parseInt(this.resizeTarget[0].style.height, 10);\n                event.args = args;\n                if (eventId === 0) {\n                  eventType = this._resizeEvents[2];\n                  var resizeEvent = $.Event(eventType);\n                  resizeEvent.args = args;\n                  this.resizeTarget.trigger(resizeEvent);\n                }\n                return this.resizeTarget.trigger(event);\n              }\n            };\n          }(jqxBaseFramework); //ignore jslint\n          $.extend($.jqx._jqxWindow.prototype, resizeModule);\n        })(jqxBaseFramework); //ignore jslint\n      })();\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/ // The module cache\n  /******/\n  var __webpack_module_cache__ = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/ // Check if module is in cache\n    /******/var cachedModule = __webpack_module_cache__[moduleId];\n    /******/\n    if (cachedModule !== undefined) {\n      /******/return cachedModule.exports;\n      /******/\n    }\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/ // no module.id needed\n      /******/ // no module.loaded needed\n      /******/exports: {}\n      /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /************************************************************************/\n  /******/ /* webpack/runtime/amd options */\n  /******/\n  (() => {\n    /******/__webpack_require__.amdO = {};\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/compat get default export */\n  /******/\n  (() => {\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/__webpack_require__.n = module => {\n      /******/var getter = module && module.__esModule ? /******/() => module['default'] : /******/() => module;\n      /******/\n      __webpack_require__.d(getter, {\n        a: getter\n      });\n      /******/\n      return getter;\n      /******/\n    };\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/define property getters */\n  /******/\n  (() => {\n    /******/ // define getter functions for harmony exports\n    /******/__webpack_require__.d = (exports, definition) => {\n      /******/for (var key in definition) {\n        /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n          /******/Object.defineProperty(exports, key, {\n            enumerable: true,\n            get: definition[key]\n          });\n          /******/\n        }\n        /******/\n      }\n      /******/\n    };\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/hasOwnProperty shorthand */\n  /******/\n  (() => {\n    /******/__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n    /******/\n  })();\n  /******/\n  /************************************************************************/\n  var __webpack_exports__ = {};\n  // This entry need to be wrapped in an IIFE because it need to be in strict mode.\n  (() => {\n    \"use strict\";\n\n    /* harmony import */\n    var _jqxcore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5459);\n    /* harmony import */\n    var _jqxcore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jqxcore__WEBPACK_IMPORTED_MODULE_0__);\n    /* harmony import */\n    var _jqxdata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4198);\n    /* harmony import */\n    var _jqxdata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jqxdata__WEBPACK_IMPORTED_MODULE_1__);\n    /* harmony import */\n    var _jqxdata_export__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3907);\n    /* harmony import */\n    var _jqxdata_export__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jqxdata_export__WEBPACK_IMPORTED_MODULE_2__);\n    /* harmony import */\n    var _jqxdate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(137);\n    /* harmony import */\n    var _jqxdate__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jqxdate__WEBPACK_IMPORTED_MODULE_3__);\n    /* harmony import */\n    var _jqxbuttons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7351);\n    /* harmony import */\n    var _jqxbuttons__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jqxbuttons__WEBPACK_IMPORTED_MODULE_4__);\n    /* harmony import */\n    var _jqxmenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1610);\n    /* harmony import */\n    var _jqxmenu__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jqxmenu__WEBPACK_IMPORTED_MODULE_5__);\n    /* harmony import */\n    var _jqxtooltip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3899);\n    /* harmony import */\n    var _jqxtooltip__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jqxtooltip__WEBPACK_IMPORTED_MODULE_6__);\n    /* harmony import */\n    var _jqxscrollbar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4240);\n    /* harmony import */\n    var _jqxscrollbar__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jqxscrollbar__WEBPACK_IMPORTED_MODULE_7__);\n    /* harmony import */\n    var _jqxradiobutton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6826);\n    /* harmony import */\n    var _jqxradiobutton__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_jqxradiobutton__WEBPACK_IMPORTED_MODULE_8__);\n    /* harmony import */\n    var _jqxcheckbox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4545);\n    /* harmony import */\n    var _jqxcheckbox__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_jqxcheckbox__WEBPACK_IMPORTED_MODULE_9__);\n    /* harmony import */\n    var _jqxwindow__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7762);\n    /* harmony import */\n    var _jqxwindow__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_jqxwindow__WEBPACK_IMPORTED_MODULE_10__);\n    /* harmony import */\n    var _jqxlistbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(1062);\n    /* harmony import */\n    var _jqxlistbox__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_jqxlistbox__WEBPACK_IMPORTED_MODULE_11__);\n    /* harmony import */\n    var _jqxcolorpicker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3960);\n    /* harmony import */\n    var _jqxcolorpicker__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_jqxcolorpicker__WEBPACK_IMPORTED_MODULE_12__);\n    /* harmony import */\n    var _jqxcombobox__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(4720);\n    /* harmony import */\n    var _jqxcombobox__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_jqxcombobox__WEBPACK_IMPORTED_MODULE_13__);\n    /* harmony import */\n    var _jqxdropdownlist__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(5868);\n    /* harmony import */\n    var _jqxdropdownlist__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_jqxdropdownlist__WEBPACK_IMPORTED_MODULE_14__);\n    /* harmony import */\n    var _jqxnumberinput__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(7995);\n    /* harmony import */\n    var _jqxnumberinput__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_jqxnumberinput__WEBPACK_IMPORTED_MODULE_15__);\n    /* harmony import */\n    var _jqxinput__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(5875);\n    /* harmony import */\n    var _jqxinput__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_jqxinput__WEBPACK_IMPORTED_MODULE_16__);\n    /* harmony import */\n    var _globalization_globalize__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(2497);\n    /* harmony import */\n    var _globalization_globalize__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_globalization_globalize__WEBPACK_IMPORTED_MODULE_17__);\n    /* harmony import */\n    var _jqxcalendar__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(5725);\n    /* harmony import */\n    var _jqxcalendar__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_jqxcalendar__WEBPACK_IMPORTED_MODULE_18__);\n    /* harmony import */\n    var _jqxdatetimeinput__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(4993);\n    /* harmony import */\n    var _jqxdatetimeinput__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_jqxdatetimeinput__WEBPACK_IMPORTED_MODULE_19__);\n    /* harmony import */\n    var _jqxscheduler__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(5253);\n    /* harmony import */\n    var _jqxscheduler__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_jqxscheduler__WEBPACK_IMPORTED_MODULE_20__);\n    /* harmony import */\n    var _jqxscheduler_api__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(2536);\n    /* harmony import */\n    var _jqxscheduler_api__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_jqxscheduler_api__WEBPACK_IMPORTED_MODULE_21__);\n  })();\n\n  /******/\n})();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}